
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023d78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003284  08023f08  08023f08  00024f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802718c  0802718c  00029240  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802718c  0802718c  0002818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027194  08027194  00029240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027194  08027194  00028194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027198  08027198  00028198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0802719c  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000240  080273dc  00029240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  080273dc  00029d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00029240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050261  00000000  00000000  00029270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a0eb  00000000  00000000  000794d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003120  00000000  00000000  000835c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000025e7  00000000  00000000  000866e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036c34  00000000  00000000  00088cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000600c3  00000000  00000000  000bf8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d840  00000000  00000000  0011f9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023d1fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000da10  00000000  00000000  0023d244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0024ac54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08023ef0 	.word	0x08023ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	08023ef0 	.word	0x08023ef0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <EMV_Payment_Initialize>:
 */
EMV_Result_t EMV_Payment_Initialize(EMV_Payment_Context_t *context,
                                   void *pDataParams,
                                   uint32_t amount,
                                   uint16_t currency_code)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	807b      	strh	r3, [r7, #2]
    memset(context, 0, sizeof(EMV_Payment_Context_t));
 8000f82:	f241 0244 	movw	r2, #4164	@ 0x1044
 8000f86:	2100      	movs	r1, #0
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f021 f997 	bl	80222bc <memset>

    /* Set transaction parameters */
    context->card_data.amount = amount;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	f8c3 2d2c 	str.w	r2, [r3, #3372]	@ 0xd2c
    context->card_data.currency_code = currency_code;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	f8a3 2d30 	strh.w	r2, [r3, #3376]	@ 0xd30
    context->card_data.transaction_type = 0x00; /* Purchase */
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2d32 	strb.w	r2, [r3, #3378]	@ 0xd32

    /* Initial state */
    context->current_state = EMV_STATE_APP_SELECTION;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2d34 	strb.w	r2, [r3, #3380]	@ 0xd34
    context->next_state = EMV_STATE_APP_SELECTION;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35

    DEBUG_PRINTF("=== EMV Payment Flow Initialized ===\r\n");
 8000fb6:	4813      	ldr	r0, [pc, #76]	@ (8001004 <EMV_Payment_Initialize+0x90>)
 8000fb8:	f021 f890 	bl	80220dc <puts>
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <EMV_Payment_Initialize+0x94>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f020 ff44 	bl	8021e50 <fflush>
    DEBUG_PRINTF("Amount: %lu.%02lu, Currency: 0x%04X\r\n",
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <EMV_Payment_Initialize+0x98>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	0959      	lsrs	r1, r3, #5
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <EMV_Payment_Initialize+0x98>)
 8000fd6:	fba2 0203 	umull	r0, r2, r2, r3
 8000fda:	0952      	lsrs	r2, r2, #5
 8000fdc:	2064      	movs	r0, #100	@ 0x64
 8000fde:	fb00 f202 	mul.w	r2, r0, r2
 8000fe2:	1a9a      	subs	r2, r3, r2
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	480a      	ldr	r0, [pc, #40]	@ (8001010 <EMV_Payment_Initialize+0x9c>)
 8000fe8:	f021 f808 	bl	8021ffc <iprintf>
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <EMV_Payment_Initialize+0x94>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f020 ff2c 	bl	8021e50 <fflush>
                amount/100, amount%100, currency_code);

    return EMV_SUCCESS;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	08023f08 	.word	0x08023f08
 8001008:	20000084 	.word	0x20000084
 800100c:	51eb851f 	.word	0x51eb851f
 8001010:	08023f30 	.word	0x08023f30

08001014 <EMV_Payment_GetStateDescription>:

/**
 * Get state description
 */
const char* EMV_Payment_GetStateDescription(EMV_Payment_State_t state)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d843      	bhi.n	80010ac <EMV_Payment_GetStateDescription+0x98>
 8001024:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <EMV_Payment_GetStateDescription+0x18>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	0800106d 	.word	0x0800106d
 8001030:	08001071 	.word	0x08001071
 8001034:	08001075 	.word	0x08001075
 8001038:	08001079 	.word	0x08001079
 800103c:	0800107d 	.word	0x0800107d
 8001040:	08001081 	.word	0x08001081
 8001044:	08001085 	.word	0x08001085
 8001048:	08001089 	.word	0x08001089
 800104c:	0800108d 	.word	0x0800108d
 8001050:	08001091 	.word	0x08001091
 8001054:	08001095 	.word	0x08001095
 8001058:	08001099 	.word	0x08001099
 800105c:	0800109d 	.word	0x0800109d
 8001060:	080010a1 	.word	0x080010a1
 8001064:	080010a5 	.word	0x080010a5
 8001068:	080010a9 	.word	0x080010a9
        case EMV_STATE_IDLE: return "Idle";
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <EMV_Payment_GetStateDescription+0xa8>)
 800106e:	e01e      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_APP_SELECTION: return "Application Selection";
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <EMV_Payment_GetStateDescription+0xac>)
 8001072:	e01c      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_APP_INITIALIZATION: return "Application Initialization";
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <EMV_Payment_GetStateDescription+0xb0>)
 8001076:	e01a      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_READ_APP_DATA: return "Read Application Data";
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <EMV_Payment_GetStateDescription+0xb4>)
 800107a:	e018      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_OFFLINE_DATA_AUTH: return "Offline Data Authentication";
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <EMV_Payment_GetStateDescription+0xb8>)
 800107e:	e016      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_PROCESSING_RESTRICTIONS: return "Processing Restrictions";
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <EMV_Payment_GetStateDescription+0xbc>)
 8001082:	e014      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_CARDHOLDER_VERIFICATION: return "Cardholder Verification";
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <EMV_Payment_GetStateDescription+0xc0>)
 8001086:	e012      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_TERMINAL_RISK_MANAGEMENT: return "Terminal Risk Management";
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <EMV_Payment_GetStateDescription+0xc4>)
 800108a:	e010      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_TERMINAL_ACTION_ANALYSIS: return "Terminal Action Analysis";
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <EMV_Payment_GetStateDescription+0xc8>)
 800108e:	e00e      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_ONLINE_DECISION: return "Online Transaction Decision";
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <EMV_Payment_GetStateDescription+0xcc>)
 8001092:	e00c      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_ONLINE_PROCESSING: return "Online Processing";
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <EMV_Payment_GetStateDescription+0xd0>)
 8001096:	e00a      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_ISSUER_AUTH: return "Issuer Authentication";
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <EMV_Payment_GetStateDescription+0xd4>)
 800109a:	e008      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_COMPLETION: return "Completion Processing";
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <EMV_Payment_GetStateDescription+0xd8>)
 800109e:	e006      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_SCRIPT_PROCESSING: return "Issuer Script Processing";
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <EMV_Payment_GetStateDescription+0xdc>)
 80010a2:	e004      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_SUCCESS: return "Transaction Success";
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <EMV_Payment_GetStateDescription+0xe0>)
 80010a6:	e002      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        case EMV_STATE_FAILED: return "Transaction Failed";
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <EMV_Payment_GetStateDescription+0xe4>)
 80010aa:	e000      	b.n	80010ae <EMV_Payment_GetStateDescription+0x9a>
        default: return "Unknown State";
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <EMV_Payment_GetStateDescription+0xe8>)
    }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	08023f58 	.word	0x08023f58
 80010c0:	08023f60 	.word	0x08023f60
 80010c4:	08023f78 	.word	0x08023f78
 80010c8:	08023f94 	.word	0x08023f94
 80010cc:	08023fac 	.word	0x08023fac
 80010d0:	08023fc8 	.word	0x08023fc8
 80010d4:	08023fe0 	.word	0x08023fe0
 80010d8:	08023ff8 	.word	0x08023ff8
 80010dc:	08024014 	.word	0x08024014
 80010e0:	08024030 	.word	0x08024030
 80010e4:	0802404c 	.word	0x0802404c
 80010e8:	08024060 	.word	0x08024060
 80010ec:	08024078 	.word	0x08024078
 80010f0:	08024090 	.word	0x08024090
 80010f4:	080240ac 	.word	0x080240ac
 80010f8:	080240c0 	.word	0x080240c0
 80010fc:	080240d4 	.word	0x080240d4

08001100 <EMV_Payment_ProcessStateMachine>:

/**
 * Main state machine processing function
 */
EMV_Result_t EMV_Payment_ProcessStateMachine(EMV_Payment_Context_t *context)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    EMV_Result_t result = EMV_SUCCESS;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

    DEBUG_PRINTF("\r\n>>> Current State: %s\r\n",
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3d34 	ldrb.w	r3, [r3, #3380]	@ 0xd34
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff7e 	bl	8001014 <EMV_Payment_GetStateDescription>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	48b0      	ldr	r0, [pc, #704]	@ (80013e0 <EMV_Payment_ProcessStateMachine+0x2e0>)
 800111e:	f020 ff6d 	bl	8021ffc <iprintf>
 8001122:	4bb0      	ldr	r3, [pc, #704]	@ (80013e4 <EMV_Payment_ProcessStateMachine+0x2e4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4618      	mov	r0, r3
 800112a:	f020 fe91 	bl	8021e50 <fflush>
                EMV_Payment_GetStateDescription(context->current_state));

    switch(context->current_state) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3d34 	ldrb.w	r3, [r3, #3380]	@ 0xd34
 8001134:	3b01      	subs	r3, #1
 8001136:	2b0e      	cmp	r3, #14
 8001138:	f200 80f3 	bhi.w	8001322 <EMV_Payment_ProcessStateMachine+0x222>
 800113c:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <EMV_Payment_ProcessStateMachine+0x44>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001181 	.word	0x08001181
 8001148:	0800119d 	.word	0x0800119d
 800114c:	080011b9 	.word	0x080011b9
 8001150:	080011d5 	.word	0x080011d5
 8001154:	080011f1 	.word	0x080011f1
 8001158:	0800120d 	.word	0x0800120d
 800115c:	08001229 	.word	0x08001229
 8001160:	08001245 	.word	0x08001245
 8001164:	08001261 	.word	0x08001261
 8001168:	0800128f 	.word	0x0800128f
 800116c:	080012a9 	.word	0x080012a9
 8001170:	080012c3 	.word	0x080012c3
 8001174:	080012dd 	.word	0x080012dd
 8001178:	080012f7 	.word	0x080012f7
 800117c:	0800130d 	.word	0x0800130d
        case EMV_STATE_APP_SELECTION:
            result = EMV_State_ApplicationSelection(context);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f93b 	bl	80013fc <EMV_State_ApplicationSelection>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 80d8 	bne.w	8001342 <EMV_Payment_ProcessStateMachine+0x242>
                context->next_state = EMV_STATE_APP_INITIALIZATION;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 800119a:	e0d2      	b.n	8001342 <EMV_Payment_ProcessStateMachine+0x242>

        case EMV_STATE_APP_INITIALIZATION:
            result = EMV_State_ApplicationInitialization(context);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f97b 	bl	8001498 <EMV_State_ApplicationInitialization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 80cc 	bne.w	8001346 <EMV_Payment_ProcessStateMachine+0x246>
                context->next_state = EMV_STATE_READ_APP_DATA;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80011b6:	e0c6      	b.n	8001346 <EMV_Payment_ProcessStateMachine+0x246>

        case EMV_STATE_READ_APP_DATA:
            result = EMV_State_ReadApplicationData(context);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f9a5 	bl	8001508 <EMV_State_ReadApplicationData>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 80c0 	bne.w	800134a <EMV_Payment_ProcessStateMachine+0x24a>
                context->next_state = EMV_STATE_OFFLINE_DATA_AUTH;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2204      	movs	r2, #4
 80011ce:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80011d2:	e0ba      	b.n	800134a <EMV_Payment_ProcessStateMachine+0x24a>

        case EMV_STATE_OFFLINE_DATA_AUTH:
            result = EMV_State_OfflineDataAuthentication(context);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f9d3 	bl	8001580 <EMV_State_OfflineDataAuthentication>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 80b4 	bne.w	800134e <EMV_Payment_ProcessStateMachine+0x24e>
                context->next_state = EMV_STATE_PROCESSING_RESTRICTIONS;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2205      	movs	r2, #5
 80011ea:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80011ee:	e0ae      	b.n	800134e <EMV_Payment_ProcessStateMachine+0x24e>

        case EMV_STATE_PROCESSING_RESTRICTIONS:
            result = EMV_State_ProcessingRestrictions(context);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fa15 	bl	8001620 <EMV_State_ProcessingRestrictions>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 80a8 	bne.w	8001352 <EMV_Payment_ProcessStateMachine+0x252>
                context->next_state = EMV_STATE_CARDHOLDER_VERIFICATION;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2206      	movs	r2, #6
 8001206:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 800120a:	e0a2      	b.n	8001352 <EMV_Payment_ProcessStateMachine+0x252>

        case EMV_STATE_CARDHOLDER_VERIFICATION:
            result = EMV_State_CardholderVerification(context);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fa57 	bl	80016c0 <EMV_State_CardholderVerification>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 809c 	bne.w	8001356 <EMV_Payment_ProcessStateMachine+0x256>
                context->next_state = EMV_STATE_TERMINAL_RISK_MANAGEMENT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2207      	movs	r2, #7
 8001222:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 8001226:	e096      	b.n	8001356 <EMV_Payment_ProcessStateMachine+0x256>

        case EMV_STATE_TERMINAL_RISK_MANAGEMENT:
            result = EMV_State_TerminalRiskManagement(context);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fa79 	bl	8001720 <EMV_State_TerminalRiskManagement>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b00      	cmp	r3, #0
 8001236:	f040 8090 	bne.w	800135a <EMV_Payment_ProcessStateMachine+0x25a>
                context->next_state = EMV_STATE_TERMINAL_ACTION_ANALYSIS;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2208      	movs	r2, #8
 800123e:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 8001242:	e08a      	b.n	800135a <EMV_Payment_ProcessStateMachine+0x25a>

        case EMV_STATE_TERMINAL_ACTION_ANALYSIS:
            result = EMV_State_TerminalActionAnalysis(context);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fad7 	bl	80017f8 <EMV_State_TerminalActionAnalysis>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b00      	cmp	r3, #0
 8001252:	f040 8084 	bne.w	800135e <EMV_Payment_ProcessStateMachine+0x25e>
                context->next_state = EMV_STATE_ONLINE_DECISION;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2209      	movs	r2, #9
 800125a:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 800125e:	e07e      	b.n	800135e <EMV_Payment_ProcessStateMachine+0x25e>

        case EMV_STATE_ONLINE_DECISION:
            result = EMV_State_OnlineDecision(context);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fb35 	bl	80018d0 <EMV_State_OnlineDecision>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d178      	bne.n	8001362 <EMV_Payment_ProcessStateMachine+0x262>
                if(context->online_decision) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3d3b 	ldrb.w	r3, [r3, #3387]	@ 0xd3b
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <EMV_Payment_ProcessStateMachine+0x184>
                    context->next_state = EMV_STATE_ONLINE_PROCESSING;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	220a      	movs	r2, #10
 800127e:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
                } else {
                    context->next_state = EMV_STATE_COMPLETION;
                }
            }
            break;
 8001282:	e06e      	b.n	8001362 <EMV_Payment_ProcessStateMachine+0x262>
                    context->next_state = EMV_STATE_COMPLETION;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	220c      	movs	r2, #12
 8001288:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            break;
 800128c:	e069      	b.n	8001362 <EMV_Payment_ProcessStateMachine+0x262>

        case EMV_STATE_ONLINE_PROCESSING:
            result = EMV_State_OnlineProcessing(context);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fb5e 	bl	8001950 <EMV_State_OnlineProcessing>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d163      	bne.n	8001366 <EMV_Payment_ProcessStateMachine+0x266>
                context->next_state = EMV_STATE_ISSUER_AUTH;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	220b      	movs	r2, #11
 80012a2:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80012a6:	e05e      	b.n	8001366 <EMV_Payment_ProcessStateMachine+0x266>

        case EMV_STATE_ISSUER_AUTH:
            result = EMV_State_IssuerAuthentication(context);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fb99 	bl	80019e0 <EMV_State_IssuerAuthentication>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d158      	bne.n	800136a <EMV_Payment_ProcessStateMachine+0x26a>
                context->next_state = EMV_STATE_COMPLETION;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	220c      	movs	r2, #12
 80012bc:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80012c0:	e053      	b.n	800136a <EMV_Payment_ProcessStateMachine+0x26a>

        case EMV_STATE_COMPLETION:
            result = EMV_State_Completion(context);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fbd4 	bl	8001a70 <EMV_State_Completion>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d14d      	bne.n	800136e <EMV_Payment_ProcessStateMachine+0x26e>
                context->next_state = EMV_STATE_SCRIPT_PROCESSING;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	220d      	movs	r2, #13
 80012d6:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80012da:	e048      	b.n	800136e <EMV_Payment_ProcessStateMachine+0x26e>

        case EMV_STATE_SCRIPT_PROCESSING:
            result = EMV_State_ScriptProcessing(context);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fc2f 	bl	8001b40 <EMV_State_ScriptProcessing>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]
            if(result == EMV_SUCCESS) {
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d142      	bne.n	8001372 <EMV_Payment_ProcessStateMachine+0x272>
                context->next_state = EMV_STATE_SUCCESS;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	220e      	movs	r2, #14
 80012f0:	f883 2d35 	strb.w	r2, [r3, #3381]	@ 0xd35
            }
            break;
 80012f4:	e03d      	b.n	8001372 <EMV_Payment_ProcessStateMachine+0x272>

        case EMV_STATE_SUCCESS:
            DEBUG_PRINTF("=== Transaction Flow Completed Successfully ===\r\n");
 80012f6:	483c      	ldr	r0, [pc, #240]	@ (80013e8 <EMV_Payment_ProcessStateMachine+0x2e8>)
 80012f8:	f020 fef0 	bl	80220dc <puts>
 80012fc:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <EMV_Payment_ProcessStateMachine+0x2e4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4618      	mov	r0, r3
 8001304:	f020 fda4 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8001308:	2300      	movs	r3, #0
 800130a:	e065      	b.n	80013d8 <EMV_Payment_ProcessStateMachine+0x2d8>

        case EMV_STATE_FAILED:
            DEBUG_PRINTF("=== Transaction Flow Failed ===\r\n");
 800130c:	4837      	ldr	r0, [pc, #220]	@ (80013ec <EMV_Payment_ProcessStateMachine+0x2ec>)
 800130e:	f020 fee5 	bl	80220dc <puts>
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <EMV_Payment_ProcessStateMachine+0x2e4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f020 fd99 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 800131e:	2307      	movs	r3, #7
 8001320:	e05a      	b.n	80013d8 <EMV_Payment_ProcessStateMachine+0x2d8>

        default:
            DEBUG_PRINTF("Unknown state: %d\r\n", context->current_state);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3d34 	ldrb.w	r3, [r3, #3380]	@ 0xd34
 8001328:	4619      	mov	r1, r3
 800132a:	4831      	ldr	r0, [pc, #196]	@ (80013f0 <EMV_Payment_ProcessStateMachine+0x2f0>)
 800132c:	f020 fe66 	bl	8021ffc <iprintf>
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <EMV_Payment_ProcessStateMachine+0x2e4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4618      	mov	r0, r3
 8001338:	f020 fd8a 	bl	8021e50 <fflush>
            result = EMV_ERROR_COMMUNICATION;
 800133c:	2306      	movs	r3, #6
 800133e:	73fb      	strb	r3, [r7, #15]
            break;
 8001340:	e018      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001342:	bf00      	nop
 8001344:	e016      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001346:	bf00      	nop
 8001348:	e014      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 800134a:	bf00      	nop
 800134c:	e012      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 800134e:	bf00      	nop
 8001350:	e010      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001352:	bf00      	nop
 8001354:	e00e      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001356:	bf00      	nop
 8001358:	e00c      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 800135a:	bf00      	nop
 800135c:	e00a      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 800135e:	bf00      	nop
 8001360:	e008      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001362:	bf00      	nop
 8001364:	e006      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001366:	bf00      	nop
 8001368:	e004      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 800136a:	bf00      	nop
 800136c:	e002      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 800136e:	bf00      	nop
 8001370:	e000      	b.n	8001374 <EMV_Payment_ProcessStateMachine+0x274>
            break;
 8001372:	bf00      	nop
    }

    /* State transition */
    if(result == EMV_SUCCESS) {
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d117      	bne.n	80013aa <EMV_Payment_ProcessStateMachine+0x2aa>
        context->current_state = context->next_state;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 2d35 	ldrb.w	r2, [r3, #3381]	@ 0xd35
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f883 2d34 	strb.w	r2, [r3, #3380]	@ 0xd34
        DEBUG_PRINTF("<<< Transition to: %s\r\n",
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3d35 	ldrb.w	r3, [r3, #3381]	@ 0xd35
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe41 	bl	8001014 <EMV_Payment_GetStateDescription>
 8001392:	4603      	mov	r3, r0
 8001394:	4619      	mov	r1, r3
 8001396:	4817      	ldr	r0, [pc, #92]	@ (80013f4 <EMV_Payment_ProcessStateMachine+0x2f4>)
 8001398:	f020 fe30 	bl	8021ffc <iprintf>
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <EMV_Payment_ProcessStateMachine+0x2e4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f020 fd54 	bl	8021e50 <fflush>
 80013a8:	e015      	b.n	80013d6 <EMV_Payment_ProcessStateMachine+0x2d6>
                    EMV_Payment_GetStateDescription(context->next_state));
    } else {
        context->current_state = EMV_STATE_FAILED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	220f      	movs	r2, #15
 80013ae:	f883 2d34 	strb.w	r2, [r3, #3380]	@ 0xd34
        context->last_error = result;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b8:	461a      	mov	r2, r3
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        DEBUG_PRINTF("<<< State processing failed, error code: %d\r\n", result);
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <EMV_Payment_ProcessStateMachine+0x2f8>)
 80013c6:	f020 fe19 	bl	8021ffc <iprintf>
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <EMV_Payment_ProcessStateMachine+0x2e4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f020 fd3d 	bl	8021e50 <fflush>
    }

    return result;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	080240e4 	.word	0x080240e4
 80013e4:	20000084 	.word	0x20000084
 80013e8:	08024100 	.word	0x08024100
 80013ec:	08024134 	.word	0x08024134
 80013f0:	08024158 	.word	0x08024158
 80013f4:	0802416c 	.word	0x0802416c
 80013f8:	08024184 	.word	0x08024184

080013fc <EMV_State_ApplicationSelection>:

/**
 * State 1: Application Selection
 */
EMV_Result_t EMV_State_ApplicationSelection(EMV_Payment_Context_t *context)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Application Selection...\r\n");
 8001404:	481f      	ldr	r0, [pc, #124]	@ (8001484 <EMV_State_ApplicationSelection+0x88>)
 8001406:	f020 fe69 	bl	80220dc <puts>
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <EMV_State_ApplicationSelection+0x8c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4618      	mov	r0, r3
 8001412:	f020 fd1d 	bl	8021e50 <fflush>

    /* Reuse existing PPSE selection logic */
    EMV_Result_t result = EMV_CollectPPSEInfo(&context->card_data);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	f002 ff67 	bl	80042ec <EMV_CollectPPSEInfo>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
    if(result != EMV_SUCCESS) {
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <EMV_State_ApplicationSelection+0x42>
        DEBUG_PRINTF("PPSE selection failed\r\n");
 8001428:	4818      	ldr	r0, [pc, #96]	@ (800148c <EMV_State_ApplicationSelection+0x90>)
 800142a:	f020 fe57 	bl	80220dc <puts>
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <EMV_State_ApplicationSelection+0x8c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4618      	mov	r0, r3
 8001436:	f020 fd0b 	bl	8021e50 <fflush>
        return result;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	e01d      	b.n	800147a <EMV_State_ApplicationSelection+0x7e>
    }

    /* Application selection */
    result = EMV_CollectApplicationInfo(&context->card_data);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 ffc1 	bl	80043c8 <EMV_CollectApplicationInfo>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
    if(result != EMV_SUCCESS) {
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00a      	beq.n	8001466 <EMV_State_ApplicationSelection+0x6a>
        DEBUG_PRINTF("Application selection failed\r\n");
 8001450:	480f      	ldr	r0, [pc, #60]	@ (8001490 <EMV_State_ApplicationSelection+0x94>)
 8001452:	f020 fe43 	bl	80220dc <puts>
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <EMV_State_ApplicationSelection+0x8c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f020 fcf7 	bl	8021e50 <fflush>
        return result;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	e009      	b.n	800147a <EMV_State_ApplicationSelection+0x7e>
    }

    DEBUG_PRINTF("Application selection completed\r\n");
 8001466:	480b      	ldr	r0, [pc, #44]	@ (8001494 <EMV_State_ApplicationSelection+0x98>)
 8001468:	f020 fe38 	bl	80220dc <puts>
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <EMV_State_ApplicationSelection+0x8c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4618      	mov	r0, r3
 8001474:	f020 fcec 	bl	8021e50 <fflush>
    return EMV_SUCCESS;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	080241b4 	.word	0x080241b4
 8001488:	20000084 	.word	0x20000084
 800148c:	080241d8 	.word	0x080241d8
 8001490:	080241f0 	.word	0x080241f0
 8001494:	08024210 	.word	0x08024210

08001498 <EMV_State_ApplicationInitialization>:

/**
 * State 2: Application Initialization
 */
EMV_Result_t EMV_State_ApplicationInitialization(EMV_Payment_Context_t *context)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Application Initialization...\r\n");
 80014a0:	4815      	ldr	r0, [pc, #84]	@ (80014f8 <EMV_State_ApplicationInitialization+0x60>)
 80014a2:	f020 fe1b 	bl	80220dc <puts>
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <EMV_State_ApplicationInitialization+0x64>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f020 fccf 	bl	8021e50 <fflush>

    /* Reuse existing GPO logic */
    EMV_Result_t result = EMV_CollectGPOInfo(&context->card_data);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f887 	bl	80045c8 <EMV_CollectGPOInfo>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
    if(result != EMV_SUCCESS) {
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <EMV_State_ApplicationInitialization+0x42>
        DEBUG_PRINTF("GPO failed\r\n");
 80014c4:	480e      	ldr	r0, [pc, #56]	@ (8001500 <EMV_State_ApplicationInitialization+0x68>)
 80014c6:	f020 fe09 	bl	80220dc <puts>
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <EMV_State_ApplicationInitialization+0x64>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f020 fcbd 	bl	8021e50 <fflush>
        return result;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	e009      	b.n	80014ee <EMV_State_ApplicationInitialization+0x56>
    }

    DEBUG_PRINTF("Application initialization completed\r\n");
 80014da:	480a      	ldr	r0, [pc, #40]	@ (8001504 <EMV_State_ApplicationInitialization+0x6c>)
 80014dc:	f020 fdfe 	bl	80220dc <puts>
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <EMV_State_ApplicationInitialization+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f020 fcb2 	bl	8021e50 <fflush>
    return EMV_SUCCESS;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	08024234 	.word	0x08024234
 80014fc:	20000084 	.word	0x20000084
 8001500:	08024260 	.word	0x08024260
 8001504:	0802426c 	.word	0x0802426c

08001508 <EMV_State_ReadApplicationData>:

/**
 * State 3: Read Application Data
 */
EMV_Result_t EMV_State_ReadApplicationData(EMV_Payment_Context_t *context)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Reading Application Data...\r\n");
 8001510:	4817      	ldr	r0, [pc, #92]	@ (8001570 <EMV_State_ReadApplicationData+0x68>)
 8001512:	f020 fde3 	bl	80220dc <puts>
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <EMV_State_ReadApplicationData+0x6c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4618      	mov	r0, r3
 800151e:	f020 fc97 	bl	8021e50 <fflush>

    /* Reuse existing record reading logic */
    EMV_Result_t result = EMV_CollectAllRecords(&context->card_data);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f8ab 	bl	8004680 <EMV_CollectAllRecords>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
    if(result != EMV_SUCCESS) {
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00a      	beq.n	800154a <EMV_State_ReadApplicationData+0x42>
        DEBUG_PRINTF("Read application data failed\r\n");
 8001534:	4810      	ldr	r0, [pc, #64]	@ (8001578 <EMV_State_ReadApplicationData+0x70>)
 8001536:	f020 fdd1 	bl	80220dc <puts>
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <EMV_State_ReadApplicationData+0x6c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4618      	mov	r0, r3
 8001542:	f020 fc85 	bl	8021e50 <fflush>
        return result;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	e00d      	b.n	8001566 <EMV_State_ReadApplicationData+0x5e>
    }

    DEBUG_PRINTF("Application data reading completed, %d records\r\n",
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8001550:	4619      	mov	r1, r3
 8001552:	480a      	ldr	r0, [pc, #40]	@ (800157c <EMV_State_ReadApplicationData+0x74>)
 8001554:	f020 fd52 	bl	8021ffc <iprintf>
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <EMV_State_ReadApplicationData+0x6c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f020 fc76 	bl	8021e50 <fflush>
                context->card_data.sfi_record_count);
    return EMV_SUCCESS;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	08024294 	.word	0x08024294
 8001574:	20000084 	.word	0x20000084
 8001578:	080242b4 	.word	0x080242b4
 800157c:	080242d4 	.word	0x080242d4

08001580 <EMV_State_OfflineDataAuthentication>:

/**
 * State 4: Offline Data Authentication
 */
EMV_Result_t EMV_State_OfflineDataAuthentication(EMV_Payment_Context_t *context)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Offline Data Authentication...\r\n");
 8001588:	4820      	ldr	r0, [pc, #128]	@ (800160c <EMV_State_OfflineDataAuthentication+0x8c>)
 800158a:	f020 fda7 	bl	80220dc <puts>
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <EMV_State_OfflineDataAuthentication+0x90>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4618      	mov	r0, r3
 8001596:	f020 fc5b 	bl	8021e50 <fflush>

    /* Send certificate data to Linux for verification */
    Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	2010      	movs	r0, #16
 800159e:	f000 fb29 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]
        LINUX_CMD_OFFLINE_DATA_AUTH, context);

    switch(response) {
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <EMV_State_OfflineDataAuthentication+0x32>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d00f      	beq.n	80015d0 <EMV_State_OfflineDataAuthentication+0x50>
 80015b0:	e01d      	b.n	80015ee <EMV_State_OfflineDataAuthentication+0x6e>
        case LINUX_RESP_SUCCESS:
            context->offline_auth_result = 1; /* Authentication successful */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2d36 	strb.w	r2, [r3, #3382]	@ 0xd36
            DEBUG_PRINTF("Offline data authentication successful\r\n");
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <EMV_State_OfflineDataAuthentication+0x94>)
 80015bc:	f020 fd8e 	bl	80220dc <puts>
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <EMV_State_OfflineDataAuthentication+0x90>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f020 fc42 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e018      	b.n	8001602 <EMV_State_OfflineDataAuthentication+0x82>

        case LINUX_RESP_DECLINED:
            context->offline_auth_result = 0; /* Authentication failed */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2d36 	strb.w	r2, [r3, #3382]	@ 0xd36
            DEBUG_PRINTF("Offline data authentication failed\r\n");
 80015d8:	480f      	ldr	r0, [pc, #60]	@ (8001618 <EMV_State_OfflineDataAuthentication+0x98>)
 80015da:	f020 fd7f 	bl	80220dc <puts>
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <EMV_State_OfflineDataAuthentication+0x90>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f020 fc33 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 80015ea:	2307      	movs	r3, #7
 80015ec:	e009      	b.n	8001602 <EMV_State_OfflineDataAuthentication+0x82>

        default:
            DEBUG_PRINTF("Linux communication failed\r\n");
 80015ee:	480b      	ldr	r0, [pc, #44]	@ (800161c <EMV_State_OfflineDataAuthentication+0x9c>)
 80015f0:	f020 fd74 	bl	80220dc <puts>
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <EMV_State_OfflineDataAuthentication+0x90>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f020 fc28 	bl	8021e50 <fflush>
            return EMV_ERROR_COMMUNICATION;
 8001600:	2306      	movs	r3, #6
    }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08024308 	.word	0x08024308
 8001610:	20000084 	.word	0x20000084
 8001614:	08024334 	.word	0x08024334
 8001618:	0802435c 	.word	0x0802435c
 800161c:	08024380 	.word	0x08024380

08001620 <EMV_State_ProcessingRestrictions>:

/**
 * State 5: Processing Restrictions
 */
EMV_Result_t EMV_State_ProcessingRestrictions(EMV_Payment_Context_t *context)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Checking Processing Restrictions...\r\n");
 8001628:	4820      	ldr	r0, [pc, #128]	@ (80016ac <EMV_State_ProcessingRestrictions+0x8c>)
 800162a:	f020 fd57 	bl	80220dc <puts>
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <EMV_State_ProcessingRestrictions+0x90>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f020 fc0b 	bl	8021e50 <fflush>

    /* Send transaction amount and restriction info to Linux for checking */
    Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	2011      	movs	r0, #17
 800163e:	f000 fad9 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
        LINUX_CMD_PROCESS_RESTRICTIONS, context);

    switch(response) {
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <EMV_State_ProcessingRestrictions+0x32>
 800164c:	2b02      	cmp	r3, #2
 800164e:	d00f      	beq.n	8001670 <EMV_State_ProcessingRestrictions+0x50>
 8001650:	e01d      	b.n	800168e <EMV_State_ProcessingRestrictions+0x6e>
        case LINUX_RESP_SUCCESS:
            context->restrictions_result = 1; /* Passed restriction check */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2d37 	strb.w	r2, [r3, #3383]	@ 0xd37
            DEBUG_PRINTF("Processing restrictions check passed\r\n");
 800165a:	4816      	ldr	r0, [pc, #88]	@ (80016b4 <EMV_State_ProcessingRestrictions+0x94>)
 800165c:	f020 fd3e 	bl	80220dc <puts>
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <EMV_State_ProcessingRestrictions+0x90>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f020 fbf2 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 800166c:	2300      	movs	r3, #0
 800166e:	e018      	b.n	80016a2 <EMV_State_ProcessingRestrictions+0x82>

        case LINUX_RESP_DECLINED:
            context->restrictions_result = 0; /* Failed restriction check */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2d37 	strb.w	r2, [r3, #3383]	@ 0xd37
            DEBUG_PRINTF("Processing restrictions check failed\r\n");
 8001678:	480f      	ldr	r0, [pc, #60]	@ (80016b8 <EMV_State_ProcessingRestrictions+0x98>)
 800167a:	f020 fd2f 	bl	80220dc <puts>
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <EMV_State_ProcessingRestrictions+0x90>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f020 fbe3 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 800168a:	2307      	movs	r3, #7
 800168c:	e009      	b.n	80016a2 <EMV_State_ProcessingRestrictions+0x82>

        default:
            DEBUG_PRINTF("Linux communication failed\r\n");
 800168e:	480b      	ldr	r0, [pc, #44]	@ (80016bc <EMV_State_ProcessingRestrictions+0x9c>)
 8001690:	f020 fd24 	bl	80220dc <puts>
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <EMV_State_ProcessingRestrictions+0x90>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4618      	mov	r0, r3
 800169c:	f020 fbd8 	bl	8021e50 <fflush>
            return EMV_ERROR_COMMUNICATION;
 80016a0:	2306      	movs	r3, #6
    }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0802439c 	.word	0x0802439c
 80016b0:	20000084 	.word	0x20000084
 80016b4:	080243c4 	.word	0x080243c4
 80016b8:	080243ec 	.word	0x080243ec
 80016bc:	08024380 	.word	0x08024380

080016c0 <EMV_State_CardholderVerification>:

/**
 * State 6: Cardholder Verification
 */
EMV_Result_t EMV_State_CardholderVerification(EMV_Payment_Context_t *context)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Cardholder Verification...\r\n");
 80016c8:	4811      	ldr	r0, [pc, #68]	@ (8001710 <EMV_State_CardholderVerification+0x50>)
 80016ca:	f020 fd07 	bl	80220dc <puts>
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <EMV_State_CardholderVerification+0x54>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f020 fbbb 	bl	8021e50 <fflush>

    /* Simulate PIN input process */
    DEBUG_PRINTF("Please enter PIN...\r\n");
 80016da:	480f      	ldr	r0, [pc, #60]	@ (8001718 <EMV_State_CardholderVerification+0x58>)
 80016dc:	f020 fcfe 	bl	80220dc <puts>
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <EMV_State_CardholderVerification+0x54>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f020 fbb2 	bl	8021e50 <fflush>

    /* In actual implementation, this would have PIN input interface */
    /* Simplified to automatic pass for now */
    context->cardholder_verification = 1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38

    DEBUG_PRINTF("Cardholder verification successful\r\n");
 80016f4:	4809      	ldr	r0, [pc, #36]	@ (800171c <EMV_State_CardholderVerification+0x5c>)
 80016f6:	f020 fcf1 	bl	80220dc <puts>
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <EMV_State_CardholderVerification+0x54>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f020 fba5 	bl	8021e50 <fflush>
    return EMV_SUCCESS;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08024414 	.word	0x08024414
 8001714:	20000084 	.word	0x20000084
 8001718:	0802443c 	.word	0x0802443c
 800171c:	08024454 	.word	0x08024454

08001720 <EMV_State_TerminalRiskManagement>:

/**
 * State 7: Terminal Risk Management
 */
EMV_Result_t EMV_State_TerminalRiskManagement(EMV_Payment_Context_t *context)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Terminal Risk Management...\r\n");
 8001728:	482d      	ldr	r0, [pc, #180]	@ (80017e0 <EMV_State_TerminalRiskManagement+0xc0>)
 800172a:	f020 fcd7 	bl	80220dc <puts>
 800172e:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <EMV_State_TerminalRiskManagement+0xc4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4618      	mov	r0, r3
 8001736:	f020 fb8b 	bl	8021e50 <fflush>

    /* Send transaction data to Linux for risk assessment */
    Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	2012      	movs	r0, #18
 800173e:	f000 fa59 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
        LINUX_CMD_TERMINAL_RISK_MGMT, context);

    switch(response) {
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d83a      	bhi.n	80017c2 <EMV_State_TerminalRiskManagement+0xa2>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <EMV_State_TerminalRiskManagement+0x34>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001769 	.word	0x08001769
 8001758:	080017c3 	.word	0x080017c3
 800175c:	080017a5 	.word	0x080017a5
 8001760:	08001787 	.word	0x08001787
 8001764:	08001769 	.word	0x08001769
        case LINUX_RESP_SUCCESS:
        case LINUX_RESP_OFFLINE_APPROVED:
            context->risk_management_result = 1; /* Risk acceptable */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2d39 	strb.w	r2, [r3, #3385]	@ 0xd39
            DEBUG_PRINTF("Terminal risk management passed\r\n");
 8001770:	481d      	ldr	r0, [pc, #116]	@ (80017e8 <EMV_State_TerminalRiskManagement+0xc8>)
 8001772:	f020 fcb3 	bl	80220dc <puts>
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <EMV_State_TerminalRiskManagement+0xc4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4618      	mov	r0, r3
 800177e:	f020 fb67 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8001782:	2300      	movs	r3, #0
 8001784:	e027      	b.n	80017d6 <EMV_State_TerminalRiskManagement+0xb6>

        case LINUX_RESP_ONLINE_REQUIRED:
            context->risk_management_result = 2; /* Online required */
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2202      	movs	r2, #2
 800178a:	f883 2d39 	strb.w	r2, [r3, #3385]	@ 0xd39
            DEBUG_PRINTF("Terminal risk management requires online processing\r\n");
 800178e:	4817      	ldr	r0, [pc, #92]	@ (80017ec <EMV_State_TerminalRiskManagement+0xcc>)
 8001790:	f020 fca4 	bl	80220dc <puts>
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <EMV_State_TerminalRiskManagement+0xc4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4618      	mov	r0, r3
 800179c:	f020 fb58 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e018      	b.n	80017d6 <EMV_State_TerminalRiskManagement+0xb6>

        case LINUX_RESP_DECLINED:
            context->risk_management_result = 0; /* Risk too high */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2d39 	strb.w	r2, [r3, #3385]	@ 0xd39
            DEBUG_PRINTF("Terminal risk management declined transaction\r\n");
 80017ac:	4810      	ldr	r0, [pc, #64]	@ (80017f0 <EMV_State_TerminalRiskManagement+0xd0>)
 80017ae:	f020 fc95 	bl	80220dc <puts>
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <EMV_State_TerminalRiskManagement+0xc4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f020 fb49 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 80017be:	2307      	movs	r3, #7
 80017c0:	e009      	b.n	80017d6 <EMV_State_TerminalRiskManagement+0xb6>

        default:
            DEBUG_PRINTF("Linux communication failed\r\n");
 80017c2:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <EMV_State_TerminalRiskManagement+0xd4>)
 80017c4:	f020 fc8a 	bl	80220dc <puts>
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <EMV_State_TerminalRiskManagement+0xc4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f020 fb3e 	bl	8021e50 <fflush>
            return EMV_ERROR_COMMUNICATION;
 80017d4:	2306      	movs	r3, #6
    }
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08024478 	.word	0x08024478
 80017e4:	20000084 	.word	0x20000084
 80017e8:	080244a0 	.word	0x080244a0
 80017ec:	080244c4 	.word	0x080244c4
 80017f0:	080244fc 	.word	0x080244fc
 80017f4:	08024380 	.word	0x08024380

080017f8 <EMV_State_TerminalActionAnalysis>:

/**
 * State 8: Terminal Action Analysis
 */
EMV_Result_t EMV_State_TerminalActionAnalysis(EMV_Payment_Context_t *context)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Terminal Action Analysis...\r\n");
 8001800:	482d      	ldr	r0, [pc, #180]	@ (80018b8 <EMV_State_TerminalActionAnalysis+0xc0>)
 8001802:	f020 fc6b 	bl	80220dc <puts>
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <EMV_State_TerminalActionAnalysis+0xc4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f020 fb1f 	bl	8021e50 <fflush>

    /* Send historical transaction data to Linux for behavior analysis */
    Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2013      	movs	r0, #19
 8001816:	f000 f9ed 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
        LINUX_CMD_TERMINAL_ACTION_ANALYSIS, context);

    switch(response) {
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d83a      	bhi.n	800189a <EMV_State_TerminalActionAnalysis+0xa2>
 8001824:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <EMV_State_TerminalActionAnalysis+0x34>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	08001841 	.word	0x08001841
 8001830:	0800189b 	.word	0x0800189b
 8001834:	0800187d 	.word	0x0800187d
 8001838:	0800185f 	.word	0x0800185f
 800183c:	08001841 	.word	0x08001841
        case LINUX_RESP_SUCCESS:
        case LINUX_RESP_OFFLINE_APPROVED:
            context->terminal_action_result = 1; /* Behavior normal */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2d3a 	strb.w	r2, [r3, #3386]	@ 0xd3a
            DEBUG_PRINTF("Terminal action analysis passed\r\n");
 8001848:	481d      	ldr	r0, [pc, #116]	@ (80018c0 <EMV_State_TerminalActionAnalysis+0xc8>)
 800184a:	f020 fc47 	bl	80220dc <puts>
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <EMV_State_TerminalActionAnalysis+0xc4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f020 fafb 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 800185a:	2300      	movs	r3, #0
 800185c:	e027      	b.n	80018ae <EMV_State_TerminalActionAnalysis+0xb6>

        case LINUX_RESP_ONLINE_REQUIRED:
            context->terminal_action_result = 2; /* Online confirmation required */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 2d3a 	strb.w	r2, [r3, #3386]	@ 0xd3a
            DEBUG_PRINTF("Terminal action analysis requires online confirmation\r\n");
 8001866:	4817      	ldr	r0, [pc, #92]	@ (80018c4 <EMV_State_TerminalActionAnalysis+0xcc>)
 8001868:	f020 fc38 	bl	80220dc <puts>
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <EMV_State_TerminalActionAnalysis+0xc4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	f020 faec 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8001878:	2300      	movs	r3, #0
 800187a:	e018      	b.n	80018ae <EMV_State_TerminalActionAnalysis+0xb6>

        case LINUX_RESP_DECLINED:
            context->terminal_action_result = 0; /* Abnormal behavior */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2d3a 	strb.w	r2, [r3, #3386]	@ 0xd3a
            DEBUG_PRINTF("Terminal action analysis detected abnormal behavior\r\n");
 8001884:	4810      	ldr	r0, [pc, #64]	@ (80018c8 <EMV_State_TerminalActionAnalysis+0xd0>)
 8001886:	f020 fc29 	bl	80220dc <puts>
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <EMV_State_TerminalActionAnalysis+0xc4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4618      	mov	r0, r3
 8001892:	f020 fadd 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 8001896:	2307      	movs	r3, #7
 8001898:	e009      	b.n	80018ae <EMV_State_TerminalActionAnalysis+0xb6>

        default:
            DEBUG_PRINTF("Linux communication failed\r\n");
 800189a:	480c      	ldr	r0, [pc, #48]	@ (80018cc <EMV_State_TerminalActionAnalysis+0xd4>)
 800189c:	f020 fc1e 	bl	80220dc <puts>
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <EMV_State_TerminalActionAnalysis+0xc4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f020 fad2 	bl	8021e50 <fflush>
            return EMV_ERROR_COMMUNICATION;
 80018ac:	2306      	movs	r3, #6
    }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	0802452c 	.word	0x0802452c
 80018bc:	20000084 	.word	0x20000084
 80018c0:	08024554 	.word	0x08024554
 80018c4:	08024578 	.word	0x08024578
 80018c8:	080245b0 	.word	0x080245b0
 80018cc:	08024380 	.word	0x08024380

080018d0 <EMV_State_OnlineDecision>:

/**
 * State 9: Online Transaction Decision
 */
EMV_Result_t EMV_State_OnlineDecision(EMV_Payment_Context_t *context)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Making Online Transaction Decision...\r\n");
 80018d8:	4819      	ldr	r0, [pc, #100]	@ (8001940 <EMV_State_OnlineDecision+0x70>)
 80018da:	f020 fbff 	bl	80220dc <puts>
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <EMV_State_OnlineDecision+0x74>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f020 fab3 	bl	8021e50 <fflush>

    /* Decide whether online processing is needed based on previous analysis results */
    if(context->risk_management_result == 2 ||
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3d39 	ldrb.w	r3, [r3, #3385]	@ 0xd39
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d004      	beq.n	80018fe <EMV_State_OnlineDecision+0x2e>
       context->terminal_action_result == 2) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3d3a 	ldrb.w	r3, [r3, #3386]	@ 0xd3a
    if(context->risk_management_result == 2 ||
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d10d      	bne.n	800191a <EMV_State_OnlineDecision+0x4a>
        context->online_decision = 1; /* Online required */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2d3b 	strb.w	r2, [r3, #3387]	@ 0xd3b
        DEBUG_PRINTF("Decision result: Online processing required\r\n");
 8001906:	4810      	ldr	r0, [pc, #64]	@ (8001948 <EMV_State_OnlineDecision+0x78>)
 8001908:	f020 fbe8 	bl	80220dc <puts>
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <EMV_State_OnlineDecision+0x74>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4618      	mov	r0, r3
 8001914:	f020 fa9c 	bl	8021e50 <fflush>
 8001918:	e00c      	b.n	8001934 <EMV_State_OnlineDecision+0x64>
    } else {
        context->online_decision = 0; /* Can process offline */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2d3b 	strb.w	r2, [r3, #3387]	@ 0xd3b
        DEBUG_PRINTF("Decision result: Can process offline\r\n");
 8001922:	480a      	ldr	r0, [pc, #40]	@ (800194c <EMV_State_OnlineDecision+0x7c>)
 8001924:	f020 fbda 	bl	80220dc <puts>
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <EMV_State_OnlineDecision+0x74>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f020 fa8e 	bl	8021e50 <fflush>
    }

    return EMV_SUCCESS;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	080245e8 	.word	0x080245e8
 8001944:	20000084 	.word	0x20000084
 8001948:	08024610 	.word	0x08024610
 800194c:	08024640 	.word	0x08024640

08001950 <EMV_State_OnlineProcessing>:

/**
 * State 10: Online Processing
 */
EMV_Result_t EMV_State_OnlineProcessing(EMV_Payment_Context_t *context)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Online Processing...\r\n");
 8001958:	481c      	ldr	r0, [pc, #112]	@ (80019cc <EMV_State_OnlineProcessing+0x7c>)
 800195a:	f020 fbbf 	bl	80220dc <puts>
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <EMV_State_OnlineProcessing+0x80>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4618      	mov	r0, r3
 8001966:	f020 fa73 	bl	8021e50 <fflush>

    /* Send transaction request to Linux for online authorization */
    Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	2014      	movs	r0, #20
 800196e:	f000 f941 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
        LINUX_CMD_ONLINE_PROCESSING, context);

    switch(response) {
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d002      	beq.n	8001982 <EMV_State_OnlineProcessing+0x32>
 800197c:	2b02      	cmp	r3, #2
 800197e:	d00b      	beq.n	8001998 <EMV_State_OnlineProcessing+0x48>
 8001980:	e015      	b.n	80019ae <EMV_State_OnlineProcessing+0x5e>
        case LINUX_RESP_APPROVED:
            DEBUG_PRINTF("Online authorization successful\r\n");
 8001982:	4814      	ldr	r0, [pc, #80]	@ (80019d4 <EMV_State_OnlineProcessing+0x84>)
 8001984:	f020 fbaa 	bl	80220dc <puts>
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <EMV_State_OnlineProcessing+0x80>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f020 fa5e 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8001994:	2300      	movs	r3, #0
 8001996:	e014      	b.n	80019c2 <EMV_State_OnlineProcessing+0x72>

        case LINUX_RESP_DECLINED:
            DEBUG_PRINTF("Online authorization declined\r\n");
 8001998:	480f      	ldr	r0, [pc, #60]	@ (80019d8 <EMV_State_OnlineProcessing+0x88>)
 800199a:	f020 fb9f 	bl	80220dc <puts>
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <EMV_State_OnlineProcessing+0x80>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f020 fa53 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 80019aa:	2307      	movs	r3, #7
 80019ac:	e009      	b.n	80019c2 <EMV_State_OnlineProcessing+0x72>

        default:
            DEBUG_PRINTF("Online processing failed\r\n");
 80019ae:	480b      	ldr	r0, [pc, #44]	@ (80019dc <EMV_State_OnlineProcessing+0x8c>)
 80019b0:	f020 fb94 	bl	80220dc <puts>
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <EMV_State_OnlineProcessing+0x80>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f020 fa48 	bl	8021e50 <fflush>
            return EMV_ERROR_ONLINE_AUTH;
 80019c0:	2308      	movs	r3, #8
    }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	08024668 	.word	0x08024668
 80019d0:	20000084 	.word	0x20000084
 80019d4:	08024688 	.word	0x08024688
 80019d8:	080246ac 	.word	0x080246ac
 80019dc:	080246cc 	.word	0x080246cc

080019e0 <EMV_State_IssuerAuthentication>:

/**
 * State 11: Issuer Authentication
 */
EMV_Result_t EMV_State_IssuerAuthentication(EMV_Payment_Context_t *context)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Issuer Authentication...\r\n");
 80019e8:	481c      	ldr	r0, [pc, #112]	@ (8001a5c <EMV_State_IssuerAuthentication+0x7c>)
 80019ea:	f020 fb77 	bl	80220dc <puts>
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <EMV_State_IssuerAuthentication+0x80>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f020 fa2b 	bl	8021e50 <fflush>

    /* Send ARPC for issuer authentication */
    Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	2015      	movs	r0, #21
 80019fe:	f000 f8f9 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
        LINUX_CMD_ISSUER_AUTH, context);

    switch(response) {
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <EMV_State_IssuerAuthentication+0x32>
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d00b      	beq.n	8001a28 <EMV_State_IssuerAuthentication+0x48>
 8001a10:	e015      	b.n	8001a3e <EMV_State_IssuerAuthentication+0x5e>
        case LINUX_RESP_SUCCESS:
            DEBUG_PRINTF("Issuer authentication successful\r\n");
 8001a12:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <EMV_State_IssuerAuthentication+0x84>)
 8001a14:	f020 fb62 	bl	80220dc <puts>
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <EMV_State_IssuerAuthentication+0x80>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f020 fa16 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e014      	b.n	8001a52 <EMV_State_IssuerAuthentication+0x72>

        case LINUX_RESP_DECLINED:
            DEBUG_PRINTF("Issuer authentication failed\r\n");
 8001a28:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <EMV_State_IssuerAuthentication+0x88>)
 8001a2a:	f020 fb57 	bl	80220dc <puts>
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <EMV_State_IssuerAuthentication+0x80>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f020 fa0b 	bl	8021e50 <fflush>
            return EMV_ERROR_TRANSACTION_DECLINED;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e009      	b.n	8001a52 <EMV_State_IssuerAuthentication+0x72>

        default:
            DEBUG_PRINTF("Issuer authentication communication failed\r\n");
 8001a3e:	480b      	ldr	r0, [pc, #44]	@ (8001a6c <EMV_State_IssuerAuthentication+0x8c>)
 8001a40:	f020 fb4c 	bl	80220dc <puts>
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <EMV_State_IssuerAuthentication+0x80>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f020 fa00 	bl	8021e50 <fflush>
            return EMV_ERROR_COMMUNICATION;
 8001a50:	2306      	movs	r3, #6
    }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	080246e8 	.word	0x080246e8
 8001a60:	20000084 	.word	0x20000084
 8001a64:	0802470c 	.word	0x0802470c
 8001a68:	08024730 	.word	0x08024730
 8001a6c:	08024750 	.word	0x08024750

08001a70 <EMV_State_Completion>:

/**
 * State 12: Completion Processing
 */
EMV_Result_t EMV_State_Completion(EMV_Payment_Context_t *context)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Executing Completion Processing...\r\n");
 8001a78:	4829      	ldr	r0, [pc, #164]	@ (8001b20 <EMV_State_Completion+0xb0>)
 8001a7a:	f020 fb2f 	bl	80220dc <puts>
 8001a7e:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <EMV_State_Completion+0xb4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f020 f9e3 	bl	8021e50 <fflush>

    /* Generate Transaction Certificate (TC) */
    DEBUG_PRINTF("Generating Transaction Certificate (TC)...\r\n");
 8001a8a:	4827      	ldr	r0, [pc, #156]	@ (8001b28 <EMV_State_Completion+0xb8>)
 8001a8c:	f020 fb26 	bl	80220dc <puts>
 8001a90:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <EMV_State_Completion+0xb4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f020 f9da 	bl	8021e50 <fflush>

    /* This should generate TC according to EMV specification */
    /* Simplified implementation */
    uint8_t tc[] = {0x9F, 0x26, 0x08, 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0};
 8001a9c:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <EMV_State_Completion+0xbc>)
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa4:	c303      	stmia	r3!, {r0, r1}
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	0c12      	lsrs	r2, r2, #16
 8001aac:	701a      	strb	r2, [r3, #0]

    DEBUG_PRINTF("Transaction certificate generation completed\r\n");
 8001aae:	4820      	ldr	r0, [pc, #128]	@ (8001b30 <EMV_State_Completion+0xc0>)
 8001ab0:	f020 fb14 	bl	80220dc <puts>
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <EMV_State_Completion+0xb4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f020 f9c8 	bl	8021e50 <fflush>
    DEBUG_PRINTF("TC: ");
 8001ac0:	481c      	ldr	r0, [pc, #112]	@ (8001b34 <EMV_State_Completion+0xc4>)
 8001ac2:	f020 fa9b 	bl	8021ffc <iprintf>
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <EMV_State_Completion+0xb4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f020 f9bf 	bl	8021e50 <fflush>
    for(int i = 0; i < sizeof(tc); i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e011      	b.n	8001afc <EMV_State_Completion+0x8c>
        DEBUG_PRINTF("%02X ", tc[i]);
 8001ad8:	f107 0208 	add.w	r2, r7, #8
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4814      	ldr	r0, [pc, #80]	@ (8001b38 <EMV_State_Completion+0xc8>)
 8001ae6:	f020 fa89 	bl	8021ffc <iprintf>
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <EMV_State_Completion+0xb4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f020 f9ad 	bl	8021e50 <fflush>
    for(int i = 0; i < sizeof(tc); i++) {
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b0a      	cmp	r3, #10
 8001b00:	d9ea      	bls.n	8001ad8 <EMV_State_Completion+0x68>
    }
    DEBUG_PRINTF("\r\n");
 8001b02:	480e      	ldr	r0, [pc, #56]	@ (8001b3c <EMV_State_Completion+0xcc>)
 8001b04:	f020 faea 	bl	80220dc <puts>
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <EMV_State_Completion+0xb4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f020 f99e 	bl	8021e50 <fflush>

    return EMV_SUCCESS;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	0802477c 	.word	0x0802477c
 8001b24:	20000084 	.word	0x20000084
 8001b28:	080247a0 	.word	0x080247a0
 8001b2c:	08024810 	.word	0x08024810
 8001b30:	080247cc 	.word	0x080247cc
 8001b34:	080247fc 	.word	0x080247fc
 8001b38:	08024804 	.word	0x08024804
 8001b3c:	0802480c 	.word	0x0802480c

08001b40 <EMV_State_ScriptProcessing>:

/**
 * State 13: Issuer Script Processing
 */
EMV_Result_t EMV_State_ScriptProcessing(EMV_Payment_Context_t *context)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    DEBUG_PRINTF("Processing Issuer Scripts...\r\n");
 8001b48:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <EMV_State_ScriptProcessing+0x9c>)
 8001b4a:	f020 fac7 	bl	80220dc <puts>
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <EMV_State_ScriptProcessing+0xa0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f020 f97b 	bl	8021e50 <fflush>

    /* Check if there are issuer scripts to execute */
    if(context->script_len > 0) {
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02b      	beq.n	8001bbe <EMV_State_ScriptProcessing+0x7e>
        DEBUG_PRINTF("Executing issuer scripts (%d bytes)...\r\n", context->script_len);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	@ (8001be4 <EMV_State_ScriptProcessing+0xa4>)
 8001b72:	f020 fa43 	bl	8021ffc <iprintf>
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <EMV_State_ScriptProcessing+0xa0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f020 f967 	bl	8021e50 <fflush>

        /* Send scripts to Linux for processing */
        Linux_Response_t response = EMV_FormatAndSendLinuxCommand(
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	2016      	movs	r0, #22
 8001b86:	f000 f835 	bl	8001bf4 <EMV_FormatAndSendLinuxCommand>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73fb      	strb	r3, [r7, #15]
            LINUX_CMD_SCRIPT_PROCESSING, context);

        if(response != LINUX_RESP_SUCCESS) {
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <EMV_State_ScriptProcessing+0x6a>
            DEBUG_PRINTF("Script execution failed\r\n");
 8001b94:	4814      	ldr	r0, [pc, #80]	@ (8001be8 <EMV_State_ScriptProcessing+0xa8>)
 8001b96:	f020 faa1 	bl	80220dc <puts>
 8001b9a:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <EMV_State_ScriptProcessing+0xa0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f020 f955 	bl	8021e50 <fflush>
            return EMV_ERROR_COMMUNICATION;
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e013      	b.n	8001bd2 <EMV_State_ScriptProcessing+0x92>
        }

        DEBUG_PRINTF("Issuer script execution completed\r\n");
 8001baa:	4810      	ldr	r0, [pc, #64]	@ (8001bec <EMV_State_ScriptProcessing+0xac>)
 8001bac:	f020 fa96 	bl	80220dc <puts>
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <EMV_State_ScriptProcessing+0xa0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f020 f94a 	bl	8021e50 <fflush>
 8001bbc:	e008      	b.n	8001bd0 <EMV_State_ScriptProcessing+0x90>
    } else {
        DEBUG_PRINTF("No issuer scripts to process\r\n");
 8001bbe:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <EMV_State_ScriptProcessing+0xb0>)
 8001bc0:	f020 fa8c 	bl	80220dc <puts>
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <EMV_State_ScriptProcessing+0xa0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f020 f940 	bl	8021e50 <fflush>
    }

    return EMV_SUCCESS;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0802481c 	.word	0x0802481c
 8001be0:	20000084 	.word	0x20000084
 8001be4:	0802483c 	.word	0x0802483c
 8001be8:	08024868 	.word	0x08024868
 8001bec:	08024884 	.word	0x08024884
 8001bf0:	080248a8 	.word	0x080248a8

08001bf4 <EMV_FormatAndSendLinuxCommand>:

/**
 * Format and send Linux command (SIMULATION MODE)
 */
Linux_Response_t EMV_FormatAndSendLinuxCommand(Linux_Command_t cmd, EMV_Payment_Context_t *context)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
    DEBUG_PRINTF("\r\n=== LINUX INTERFACE REQUEST ===\r\n");
 8001c00:	4891      	ldr	r0, [pc, #580]	@ (8001e48 <EMV_FormatAndSendLinuxCommand+0x254>)
 8001c02:	f020 fa6b 	bl	80220dc <puts>
 8001c06:	4b91      	ldr	r3, [pc, #580]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f020 f91f 	bl	8021e50 <fflush>

    switch(cmd) {
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	3b10      	subs	r3, #16
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	f200 8178 	bhi.w	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>
 8001c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <EMV_FormatAndSendLinuxCommand+0x30>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c41 	.word	0x08001c41
 8001c28:	08001c97 	.word	0x08001c97
 8001c2c:	08001d0f 	.word	0x08001d0f
 8001c30:	08001d5d 	.word	0x08001d5d
 8001c34:	08001dab 	.word	0x08001dab
 8001c38:	08001df9 	.word	0x08001df9
 8001c3c:	08001eb5 	.word	0x08001eb5
        case LINUX_CMD_OFFLINE_DATA_AUTH:
            DEBUG_PRINTF("Command: 0x%02X - Offline Data Authentication\r\n", cmd);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4882      	ldr	r0, [pc, #520]	@ (8001e50 <EMV_FormatAndSendLinuxCommand+0x25c>)
 8001c46:	f020 f9d9 	bl	8021ffc <iprintf>
 8001c4a:	4b80      	ldr	r3, [pc, #512]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f020 f8fd 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: Application Select Response (%d bytes)\r\n", context->card_data.app_select_len);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	487d      	ldr	r0, [pc, #500]	@ (8001e54 <EMV_FormatAndSendLinuxCommand+0x260>)
 8001c60:	f020 f9cc 	bl	8021ffc <iprintf>
 8001c64:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f020 f8f0 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Expected: Verify certificates and signatures\r\n");
 8001c70:	4879      	ldr	r0, [pc, #484]	@ (8001e58 <EMV_FormatAndSendLinuxCommand+0x264>)
 8001c72:	f020 fa33 	bl	80220dc <puts>
 8001c76:	4b75      	ldr	r3, [pc, #468]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f020 f8e7 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Extract cert -> Verify chain -> Validate signatures\r\n");
 8001c82:	4876      	ldr	r0, [pc, #472]	@ (8001e5c <EMV_FormatAndSendLinuxCommand+0x268>)
 8001c84:	f020 fa2a 	bl	80220dc <puts>
 8001c88:	4b70      	ldr	r3, [pc, #448]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f020 f8de 	bl	8021e50 <fflush>
            break;
 8001c94:	e13a      	b.n	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>

        case LINUX_CMD_PROCESS_RESTRICTIONS:
            DEBUG_PRINTF("Command: 0x%02X - Processing Restrictions Check\r\n", cmd);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4871      	ldr	r0, [pc, #452]	@ (8001e60 <EMV_FormatAndSendLinuxCommand+0x26c>)
 8001c9c:	f020 f9ae 	bl	8021ffc <iprintf>
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f020 f8d2 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: Amount=%lu.%02lu, Currency=0x%04X\r\n",
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	@ 0xd2c
 8001cb2:	4a6c      	ldr	r2, [pc, #432]	@ (8001e64 <EMV_FormatAndSendLinuxCommand+0x270>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	0959      	lsrs	r1, r3, #5
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	@ 0xd2c
 8001cc0:	4a68      	ldr	r2, [pc, #416]	@ (8001e64 <EMV_FormatAndSendLinuxCommand+0x270>)
 8001cc2:	fba2 0203 	umull	r0, r2, r2, r3
 8001cc6:	0952      	lsrs	r2, r2, #5
 8001cc8:	2064      	movs	r0, #100	@ 0x64
 8001cca:	fb00 f202 	mul.w	r2, r0, r2
 8001cce:	1a9a      	subs	r2, r3, r2
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f8b3 3d30 	ldrh.w	r3, [r3, #3376]	@ 0xd30
 8001cd6:	4864      	ldr	r0, [pc, #400]	@ (8001e68 <EMV_FormatAndSendLinuxCommand+0x274>)
 8001cd8:	f020 f990 	bl	8021ffc <iprintf>
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f020 f8b4 	bl	8021e50 <fflush>
                        context->card_data.amount/100, context->card_data.amount%100, context->card_data.currency_code);
            DEBUG_PRINTF("Expected: Check amount and usage limits\r\n");
 8001ce8:	4860      	ldr	r0, [pc, #384]	@ (8001e6c <EMV_FormatAndSendLinuxCommand+0x278>)
 8001cea:	f020 f9f7 	bl	80220dc <puts>
 8001cee:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f020 f8ab 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Verify limits -> Check restrictions -> Validate usage\r\n");
 8001cfa:	485d      	ldr	r0, [pc, #372]	@ (8001e70 <EMV_FormatAndSendLinuxCommand+0x27c>)
 8001cfc:	f020 f9ee 	bl	80220dc <puts>
 8001d00:	4b52      	ldr	r3, [pc, #328]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f020 f8a2 	bl	8021e50 <fflush>
            break;
 8001d0c:	e0fe      	b.n	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>

        case LINUX_CMD_TERMINAL_RISK_MGMT:
            DEBUG_PRINTF("Command: 0x%02X - Terminal Risk Management\r\n", cmd);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4858      	ldr	r0, [pc, #352]	@ (8001e74 <EMV_FormatAndSendLinuxCommand+0x280>)
 8001d14:	f020 f972 	bl	8021ffc <iprintf>
 8001d18:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f020 f896 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: Card UID, Transaction data, Records\r\n");
 8001d24:	4854      	ldr	r0, [pc, #336]	@ (8001e78 <EMV_FormatAndSendLinuxCommand+0x284>)
 8001d26:	f020 f9d9 	bl	80220dc <puts>
 8001d2a:	4b48      	ldr	r3, [pc, #288]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f020 f88d 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Expected: Analyze transaction risk factors\r\n");
 8001d36:	4851      	ldr	r0, [pc, #324]	@ (8001e7c <EMV_FormatAndSendLinuxCommand+0x288>)
 8001d38:	f020 f9d0 	bl	80220dc <puts>
 8001d3c:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f020 f884 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Risk scoring -> Blacklist check -> Pattern analysis\r\n");
 8001d48:	484d      	ldr	r0, [pc, #308]	@ (8001e80 <EMV_FormatAndSendLinuxCommand+0x28c>)
 8001d4a:	f020 f9c7 	bl	80220dc <puts>
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f020 f87b 	bl	8021e50 <fflush>
            break;
 8001d5a:	e0d7      	b.n	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>

        case LINUX_CMD_TERMINAL_ACTION_ANALYSIS:
            DEBUG_PRINTF("Command: 0x%02X - Terminal Action Analysis\r\n", cmd);
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4848      	ldr	r0, [pc, #288]	@ (8001e84 <EMV_FormatAndSendLinuxCommand+0x290>)
 8001d62:	f020 f94b 	bl	8021ffc <iprintf>
 8001d66:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f020 f86f 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: Historical transaction patterns\r\n");
 8001d72:	4845      	ldr	r0, [pc, #276]	@ (8001e88 <EMV_FormatAndSendLinuxCommand+0x294>)
 8001d74:	f020 f9b2 	bl	80220dc <puts>
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f020 f866 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Expected: Analyze cardholder behavior\r\n");
 8001d84:	4841      	ldr	r0, [pc, #260]	@ (8001e8c <EMV_FormatAndSendLinuxCommand+0x298>)
 8001d86:	f020 f9a9 	bl	80220dc <puts>
 8001d8a:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f020 f85d 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Behavior analysis -> Anomaly detection -> ML scoring\r\n");
 8001d96:	483e      	ldr	r0, [pc, #248]	@ (8001e90 <EMV_FormatAndSendLinuxCommand+0x29c>)
 8001d98:	f020 f9a0 	bl	80220dc <puts>
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f020 f854 	bl	8021e50 <fflush>
            break;
 8001da8:	e0b0      	b.n	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>

        case LINUX_CMD_ONLINE_PROCESSING:
            DEBUG_PRINTF("Command: 0x%02X - Online Processing\r\n", cmd);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4839      	ldr	r0, [pc, #228]	@ (8001e94 <EMV_FormatAndSendLinuxCommand+0x2a0>)
 8001db0:	f020 f924 	bl	8021ffc <iprintf>
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f020 f848 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: Card UID, Authorization request\r\n");
 8001dc0:	4835      	ldr	r0, [pc, #212]	@ (8001e98 <EMV_FormatAndSendLinuxCommand+0x2a4>)
 8001dc2:	f020 f98b 	bl	80220dc <puts>
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f020 f83f 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Expected: Communicate with issuing bank\r\n");
 8001dd2:	4832      	ldr	r0, [pc, #200]	@ (8001e9c <EMV_FormatAndSendLinuxCommand+0x2a8>)
 8001dd4:	f020 f982 	bl	80220dc <puts>
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f020 f836 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Format ISO8583 -> Bank communication -> Parse response\r\n");
 8001de4:	482e      	ldr	r0, [pc, #184]	@ (8001ea0 <EMV_FormatAndSendLinuxCommand+0x2ac>)
 8001de6:	f020 f979 	bl	80220dc <puts>
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f020 f82d 	bl	8021e50 <fflush>
            break;
 8001df6:	e089      	b.n	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>

        case LINUX_CMD_ISSUER_AUTH:
            DEBUG_PRINTF("Command: 0x%02X - Issuer Authentication\r\n", cmd);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4829      	ldr	r0, [pc, #164]	@ (8001ea4 <EMV_FormatAndSendLinuxCommand+0x2b0>)
 8001dfe:	f020 f8fd 	bl	8021ffc <iprintf>
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f020 f821 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: ARPC verification data\r\n");
 8001e0e:	4826      	ldr	r0, [pc, #152]	@ (8001ea8 <EMV_FormatAndSendLinuxCommand+0x2b4>)
 8001e10:	f020 f964 	bl	80220dc <puts>
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f020 f818 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Expected: Verify issuer cryptographic response\r\n");
 8001e20:	4822      	ldr	r0, [pc, #136]	@ (8001eac <EMV_FormatAndSendLinuxCommand+0x2b8>)
 8001e22:	f020 f95b 	bl	80220dc <puts>
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f020 f80f 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Verify ARPC -> Validate auth -> Check integrity\r\n");
 8001e32:	481f      	ldr	r0, [pc, #124]	@ (8001eb0 <EMV_FormatAndSendLinuxCommand+0x2bc>)
 8001e34:	f020 f952 	bl	80220dc <puts>
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <EMV_FormatAndSendLinuxCommand+0x258>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f020 f806 	bl	8021e50 <fflush>
            break;
 8001e44:	e062      	b.n	8001f0c <EMV_FormatAndSendLinuxCommand+0x318>
 8001e46:	bf00      	nop
 8001e48:	080249bc 	.word	0x080249bc
 8001e4c:	20000084 	.word	0x20000084
 8001e50:	080249e0 	.word	0x080249e0
 8001e54:	08024a10 	.word	0x08024a10
 8001e58:	08024a40 	.word	0x08024a40
 8001e5c:	08024a70 	.word	0x08024a70
 8001e60:	08024ab0 	.word	0x08024ab0
 8001e64:	51eb851f 	.word	0x51eb851f
 8001e68:	08024ae4 	.word	0x08024ae4
 8001e6c:	08024b10 	.word	0x08024b10
 8001e70:	08024b3c 	.word	0x08024b3c
 8001e74:	08024b7c 	.word	0x08024b7c
 8001e78:	08024bac 	.word	0x08024bac
 8001e7c:	08024bd8 	.word	0x08024bd8
 8001e80:	08024c04 	.word	0x08024c04
 8001e84:	08024c44 	.word	0x08024c44
 8001e88:	08024c74 	.word	0x08024c74
 8001e8c:	08024c9c 	.word	0x08024c9c
 8001e90:	08024cc4 	.word	0x08024cc4
 8001e94:	08024d04 	.word	0x08024d04
 8001e98:	08024d2c 	.word	0x08024d2c
 8001e9c:	08024d54 	.word	0x08024d54
 8001ea0:	08024d80 	.word	0x08024d80
 8001ea4:	08024dc0 	.word	0x08024dc0
 8001ea8:	08024dec 	.word	0x08024dec
 8001eac:	08024e0c 	.word	0x08024e0c
 8001eb0:	08024e3c 	.word	0x08024e3c

        case LINUX_CMD_SCRIPT_PROCESSING:
            DEBUG_PRINTF("Command: 0x%02X - Issuer Script Processing\r\n", cmd);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4838      	ldr	r0, [pc, #224]	@ (8001f9c <EMV_FormatAndSendLinuxCommand+0x3a8>)
 8001eba:	f020 f89f 	bl	8021ffc <iprintf>
 8001ebe:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f01f ffc3 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Data: Issuer scripts (%d bytes)\r\n", context->script_len);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4833      	ldr	r0, [pc, #204]	@ (8001fa4 <EMV_FormatAndSendLinuxCommand+0x3b0>)
 8001ed6:	f020 f891 	bl	8021ffc <iprintf>
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f01f ffb5 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Expected: Process post-transaction commands\r\n");
 8001ee6:	4830      	ldr	r0, [pc, #192]	@ (8001fa8 <EMV_FormatAndSendLinuxCommand+0x3b4>)
 8001ee8:	f020 f8f8 	bl	80220dc <puts>
 8001eec:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f01f ffac 	bl	8021e50 <fflush>
            DEBUG_PRINTF("Action: Parse scripts -> Execute updates -> Log results\r\n");
 8001ef8:	482c      	ldr	r0, [pc, #176]	@ (8001fac <EMV_FormatAndSendLinuxCommand+0x3b8>)
 8001efa:	f020 f8ef 	bl	80220dc <puts>
 8001efe:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f01f ffa3 	bl	8021e50 <fflush>
            break;
 8001f0a:	bf00      	nop
    }

    DEBUG_PRINTF("=== ASSUMING SUCCESS, CONTINUE ===\r\n\r\n");
 8001f0c:	4828      	ldr	r0, [pc, #160]	@ (8001fb0 <EMV_FormatAndSendLinuxCommand+0x3bc>)
 8001f0e:	f020 f8e5 	bl	80220dc <puts>
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f01f ff99 	bl	8021e50 <fflush>

    /* Simulate processing delay */
    HAL_Delay(200);
 8001f1e:	20c8      	movs	r0, #200	@ 0xc8
 8001f20:	f01a fa40 	bl	801c3a4 <HAL_Delay>

    /* Return appropriate success responses */
    switch(cmd) {
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	3b10      	subs	r3, #16
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d832      	bhi.n	8001f92 <EMV_FormatAndSendLinuxCommand+0x39e>
 8001f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <EMV_FormatAndSendLinuxCommand+0x340>)
 8001f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f32:	bf00      	nop
 8001f34:	08001f51 	.word	0x08001f51
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f67 	.word	0x08001f67
 8001f40:	08001f67 	.word	0x08001f67
 8001f44:	08001f7d 	.word	0x08001f7d
 8001f48:	08001f51 	.word	0x08001f51
 8001f4c:	08001f51 	.word	0x08001f51
        case LINUX_CMD_OFFLINE_DATA_AUTH:
        case LINUX_CMD_PROCESS_RESTRICTIONS:
        case LINUX_CMD_ISSUER_AUTH:
        case LINUX_CMD_SCRIPT_PROCESSING:
            DEBUG_PRINTF("Simulated Response: SUCCESS\r\n");
 8001f50:	4818      	ldr	r0, [pc, #96]	@ (8001fb4 <EMV_FormatAndSendLinuxCommand+0x3c0>)
 8001f52:	f020 f8c3 	bl	80220dc <puts>
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f01f ff77 	bl	8021e50 <fflush>
            return LINUX_RESP_SUCCESS;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e016      	b.n	8001f94 <EMV_FormatAndSendLinuxCommand+0x3a0>

        case LINUX_CMD_TERMINAL_RISK_MGMT:
        case LINUX_CMD_TERMINAL_ACTION_ANALYSIS:
            DEBUG_PRINTF("Simulated Response: OFFLINE_APPROVED\r\n");
 8001f66:	4814      	ldr	r0, [pc, #80]	@ (8001fb8 <EMV_FormatAndSendLinuxCommand+0x3c4>)
 8001f68:	f020 f8b8 	bl	80220dc <puts>
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f01f ff6c 	bl	8021e50 <fflush>
            return LINUX_RESP_OFFLINE_APPROVED;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e00b      	b.n	8001f94 <EMV_FormatAndSendLinuxCommand+0x3a0>

        case LINUX_CMD_ONLINE_PROCESSING:
            DEBUG_PRINTF("Simulated Response: APPROVED\r\n");
 8001f7c:	480f      	ldr	r0, [pc, #60]	@ (8001fbc <EMV_FormatAndSendLinuxCommand+0x3c8>)
 8001f7e:	f020 f8ad 	bl	80220dc <puts>
 8001f82:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <EMV_FormatAndSendLinuxCommand+0x3ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f01f ff61 	bl	8021e50 <fflush>
            return LINUX_RESP_APPROVED;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <EMV_FormatAndSendLinuxCommand+0x3a0>

        default:
            return LINUX_RESP_ERROR;
 8001f92:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	08024e78 	.word	0x08024e78
 8001fa0:	20000084 	.word	0x20000084
 8001fa4:	08024ea8 	.word	0x08024ea8
 8001fa8:	08024ecc 	.word	0x08024ecc
 8001fac:	08024efc 	.word	0x08024efc
 8001fb0:	08024f38 	.word	0x08024f38
 8001fb4:	08024f60 	.word	0x08024f60
 8001fb8:	08024f80 	.word	0x08024f80
 8001fbc:	08024fa8 	.word	0x08024fa8

08001fc0 <EMV_ProcessPaymentFlow>:

/**
 * Main EMV payment flow entry function - replaces EMV_ProcessTransaction_Enhanced
 */
EMV_Result_t EMV_ProcessPaymentFlow(void *pDataParams, uint32_t amount, uint16_t currency_code)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fce:	f843 0c4c 	str.w	r0, [r3, #-76]
 8001fd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fd6:	f843 1c50 	str.w	r1, [r3, #-80]
 8001fda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fde:	f823 2c52 	strh.w	r2, [r3, #-82]
    EMV_Payment_Context_t payment_context;
    EMV_Result_t result;

    /* 1. Initialize payment flow */
    result = EMV_Payment_Initialize(&payment_context, pDataParams, amount, currency_code);
 8001fe2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fe6:	f833 3c52 	ldrh.w	r3, [r3, #-82]
 8001fea:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001fee:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001ff2:	f107 0018 	add.w	r0, r7, #24
 8001ff6:	3808      	subs	r0, #8
 8001ff8:	f852 2c50 	ldr.w	r2, [r2, #-80]
 8001ffc:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8002000:	f7fe ffb8 	bl	8000f74 <EMV_Payment_Initialize>
 8002004:	4603      	mov	r3, r0
 8002006:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800200a:	f102 0217 	add.w	r2, r2, #23
 800200e:	7013      	strb	r3, [r2, #0]
    if(result != EMV_SUCCESS) {
 8002010:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002014:	f103 0317 	add.w	r3, r3, #23
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00e      	beq.n	800203c <EMV_ProcessPaymentFlow+0x7c>
        DEBUG_PRINTF("Payment flow initialization failed\r\n");
 800201e:	4855      	ldr	r0, [pc, #340]	@ (8002174 <EMV_ProcessPaymentFlow+0x1b4>)
 8002020:	f020 f85c 	bl	80220dc <puts>
 8002024:	4b54      	ldr	r3, [pc, #336]	@ (8002178 <EMV_ProcessPaymentFlow+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4618      	mov	r0, r3
 800202c:	f01f ff10 	bl	8021e50 <fflush>
        return result;
 8002030:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002034:	f103 0317 	add.w	r3, r3, #23
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	e095      	b.n	8002168 <EMV_ProcessPaymentFlow+0x1a8>
    }

    /* 2. Collect basic card information first */
    result = EMV_CollectCardBasicInfo((phacDiscLoop_Sw_DataParams_t*)pDataParams, &payment_context.card_data);
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	3b08      	subs	r3, #8
 8002042:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002046:	4619      	mov	r1, r3
 8002048:	f852 0c4c 	ldr.w	r0, [r2, #-76]
 800204c:	f002 f8e8 	bl	8004220 <EMV_CollectCardBasicInfo>
 8002050:	4603      	mov	r3, r0
 8002052:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002056:	f102 0217 	add.w	r2, r2, #23
 800205a:	7013      	strb	r3, [r2, #0]
    if(result != EMV_SUCCESS) {
 800205c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002060:	f103 0317 	add.w	r3, r3, #23
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d038      	beq.n	80020dc <EMV_ProcessPaymentFlow+0x11c>
        DEBUG_PRINTF("Card basic information collection failed\r\n");
 800206a:	4844      	ldr	r0, [pc, #272]	@ (800217c <EMV_ProcessPaymentFlow+0x1bc>)
 800206c:	f020 f836 	bl	80220dc <puts>
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <EMV_ProcessPaymentFlow+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f01f feea 	bl	8021e50 <fflush>
        return result;
 800207c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002080:	f103 0317 	add.w	r3, r3, #23
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	e06f      	b.n	8002168 <EMV_ProcessPaymentFlow+0x1a8>

    /* 3. Execute state machine until completion or failure */
    while(payment_context.current_state != EMV_STATE_SUCCESS &&
          payment_context.current_state != EMV_STATE_FAILED) {

        result = EMV_Payment_ProcessStateMachine(&payment_context);
 8002088:	f107 0318 	add.w	r3, r7, #24
 800208c:	3b08      	subs	r3, #8
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f836 	bl	8001100 <EMV_Payment_ProcessStateMachine>
 8002094:	4603      	mov	r3, r0
 8002096:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800209a:	f102 0217 	add.w	r2, r2, #23
 800209e:	7013      	strb	r3, [r2, #0]

        if(result != EMV_SUCCESS) {
 80020a0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80020a4:	f103 0317 	add.w	r3, r3, #23
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <EMV_ProcessPaymentFlow+0x114>
            DEBUG_PRINTF("State machine processing failed: %s\r\n",
 80020ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020b2:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe ffac 	bl	8001014 <EMV_Payment_GetStateDescription>
 80020bc:	4603      	mov	r3, r0
 80020be:	4619      	mov	r1, r3
 80020c0:	482f      	ldr	r0, [pc, #188]	@ (8002180 <EMV_ProcessPaymentFlow+0x1c0>)
 80020c2:	f01f ff9b 	bl	8021ffc <iprintf>
 80020c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <EMV_ProcessPaymentFlow+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f01f febf 	bl	8021e50 <fflush>
                        EMV_Payment_GetStateDescription(payment_context.current_state));
            break;
 80020d2:	e00f      	b.n	80020f4 <EMV_ProcessPaymentFlow+0x134>
        }

        /* Add small delay for process observation */
        HAL_Delay(500);
 80020d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020d8:	f01a f964 	bl	801c3a4 <HAL_Delay>
    while(payment_context.current_state != EMV_STATE_SUCCESS &&
 80020dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020e0:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 80020e4:	2b0e      	cmp	r3, #14
 80020e6:	d005      	beq.n	80020f4 <EMV_ProcessPaymentFlow+0x134>
          payment_context.current_state != EMV_STATE_FAILED) {
 80020e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020ec:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
    while(payment_context.current_state != EMV_STATE_SUCCESS &&
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d1c9      	bne.n	8002088 <EMV_ProcessPaymentFlow+0xc8>
    }

    /* 4. Display final result */
    if(payment_context.current_state == EMV_STATE_SUCCESS) {
 80020f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020f8:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 80020fc:	2b0e      	cmp	r3, #14
 80020fe:	d10c      	bne.n	800211a <EMV_ProcessPaymentFlow+0x15a>
        DEBUG_PRINTF("\r\n=== EMV Payment Flow Completed Successfully ===\r\n");
 8002100:	4820      	ldr	r0, [pc, #128]	@ (8002184 <EMV_ProcessPaymentFlow+0x1c4>)
 8002102:	f01f ffeb 	bl	80220dc <puts>
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <EMV_ProcessPaymentFlow+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f01f fe9f 	bl	8021e50 <fflush>
        EMV_ShowSuccessIndication();
 8002112:	f002 fb77 	bl	8004804 <EMV_ShowSuccessIndication>
        return EMV_SUCCESS;
 8002116:	2300      	movs	r3, #0
 8002118:	e026      	b.n	8002168 <EMV_ProcessPaymentFlow+0x1a8>
    } else {
        DEBUG_PRINTF("\r\n=== EMV Payment Flow Failed ===\r\n");
 800211a:	481b      	ldr	r0, [pc, #108]	@ (8002188 <EMV_ProcessPaymentFlow+0x1c8>)
 800211c:	f01f ffde 	bl	80220dc <puts>
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <EMV_ProcessPaymentFlow+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f01f fe92 	bl	8021e50 <fflush>
        DEBUG_PRINTF("Last error: %d, Failed state: %s\r\n",
 800212c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002130:	f893 3ff8 	ldrb.w	r3, [r3, #4088]	@ 0xff8
 8002134:	461c      	mov	r4, r3
 8002136:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800213a:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe ff68 	bl	8001014 <EMV_Payment_GetStateDescription>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	4621      	mov	r1, r4
 800214a:	4810      	ldr	r0, [pc, #64]	@ (800218c <EMV_ProcessPaymentFlow+0x1cc>)
 800214c:	f01f ff56 	bl	8021ffc <iprintf>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <EMV_ProcessPaymentFlow+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4618      	mov	r0, r3
 8002158:	f01f fe7a 	bl	8021e50 <fflush>
                    payment_context.last_error,
                    EMV_Payment_GetStateDescription(payment_context.current_state));
        EMV_ShowFailureIndication();
 800215c:	f002 fb64 	bl	8004828 <EMV_ShowFailureIndication>
        return payment_context.last_error;
 8002160:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002164:	f893 3ff8 	ldrb.w	r3, [r3, #4088]	@ 0xff8
    }
}
 8002168:	4618      	mov	r0, r3
 800216a:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	08024fc8 	.word	0x08024fc8
 8002178:	20000084 	.word	0x20000084
 800217c:	08024fec 	.word	0x08024fec
 8002180:	08025018 	.word	0x08025018
 8002184:	08025040 	.word	0x08025040
 8002188:	08025074 	.word	0x08025074
 800218c:	08025098 	.word	0x08025098

08002190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021a6:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	4a3f      	ldr	r2, [pc, #252]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b2:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	4a39      	ldr	r2, [pc, #228]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ca:	4b37      	ldr	r3, [pc, #220]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	4a33      	ldr	r2, [pc, #204]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4a2d      	ldr	r2, [pc, #180]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fa:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <MX_GPIO_Init+0x118>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800220c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002210:	f01a fce8 	bl	801cbe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_SET);
 8002214:	2201      	movs	r2, #1
 8002216:	2120      	movs	r1, #32
 8002218:	4824      	ldr	r0, [pc, #144]	@ (80022ac <MX_GPIO_Init+0x11c>)
 800221a:	f01a fce3 	bl	801cbe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 800221e:	2302      	movs	r3, #2
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002226:	2301      	movs	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002234:	f01a fa6a 	bl	801c70c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 8002238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f01a fa5a 	bl	801c70c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_IRQ_Pin */
  GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 8002258:	2310      	movs	r3, #16
 800225a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800225c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480f      	ldr	r0, [pc, #60]	@ (80022ac <MX_GPIO_Init+0x11c>)
 800226e:	f01a fa4d 	bl	801c70c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 8002272:	2320      	movs	r3, #32
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4808      	ldr	r0, [pc, #32]	@ (80022ac <MX_GPIO_Init+0x11c>)
 800228a:	f01a fa3f 	bl	801c70c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2105      	movs	r1, #5
 8002292:	200a      	movs	r0, #10
 8002294:	f01a f985 	bl	801c5a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002298:	200a      	movs	r0, #10
 800229a:	f01a f99e 	bl	801c5da <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400

080022b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b4:	f01a f802 	bl	801c2bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b8:	f000 f81a 	bl	80022f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022bc:	f7ff ff68 	bl	8002190 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80022c0:	f000 fc2e 	bl	8002b20 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80022c4:	f000 fb0e 	bl	80028e4 <MX_TIM6_Init>
  MX_TIM1_Init();
 80022c8:	f000 fa30 	bl	800272c <MX_TIM1_Init>
  MX_SPI3_Init();
 80022cc:	f000 f866 	bl	800239c <MX_SPI3_Init>
  MX_TIM2_Init();
 80022d0:	f000 faba 	bl	8002848 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 80022d4:	4805      	ldr	r0, [pc, #20]	@ (80022ec <main+0x3c>)
 80022d6:	f01f ff01 	bl	80220dc <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 80022da:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80022de:	2001      	movs	r0, #1
 80022e0:	f000 fbee 	bl	8002ac0 <beep_start>

  /* 调用NFC Discovery功能*/
  nfc_discovery_main();
 80022e4:	f000 fd1c 	bl	8002d20 <nfc_discovery_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <main+0x38>
 80022ec:	080250bc 	.word	0x080250bc

080022f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b096      	sub	sp, #88	@ 0x58
 80022f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	2244      	movs	r2, #68	@ 0x44
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f01f ffdc 	bl	80222bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
 8002310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002312:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002316:	f01a fcaf 	bl	801cc78 <HAL_PWREx_ControlVoltageScaling>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002320:	f000 f835 	bl	800238e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002324:	2301      	movs	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800232c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232e:	2302      	movs	r3, #2
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002332:	2303      	movs	r3, #3
 8002334:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800233a:	2314      	movs	r3, #20
 800233c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800233e:	2307      	movs	r3, #7
 8002340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002342:	2302      	movs	r3, #2
 8002344:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002346:	2302      	movs	r3, #2
 8002348:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4618      	mov	r0, r3
 8002350:	f01a fce8 	bl	801cd24 <HAL_RCC_OscConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800235a:	f000 f818 	bl	800238e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235e:	230f      	movs	r3, #15
 8002360:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002362:	2303      	movs	r3, #3
 8002364:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002372:	463b      	mov	r3, r7
 8002374:	2104      	movs	r1, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f01b f8e8 	bl	801d54c <HAL_RCC_ClockConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002382:	f000 f804 	bl	800238e <Error_Handler>
  }
}
 8002386:	bf00      	nop
 8002388:	3758      	adds	r7, #88	@ 0x58
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002392:	b672      	cpsid	i
}
 8002394:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002396:	bf00      	nop
 8002398:	e7fd      	b.n	8002396 <Error_Handler+0x8>
	...

0800239c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <MX_SPI3_Init+0x78>)
 80023a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b4:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023bc:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023d2:	2218      	movs	r2, #24
 80023d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80023e8:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023ea:	2207      	movs	r2, #7
 80023ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	@ (8002410 <MX_SPI3_Init+0x74>)
 80023fc:	f01b fdd4 	bl	801dfa8 <HAL_SPI_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002406:	f7ff ffc2 	bl	800238e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000025c 	.word	0x2000025c
 8002414:	40003c00 	.word	0x40003c00

08002418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <HAL_SPI_MspInit+0x7c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d128      	bne.n	800248c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <HAL_SPI_MspInit+0x80>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	4a16      	ldr	r2, [pc, #88]	@ (8002498 <HAL_SPI_MspInit+0x80>)
 8002440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002444:	6593      	str	r3, [r2, #88]	@ 0x58
 8002446:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_SPI_MspInit+0x80>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_SPI_MspInit+0x80>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	4a10      	ldr	r2, [pc, #64]	@ (8002498 <HAL_SPI_MspInit+0x80>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_SPI_MspInit+0x80>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 800246a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800247c:	2306      	movs	r3, #6
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	@ (800249c <HAL_SPI_MspInit+0x84>)
 8002488:	f01a f940 	bl	801c70c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40003c00 	.word	0x40003c00
 8002498:	40021000 	.word	0x40021000
 800249c:	48000800 	.word	0x48000800

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <HAL_MspInit+0x44>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	4a0e      	ldr	r2, [pc, #56]	@ (80024e4 <HAL_MspInit+0x44>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_MspInit+0x44>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_MspInit+0x44>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	4a08      	ldr	r2, [pc, #32]	@ (80024e4 <HAL_MspInit+0x44>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <NMI_Handler+0x4>

080024f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <MemManage_Handler+0x4>

08002500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <UsageFault_Handler+0x4>

08002510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253e:	f019 ff11 	bl	801c364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}

08002546 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PN5180_IRQ_Pin);
 800254a:	2010      	movs	r0, #16
 800254c:	f01a fb62 	bl	801cc14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <TIM2_IRQHandler+0x10>)
 800255a:	f01c fc29 	bl	801edb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000310 	.word	0x20000310

08002568 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <USART1_IRQHandler+0x10>)
 800256e:	f01d fd05 	bl	801ff7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200004b0 	.word	0x200004b0

0800257c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return 1;
 8002580:	2301      	movs	r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_kill>:

int _kill(int pid, int sig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002596:	f01f fee3 	bl	8022360 <__errno>
 800259a:	4603      	mov	r3, r0
 800259c:	2216      	movs	r2, #22
 800259e:	601a      	str	r2, [r3, #0]
  return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_exit>:

void _exit (int status)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ffe7 	bl	800258c <_kill>
  while (1) {}    /* Make sure we hang here */
 80025be:	bf00      	nop
 80025c0:	e7fd      	b.n	80025be <_exit+0x12>

080025c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e00a      	b.n	80025ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d4:	f3af 8000 	nop.w
 80025d8:	4601      	mov	r1, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	60ba      	str	r2, [r7, #8]
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3301      	adds	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dbf0      	blt.n	80025d4 <_read+0x12>
  }

  return len;
 80025f2:	687b      	ldr	r3, [r7, #4]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	e009      	b.n	8002622 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	60ba      	str	r2, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb18 	bl	8002c4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	dbf1      	blt.n	800260e <_write+0x12>
  }
  return len;
 800262a:	687b      	ldr	r3, [r7, #4]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_close>:

int _close(int file)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800265c:	605a      	str	r2, [r3, #4]
  return 0;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_isatty>:

int _isatty(int file)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002674:	2301      	movs	r3, #1
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <_sbrk+0x5c>)
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <_sbrk+0x60>)
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b0:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <_sbrk+0x64>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <_sbrk+0x68>)
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d207      	bcs.n	80026dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026cc:	f01f fe48 	bl	8022360 <__errno>
 80026d0:	4603      	mov	r3, r0
 80026d2:	220c      	movs	r2, #12
 80026d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e009      	b.n	80026f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <_sbrk+0x64>)
 80026ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000c000 	.word	0x2000c000
 80026fc:	00000400 	.word	0x00000400
 8002700:	200002c0 	.word	0x200002c0
 8002704:	20001d58 	.word	0x20001d58

08002708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <SystemInit+0x20>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <SystemInit+0x20>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b096      	sub	sp, #88	@ 0x58
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002732:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	615a      	str	r2, [r3, #20]
 8002750:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	222c      	movs	r2, #44	@ 0x2c
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f01f fdaf 	bl	80222bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800275e:	4b38      	ldr	r3, [pc, #224]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002760:	4a38      	ldr	r2, [pc, #224]	@ (8002844 <MX_TIM1_Init+0x118>)
 8002762:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002764:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002766:	224f      	movs	r2, #79	@ 0x4f
 8002768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <MX_TIM1_Init+0x114>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8002770:	4b33      	ldr	r3, [pc, #204]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002772:	f240 1271 	movw	r2, #369	@ 0x171
 8002776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002778:	4b31      	ldr	r3, [pc, #196]	@ (8002840 <MX_TIM1_Init+0x114>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800277e:	4b30      	ldr	r3, [pc, #192]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002780:	2200      	movs	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b2e      	ldr	r3, [pc, #184]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800278a:	482d      	ldr	r0, [pc, #180]	@ (8002840 <MX_TIM1_Init+0x114>)
 800278c:	f01c f952 	bl	801ea34 <HAL_TIM_PWM_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002796:	f7ff fdfa 	bl	800238e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027aa:	4619      	mov	r1, r3
 80027ac:	4824      	ldr	r0, [pc, #144]	@ (8002840 <MX_TIM1_Init+0x114>)
 80027ae:	f01d f9c5 	bl	801fb3c <HAL_TIMEx_MasterConfigSynchronization>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027b8:	f7ff fde9 	bl	800238e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027bc:	2360      	movs	r3, #96	@ 0x60
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 80027c0:	23b9      	movs	r3, #185	@ 0xb9
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027d8:	220c      	movs	r2, #12
 80027da:	4619      	mov	r1, r3
 80027dc:	4818      	ldr	r0, [pc, #96]	@ (8002840 <MX_TIM1_Init+0x114>)
 80027de:	f01c fbef 	bl	801efc0 <HAL_TIM_PWM_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80027e8:	f7ff fdd1 	bl	800238e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002804:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800280e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002822:	f01d f9f1 	bl	801fc08 <HAL_TIMEx_ConfigBreakDeadTime>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800282c:	f7ff fdaf 	bl	800238e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002830:	4803      	ldr	r0, [pc, #12]	@ (8002840 <MX_TIM1_Init+0x114>)
 8002832:	f000 f8e5 	bl	8002a00 <HAL_TIM_MspPostInit>

}
 8002836:	bf00      	nop
 8002838:	3758      	adds	r7, #88	@ 0x58
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200002c4 	.word	0x200002c4
 8002844:	40012c00 	.word	0x40012c00

08002848 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002866:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002868:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800286c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002870:	224f      	movs	r2, #79	@ 0x4f
 8002872:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <MX_TIM2_Init+0x98>)
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <MX_TIM2_Init+0x98>)
 800288a:	2280      	movs	r2, #128	@ 0x80
 800288c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800288e:	4814      	ldr	r0, [pc, #80]	@ (80028e0 <MX_TIM2_Init+0x98>)
 8002890:	f01b ffb0 	bl	801e7f4 <HAL_TIM_Base_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800289a:	f7ff fd78 	bl	800238e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4619      	mov	r1, r3
 80028aa:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <MX_TIM2_Init+0x98>)
 80028ac:	f01c fc9c 	bl	801f1e8 <HAL_TIM_ConfigClockSource>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028b6:	f7ff fd6a 	bl	800238e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <MX_TIM2_Init+0x98>)
 80028c8:	f01d f938 	bl	801fb3c <HAL_TIMEx_MasterConfigSynchronization>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80028d2:	f7ff fd5c 	bl	800238e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000310 	.word	0x20000310

080028e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028f4:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <MX_TIM6_Init+0x64>)
 80028f6:	4a15      	ldr	r2, [pc, #84]	@ (800294c <MX_TIM6_Init+0x68>)
 80028f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80028fa:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <MX_TIM6_Init+0x64>)
 80028fc:	224f      	movs	r2, #79	@ 0x4f
 80028fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <MX_TIM6_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <MX_TIM6_Init+0x64>)
 8002908:	2201      	movs	r2, #1
 800290a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <MX_TIM6_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002912:	480d      	ldr	r0, [pc, #52]	@ (8002948 <MX_TIM6_Init+0x64>)
 8002914:	f01b ff6e 	bl	801e7f4 <HAL_TIM_Base_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800291e:	f7ff fd36 	bl	800238e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4806      	ldr	r0, [pc, #24]	@ (8002948 <MX_TIM6_Init+0x64>)
 8002930:	f01d f904 	bl	801fb3c <HAL_TIMEx_MasterConfigSynchronization>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800293a:	f7ff fd28 	bl	800238e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000035c 	.word	0x2000035c
 800294c:	40001000 	.word	0x40001000

08002950 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <HAL_TIM_PWM_MspInit+0x38>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10b      	bne.n	800297a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <HAL_TIM_PWM_MspInit+0x3c>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	4a09      	ldr	r2, [pc, #36]	@ (800298c <HAL_TIM_PWM_MspInit+0x3c>)
 8002968:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800296c:	6613      	str	r3, [r2, #96]	@ 0x60
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <HAL_TIM_PWM_MspInit+0x3c>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a0:	d114      	bne.n	80029cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <HAL_TIM_Base_MspInit+0x68>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <HAL_TIM_Base_MspInit+0x68>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ae:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_TIM_Base_MspInit+0x68>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2105      	movs	r1, #5
 80029be:	201c      	movs	r0, #28
 80029c0:	f019 fdef 	bl	801c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029c4:	201c      	movs	r0, #28
 80029c6:	f019 fe08 	bl	801c5da <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80029ca:	e010      	b.n	80029ee <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_TIM_Base_MspInit+0x6c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10b      	bne.n	80029ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <HAL_TIM_Base_MspInit+0x68>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <HAL_TIM_Base_MspInit+0x68>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e2:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_TIM_Base_MspInit+0x68>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40001000 	.word	0x40001000

08002a00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <HAL_TIM_MspPostInit+0x68>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d11d      	bne.n	8002a5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 8002a3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a44:	2302      	movs	r3, #2
 8002a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5a:	f019 fe57 	bl	801c70c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40021000 	.word	0x40021000

08002a70 <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8002a80:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8002a84:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8002a88:	3360      	adds	r3, #96	@ 0x60
 8002a8a:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 8002a8c:	480b      	ldr	r0, [pc, #44]	@ (8002abc <delay_us+0x4c>)
 8002a8e:	f01b ff09 	bl	801e8a4 <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <delay_us+0x4c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	89fa      	ldrh	r2, [r7, #14]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 8002a9a:	e003      	b.n	8002aa4 <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 8002a9c:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <delay_us+0x4c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 8002aa4:	89fb      	ldrh	r3, [r7, #14]
 8002aa6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d9f6      	bls.n	8002a9c <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 8002aae:	4803      	ldr	r0, [pc, #12]	@ (8002abc <delay_us+0x4c>)
 8002ab0:	f01b ff44 	bl	801e93c <HAL_TIM_Base_Stop>
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	2000035c 	.word	0x2000035c

08002ac0 <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	460a      	mov	r2, r1
 8002aca:	71fb      	strb	r3, [r7, #7]
 8002acc:	4613      	mov	r3, r2
 8002ace:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 8002ad0:	e019      	b.n	8002b06 <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 8002ad2:	210c      	movs	r1, #12
 8002ad4:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <beep_start+0x5c>)
 8002ad6:	f01c f805 	bl	801eae4 <HAL_TIM_PWM_Start>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 8002ae0:	f7ff fc55 	bl	800238e <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 8002ae4:	88bb      	ldrh	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f019 fc5c 	bl	801c3a4 <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 8002aec:	210c      	movs	r1, #12
 8002aee:	480b      	ldr	r0, [pc, #44]	@ (8002b1c <beep_start+0x5c>)
 8002af0:	f01c f8d6 	bl	801eca0 <HAL_TIM_PWM_Stop>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 8002afa:	f7ff fc48 	bl	800238e <Error_Handler>
		}
		HAL_Delay(interval);
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f019 fc4f 	bl	801c3a4 <HAL_Delay>
	while( times -- )
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	71fa      	strb	r2, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e0      	bne.n	8002ad2 <beep_start+0x12>
	}
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200002c4 	.word	0x200002c4

08002b20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b26:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <MX_USART1_UART_Init+0x64>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b62:	4807      	ldr	r0, [pc, #28]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b64:	f01d f8e6 	bl	801fd34 <HAL_UART_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b6e:	f7ff fc0e 	bl	800238e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8002b72:	2201      	movs	r2, #1
 8002b74:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <MX_USART1_UART_Init+0x68>)
 8002b76:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <MX_USART1_UART_Init+0x60>)
 8002b78:	f01d f9b4 	bl	801fee4 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200004b0 	.word	0x200004b0
 8002b84:	40013800 	.word	0x40013800
 8002b88:	200003a8 	.word	0x200003a8

08002b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b0a0      	sub	sp, #128	@ 0x80
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	225c      	movs	r2, #92	@ 0x5c
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f01f fb85 	bl	80222bc <memset>
  if(uartHandle->Instance==USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a23      	ldr	r2, [pc, #140]	@ (8002c44 <HAL_UART_MspInit+0xb8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d13f      	bne.n	8002c3c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f01a fee3 	bl	801d994 <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bd4:	f7ff fbdb 	bl	800238e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_UART_MspInit+0xbc>)
 8002bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c48 <HAL_UART_MspInit+0xbc>)
 8002bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002be4:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_UART_MspInit+0xbc>)
 8002be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_UART_MspInit+0xbc>)
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf4:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_UART_MspInit+0xbc>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_UART_MspInit+0xbc>)
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c22:	4619      	mov	r1, r3
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c28:	f019 fd70 	bl	801c70c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2025      	movs	r0, #37	@ 0x25
 8002c32:	f019 fcb6 	bl	801c5a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c36:	2025      	movs	r0, #37	@ 0x25
 8002c38:	f019 fccf 	bl	801c5da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3780      	adds	r7, #128	@ 0x80
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40021000 	.word	0x40021000

08002c4c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002c54:	1d39      	adds	r1, r7, #4
 8002c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <__io_putchar+0x20>)
 8002c5e:	f01d f8b7 	bl	801fdd0 <HAL_UART_Transmit>
	return ch;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200004b0 	.word	0x200004b0

08002c70 <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <HAL_UART_RxCpltCallback+0x44>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d113      	bne.n	8002caa <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 8002c82:	490d      	ldr	r1, [pc, #52]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x48>)
 8002c84:	480d      	ldr	r0, [pc, #52]	@ (8002cbc <HAL_UART_RxCpltCallback+0x4c>)
 8002c86:	f01f f9b9 	bl	8021ffc <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x50>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	b2d1      	uxtb	r1, r2
 8002c92:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x50>)
 8002c94:	7011      	strb	r1, [r2, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_UART_RxCpltCallback+0x54>)
 8002c9a:	7819      	ldrb	r1, [r3, #0]
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_UART_RxCpltCallback+0x48>)
 8002c9e:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <HAL_UART_RxCpltCallback+0x54>)
 8002ca4:	4808      	ldr	r0, [pc, #32]	@ (8002cc8 <HAL_UART_RxCpltCallback+0x58>)
 8002ca6:	f01d f91d 	bl	801fee4 <HAL_UART_Receive_IT>
	}
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	200003ac 	.word	0x200003ac
 8002cbc:	080250e0 	.word	0x080250e0
 8002cc0:	200004ac 	.word	0x200004ac
 8002cc4:	200003a8 	.word	0x200003a8
 8002cc8:	200004b0 	.word	0x200004b0

08002ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cd0:	f7ff fd1a 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd4:	480c      	ldr	r0, [pc, #48]	@ (8002d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cd6:	490d      	ldr	r1, [pc, #52]	@ (8002d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <LoopForever+0xe>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cec:	4c0a      	ldr	r4, [pc, #40]	@ (8002d18 <LoopForever+0x16>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f01f fb37 	bl	802236c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cfe:	f7ff fad7 	bl	80022b0 <main>

08002d02 <LoopForever>:

LoopForever:
    b LoopForever
 8002d02:	e7fe      	b.n	8002d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d04:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8002d10:	0802719c 	.word	0x0802719c
  ldr r2, =_sbss
 8002d14:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002d18:	20001d54 	.word	0x20001d54

08002d1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC1_IRQHandler>
	...

08002d20 <nfc_discovery_main>:
/*******************************************************************************
**   Code
*******************************************************************************/

int nfc_discovery_main(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 8002d26:	237f      	movs	r3, #127	@ 0x7f
 8002d28:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        phNfcLib_AppContext_t AppContext = {0};
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
#ifndef PH_OSAL_NULLOS
        phOsal_ThreadObj_t DiscLoop;
#endif /* PH_OSAL_NULLOS */

        /* 1.CPU初始化：Perform Controller specific initialization. */
        phApp_CPU_Init();
 8002d34:	f002 fa4a 	bl	80051cc <phApp_CPU_Init>

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init(); // STM32的HAL_Ini()中已经配置了Systick，通过HAL_InitTick()，不需要OSAL的定时器

        DEBUG_PRINTF("\n[DiscoveryLoop]: \n");
 8002d38:	484c      	ldr	r0, [pc, #304]	@ (8002e6c <nfc_discovery_main+0x14c>)
 8002d3a:	f01f f9cf 	bl	80220dc <puts>
 8002d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e70 <nfc_discovery_main+0x150>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f01f f883 	bl	8021e50 <fflush>

        /* 3.IC前端初始化 */
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	4849      	ldr	r0, [pc, #292]	@ (8002e74 <nfc_discovery_main+0x154>)
 8002d4e:	f019 f86d 	bl	801be2c <phbalReg_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d56:	8afb      	ldrh	r3, [r7, #22]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <nfc_discovery_main+0x54>
 8002d5c:	8afb      	ldrh	r3, [r7, #22]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2190      	movs	r1, #144	@ 0x90
 8002d62:	4845      	ldr	r0, [pc, #276]	@ (8002e78 <nfc_discovery_main+0x158>)
 8002d64:	f01f f94a 	bl	8021ffc <iprintf>
 8002d68:	4b41      	ldr	r3, [pc, #260]	@ (8002e70 <nfc_discovery_main+0x150>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f01f f86e 	bl	8021e50 <fflush>

        AppContext.pBalDataparams = &sBalParams;
 8002d74:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <nfc_discovery_main+0x154>)
 8002d76:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f005 fdea 	bl	8008954 <phNfcLib_SetContext>
 8002d80:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <nfc_discovery_main+0x7e>
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	2194      	movs	r1, #148	@ 0x94
 8002d8c:	483b      	ldr	r0, [pc, #236]	@ (8002e7c <nfc_discovery_main+0x15c>)
 8002d8e:	f01f f935 	bl	8021ffc <iprintf>
 8002d92:	4b37      	ldr	r3, [pc, #220]	@ (8002e70 <nfc_discovery_main+0x150>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f01f f859 	bl	8021e50 <fflush>
#endif

        /* 4.初始化NFC库：Initialize library */
        dwStatus = phNfcLib_Init();
 8002d9e:	f006 f863 	bl	8008e68 <phNfcLib_Init>
 8002da2:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <nfc_discovery_main+0xa0>
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	2199      	movs	r1, #153	@ 0x99
 8002dae:	4833      	ldr	r0, [pc, #204]	@ (8002e7c <nfc_discovery_main+0x15c>)
 8002db0:	f01f f924 	bl	8021ffc <iprintf>
 8002db4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e70 <nfc_discovery_main+0x150>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f01f f848 	bl	8021e50 <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d142      	bne.n	8002e4c <nfc_discovery_main+0x12c>

        /* 5. 获取关键组件指针：Set the generic pointer */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);			// 硬件抽象层
 8002dc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002dca:	f006 f911 	bl	8008ff0 <phNfcLib_GetDataParams>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e80 <nfc_discovery_main+0x160>)
 8002dd2:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP);	// Discovery Loop 组件
 8002dd4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002dd8:	f006 f90a 	bl	8008ff0 <phNfcLib_GetDataParams>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a29      	ldr	r2, [pc, #164]	@ (8002e84 <nfc_discovery_main+0x164>)
 8002de0:	6013      	str	r3, [r2, #0]

        /* 6.初始化其他组件：Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 8002de2:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <nfc_discovery_main+0x164>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fa02 	bl	80051f0 <phApp_Comp_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002df0:	8afb      	ldrh	r3, [r7, #22]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <nfc_discovery_main+0xee>
 8002df6:	8afb      	ldrh	r3, [r7, #22]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	21a2      	movs	r1, #162	@ 0xa2
 8002dfc:	481e      	ldr	r0, [pc, #120]	@ (8002e78 <nfc_discovery_main+0x158>)
 8002dfe:	f01f f8fd 	bl	8021ffc <iprintf>
 8002e02:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <nfc_discovery_main+0x150>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f01f f821 	bl	8021e50 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8002e0e:	8afb      	ldrh	r3, [r7, #22]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d11d      	bne.n	8002e50 <nfc_discovery_main+0x130>

        /* 7.配置中断：Perform Platform Init */
        status = phApp_Configure_IRQ();
 8002e14:	f002 fa1e 	bl	8005254 <phApp_Configure_IRQ>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002e1c:	8afb      	ldrh	r3, [r7, #22]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <nfc_discovery_main+0x11a>
 8002e22:	8afb      	ldrh	r3, [r7, #22]
 8002e24:	461a      	mov	r2, r3
 8002e26:	21a7      	movs	r1, #167	@ 0xa7
 8002e28:	4813      	ldr	r0, [pc, #76]	@ (8002e78 <nfc_discovery_main+0x158>)
 8002e2a:	f01f f8e7 	bl	8021ffc <iprintf>
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <nfc_discovery_main+0x150>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f01f f80b 	bl	8021e50 <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8002e3a:	8afb      	ldrh	r3, [r7, #22]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <nfc_discovery_main+0x134>
        phOsal_StartScheduler();

        DEBUG_PRINTF("RTOS Error : Scheduler exited. \n");
#else
        /* 8.启动DiscoveryLoop主任务 */
        (void)DiscoveryLoop_Demo(pDiscLoop);
 8002e40:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <nfc_discovery_main+0x164>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f821 	bl	8002e8c <DiscoveryLoop_Demo>
 8002e4a:	e004      	b.n	8002e56 <nfc_discovery_main+0x136>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8002e4c:	bf00      	nop
 8002e4e:	e002      	b.n	8002e56 <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8002e54:	bf00      	nop
#endif
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 8002e56:	bf00      	nop
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <nfc_discovery_main+0x168>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1fa      	bne.n	8002e58 <nfc_discovery_main+0x138>

    return 0;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	080250f8 	.word	0x080250f8
 8002e70:	20000084 	.word	0x20000084
 8002e74:	200008dc 	.word	0x200008dc
 8002e78:	0802510c 	.word	0x0802510c
 8002e7c:	08025174 	.word	0x08025174
 8002e80:	200008e0 	.word	0x200008e0
 8002e84:	20000538 	.word	0x20000538
 8002e88:	20000022 	.word	0x20000022

08002e8c <DiscoveryLoop_Demo>:
* 用于持续检测是否有NFC标签进入天线区域，并报告检测到的NFC技术类型
* \param   pDataParams      The discovery loop data parameters
* \note    This function will never return
*/
void DiscoveryLoop_Demo(void  *pDataParams)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    phStatus_t    status, statustmp;
    uint16_t      wEntryPoint;
    phacDiscLoop_Profile_t bProfile = PHAC_DISCLOOP_PROFILE_UNKNOWN;
 8002e94:	2300      	movs	r3, #0
 8002e96:	757b      	strb	r3, [r7, #21]
    /* This call shall allocate secure context before calling any secure function,
     * when FreeRtos trust zone is enabled.
     * */
//    phOsal_ThreadSecureStack( 512 ); // 这是FreeRTOS Trust Zone相关的，裸机不需要

    DEBUG_PRINTF("Entering Discovery Loop Demo...\r\n");
 8002e98:	489b      	ldr	r0, [pc, #620]	@ (8003108 <DiscoveryLoop_Demo+0x27c>)
 8002e9a:	f01f f91f 	bl	80220dc <puts>
 8002e9e:	4b9b      	ldr	r3, [pc, #620]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f01e ffd3 	bl	8021e50 <fflush>
#ifdef ENABLE_DISC_CONFIG

#ifndef ENABLE_EMVCO_PROF
    bProfile = PHAC_DISCLOOP_PROFILE_NFC;
#else
    bProfile = PHAC_DISCLOOP_PROFILE_EMVCO;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	757b      	strb	r3, [r7, #21]
#endif
    /* Load selected profile for Discovery loop */
    LoadProfile(bProfile);
 8002eae:	7d7b      	ldrb	r3, [r7, #21]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fc57 	bl	8003764 <LoadProfile>
#endif /* ENABLE_DISC_CONFIG */

/* 确保初始化PN5180芯片用于监听模式的参数设置正确 */
#ifdef NXPBUILD__PHHAL_HW_TARGET	// 启用了底层HAL硬件目标平台的支持(PN5180)
    /* Initialize the setting for Listen Mode */
    status = phApp_HALConfigAutoColl();
 8002eb6:	f002 f9e3 	bl	8005280 <phApp_HALConfigAutoColl>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	827b      	strh	r3, [r7, #18]
    CHECK_STATUS(status);
 8002ebe:	8a7b      	ldrh	r3, [r7, #18]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <DiscoveryLoop_Demo+0x50>
 8002ec4:	8a7b      	ldrh	r3, [r7, #18]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	21e5      	movs	r1, #229	@ 0xe5
 8002eca:	4891      	ldr	r0, [pc, #580]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 8002ecc:	f01f f896 	bl	8021ffc <iprintf>
 8002ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f01e ffba 	bl	8021e50 <fflush>
#endif /* NXPBUILD__PHHAL_HW_TARGET */

    /* 2.获取当前的轮询技术支持（例如启用了14443A、15693等）Get Poll Configuration */
    status = phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, &bSavePollTechCfg);
 8002edc:	4a8d      	ldr	r2, [pc, #564]	@ (8003114 <DiscoveryLoop_Demo+0x288>)
 8002ede:	218c      	movs	r1, #140	@ 0x8c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f007 fb09 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	827b      	strh	r3, [r7, #18]
    CHECK_STATUS(status);
 8002eea:	8a7b      	ldrh	r3, [r7, #18]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <DiscoveryLoop_Demo+0x7c>
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	21ea      	movs	r1, #234	@ 0xea
 8002ef6:	4886      	ldr	r0, [pc, #536]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 8002ef8:	f01f f880 	bl	8021ffc <iprintf>
 8002efc:	4b83      	ldr	r3, [pc, #524]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f01e ffa4 	bl	8021e50 <fflush>

    /* 3.设置为轮询而不是监听 Start in poll mode */
    wEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	82fb      	strh	r3, [r7, #22]
    status = PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED;
 8002f0c:	2386      	movs	r3, #134	@ 0x86
 8002f0e:	827b      	strh	r3, [r7, #18]

    /* 4. 关闭射频场，准备进行新一轮发现（防止错误识别）Switch off RF field */
    statustmp = phhalHw_FieldOff(pHal);
 8002f10:	4b81      	ldr	r3, [pc, #516]	@ (8003118 <DiscoveryLoop_Demo+0x28c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00d f873 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	823b      	strh	r3, [r7, #16]
    CHECK_STATUS(statustmp);
 8002f1e:	8a3b      	ldrh	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <DiscoveryLoop_Demo+0xb0>
 8002f24:	8a3b      	ldrh	r3, [r7, #16]
 8002f26:	461a      	mov	r2, r3
 8002f28:	21f2      	movs	r1, #242	@ 0xf2
 8002f2a:	4879      	ldr	r0, [pc, #484]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 8002f2c:	f01f f866 	bl	8021ffc <iprintf>
 8002f30:	4b76      	ldr	r3, [pc, #472]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f01e ff8a 	bl	8021e50 <fflush>

//1    TestRFField();

    while(1)
    {
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8002f3c:	4877      	ldr	r0, [pc, #476]	@ (800311c <DiscoveryLoop_Demo+0x290>)
 8002f3e:	f01f f8cd 	bl	80220dc <puts>
 8002f42:	4b72      	ldr	r3, [pc, #456]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f01e ff81 	bl	8021e50 <fflush>

        /* 每一次轮询开始前将轮询状态设为"检测中"，有些场景中如果上一次卡片未移除，需设置成"removal"状态
         * Before polling set Discovery Poll State to Detection , as later in the code it can be changed to e.g. PHAC_DISCLOOP_POLL_STATE_REMOVAL*/
        statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2184      	movs	r1, #132	@ 0x84
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f006 fe52 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	823b      	strh	r3, [r7, #16]
        CHECK_STATUS(statustmp);
 8002f5c:	8a3b      	ldrh	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <DiscoveryLoop_Demo+0xee>
 8002f62:	8a3b      	ldrh	r3, [r7, #16]
 8002f64:	461a      	mov	r2, r3
 8002f66:	21fe      	movs	r1, #254	@ 0xfe
 8002f68:	4869      	ldr	r0, [pc, #420]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 8002f6a:	f01f f847 	bl	8021ffc <iprintf>
 8002f6e:	4b67      	ldr	r3, [pc, #412]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f01e ff6b 	bl	8021e50 <fflush>
#endif /* PH_EXAMPLE1_LPCD_ENABLE*/

        /* 启动轮询核心函数
         * Start discovery loop */
        /* PROGRAM BLOCK HERE at first, problem is solved */
        status = phacDiscLoop_Run(pDataParams, wEntryPoint);
 8002f7a:	8afb      	ldrh	r3, [r7, #22]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f006 fd69 	bl	8009a58 <phacDiscLoop_Sw_Run>
 8002f86:	4603      	mov	r3, r0
 8002f88:	827b      	strh	r3, [r7, #18]
        /* 输出：0x4080  或者  0x4083, 是否表示错误? 成功检测到卡返回0x408B */
        DEBUG_PRINTF("Discovery result: 0x%04X\r\n", status);
 8002f8a:	8a7b      	ldrh	r3, [r7, #18]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4864      	ldr	r0, [pc, #400]	@ (8003120 <DiscoveryLoop_Demo+0x294>)
 8002f90:	f01f f834 	bl	8021ffc <iprintf>
 8002f94:	4b5d      	ldr	r3, [pc, #372]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f01e ff58 	bl	8021e50 <fflush>

        /* ========== EMV交易处理集成点 ========== */
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 8002fa0:	8a7b      	ldrh	r3, [r7, #18]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b8b      	cmp	r3, #139	@ 0x8b
 8002fa6:	d145      	bne.n	8003034 <DiscoveryLoop_Demo+0x1a8>
        {
            DEBUG_PRINTF("Card activated, checking EMV compatibility\r\n");
 8002fa8:	485e      	ldr	r0, [pc, #376]	@ (8003124 <DiscoveryLoop_Demo+0x298>)
 8002faa:	f01f f897 	bl	80220dc <puts>
 8002fae:	4b57      	ldr	r3, [pc, #348]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f01e ff4b 	bl	8021e50 <fflush>

            /* 检查是否为EMV兼容卡片 */
            if (EMV_IsEMVCompatibleCard(pDataParams))
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f001 f896 	bl	80040ec <EMV_IsEMVCompatibleCard>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02d      	beq.n	8003022 <DiscoveryLoop_Demo+0x196>
            {
                DEBUG_PRINTF("=== EMV Compatible Card Detected, Starting Transaction ===\r\n");
 8002fc6:	4858      	ldr	r0, [pc, #352]	@ (8003128 <DiscoveryLoop_Demo+0x29c>)
 8002fc8:	f01f f888 	bl	80220dc <puts>
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f01e ff3c 	bl	8021e50 <fflush>

                /* 执行EMV交易流程 */
                EMV_Result_t emv_result = EMV_ProcessPaymentFlow(pDataParams, 1000, 0x0156); // 10元人民币
 8002fd8:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8002fdc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe ffed 	bl	8001fc0 <EMV_ProcessPaymentFlow>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	73fb      	strb	r3, [r7, #15]

                if (emv_result == EMV_SUCCESS) {
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <DiscoveryLoop_Demo+0x178>
                    DEBUG_PRINTF("=== EMV Payment Flow Complete Successfully ===\r\n");
 8002ff0:	484e      	ldr	r0, [pc, #312]	@ (800312c <DiscoveryLoop_Demo+0x2a0>)
 8002ff2:	f01f f873 	bl	80220dc <puts>
 8002ff6:	4b45      	ldr	r3, [pc, #276]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f01e ff27 	bl	8021e50 <fflush>
 8003002:	e00a      	b.n	800301a <DiscoveryLoop_Demo+0x18e>
                } else {
                    DEBUG_PRINTF("=== EMV Payment Flow Failed, Error Code: %d ===\r\n", emv_result);
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	4619      	mov	r1, r3
 8003008:	4849      	ldr	r0, [pc, #292]	@ (8003130 <DiscoveryLoop_Demo+0x2a4>)
 800300a:	f01e fff7 	bl	8021ffc <iprintf>
 800300e:	4b3f      	ldr	r3, [pc, #252]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f01e ff1b 	bl	8021e50 <fflush>
                }

                /* 等待卡片移除后继续循环 */
                EMV_WaitForCardRemoval(pDataParams);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f001 f8b2 	bl	8004184 <EMV_WaitForCardRemoval>

                /* 继续下一次轮询 */
                continue;
 8003020:	e070      	b.n	8003104 <DiscoveryLoop_Demo+0x278>
            }
            else
            {
                DEBUG_PRINTF("Non-EMV card, using original processing flow\r\n");
 8003022:	4844      	ldr	r0, [pc, #272]	@ (8003134 <DiscoveryLoop_Demo+0x2a8>)
 8003024:	f01f f85a 	bl	80220dc <puts>
 8003028:	4b38      	ldr	r3, [pc, #224]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f01e ff0e 	bl	8021e50 <fflush>
            }
        }
        /* ========== EMV交易处理集成点结束 ========== */

        if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 8003034:	7d7b      	ldrb	r3, [r7, #21]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d105      	bne.n	8003046 <DiscoveryLoop_Demo+0x1ba>
        {
#if defined(ENABLE_EMVCO_PROF)
            EmvcoProfileProcess(pDataParams, status);
 800303a:	8a7b      	ldrh	r3, [r7, #18]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fc04 	bl	800484c <EmvcoProfileProcess>
 8003044:	e77a      	b.n	8002f3c <DiscoveryLoop_Demo+0xb0>
#endif /* ENABLE_EMVCO_PROF */
        }
        else
        {
            wEntryPoint = NFCForumProcess(wEntryPoint, status);
 8003046:	8a7a      	ldrh	r2, [r7, #18]
 8003048:	8afb      	ldrh	r3, [r7, #22]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f875 	bl	800313c <NFCForumProcess>
 8003052:	4603      	mov	r3, r0
 8003054:	82fb      	strh	r3, [r7, #22]

            /* 恢复轮询设置 Set Poll Configuration */
            statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, bSavePollTechCfg);
 8003056:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <DiscoveryLoop_Demo+0x288>)
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	218c      	movs	r1, #140	@ 0x8c
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f006 fdcc 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	823b      	strh	r3, [r7, #16]
            CHECK_STATUS(statustmp);
 8003068:	8a3b      	ldrh	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <DiscoveryLoop_Demo+0x1fc>
 800306e:	8a3b      	ldrh	r3, [r7, #16]
 8003070:	461a      	mov	r2, r3
 8003072:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8003076:	4826      	ldr	r0, [pc, #152]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 8003078:	f01e ffc0 	bl	8021ffc <iprintf>
 800307c:	4b23      	ldr	r3, [pc, #140]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f01e fee4 	bl	8021e50 <fflush>

            /* 关闭RF场 Switch off RF field */
            statustmp = phhalHw_FieldOff(pHal);
 8003088:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <DiscoveryLoop_Demo+0x28c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f00c ffb7 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 8003092:	4603      	mov	r3, r0
 8003094:	823b      	strh	r3, [r7, #16]
            CHECK_STATUS(statustmp);
 8003096:	8a3b      	ldrh	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <DiscoveryLoop_Demo+0x22a>
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	461a      	mov	r2, r3
 80030a0:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80030a4:	481a      	ldr	r0, [pc, #104]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 80030a6:	f01e ffa9 	bl	8021ffc <iprintf>
 80030aa:	4b18      	ldr	r3, [pc, #96]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f01e fecd 	bl	8021e50 <fflush>

            /* 等待场关闭完成 Wait for field-off time-out */
            statustmp = phhalHw_Wait(pHal, PHHAL_HW_TIME_MICROSECONDS, 5100);
 80030b6:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <DiscoveryLoop_Demo+0x28c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f00c ffc1 	bl	8010048 <phhalHw_Pn5180_Wait>
 80030c6:	4603      	mov	r3, r0
 80030c8:	823b      	strh	r3, [r7, #16]
            CHECK_STATUS(statustmp);	// error
 80030ca:	8a3b      	ldrh	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00c      	beq.n	80030ea <DiscoveryLoop_Demo+0x25e>
 80030d0:	8a3b      	ldrh	r3, [r7, #16]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80030d8:	480d      	ldr	r0, [pc, #52]	@ (8003110 <DiscoveryLoop_Demo+0x284>)
 80030da:	f01e ff8f 	bl	8021ffc <iprintf>
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f01e feb3 	bl	8021e50 <fflush>

            DEBUG_PRINTF("Poll cycle complete, waiting...\r\n");
 80030ea:	4813      	ldr	r0, [pc, #76]	@ (8003138 <DiscoveryLoop_Demo+0x2ac>)
 80030ec:	f01e fff6 	bl	80220dc <puts>
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <DiscoveryLoop_Demo+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f01e feaa 	bl	8021e50 <fflush>
            HAL_Delay(1000);  // 1秒延时，方便观察
 80030fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003100:	f019 f950 	bl	801c3a4 <HAL_Delay>
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8003104:	e71a      	b.n	8002f3c <DiscoveryLoop_Demo+0xb0>
 8003106:	bf00      	nop
 8003108:	080251ac 	.word	0x080251ac
 800310c:	20000084 	.word	0x20000084
 8003110:	0802510c 	.word	0x0802510c
 8003114:	2000053c 	.word	0x2000053c
 8003118:	200008e0 	.word	0x200008e0
 800311c:	080251d0 	.word	0x080251d0
 8003120:	080251e8 	.word	0x080251e8
 8003124:	08025204 	.word	0x08025204
 8003128:	08025230 	.word	0x08025230
 800312c:	0802526c 	.word	0x0802526c
 8003130:	0802529c 	.word	0x0802529c
 8003134:	080252d0 	.word	0x080252d0
 8003138:	08025300 	.word	0x08025300

0800313c <NFCForumProcess>:
 * 1.输出识别到的卡信息
 * 2.执行冲突解决和卡激活
 * 3.决定下一个入口点（轮询Poll 或 监听Listen）
 */
uint16_t NFCForumProcess(uint16_t wEntryPoint, phStatus_t DiscLoopStatus)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	80fb      	strh	r3, [r7, #6]
 8003148:	4613      	mov	r3, r2
 800314a:	80bb      	strh	r3, [r7, #4]
    phStatus_t    status;
    uint16_t      wTechDetected = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	823b      	strh	r3, [r7, #16]
    uint16_t      wNumberOfTags = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	81fb      	strh	r3, [r7, #14]
    uint16_t      wValue;
    uint8_t       bIndex;
    uint16_t      wReturnEntryPoint;

    // 轮询POLL
    if(wEntryPoint == PHAC_DISCLOOP_ENTRY_POINT_POLL)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 826e 	bne.w	8003638 <NFCForumProcess+0x4fc>
    {
    	/* 1.检测到多个技术，选择其中一个，配置冲突解决状态，重新执行POLL */
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_TECH_DETECTED)
 800315c:	88bb      	ldrh	r3, [r7, #4]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b88      	cmp	r3, #136	@ 0x88
 8003162:	f040 80c6 	bne.w	80032f2 <NFCForumProcess+0x1b6>
        {
            DEBUG_PRINTF (" \n Multiple technology detected: \n");
 8003166:	489a      	ldr	r0, [pc, #616]	@ (80033d0 <NFCForumProcess+0x294>)
 8003168:	f01e ffb8 	bl	80220dc <puts>
 800316c:	4b99      	ldr	r3, [pc, #612]	@ (80033d4 <NFCForumProcess+0x298>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f01e fe6c 	bl	8021e50 <fflush>

            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8003178:	4b97      	ldr	r3, [pc, #604]	@ (80033d8 <NFCForumProcess+0x29c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f107 0210 	add.w	r2, r7, #16
 8003180:	2187      	movs	r1, #135	@ 0x87
 8003182:	4618      	mov	r0, r3
 8003184:	f007 f9b8 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 8003188:	4603      	mov	r3, r0
 800318a:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 800318c:	8afb      	ldrh	r3, [r7, #22]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <NFCForumProcess+0x70>
 8003192:	8afb      	ldrh	r3, [r7, #22]
 8003194:	461a      	mov	r2, r3
 8003196:	f240 116d 	movw	r1, #365	@ 0x16d
 800319a:	4890      	ldr	r0, [pc, #576]	@ (80033dc <NFCForumProcess+0x2a0>)
 800319c:	f01e ff2e 	bl	8021ffc <iprintf>
 80031a0:	4b8c      	ldr	r3, [pc, #560]	@ (80033d4 <NFCForumProcess+0x298>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f01e fe52 	bl	8021e50 <fflush>

            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 80031ac:	8a3b      	ldrh	r3, [r7, #16]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <NFCForumProcess+0x8c>
            {
                DEBUG_PRINTF (" \tType A detected... \n");
 80031b6:	488a      	ldr	r0, [pc, #552]	@ (80033e0 <NFCForumProcess+0x2a4>)
 80031b8:	f01e ff90 	bl	80220dc <puts>
 80031bc:	4b85      	ldr	r3, [pc, #532]	@ (80033d4 <NFCForumProcess+0x298>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f01e fe44 	bl	8021e50 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 80031c8:	8a3b      	ldrh	r3, [r7, #16]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <NFCForumProcess+0xa8>
            {
                DEBUG_PRINTF (" \tType B detected... \n");
 80031d2:	4884      	ldr	r0, [pc, #528]	@ (80033e4 <NFCForumProcess+0x2a8>)
 80031d4:	f01e ff82 	bl	80220dc <puts>
 80031d8:	4b7e      	ldr	r3, [pc, #504]	@ (80033d4 <NFCForumProcess+0x298>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f01e fe36 	bl	8021e50 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212))
 80031e4:	8a3b      	ldrh	r3, [r7, #16]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <NFCForumProcess+0xc4>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 212... \n");
 80031ee:	487e      	ldr	r0, [pc, #504]	@ (80033e8 <NFCForumProcess+0x2ac>)
 80031f0:	f01e ff74 	bl	80220dc <puts>
 80031f4:	4b77      	ldr	r3, [pc, #476]	@ (80033d4 <NFCForumProcess+0x298>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f01e fe28 	bl	8021e50 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8003200:	8a3b      	ldrh	r3, [r7, #16]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <NFCForumProcess+0xe0>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 424... \n");
 800320a:	4878      	ldr	r0, [pc, #480]	@ (80033ec <NFCForumProcess+0x2b0>)
 800320c:	f01e ff66 	bl	80220dc <puts>
 8003210:	4b70      	ldr	r3, [pc, #448]	@ (80033d4 <NFCForumProcess+0x298>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f01e fe1a 	bl	8021e50 <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 800321c:	8a3b      	ldrh	r3, [r7, #16]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <NFCForumProcess+0xfc>
            {
                DEBUG_PRINTF(" \tType V / ISO 15693 / T5T detected... \n");
 8003226:	4872      	ldr	r0, [pc, #456]	@ (80033f0 <NFCForumProcess+0x2b4>)
 8003228:	f01e ff58 	bl	80220dc <puts>
 800322c:	4b69      	ldr	r3, [pc, #420]	@ (80033d4 <NFCForumProcess+0x298>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f01e fe0c 	bl	8021e50 <fflush>
            }

            /* Select 1st Detected Technology to Resolve*/
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8003238:	2300      	movs	r3, #0
 800323a:	757b      	strb	r3, [r7, #21]
 800323c:	e029      	b.n	8003292 <NFCForumProcess+0x156>
            {
                if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 800323e:	8a3b      	ldrh	r3, [r7, #16]
 8003240:	461a      	mov	r2, r3
 8003242:	7d7b      	ldrb	r3, [r7, #21]
 8003244:	fa42 f303 	asr.w	r3, r2, r3
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01d      	beq.n	800328c <NFCForumProcess+0x150>
                {
                    /* Configure for one of the detected technology */
                    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (1 << bIndex));
 8003250:	4b61      	ldr	r3, [pc, #388]	@ (80033d8 <NFCForumProcess+0x29c>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	7d7b      	ldrb	r3, [r7, #21]
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	218c      	movs	r1, #140	@ 0x8c
 8003262:	f006 fccb 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003266:	4603      	mov	r3, r0
 8003268:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <NFCForumProcess+0x15e>
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	461a      	mov	r2, r3
 8003274:	f240 118b 	movw	r1, #395	@ 0x18b
 8003278:	4858      	ldr	r0, [pc, #352]	@ (80033dc <NFCForumProcess+0x2a0>)
 800327a:	f01e febf 	bl	8021ffc <iprintf>
 800327e:	4b55      	ldr	r3, [pc, #340]	@ (80033d4 <NFCForumProcess+0x298>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f01e fde3 	bl	8021e50 <fflush>
                    break;
 800328a:	e006      	b.n	800329a <NFCForumProcess+0x15e>
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800328c:	7d7b      	ldrb	r3, [r7, #21]
 800328e:	3301      	adds	r3, #1
 8003290:	757b      	strb	r3, [r7, #21]
 8003292:	7d7b      	ldrb	r3, [r7, #21]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d9d2      	bls.n	800323e <NFCForumProcess+0x102>
 8003298:	e000      	b.n	800329c <NFCForumProcess+0x160>
                    break;
 800329a:	bf00      	nop
                }
            }

            /* Print the technology resolved */
            phApp_PrintTech((1 << bIndex));
 800329c:	7d7b      	ldrb	r3, [r7, #21]
 800329e:	2201      	movs	r2, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 fc7a 	bl	8004ba0 <phApp_PrintTech>

            /* Set Discovery Poll State to collision resolution */
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION);
 80032ac:	4b4a      	ldr	r3, [pc, #296]	@ (80033d8 <NFCForumProcess+0x29c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2202      	movs	r2, #2
 80032b2:	2184      	movs	r1, #132	@ 0x84
 80032b4:	4618      	mov	r0, r3
 80032b6:	f006 fca1 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80032be:	8afb      	ldrh	r3, [r7, #22]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00c      	beq.n	80032de <NFCForumProcess+0x1a2>
 80032c4:	8afb      	ldrh	r3, [r7, #22]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f240 1195 	movw	r1, #405	@ 0x195
 80032cc:	4843      	ldr	r0, [pc, #268]	@ (80033dc <NFCForumProcess+0x2a0>)
 80032ce:	f01e fe95 	bl	8021ffc <iprintf>
 80032d2:	4b40      	ldr	r3, [pc, #256]	@ (80033d4 <NFCForumProcess+0x298>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f01e fdb9 	bl	8021e50 <fflush>

            /* Restart discovery loop in poll mode from collision resolution phase */
            DiscLoopStatus = phacDiscLoop_Run(pDiscLoop, wEntryPoint);
 80032de:	4b3e      	ldr	r3, [pc, #248]	@ (80033d8 <NFCForumProcess+0x29c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f006 fbb5 	bl	8009a58 <phacDiscLoop_Sw_Run>
 80032ee:	4603      	mov	r3, r0
 80032f0:	80bb      	strh	r3, [r7, #4]
        }

        /* 2. 解决了多个设备，获取tag数量、技术类型，激活其中一个卡 */
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED)
 80032f2:	88bb      	ldrh	r3, [r7, #4]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b8a      	cmp	r3, #138	@ 0x8a
 80032f8:	f040 80b5 	bne.w	8003466 <NFCForumProcess+0x32a>
        {
            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80032fc:	4b36      	ldr	r3, [pc, #216]	@ (80033d8 <NFCForumProcess+0x29c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f107 0210 	add.w	r2, r7, #16
 8003304:	2187      	movs	r1, #135	@ 0x87
 8003306:	4618      	mov	r0, r3
 8003308:	f007 f8f6 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 800330c:	4603      	mov	r3, r0
 800330e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8003310:	8afb      	ldrh	r3, [r7, #22]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <NFCForumProcess+0x1f4>
 8003316:	8afb      	ldrh	r3, [r7, #22]
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800331e:	482f      	ldr	r0, [pc, #188]	@ (80033dc <NFCForumProcess+0x2a0>)
 8003320:	f01e fe6c 	bl	8021ffc <iprintf>
 8003324:	4b2b      	ldr	r3, [pc, #172]	@ (80033d4 <NFCForumProcess+0x298>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f01e fd90 	bl	8021e50 <fflush>

            /* Get number of tags detected */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 8003330:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <NFCForumProcess+0x29c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f107 020e 	add.w	r2, r7, #14
 8003338:	2181      	movs	r1, #129	@ 0x81
 800333a:	4618      	mov	r0, r3
 800333c:	f007 f8dc 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <NFCForumProcess+0x228>
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003352:	4822      	ldr	r0, [pc, #136]	@ (80033dc <NFCForumProcess+0x2a0>)
 8003354:	f01e fe52 	bl	8021ffc <iprintf>
 8003358:	4b1e      	ldr	r3, [pc, #120]	@ (80033d4 <NFCForumProcess+0x298>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f01e fd76 	bl	8021e50 <fflush>

            DEBUG_PRINTF (" \n Multiple cards resolved: %d cards \n",wNumberOfTags);
 8003364:	89fb      	ldrh	r3, [r7, #14]
 8003366:	4619      	mov	r1, r3
 8003368:	4822      	ldr	r0, [pc, #136]	@ (80033f4 <NFCForumProcess+0x2b8>)
 800336a:	f01e fe47 	bl	8021ffc <iprintf>
 800336e:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <NFCForumProcess+0x298>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f01e fd6b 	bl	8021e50 <fflush>
            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 800337a:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <NFCForumProcess+0x29c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	89f9      	ldrh	r1, [r7, #14]
 8003380:	8a3a      	ldrh	r2, [r7, #16]
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fca4 	bl	8004cd0 <phApp_PrintTagInfo>

            if(wNumberOfTags > 1)
 8003388:	89fb      	ldrh	r3, [r7, #14]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f240 8151 	bls.w	8003632 <NFCForumProcess+0x4f6>
            {
                /* Get 1st Detected Technology and Activate device at index 0 */
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8003390:	2300      	movs	r3, #0
 8003392:	757b      	strb	r3, [r7, #21]
 8003394:	e035      	b.n	8003402 <NFCForumProcess+0x2c6>
                {
                    if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 8003396:	8a3b      	ldrh	r3, [r7, #16]
 8003398:	461a      	mov	r2, r3
 800339a:	7d7b      	ldrb	r3, [r7, #21]
 800339c:	fa42 f303 	asr.w	r3, r2, r3
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d029      	beq.n	80033fc <NFCForumProcess+0x2c0>
                    {
                        DEBUG_PRINTF("\t Activating one card...\n");
 80033a8:	4813      	ldr	r0, [pc, #76]	@ (80033f8 <NFCForumProcess+0x2bc>)
 80033aa:	f01e fe97 	bl	80220dc <puts>
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <NFCForumProcess+0x298>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f01e fd4b 	bl	8021e50 <fflush>
                        status = phacDiscLoop_ActivateCard(pDiscLoop, bIndex, 0);
 80033ba:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <NFCForumProcess+0x29c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	7d79      	ldrb	r1, [r7, #21]
 80033c0:	2200      	movs	r2, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f007 fb54 	bl	800aa70 <phacDiscLoop_Sw_ActivateCard>
 80033c8:	4603      	mov	r3, r0
 80033ca:	82fb      	strh	r3, [r7, #22]
                        break;
 80033cc:	e01c      	b.n	8003408 <NFCForumProcess+0x2cc>
 80033ce:	bf00      	nop
 80033d0:	08025324 	.word	0x08025324
 80033d4:	20000084 	.word	0x20000084
 80033d8:	20000538 	.word	0x20000538
 80033dc:	0802510c 	.word	0x0802510c
 80033e0:	08025348 	.word	0x08025348
 80033e4:	08025360 	.word	0x08025360
 80033e8:	08025378 	.word	0x08025378
 80033ec:	080253a4 	.word	0x080253a4
 80033f0:	080253d0 	.word	0x080253d0
 80033f4:	080253f8 	.word	0x080253f8
 80033f8:	08025420 	.word	0x08025420
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 80033fc:	7d7b      	ldrb	r3, [r7, #21]
 80033fe:	3301      	adds	r3, #1
 8003400:	757b      	strb	r3, [r7, #21]
 8003402:	7d7b      	ldrb	r3, [r7, #21]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d9c6      	bls.n	8003396 <NFCForumProcess+0x25a>
                    }
                }

                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 8003408:	8afb      	ldrh	r3, [r7, #22]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b8b      	cmp	r3, #139	@ 0x8b
 800340e:	d008      	beq.n	8003422 <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 8003410:	8afb      	ldrh	r3, [r7, #22]
 8003412:	b2db      	uxtb	r3, r3
                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 8003414:	2b8d      	cmp	r3, #141	@ 0x8d
 8003416:	d004      	beq.n	8003422 <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND))
 8003418:	8afb      	ldrh	r3, [r7, #22]
 800341a:	b2db      	uxtb	r3, r3
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 800341c:	2b8e      	cmp	r3, #142	@ 0x8e
 800341e:	f040 8108 	bne.w	8003632 <NFCForumProcess+0x4f6>
                {
                    /* Get Detected Technology Type */
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8003422:	4ba7      	ldr	r3, [pc, #668]	@ (80036c0 <NFCForumProcess+0x584>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f107 0210 	add.w	r2, r7, #16
 800342a:	2187      	movs	r1, #135	@ 0x87
 800342c:	4618      	mov	r0, r3
 800342e:	f007 f863 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 8003432:	4603      	mov	r3, r0
 8003434:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8003436:	8afb      	ldrh	r3, [r7, #22]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00c      	beq.n	8003456 <NFCForumProcess+0x31a>
 800343c:	8afb      	ldrh	r3, [r7, #22]
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8003444:	489f      	ldr	r0, [pc, #636]	@ (80036c4 <NFCForumProcess+0x588>)
 8003446:	f01e fdd9 	bl	8021ffc <iprintf>
 800344a:	4b9f      	ldr	r3, [pc, #636]	@ (80036c8 <NFCForumProcess+0x58c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f01e fcfd 	bl	8021e50 <fflush>

                    phApp_PrintTagInfo(pDiscLoop, 0x01, wTechDetected);
 8003456:	4b9a      	ldr	r3, [pc, #616]	@ (80036c0 <NFCForumProcess+0x584>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	8a3a      	ldrh	r2, [r7, #16]
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f001 fc36 	bl	8004cd0 <phApp_PrintTagInfo>
 8003464:	e0e5      	b.n	8003632 <NFCForumProcess+0x4f6>
                    PRINT_INFO("\t\tCard activation failed...\n");
                }
            }
            /* Switch to LISTEN mode after POLL mode */
        }
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 8003466:	88bb      	ldrh	r3, [r7, #4]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b84      	cmp	r3, #132	@ 0x84
 800346c:	f000 80e1 	beq.w	8003632 <NFCForumProcess+0x4f6>
                ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_DEVICE_RESOLVED))
 8003470:	88bb      	ldrh	r3, [r7, #4]
 8003472:	b2db      	uxtb	r3, r3
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 8003474:	2b85      	cmp	r3, #133	@ 0x85
 8003476:	f000 80dc 	beq.w	8003632 <NFCForumProcess+0x4f6>
        {
            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFON)
 800347a:	88bb      	ldrh	r3, [r7, #4]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b82      	cmp	r3, #130	@ 0x82
 8003480:	f000 80d7 	beq.w	8003632 <NFCForumProcess+0x4f6>
            /*
             * If external RF is detected during POLL, return back so that the application
             * can restart the loop in LISTEN mode
             */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b8e      	cmp	r3, #142	@ 0x8e
 800348a:	d12a      	bne.n	80034e2 <NFCForumProcess+0x3a6>
        {
            DEBUG_PRINTF (" \n Device having T4T and NFC-DEP support detected... \n");
 800348c:	488f      	ldr	r0, [pc, #572]	@ (80036cc <NFCForumProcess+0x590>)
 800348e:	f01e fe25 	bl	80220dc <puts>
 8003492:	4b8d      	ldr	r3, [pc, #564]	@ (80036c8 <NFCForumProcess+0x58c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f01e fcd9 	bl	8021e50 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <NFCForumProcess+0x584>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f107 0210 	add.w	r2, r7, #16
 80034a6:	2187      	movs	r1, #135	@ 0x87
 80034a8:	4618      	mov	r0, r3
 80034aa:	f007 f825 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 80034ae:	4603      	mov	r3, r0
 80034b0:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80034b2:	8afb      	ldrh	r3, [r7, #22]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00c      	beq.n	80034d2 <NFCForumProcess+0x396>
 80034b8:	8afb      	ldrh	r3, [r7, #22]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80034c0:	4880      	ldr	r0, [pc, #512]	@ (80036c4 <NFCForumProcess+0x588>)
 80034c2:	f01e fd9b 	bl	8021ffc <iprintf>
 80034c6:	4b80      	ldr	r3, [pc, #512]	@ (80036c8 <NFCForumProcess+0x58c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f01e fcbf 	bl	8021e50 <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 80034d2:	4b7b      	ldr	r3, [pc, #492]	@ (80036c0 <NFCForumProcess+0x584>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	8a3a      	ldrh	r2, [r7, #16]
 80034d8:	2101      	movs	r1, #1
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fbf8 	bl	8004cd0 <phApp_PrintTagInfo>
 80034e0:	e0a7      	b.n	8003632 <NFCForumProcess+0x4f6>

        /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 80034e2:	88bb      	ldrh	r3, [r7, #4]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b8b      	cmp	r3, #139	@ 0x8b
 80034e8:	d144      	bne.n	8003574 <NFCForumProcess+0x438>
        {
            DEBUG_PRINTF (" \n Card detected and activated successfully... \n");
 80034ea:	4879      	ldr	r0, [pc, #484]	@ (80036d0 <NFCForumProcess+0x594>)
 80034ec:	f01e fdf6 	bl	80220dc <puts>
 80034f0:	4b75      	ldr	r3, [pc, #468]	@ (80036c8 <NFCForumProcess+0x58c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f01e fcaa 	bl	8021e50 <fflush>
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 80034fc:	4b70      	ldr	r3, [pc, #448]	@ (80036c0 <NFCForumProcess+0x584>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f107 020e 	add.w	r2, r7, #14
 8003504:	2181      	movs	r1, #129	@ 0x81
 8003506:	4618      	mov	r0, r3
 8003508:	f006 fff6 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8003510:	8afb      	ldrh	r3, [r7, #22]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <NFCForumProcess+0x3f4>
 8003516:	8afb      	ldrh	r3, [r7, #22]
 8003518:	461a      	mov	r2, r3
 800351a:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800351e:	4869      	ldr	r0, [pc, #420]	@ (80036c4 <NFCForumProcess+0x588>)
 8003520:	f01e fd6c 	bl	8021ffc <iprintf>
 8003524:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <NFCForumProcess+0x58c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f01e fc90 	bl	8021e50 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8003530:	4b63      	ldr	r3, [pc, #396]	@ (80036c0 <NFCForumProcess+0x584>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f107 0210 	add.w	r2, r7, #16
 8003538:	2187      	movs	r1, #135	@ 0x87
 800353a:	4618      	mov	r0, r3
 800353c:	f006 ffdc 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 8003540:	4603      	mov	r3, r0
 8003542:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8003544:	8afb      	ldrh	r3, [r7, #22]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <NFCForumProcess+0x428>
 800354a:	8afb      	ldrh	r3, [r7, #22]
 800354c:	461a      	mov	r2, r3
 800354e:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8003552:	485c      	ldr	r0, [pc, #368]	@ (80036c4 <NFCForumProcess+0x588>)
 8003554:	f01e fd52 	bl	8021ffc <iprintf>
 8003558:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <NFCForumProcess+0x58c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f01e fc76 	bl	8021e50 <fflush>

            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 8003564:	4b56      	ldr	r3, [pc, #344]	@ (80036c0 <NFCForumProcess+0x584>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	89f9      	ldrh	r1, [r7, #14]
 800356a:	8a3a      	ldrh	r2, [r7, #16]
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fbaf 	bl	8004cd0 <phApp_PrintTagInfo>
 8003572:	e05e      	b.n	8003632 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED)
 8003574:	88bb      	ldrh	r3, [r7, #4]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b8c      	cmp	r3, #140	@ 0x8c
 800357a:	d109      	bne.n	8003590 <NFCForumProcess+0x454>
        {
            DEBUG_PRINTF (" \n Active target detected... \n");
 800357c:	4855      	ldr	r0, [pc, #340]	@ (80036d4 <NFCForumProcess+0x598>)
 800357e:	f01e fdad 	bl	80220dc <puts>
 8003582:	4b51      	ldr	r3, [pc, #324]	@ (80036c8 <NFCForumProcess+0x58c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f01e fc61 	bl	8021e50 <fflush>
 800358e:	e050      	b.n	8003632 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED)
 8003590:	88bb      	ldrh	r3, [r7, #4]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b8d      	cmp	r3, #141	@ 0x8d
 8003596:	d12a      	bne.n	80035ee <NFCForumProcess+0x4b2>
        {
            DEBUG_PRINTF (" \n Passive target detected... \n");
 8003598:	484f      	ldr	r0, [pc, #316]	@ (80036d8 <NFCForumProcess+0x59c>)
 800359a:	f01e fd9f 	bl	80220dc <puts>
 800359e:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <NFCForumProcess+0x58c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f01e fc53 	bl	8021e50 <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80035aa:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <NFCForumProcess+0x584>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f107 0210 	add.w	r2, r7, #16
 80035b2:	2187      	movs	r1, #135	@ 0x87
 80035b4:	4618      	mov	r0, r3
 80035b6:	f006 ff9f 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 80035ba:	4603      	mov	r3, r0
 80035bc:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <NFCForumProcess+0x4a2>
 80035c4:	8afb      	ldrh	r3, [r7, #22]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f240 11f9 	movw	r1, #505	@ 0x1f9
 80035cc:	483d      	ldr	r0, [pc, #244]	@ (80036c4 <NFCForumProcess+0x588>)
 80035ce:	f01e fd15 	bl	8021ffc <iprintf>
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <NFCForumProcess+0x58c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f01e fc39 	bl	8021e50 <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 80035de:	4b38      	ldr	r3, [pc, #224]	@ (80036c0 <NFCForumProcess+0x584>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	8a3a      	ldrh	r2, [r7, #16]
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fb72 	bl	8004cd0 <phApp_PrintTagInfo>
 80035ec:	e021      	b.n	8003632 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED)
 80035ee:	88bb      	ldrh	r3, [r7, #4]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b86      	cmp	r3, #134	@ 0x86
 80035f4:	d01d      	beq.n	8003632 <NFCForumProcess+0x4f6>
        {
            /* LPCD is succeed but no tag is detected. */
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 80035f6:	88bb      	ldrh	r3, [r7, #4]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b80      	cmp	r3, #128	@ 0x80
 80035fc:	d119      	bne.n	8003632 <NFCForumProcess+0x4f6>
            {
                status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 80035fe:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <NFCForumProcess+0x584>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f107 020c 	add.w	r2, r7, #12
 8003606:	2185      	movs	r1, #133	@ 0x85
 8003608:	4618      	mov	r0, r3
 800360a:	f006 ff75 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 800360e:	4603      	mov	r3, r0
 8003610:	82fb      	strh	r3, [r7, #22]
                CHECK_STATUS(status);
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <NFCForumProcess+0x4f6>
 8003618:	8afb      	ldrh	r3, [r7, #22]
 800361a:	461a      	mov	r2, r3
 800361c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003620:	4828      	ldr	r0, [pc, #160]	@ (80036c4 <NFCForumProcess+0x588>)
 8003622:	f01e fceb 	bl	8021ffc <iprintf>
 8003626:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <NFCForumProcess+0x58c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4618      	mov	r0, r3
 800362e:	f01e fc0f 	bl	8021e50 <fflush>
                DEBUG_ERROR_PRINT(PrintErrorInfo(status));
            }
        }

        /* Update the Entry point to LISTEN mode. */
        wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 8003632:	2301      	movs	r3, #1
 8003634:	827b      	strh	r3, [r7, #18]
 8003636:	e088      	b.n	800374a <NFCForumProcess+0x60e>

    }
    else
    {
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFOFF)
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b83      	cmp	r3, #131	@ 0x83
 800363e:	d152      	bne.n	80036e6 <NFCForumProcess+0x5aa>
            /*
             * Enters here if in the target/card mode and external RF is not available
             * Wait for LISTEN timeout till an external RF is detected.
             * Application may choose to go into standby at this point.
             */
            status = phhalHw_EventConsume(pHal);
 8003640:	4b26      	ldr	r3, [pc, #152]	@ (80036dc <NFCForumProcess+0x5a0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f00f fba3 	bl	8012d90 <phhalHw_Pn5180_EventConsume>
 800364a:	4603      	mov	r3, r0
 800364c:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 800364e:	8afb      	ldrh	r3, [r7, #22]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <NFCForumProcess+0x532>
 8003654:	8afb      	ldrh	r3, [r7, #22]
 8003656:	461a      	mov	r2, r3
 8003658:	f240 211f 	movw	r1, #543	@ 0x21f
 800365c:	4819      	ldr	r0, [pc, #100]	@ (80036c4 <NFCForumProcess+0x588>)
 800365e:	f01e fccd 	bl	8021ffc <iprintf>
 8003662:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <NFCForumProcess+0x58c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f01e fbf1 	bl	8021e50 <fflush>

            status = phhalHw_SetConfig(pHal, PHHAL_HW_CONFIG_RFON_INTERRUPT, PH_ON);
 800366e:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <NFCForumProcess+0x5a0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	2157      	movs	r1, #87	@ 0x57
 8003676:	4618      	mov	r0, r3
 8003678:	f00c fda2 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800367c:	4603      	mov	r3, r0
 800367e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8003680:	8afb      	ldrh	r3, [r7, #22]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <NFCForumProcess+0x564>
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	461a      	mov	r2, r3
 800368a:	f240 2122 	movw	r1, #546	@ 0x222
 800368e:	480d      	ldr	r0, [pc, #52]	@ (80036c4 <NFCForumProcess+0x588>)
 8003690:	f01e fcb4 	bl	8021ffc <iprintf>
 8003694:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <NFCForumProcess+0x58c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f01e fbd8 	bl	8021e50 <fflush>

            status = phhalHw_EventWait(pHal, LISTEN_PHASE_TIME_MS);
 80036a0:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <NFCForumProcess+0x5a0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80036a8:	4618      	mov	r0, r3
 80036aa:	f00f fb57 	bl	8012d5c <phhalHw_Pn5180_EventWait>
 80036ae:	4603      	mov	r3, r0
 80036b0:	82fb      	strh	r3, [r7, #22]
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80036b2:	8afb      	ldrh	r3, [r7, #22]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d112      	bne.n	80036e0 <NFCForumProcess+0x5a4>
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	827b      	strh	r3, [r7, #18]
 80036be:	e044      	b.n	800374a <NFCForumProcess+0x60e>
 80036c0:	20000538 	.word	0x20000538
 80036c4:	0802510c 	.word	0x0802510c
 80036c8:	20000084 	.word	0x20000084
 80036cc:	0802543c 	.word	0x0802543c
 80036d0:	08025474 	.word	0x08025474
 80036d4:	080254a4 	.word	0x080254a4
 80036d8:	080254c4 	.word	0x080254c4
 80036dc:	200008e0 	.word	0x200008e0
            }
            else
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 80036e0:	2301      	movs	r3, #1
 80036e2:	827b      	strh	r3, [r7, #18]
 80036e4:	e031      	b.n	800374a <NFCForumProcess+0x60e>
            }
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVATED_BY_PEER)
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b8f      	cmp	r3, #143	@ 0x8f
 80036ec:	d109      	bne.n	8003702 <NFCForumProcess+0x5c6>
            {
                DEBUG_PRINTF (" \n Device activated in listen mode... \n");
 80036ee:	4819      	ldr	r0, [pc, #100]	@ (8003754 <NFCForumProcess+0x618>)
 80036f0:	f01e fcf4 	bl	80220dc <puts>
 80036f4:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <NFCForumProcess+0x61c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f01e fba8 	bl	8021e50 <fflush>
 8003700:	e021      	b.n	8003746 <NFCForumProcess+0x60a>
            }
            else if ((DiscLoopStatus & PH_ERR_MASK) == PH_ERR_INVALID_PARAMETER)
 8003702:	88bb      	ldrh	r3, [r7, #4]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b21      	cmp	r3, #33	@ 0x21
 8003708:	d01d      	beq.n	8003746 <NFCForumProcess+0x60a>
                /* In case of Front end used is RC663, then listen mode is not supported.
                 * Switch from listen mode to poll mode. */
            }
            else
            {
                if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 800370a:	88bb      	ldrh	r3, [r7, #4]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d119      	bne.n	8003746 <NFCForumProcess+0x60a>
                {
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 8003712:	4b12      	ldr	r3, [pc, #72]	@ (800375c <NFCForumProcess+0x620>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f107 020c 	add.w	r2, r7, #12
 800371a:	2185      	movs	r1, #133	@ 0x85
 800371c:	4618      	mov	r0, r3
 800371e:	f006 feeb 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 8003722:	4603      	mov	r3, r0
 8003724:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <NFCForumProcess+0x60a>
 800372c:	8afb      	ldrh	r3, [r7, #22]
 800372e:	461a      	mov	r2, r3
 8003730:	f240 213e 	movw	r1, #574	@ 0x23e
 8003734:	480a      	ldr	r0, [pc, #40]	@ (8003760 <NFCForumProcess+0x624>)
 8003736:	f01e fc61 	bl	8021ffc <iprintf>
 800373a:	4b07      	ldr	r3, [pc, #28]	@ (8003758 <NFCForumProcess+0x61c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f01e fb85 	bl	8021e50 <fflush>
                    DEBUG_ERROR_PRINT(PrintErrorInfo(status));
                }
            }

            /* On successful activated by Peer, switch to LISTEN mode */
            wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8003746:	2300      	movs	r3, #0
 8003748:	827b      	strh	r3, [r7, #18]
        }
    }
    return wReturnEntryPoint;
 800374a:	8a7b      	ldrh	r3, [r7, #18]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	080254e4 	.word	0x080254e4
 8003758:	20000084 	.word	0x20000084
 800375c:	20000538 	.word	0x20000538
 8003760:	0802510c 	.word	0x0802510c

08003764 <LoadProfile>:
* 根据给定的NFC 配置 profile（如 NFC Forum 或 EMVCo）为 Discovery Loop 加载默认的轮询参数、通信协议支持位图、超时设置等
* \param   bProfile      Reader Library Profile
* \note    Values used below are default and is for demonstration purpose.
*/
static phStatus_t LoadProfile(phacDiscLoop_Profile_t bProfile)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
    phStatus_t status = PH_ERR_SUCCESS;
 800376e:	2300      	movs	r3, #0
 8003770:	82fb      	strh	r3, [r7, #22]
    uint16_t   wPasPollConfig = 0;	// 被动轮询技术掩码（如TypeA/B/F/V）
 8003772:	2300      	movs	r3, #0
 8003774:	82bb      	strh	r3, [r7, #20]
    uint16_t   wActPollConfig = 0;	// 主动轮询技术掩码（如P2P 106/212/424kbps）
 8003776:	2300      	movs	r3, #0
 8003778:	827b      	strh	r3, [r7, #18]
    uint16_t   wPasLisConfig = 0;	// 被动监听模式支持（当设备作为被动Tag）
 800377a:	2300      	movs	r3, #0
 800377c:	823b      	strh	r3, [r7, #16]
    uint16_t   wActLisConfig = 0;	// 主动监听模式支持（设备作为主动P2P目标）
 800377e:	2300      	movs	r3, #0
 8003780:	81fb      	strh	r3, [r7, #14]

/* 1.通过一系列#ifdef宏, 构建这几个变量的位图. 即哪些协议被支持, 就把对应的bit位置为1 */
/* 1.1 被动轮询技术掩码 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8003782:	8abb      	ldrh	r3, [r7, #20]
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800378a:	8abb      	ldrh	r3, [r7, #20]
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    wPasPollConfig |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 8003792:	8abb      	ldrh	r3, [r7, #20]
 8003794:	f043 030c 	orr.w	r3, r3, #12
 8003798:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800379a:	8abb      	ldrh	r3, [r7, #20]
 800379c:	f043 0310 	orr.w	r3, r3, #16
 80037a0:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 80037a2:	8abb      	ldrh	r3, [r7, #20]
 80037a4:	f043 0320 	orr.w	r3, r3, #32
 80037a8:	82bb      	strh	r3, [r7, #20]
#endif

/* 1.2 主动轮询技术掩码 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_106;
 80037aa:	8a7b      	ldrh	r3, [r7, #18]
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212;
 80037b2:	8a7b      	ldrh	r3, [r7, #18]
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424;
 80037ba:	8a7b      	ldrh	r3, [r7, #18]
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	827b      	strh	r3, [r7, #18]
#endif

/* 1.3 被动监听模式支持 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80037c2:	8a3b      	ldrh	r3, [r7, #16]
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80037ca:	8a3b      	ldrh	r3, [r7, #16]
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80037d2:	8a3b      	ldrh	r3, [r7, #16]
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	823b      	strh	r3, [r7, #16]
#endif

/* 1.4 主动监听模式支持 */
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80037da:	89fb      	ldrh	r3, [r7, #14]
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80037e2:	89fb      	ldrh	r3, [r7, #14]
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	81fb      	strh	r3, [r7, #14]
#endif

/* 2. 根据配置 Profile 加载对应参数 */
    if(bProfile == PHAC_DISCLOOP_PROFILE_NFC)
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 8209 	bne.w	8003c0c <LoadProfile+0x4a8>
    {
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 80037fa:	4baf      	ldr	r3, [pc, #700]	@ (8003ab8 <LoadProfile+0x354>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	2186      	movs	r1, #134	@ 0x86
 8003802:	4618      	mov	r0, r3
 8003804:	f006 f9fa 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800380c:	8afb      	ldrh	r3, [r7, #22]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <LoadProfile+0xc8>
 8003812:	8afb      	ldrh	r3, [r7, #22]
 8003814:	461a      	mov	r2, r3
 8003816:	f240 2196 	movw	r1, #662	@ 0x296
 800381a:	48a8      	ldr	r0, [pc, #672]	@ (8003abc <LoadProfile+0x358>)
 800381c:	f01e fbee 	bl	8021ffc <iprintf>
 8003820:	4ba7      	ldr	r3, [pc, #668]	@ (8003ac0 <LoadProfile+0x35c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f01e fb12 	bl	8021e50 <fflush>

        /* Set Passive poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, wPasPollConfig);
 800382c:	4ba2      	ldr	r3, [pc, #648]	@ (8003ab8 <LoadProfile+0x354>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	8aba      	ldrh	r2, [r7, #20]
 8003832:	218c      	movs	r1, #140	@ 0x8c
 8003834:	4618      	mov	r0, r3
 8003836:	f006 f9e1 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800383a:	4603      	mov	r3, r0
 800383c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800383e:	8afb      	ldrh	r3, [r7, #22]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00c      	beq.n	800385e <LoadProfile+0xfa>
 8003844:	8afb      	ldrh	r3, [r7, #22]
 8003846:	461a      	mov	r2, r3
 8003848:	f240 219a 	movw	r1, #666	@ 0x29a
 800384c:	489b      	ldr	r0, [pc, #620]	@ (8003abc <LoadProfile+0x358>)
 800384e:	f01e fbd5 	bl	8021ffc <iprintf>
 8003852:	4b9b      	ldr	r3, [pc, #620]	@ (8003ac0 <LoadProfile+0x35c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f01e faf9 	bl	8021e50 <fflush>

        /* Set Active poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, wActPollConfig);
 800385e:	4b96      	ldr	r3, [pc, #600]	@ (8003ab8 <LoadProfile+0x354>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	8a7a      	ldrh	r2, [r7, #18]
 8003864:	218a      	movs	r1, #138	@ 0x8a
 8003866:	4618      	mov	r0, r3
 8003868:	f006 f9c8 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800386c:	4603      	mov	r3, r0
 800386e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <LoadProfile+0x12c>
 8003876:	8afb      	ldrh	r3, [r7, #22]
 8003878:	461a      	mov	r2, r3
 800387a:	f240 219e 	movw	r1, #670	@ 0x29e
 800387e:	488f      	ldr	r0, [pc, #572]	@ (8003abc <LoadProfile+0x358>)
 8003880:	f01e fbbc 	bl	8021ffc <iprintf>
 8003884:	4b8e      	ldr	r3, [pc, #568]	@ (8003ac0 <LoadProfile+0x35c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f01e fae0 	bl	8021e50 <fflush>

        /* Set Passive listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, wPasLisConfig);
 8003890:	4b89      	ldr	r3, [pc, #548]	@ (8003ab8 <LoadProfile+0x354>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	8a3a      	ldrh	r2, [r7, #16]
 8003896:	218b      	movs	r1, #139	@ 0x8b
 8003898:	4618      	mov	r0, r3
 800389a:	f006 f9af 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80038a2:	8afb      	ldrh	r3, [r7, #22]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <LoadProfile+0x15e>
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f240 21a2 	movw	r1, #674	@ 0x2a2
 80038b0:	4882      	ldr	r0, [pc, #520]	@ (8003abc <LoadProfile+0x358>)
 80038b2:	f01e fba3 	bl	8021ffc <iprintf>
 80038b6:	4b82      	ldr	r3, [pc, #520]	@ (8003ac0 <LoadProfile+0x35c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4618      	mov	r0, r3
 80038be:	f01e fac7 	bl	8021e50 <fflush>

        /* Set Active listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, wActLisConfig);
 80038c2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab8 <LoadProfile+0x354>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	89fa      	ldrh	r2, [r7, #14]
 80038c8:	2189      	movs	r1, #137	@ 0x89
 80038ca:	4618      	mov	r0, r3
 80038cc:	f006 f996 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 80038d0:	4603      	mov	r3, r0
 80038d2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80038d4:	8afb      	ldrh	r3, [r7, #22]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <LoadProfile+0x190>
 80038da:	8afb      	ldrh	r3, [r7, #22]
 80038dc:	461a      	mov	r2, r3
 80038de:	f240 21a6 	movw	r1, #678	@ 0x2a6
 80038e2:	4876      	ldr	r0, [pc, #472]	@ (8003abc <LoadProfile+0x358>)
 80038e4:	f01e fb8a 	bl	8021ffc <iprintf>
 80038e8:	4b75      	ldr	r3, [pc, #468]	@ (8003ac0 <LoadProfile+0x35c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f01e faae 	bl	8021e50 <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 80038f4:	4b70      	ldr	r3, [pc, #448]	@ (8003ab8 <LoadProfile+0x354>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2183      	movs	r1, #131	@ 0x83
 80038fc:	4618      	mov	r0, r3
 80038fe:	f006 f97d 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003902:	4603      	mov	r3, r0
 8003904:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <LoadProfile+0x1c2>
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	461a      	mov	r2, r3
 8003910:	f240 21aa 	movw	r1, #682	@ 0x2aa
 8003914:	4869      	ldr	r0, [pc, #420]	@ (8003abc <LoadProfile+0x358>)
 8003916:	f01e fb71 	bl	8021ffc <iprintf>
 800391a:	4b69      	ldr	r3, [pc, #420]	@ (8003ac0 <LoadProfile+0x35c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f01e fa95 	bl	8021e50 <fflush>

        /* whether anti-collision is supported or not. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8003926:	4b64      	ldr	r3, [pc, #400]	@ (8003ab8 <LoadProfile+0x354>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	2188      	movs	r1, #136	@ 0x88
 800392e:	4618      	mov	r0, r3
 8003930:	f006 f964 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003934:	4603      	mov	r3, r0
 8003936:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003938:	8afb      	ldrh	r3, [r7, #22]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <LoadProfile+0x1f4>
 800393e:	8afb      	ldrh	r3, [r7, #22]
 8003940:	461a      	mov	r2, r3
 8003942:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8003946:	485d      	ldr	r0, [pc, #372]	@ (8003abc <LoadProfile+0x358>)
 8003948:	f01e fb58 	bl	8021ffc <iprintf>
 800394c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac0 <LoadProfile+0x35c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f01e fa7c 	bl	8021e50 <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8003958:	4b57      	ldr	r3, [pc, #348]	@ (8003ab8 <LoadProfile+0x354>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	2184      	movs	r1, #132	@ 0x84
 8003960:	4618      	mov	r0, r3
 8003962:	f006 f94b 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003966:	4603      	mov	r3, r0
 8003968:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <LoadProfile+0x226>
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	461a      	mov	r2, r3
 8003974:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8003978:	4850      	ldr	r0, [pc, #320]	@ (8003abc <LoadProfile+0x358>)
 800397a:	f01e fb3f 	bl	8021ffc <iprintf>
 800397e:	4b50      	ldr	r3, [pc, #320]	@ (8003ac0 <LoadProfile+0x35c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f01e fa63 	bl	8021e50 <fflush>

#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 800398a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <LoadProfile+0x354>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	2110      	movs	r1, #16
 8003992:	4618      	mov	r0, r3
 8003994:	f006 f932 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003998:	4603      	mov	r3, r0
 800399a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800399c:	8afb      	ldrh	r3, [r7, #22]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <LoadProfile+0x258>
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	461a      	mov	r2, r3
 80039a6:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80039aa:	4844      	ldr	r0, [pc, #272]	@ (8003abc <LoadProfile+0x358>)
 80039ac:	f01e fb26 	bl	8021ffc <iprintf>
 80039b0:	4b43      	ldr	r3, [pc, #268]	@ (8003ac0 <LoadProfile+0x35c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f01e fa4a 	bl	8021e50 <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 80039bc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab8 <LoadProfile+0x354>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f006 f918 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 80039cc:	4603      	mov	r3, r0
 80039ce:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80039d0:	8afb      	ldrh	r3, [r7, #22]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <LoadProfile+0x28c>
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	461a      	mov	r2, r3
 80039da:	f240 21bb 	movw	r1, #699	@ 0x2bb
 80039de:	4837      	ldr	r0, [pc, #220]	@ (8003abc <LoadProfile+0x358>)
 80039e0:	f01e fb0c 	bl	8021ffc <iprintf>
 80039e4:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <LoadProfile+0x35c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f01e fa30 	bl	8021e50 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 80039f0:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <LoadProfile+0x354>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2201      	movs	r2, #1
 80039f6:	2111      	movs	r1, #17
 80039f8:	4618      	mov	r0, r3
 80039fa:	f006 f8ff 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 80039fe:	4603      	mov	r3, r0
 8003a00:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <LoadProfile+0x2be>
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8003a10:	482a      	ldr	r0, [pc, #168]	@ (8003abc <LoadProfile+0x358>)
 8003a12:	f01e faf3 	bl	8021ffc <iprintf>
 8003a16:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <LoadProfile+0x35c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f01e fa17 	bl	8021e50 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <LoadProfile+0x354>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f006 f8e5 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003a36:	8afb      	ldrh	r3, [r7, #22]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00c      	beq.n	8003a56 <LoadProfile+0x2f2>
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8003a44:	481d      	ldr	r0, [pc, #116]	@ (8003abc <LoadProfile+0x358>)
 8003a46:	f01e fad9 	bl	8021ffc <iprintf>
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <LoadProfile+0x35c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f01e f9fd 	bl	8021e50 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
        /* Device limit for Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT, 1);
 8003a56:	4b18      	ldr	r3, [pc, #96]	@ (8003ab8 <LoadProfile+0x354>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	2112      	movs	r1, #18
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f006 f8cc 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003a64:	4603      	mov	r3, r0
 8003a66:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <LoadProfile+0x324>
 8003a6e:	8afb      	ldrh	r3, [r7, #22]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8003a76:	4811      	ldr	r0, [pc, #68]	@ (8003abc <LoadProfile+0x358>)
 8003a78:	f01e fac0 	bl	8021ffc <iprintf>
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <LoadProfile+0x35c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f01e f9e4 	bl	8021e50 <fflush>

        /* Guard time for Type F. This guard time is applied when Type F poll before Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US, 20400);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <LoadProfile+0x354>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8003a90:	2102      	movs	r1, #2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f006 f8b2 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003a9c:	8afb      	ldrh	r3, [r7, #22]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d013      	beq.n	8003aca <LoadProfile+0x366>
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f240 21ce 	movw	r1, #718	@ 0x2ce
 8003aaa:	4804      	ldr	r0, [pc, #16]	@ (8003abc <LoadProfile+0x358>)
 8003aac:	f01e faa6 	bl	8021ffc <iprintf>
 8003ab0:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <LoadProfile+0x35c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	e005      	b.n	8003ac4 <LoadProfile+0x360>
 8003ab8:	20000538 	.word	0x20000538
 8003abc:	0802510c 	.word	0x0802510c
 8003ac0:	20000084 	.word	0x20000084
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f01e f9c3 	bl	8021e50 <fflush>

        /* Guard time for Type F. This guard time is applied when Type B poll before Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US, 15300);
 8003aca:	4b4d      	ldr	r3, [pc, #308]	@ (8003c00 <LoadProfile+0x49c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f006 f891 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003ada:	4603      	mov	r3, r0
 8003adc:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003ade:	8afb      	ldrh	r3, [r7, #22]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <LoadProfile+0x39a>
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8003aec:	4845      	ldr	r0, [pc, #276]	@ (8003c04 <LoadProfile+0x4a0>)
 8003aee:	f01e fa85 	bl	8021ffc <iprintf>
 8003af2:	4b45      	ldr	r3, [pc, #276]	@ (8003c08 <LoadProfile+0x4a4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f01e f9a9 	bl	8021e50 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
        /* Device limit for Type V (ISO 15693) */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 8003afe:	4b40      	ldr	r3, [pc, #256]	@ (8003c00 <LoadProfile+0x49c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	2113      	movs	r1, #19
 8003b06:	4618      	mov	r0, r3
 8003b08:	f006 f878 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003b10:	8afb      	ldrh	r3, [r7, #22]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <LoadProfile+0x3cc>
 8003b16:	8afb      	ldrh	r3, [r7, #22]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 8003b1e:	4839      	ldr	r0, [pc, #228]	@ (8003c04 <LoadProfile+0x4a0>)
 8003b20:	f01e fa6c 	bl	8021ffc <iprintf>
 8003b24:	4b38      	ldr	r3, [pc, #224]	@ (8003c08 <LoadProfile+0x4a4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f01e f990 	bl	8021e50 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5200);
 8003b30:	4b33      	ldr	r3, [pc, #204]	@ (8003c00 <LoadProfile+0x49c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f241 4250 	movw	r2, #5200	@ 0x1450
 8003b38:	2104      	movs	r1, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f006 f85e 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003b40:	4603      	mov	r3, r0
 8003b42:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003b44:	8afb      	ldrh	r3, [r7, #22]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <LoadProfile+0x400>
 8003b4a:	8afb      	ldrh	r3, [r7, #22]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f240 21db 	movw	r1, #731	@ 0x2db
 8003b52:	482c      	ldr	r0, [pc, #176]	@ (8003c04 <LoadProfile+0x4a0>)
 8003b54:	f01e fa52 	bl	8021ffc <iprintf>
 8003b58:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <LoadProfile+0x4a4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f01e f976 	bl	8021e50 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
        /* Device limit for 18000P3M3 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT, 1);
 8003b64:	4b26      	ldr	r3, [pc, #152]	@ (8003c00 <LoadProfile+0x49c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	2114      	movs	r1, #20
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f006 f845 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003b72:	4603      	mov	r3, r0
 8003b74:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003b76:	8afb      	ldrh	r3, [r7, #22]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <LoadProfile+0x432>
 8003b7c:	8afb      	ldrh	r3, [r7, #22]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f240 21e1 	movw	r1, #737	@ 0x2e1
 8003b84:	481f      	ldr	r0, [pc, #124]	@ (8003c04 <LoadProfile+0x4a0>)
 8003b86:	f01e fa39 	bl	8021ffc <iprintf>
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <LoadProfile+0x4a4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f01e f95d 	bl	8021e50 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, 10000);
 8003b96:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <LoadProfile+0x49c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b9e:	2105      	movs	r1, #5
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f006 f82b 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <LoadProfile+0x466>
 8003bb0:	8afb      	ldrh	r3, [r7, #22]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 8003bb8:	4812      	ldr	r0, [pc, #72]	@ (8003c04 <LoadProfile+0x4a0>)
 8003bba:	f01e fa1f 	bl	8021ffc <iprintf>
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <LoadProfile+0x4a4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f01e f943 	bl	8021e50 <fflush>
#endif

        /* Discovery loop Operation mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_NFC);
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <LoadProfile+0x49c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	2182      	movs	r1, #130	@ 0x82
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f006 f812 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003bdc:	8afb      	ldrh	r3, [r7, #22]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8279 	beq.w	80040d6 <LoadProfile+0x972>
 8003be4:	8afb      	ldrh	r3, [r7, #22]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f240 21e9 	movw	r1, #745	@ 0x2e9
 8003bec:	4805      	ldr	r0, [pc, #20]	@ (8003c04 <LoadProfile+0x4a0>)
 8003bee:	f01e fa05 	bl	8021ffc <iprintf>
 8003bf2:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <LoadProfile+0x4a4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f01e f929 	bl	8021e50 <fflush>
 8003bfe:	e26a      	b.n	80040d6 <LoadProfile+0x972>
 8003c00:	20000538 	.word	0x20000538
 8003c04:	0802510c 	.word	0x0802510c
 8003c08:	20000084 	.word	0x20000084
    }
    /* 对于EMVCo模式, 专用于支付终端POS, 配置更加严格, 通常只允许Type A/B协议, 不使用P2P、不启动主动监听 */
    else if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f040 8261 	bne.w	80040d6 <LoadProfile+0x972>
    {
        /* EMVCO */
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 8003c14:	4baf      	ldr	r3, [pc, #700]	@ (8003ed4 <LoadProfile+0x770>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2186      	movs	r1, #134	@ 0x86
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f005 ffed 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003c22:	4603      	mov	r3, r0
 8003c24:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003c26:	8afb      	ldrh	r3, [r7, #22]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <LoadProfile+0x4e2>
 8003c2c:	8afb      	ldrh	r3, [r7, #22]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8003c34:	48a8      	ldr	r0, [pc, #672]	@ (8003ed8 <LoadProfile+0x774>)
 8003c36:	f01e f9e1 	bl	8021ffc <iprintf>
 8003c3a:	4ba8      	ldr	r3, [pc, #672]	@ (8003edc <LoadProfile+0x778>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f01e f905 	bl	8021e50 <fflush>

        /* passive poll bitmap config.只启用TypeA/B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B));
 8003c46:	4ba3      	ldr	r3, [pc, #652]	@ (8003ed4 <LoadProfile+0x770>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	218c      	movs	r1, #140	@ 0x8c
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f005 ffd4 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003c54:	4603      	mov	r3, r0
 8003c56:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003c58:	8afb      	ldrh	r3, [r7, #22]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <LoadProfile+0x514>
 8003c5e:	8afb      	ldrh	r3, [r7, #22]
 8003c60:	461a      	mov	r2, r3
 8003c62:	f240 21f5 	movw	r1, #757	@ 0x2f5
 8003c66:	489c      	ldr	r0, [pc, #624]	@ (8003ed8 <LoadProfile+0x774>)
 8003c68:	f01e f9c8 	bl	8021ffc <iprintf>
 8003c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8003edc <LoadProfile+0x778>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f01e f8ec 	bl	8021e50 <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, 0x00);
 8003c78:	4b96      	ldr	r3, [pc, #600]	@ (8003ed4 <LoadProfile+0x770>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	218b      	movs	r1, #139	@ 0x8b
 8003c80:	4618      	mov	r0, r3
 8003c82:	f005 ffbb 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003c86:	4603      	mov	r3, r0
 8003c88:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003c8a:	8afb      	ldrh	r3, [r7, #22]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <LoadProfile+0x546>
 8003c90:	8afb      	ldrh	r3, [r7, #22]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f240 21f9 	movw	r1, #761	@ 0x2f9
 8003c98:	488f      	ldr	r0, [pc, #572]	@ (8003ed8 <LoadProfile+0x774>)
 8003c9a:	f01e f9af 	bl	8021ffc <iprintf>
 8003c9e:	4b8f      	ldr	r3, [pc, #572]	@ (8003edc <LoadProfile+0x778>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f01e f8d3 	bl	8021e50 <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, 0x00);
 8003caa:	4b8a      	ldr	r3, [pc, #552]	@ (8003ed4 <LoadProfile+0x770>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2189      	movs	r1, #137	@ 0x89
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f005 ffa2 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003cbc:	8afb      	ldrh	r3, [r7, #22]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <LoadProfile+0x578>
 8003cc2:	8afb      	ldrh	r3, [r7, #22]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8003cca:	4883      	ldr	r0, [pc, #524]	@ (8003ed8 <LoadProfile+0x774>)
 8003ccc:	f01e f996 	bl	8021ffc <iprintf>
 8003cd0:	4b82      	ldr	r3, [pc, #520]	@ (8003edc <LoadProfile+0x778>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f01e f8ba 	bl	8021e50 <fflush>

        /* Active Poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, 0x00);
 8003cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed4 <LoadProfile+0x770>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	218a      	movs	r1, #138	@ 0x8a
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f005 ff89 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003cea:	4603      	mov	r3, r0
 8003cec:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003cee:	8afb      	ldrh	r3, [r7, #22]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <LoadProfile+0x5aa>
 8003cf4:	8afb      	ldrh	r3, [r7, #22]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f240 3101 	movw	r1, #769	@ 0x301
 8003cfc:	4876      	ldr	r0, [pc, #472]	@ (8003ed8 <LoadProfile+0x774>)
 8003cfe:	f01e f97d 	bl	8021ffc <iprintf>
 8003d02:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <LoadProfile+0x778>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f01e f8a1 	bl	8021e50 <fflush>

        /* Bool to enable LPCD feature. 禁用低功耗卡检测 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ENABLE_LPCD, PH_OFF);
 8003d0e:	4b71      	ldr	r3, [pc, #452]	@ (8003ed4 <LoadProfile+0x770>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2180      	movs	r1, #128	@ 0x80
 8003d16:	4618      	mov	r0, r3
 8003d18:	f005 ff70 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003d20:	8afb      	ldrh	r3, [r7, #22]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <LoadProfile+0x5dc>
 8003d26:	8afb      	ldrh	r3, [r7, #22]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f240 3105 	movw	r1, #773	@ 0x305
 8003d2e:	486a      	ldr	r0, [pc, #424]	@ (8003ed8 <LoadProfile+0x774>)
 8003d30:	f01e f964 	bl	8021ffc <iprintf>
 8003d34:	4b69      	ldr	r3, [pc, #420]	@ (8003edc <LoadProfile+0x778>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f01e f888 	bl	8021e50 <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 8003d40:	4b64      	ldr	r3, [pc, #400]	@ (8003ed4 <LoadProfile+0x770>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2183      	movs	r1, #131	@ 0x83
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f005 ff57 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003d52:	8afb      	ldrh	r3, [r7, #22]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <LoadProfile+0x60e>
 8003d58:	8afb      	ldrh	r3, [r7, #22]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f240 3109 	movw	r1, #777	@ 0x309
 8003d60:	485d      	ldr	r0, [pc, #372]	@ (8003ed8 <LoadProfile+0x774>)
 8003d62:	f01e f94b 	bl	8021ffc <iprintf>
 8003d66:	4b5d      	ldr	r3, [pc, #372]	@ (8003edc <LoadProfile+0x778>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f01e f86f 	bl	8021e50 <fflush>

        /* whether anti-collision is supported or not.启用防冲突 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8003d72:	4b58      	ldr	r3, [pc, #352]	@ (8003ed4 <LoadProfile+0x770>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2201      	movs	r2, #1
 8003d78:	2188      	movs	r1, #136	@ 0x88
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f005 ff3e 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003d80:	4603      	mov	r3, r0
 8003d82:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003d84:	8afb      	ldrh	r3, [r7, #22]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <LoadProfile+0x640>
 8003d8a:	8afb      	ldrh	r3, [r7, #22]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f240 310d 	movw	r1, #781	@ 0x30d
 8003d92:	4851      	ldr	r0, [pc, #324]	@ (8003ed8 <LoadProfile+0x774>)
 8003d94:	f01e f932 	bl	8021ffc <iprintf>
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <LoadProfile+0x778>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f01e f856 	bl	8021e50 <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8003da4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed4 <LoadProfile+0x770>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2201      	movs	r2, #1
 8003daa:	2184      	movs	r1, #132	@ 0x84
 8003dac:	4618      	mov	r0, r3
 8003dae:	f005 ff25 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003db2:	4603      	mov	r3, r0
 8003db4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003db6:	8afb      	ldrh	r3, [r7, #22]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00c      	beq.n	8003dd6 <LoadProfile+0x672>
 8003dbc:	8afb      	ldrh	r3, [r7, #22]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f240 3111 	movw	r1, #785	@ 0x311
 8003dc4:	4844      	ldr	r0, [pc, #272]	@ (8003ed8 <LoadProfile+0x774>)
 8003dc6:	f01e f919 	bl	8021ffc <iprintf>
 8003dca:	4b44      	ldr	r3, [pc, #272]	@ (8003edc <LoadProfile+0x778>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f01e f83d 	bl	8021e50 <fflush>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <LoadProfile+0x770>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	2110      	movs	r1, #16
 8003dde:	4618      	mov	r0, r3
 8003de0:	f005 ff0c 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003de8:	8afb      	ldrh	r3, [r7, #22]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <LoadProfile+0x6a4>
 8003dee:	8afb      	ldrh	r3, [r7, #22]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f240 3116 	movw	r1, #790	@ 0x316
 8003df6:	4838      	ldr	r0, [pc, #224]	@ (8003ed8 <LoadProfile+0x774>)
 8003df8:	f01e f900 	bl	8021ffc <iprintf>
 8003dfc:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <LoadProfile+0x778>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f01e f824 	bl	8021e50 <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 8003e08:	4b32      	ldr	r3, [pc, #200]	@ (8003ed4 <LoadProfile+0x770>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f005 fef2 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003e1c:	8afb      	ldrh	r3, [r7, #22]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <LoadProfile+0x6d8>
 8003e22:	8afb      	ldrh	r3, [r7, #22]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f240 311a 	movw	r1, #794	@ 0x31a
 8003e2a:	482b      	ldr	r0, [pc, #172]	@ (8003ed8 <LoadProfile+0x774>)
 8003e2c:	f01e f8e6 	bl	8021ffc <iprintf>
 8003e30:	4b2a      	ldr	r3, [pc, #168]	@ (8003edc <LoadProfile+0x778>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f01e f80a 	bl	8021e50 <fflush>

        /* Configure FSDI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI, 0x08);
 8003e3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ed4 <LoadProfile+0x770>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2208      	movs	r2, #8
 8003e42:	2140      	movs	r1, #64	@ 0x40
 8003e44:	4618      	mov	r0, r3
 8003e46:	f005 fed9 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003e4e:	8afb      	ldrh	r3, [r7, #22]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00c      	beq.n	8003e6e <LoadProfile+0x70a>
 8003e54:	8afb      	ldrh	r3, [r7, #22]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f240 311e 	movw	r1, #798	@ 0x31e
 8003e5c:	481e      	ldr	r0, [pc, #120]	@ (8003ed8 <LoadProfile+0x774>)
 8003e5e:	f01e f8cd 	bl	8021ffc <iprintf>
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <LoadProfile+0x778>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f01d fff1 	bl	8021e50 <fflush>

        /* Configure CID for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID, 0x00);
 8003e6e:	4b19      	ldr	r3, [pc, #100]	@ (8003ed4 <LoadProfile+0x770>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2141      	movs	r1, #65	@ 0x41
 8003e76:	4618      	mov	r0, r3
 8003e78:	f005 fec0 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003e80:	8afb      	ldrh	r3, [r7, #22]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <LoadProfile+0x73c>
 8003e86:	8afb      	ldrh	r3, [r7, #22]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f240 3122 	movw	r1, #802	@ 0x322
 8003e8e:	4812      	ldr	r0, [pc, #72]	@ (8003ed8 <LoadProfile+0x774>)
 8003e90:	f01e f8b4 	bl	8021ffc <iprintf>
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <LoadProfile+0x778>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f01d ffd8 	bl	8021e50 <fflush>

        /* Configure DRI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI, 0x00);
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <LoadProfile+0x770>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2143      	movs	r1, #67	@ 0x43
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 fea7 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <LoadProfile+0x77c>
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f240 3126 	movw	r1, #806	@ 0x326
 8003ec0:	4805      	ldr	r0, [pc, #20]	@ (8003ed8 <LoadProfile+0x774>)
 8003ec2:	f01e f89b 	bl	8021ffc <iprintf>
 8003ec6:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <LoadProfile+0x778>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f01d ffbf 	bl	8021e50 <fflush>
 8003ed2:	e005      	b.n	8003ee0 <LoadProfile+0x77c>
 8003ed4:	20000538 	.word	0x20000538
 8003ed8:	0802510c 	.word	0x0802510c
 8003edc:	20000084 	.word	0x20000084

        /* Configure DSI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI, 0x00);
 8003ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80040e0 <LoadProfile+0x97c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2144      	movs	r1, #68	@ 0x44
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f005 fe87 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003ef2:	8afb      	ldrh	r3, [r7, #22]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <LoadProfile+0x7ae>
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f240 312a 	movw	r1, #810	@ 0x32a
 8003f00:	4878      	ldr	r0, [pc, #480]	@ (80040e4 <LoadProfile+0x980>)
 8003f02:	f01e f87b 	bl	8021ffc <iprintf>
 8003f06:	4b78      	ldr	r3, [pc, #480]	@ (80040e8 <LoadProfile+0x984>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f01d ff9f 	bl	8021e50 <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 8003f12:	4b73      	ldr	r3, [pc, #460]	@ (80040e0 <LoadProfile+0x97c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	2111      	movs	r1, #17
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f005 fe6e 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003f20:	4603      	mov	r3, r0
 8003f22:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003f24:	8afb      	ldrh	r3, [r7, #22]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <LoadProfile+0x7e0>
 8003f2a:	8afb      	ldrh	r3, [r7, #22]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8003f32:	486c      	ldr	r0, [pc, #432]	@ (80040e4 <LoadProfile+0x980>)
 8003f34:	f01e f862 	bl	8021ffc <iprintf>
 8003f38:	4b6b      	ldr	r3, [pc, #428]	@ (80040e8 <LoadProfile+0x984>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f01d ff86 	bl	8021e50 <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8003f44:	4b66      	ldr	r3, [pc, #408]	@ (80040e0 <LoadProfile+0x97c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f005 fe54 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003f58:	8afb      	ldrh	r3, [r7, #22]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00c      	beq.n	8003f78 <LoadProfile+0x814>
 8003f5e:	8afb      	ldrh	r3, [r7, #22]
 8003f60:	461a      	mov	r2, r3
 8003f62:	f240 3133 	movw	r1, #819	@ 0x333
 8003f66:	485f      	ldr	r0, [pc, #380]	@ (80040e4 <LoadProfile+0x980>)
 8003f68:	f01e f848 	bl	8021ffc <iprintf>
 8003f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80040e8 <LoadProfile+0x984>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f01d ff6c 	bl	8021e50 <fflush>

        /* Configure AFI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ, 0x00);
 8003f78:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <LoadProfile+0x97c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2130      	movs	r1, #48	@ 0x30
 8003f80:	4618      	mov	r0, r3
 8003f82:	f005 fe3b 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003f86:	4603      	mov	r3, r0
 8003f88:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <LoadProfile+0x846>
 8003f90:	8afb      	ldrh	r3, [r7, #22]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f240 3137 	movw	r1, #823	@ 0x337
 8003f98:	4852      	ldr	r0, [pc, #328]	@ (80040e4 <LoadProfile+0x980>)
 8003f9a:	f01e f82f 	bl	8021ffc <iprintf>
 8003f9e:	4b52      	ldr	r3, [pc, #328]	@ (80040e8 <LoadProfile+0x984>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f01d ff53 	bl	8021e50 <fflush>

        /* Configure FSDI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_FSDI, 0x08);
 8003faa:	4b4d      	ldr	r3, [pc, #308]	@ (80040e0 <LoadProfile+0x97c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2208      	movs	r2, #8
 8003fb0:	2132      	movs	r1, #50	@ 0x32
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f005 fe22 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <LoadProfile+0x878>
 8003fc2:	8afb      	ldrh	r3, [r7, #22]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f240 313b 	movw	r1, #827	@ 0x33b
 8003fca:	4846      	ldr	r0, [pc, #280]	@ (80040e4 <LoadProfile+0x980>)
 8003fcc:	f01e f816 	bl	8021ffc <iprintf>
 8003fd0:	4b45      	ldr	r3, [pc, #276]	@ (80040e8 <LoadProfile+0x984>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f01d ff3a 	bl	8021e50 <fflush>

        /* Configure CID for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_CID, 0x00);
 8003fdc:	4b40      	ldr	r3, [pc, #256]	@ (80040e0 <LoadProfile+0x97c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2133      	movs	r1, #51	@ 0x33
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 fe09 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8003fea:	4603      	mov	r3, r0
 8003fec:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8003fee:	8afb      	ldrh	r3, [r7, #22]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00c      	beq.n	800400e <LoadProfile+0x8aa>
 8003ff4:	8afb      	ldrh	r3, [r7, #22]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f240 313f 	movw	r1, #831	@ 0x33f
 8003ffc:	4839      	ldr	r0, [pc, #228]	@ (80040e4 <LoadProfile+0x980>)
 8003ffe:	f01d fffd 	bl	8021ffc <iprintf>
 8004002:	4b39      	ldr	r3, [pc, #228]	@ (80040e8 <LoadProfile+0x984>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f01d ff21 	bl	8021e50 <fflush>

        /* Configure DRI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DRI, 0x00);
 800400e:	4b34      	ldr	r3, [pc, #208]	@ (80040e0 <LoadProfile+0x97c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	2135      	movs	r1, #53	@ 0x35
 8004016:	4618      	mov	r0, r3
 8004018:	f005 fdf0 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800401c:	4603      	mov	r3, r0
 800401e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8004020:	8afb      	ldrh	r3, [r7, #22]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <LoadProfile+0x8dc>
 8004026:	8afb      	ldrh	r3, [r7, #22]
 8004028:	461a      	mov	r2, r3
 800402a:	f240 3143 	movw	r1, #835	@ 0x343
 800402e:	482d      	ldr	r0, [pc, #180]	@ (80040e4 <LoadProfile+0x980>)
 8004030:	f01d ffe4 	bl	8021ffc <iprintf>
 8004034:	4b2c      	ldr	r3, [pc, #176]	@ (80040e8 <LoadProfile+0x984>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f01d ff08 	bl	8021e50 <fflush>

        /* Configure DSI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DSI, 0x00);
 8004040:	4b27      	ldr	r3, [pc, #156]	@ (80040e0 <LoadProfile+0x97c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2200      	movs	r2, #0
 8004046:	2136      	movs	r1, #54	@ 0x36
 8004048:	4618      	mov	r0, r3
 800404a:	f005 fdd7 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8004052:	8afb      	ldrh	r3, [r7, #22]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00c      	beq.n	8004072 <LoadProfile+0x90e>
 8004058:	8afb      	ldrh	r3, [r7, #22]
 800405a:	461a      	mov	r2, r3
 800405c:	f240 3147 	movw	r1, #839	@ 0x347
 8004060:	4820      	ldr	r0, [pc, #128]	@ (80040e4 <LoadProfile+0x980>)
 8004062:	f01d ffcb 	bl	8021ffc <iprintf>
 8004066:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <LoadProfile+0x984>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f01d feef 	bl	8021e50 <fflush>

        /* Configure Extended ATQB support for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB, 0x00);
 8004072:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <LoadProfile+0x97c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	2131      	movs	r1, #49	@ 0x31
 800407a:	4618      	mov	r0, r3
 800407c:	f005 fdbe 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8004080:	4603      	mov	r3, r0
 8004082:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8004084:	8afb      	ldrh	r3, [r7, #22]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <LoadProfile+0x940>
 800408a:	8afb      	ldrh	r3, [r7, #22]
 800408c:	461a      	mov	r2, r3
 800408e:	f240 314b 	movw	r1, #843	@ 0x34b
 8004092:	4814      	ldr	r0, [pc, #80]	@ (80040e4 <LoadProfile+0x980>)
 8004094:	f01d ffb2 	bl	8021ffc <iprintf>
 8004098:	4b13      	ldr	r3, [pc, #76]	@ (80040e8 <LoadProfile+0x984>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f01d fed6 	bl	8021e50 <fflush>
#endif
        /* Configure reader library mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_EMVCO);
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <LoadProfile+0x97c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	2182      	movs	r1, #130	@ 0x82
 80040ac:	4618      	mov	r0, r3
 80040ae:	f005 fda5 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 80040b2:	4603      	mov	r3, r0
 80040b4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80040b6:	8afb      	ldrh	r3, [r7, #22]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <LoadProfile+0x972>
 80040bc:	8afb      	ldrh	r3, [r7, #22]
 80040be:	461a      	mov	r2, r3
 80040c0:	f240 314f 	movw	r1, #847	@ 0x34f
 80040c4:	4807      	ldr	r0, [pc, #28]	@ (80040e4 <LoadProfile+0x980>)
 80040c6:	f01d ff99 	bl	8021ffc <iprintf>
 80040ca:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <LoadProfile+0x984>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f01d febd 	bl	8021e50 <fflush>
    }
    else
    {
        /* Do Nothing */
    }
    return status;
 80040d6:	8afb      	ldrh	r3, [r7, #22]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000538 	.word	0x20000538
 80040e4:	0802510c 	.word	0x0802510c
 80040e8:	20000084 	.word	0x20000084

080040ec <EMV_IsEMVCompatibleCard>:

/**
 * 检查是否为EMV兼容卡片
 */
uint8_t EMV_IsEMVCompatibleCard(void *pDataParams)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    phacDiscLoop_Sw_DataParams_t *pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDataParams;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	617b      	str	r3, [r7, #20]

    // 检查检测到的技术类型
    uint16_t wTechDetected = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	81fb      	strh	r3, [r7, #14]
    phStatus_t status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80040fc:	f107 030e 	add.w	r3, r7, #14
 8004100:	461a      	mov	r2, r3
 8004102:	2187      	movs	r1, #135	@ 0x87
 8004104:	6978      	ldr	r0, [r7, #20]
 8004106:	f006 f9f7 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 800410a:	4603      	mov	r3, r0
 800410c:	827b      	strh	r3, [r7, #18]

    if (status != PH_ERR_SUCCESS) {
 800410e:	8a7b      	ldrh	r3, [r7, #18]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <EMV_IsEMVCompatibleCard+0x2c>
        return 0;
 8004114:	2300      	movs	r3, #0
 8004116:	e02b      	b.n	8004170 <EMV_IsEMVCompatibleCard+0x84>
    }

    // 检查是否为Type A卡片
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_A)) {
 8004118:	89fb      	ldrh	r3, [r7, #14]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d015      	beq.n	800414e <EMV_IsEMVCompatibleCard+0x62>
        // 检查是否支持ISO14443-4 (Type 4A)
        uint8_t sak = pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aSak;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8004128:	747b      	strb	r3, [r7, #17]

        // SAK bit 5 = 1 表示支持ISO14443-4协议 (EMV所需)
        if ((sak & 0x20) != 0) {
 800412a:	7c7b      	ldrb	r3, [r7, #17]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <EMV_IsEMVCompatibleCard+0x62>
        	DEBUG_PRINTF("Type A ISO14443-4 compatible card detected (SAK: 0x%02X)\r\n", sak);
 8004134:	7c7b      	ldrb	r3, [r7, #17]
 8004136:	4619      	mov	r1, r3
 8004138:	480f      	ldr	r0, [pc, #60]	@ (8004178 <EMV_IsEMVCompatibleCard+0x8c>)
 800413a:	f01d ff5f 	bl	8021ffc <iprintf>
 800413e:	4b0f      	ldr	r3, [pc, #60]	@ (800417c <EMV_IsEMVCompatibleCard+0x90>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	f01d fe83 	bl	8021e50 <fflush>
            return 1;
 800414a:	2301      	movs	r3, #1
 800414c:	e010      	b.n	8004170 <EMV_IsEMVCompatibleCard+0x84>
        }
    }

    // 检查是否为Type B卡片 (也可能是EMV)
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_B)) {
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <EMV_IsEMVCompatibleCard+0x82>
        DEBUG_PRINTF("Type B card detected\r\n");
 8004158:	4809      	ldr	r0, [pc, #36]	@ (8004180 <EMV_IsEMVCompatibleCard+0x94>)
 800415a:	f01d ffbf 	bl	80220dc <puts>
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <EMV_IsEMVCompatibleCard+0x90>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f01d fe73 	bl	8021e50 <fflush>
        return 1; // Type B默认支持ISO14443-4
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <EMV_IsEMVCompatibleCard+0x84>
    }

    return 0;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	080255d8 	.word	0x080255d8
 800417c:	20000084 	.word	0x20000084
 8004180:	08025614 	.word	0x08025614

08004184 <EMV_WaitForCardRemoval>:

/**
 * Wait for card removal
 */
void EMV_WaitForCardRemoval(void *pDataParams)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    phacDiscLoop_Sw_DataParams_t *pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDataParams;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	613b      	str	r3, [r7, #16]

    DEBUG_PRINTF("Please remove the card...\r\n");
 8004190:	481f      	ldr	r0, [pc, #124]	@ (8004210 <EMV_WaitForCardRemoval+0x8c>)
 8004192:	f01d ffa3 	bl	80220dc <puts>
 8004196:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <EMV_WaitForCardRemoval+0x90>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f01d fe57 	bl	8021e50 <fflush>

    // Set to card removal detection mode
    phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_REMOVAL);
 80041a2:	2203      	movs	r2, #3
 80041a4:	2184      	movs	r1, #132	@ 0x84
 80041a6:	6938      	ldr	r0, [r7, #16]
 80041a8:	f005 fd28 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>

    // Run removal detection
    phStatus_t status;
    int removal_attempts = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
    do {
        status = phacDiscLoop_Run(pDiscLoop, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 80041b0:	2100      	movs	r1, #0
 80041b2:	6938      	ldr	r0, [r7, #16]
 80041b4:	f005 fc50 	bl	8009a58 <phacDiscLoop_Sw_Run>
 80041b8:	4603      	mov	r3, r0
 80041ba:	81fb      	strh	r3, [r7, #14]
        HAL_Delay(100);
 80041bc:	2064      	movs	r0, #100	@ 0x64
 80041be:	f018 f8f1 	bl	801c3a4 <HAL_Delay>
        removal_attempts++;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	3301      	adds	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]

        // Avoid infinite waiting
        if (removal_attempts > 100) { // 10 seconds timeout
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	dd09      	ble.n	80041e2 <EMV_WaitForCardRemoval+0x5e>
            DEBUG_PRINTF("Card removal detection timeout\r\n");
 80041ce:	4812      	ldr	r0, [pc, #72]	@ (8004218 <EMV_WaitForCardRemoval+0x94>)
 80041d0:	f01d ff84 	bl	80220dc <puts>
 80041d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <EMV_WaitForCardRemoval+0x90>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f01d fe38 	bl	8021e50 <fflush>
            break;
 80041e0:	e003      	b.n	80041ea <EMV_WaitForCardRemoval+0x66>
        }
    } while ((status & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED);
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b84      	cmp	r3, #132	@ 0x84
 80041e8:	d1e2      	bne.n	80041b0 <EMV_WaitForCardRemoval+0x2c>

    DEBUG_PRINTF("Card removed\r\n");
 80041ea:	480c      	ldr	r0, [pc, #48]	@ (800421c <EMV_WaitForCardRemoval+0x98>)
 80041ec:	f01d ff76 	bl	80220dc <puts>
 80041f0:	4b08      	ldr	r3, [pc, #32]	@ (8004214 <EMV_WaitForCardRemoval+0x90>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f01d fe2a 	bl	8021e50 <fflush>

    // Reset to detection mode, prepare for next polling
    phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 80041fc:	2201      	movs	r2, #1
 80041fe:	2184      	movs	r1, #132	@ 0x84
 8004200:	6938      	ldr	r0, [r7, #16]
 8004202:	f005 fcfb 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	08025800 	.word	0x08025800
 8004214:	20000084 	.word	0x20000084
 8004218:	0802581c 	.word	0x0802581c
 800421c:	0802583c 	.word	0x0802583c

08004220 <EMV_CollectCardBasicInfo>:

// ==================================================
// 新增功能1: 收集卡片基础信息
// ==================================================
EMV_Result_t EMV_CollectCardBasicInfo(phacDiscLoop_Sw_DataParams_t *pDiscLoop, EMV_Complete_Card_Data_t *card_data)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
    // 收集UID
    if (pDiscLoop->sTypeATargetInfo.bTotalTagsFound > 0) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d04c      	beq.n	80042ce <EMV_CollectCardBasicInfo+0xae>
        card_data->card_uid_len = pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	729a      	strb	r2, [r3, #10]
        memcpy(card_data->card_uid,
 800423e:	6838      	ldr	r0, [r7, #0]
               pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f103 0160 	add.w	r1, r3, #96	@ 0x60
               card_data->card_uid_len);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7a9b      	ldrb	r3, [r3, #10]
        memcpy(card_data->card_uid,
 800424a:	461a      	mov	r2, r3
 800424c:	f01e f8b5 	bl	80223ba <memcpy>

        card_data->card_sak = pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aSak;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	72da      	strb	r2, [r3, #11]
        memcpy(card_data->card_atqa,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	330c      	adds	r3, #12
               pDiscLoop->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa,
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	325e      	adds	r2, #94	@ 0x5e
        memcpy(card_data->card_atqa,
 8004262:	8812      	ldrh	r2, [r2, #0]
 8004264:	b292      	uxth	r2, r2
 8004266:	801a      	strh	r2, [r3, #0]
               2);

        DEBUG_PRINTF("Card UID: ");
 8004268:	481b      	ldr	r0, [pc, #108]	@ (80042d8 <EMV_CollectCardBasicInfo+0xb8>)
 800426a:	f01d fec7 	bl	8021ffc <iprintf>
 800426e:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <EMV_CollectCardBasicInfo+0xbc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f01d fdeb 	bl	8021e50 <fflush>
        for (int i = 0; i < card_data->card_uid_len; i++) {
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e00a      	b.n	8004296 <EMV_CollectCardBasicInfo+0x76>
            printf("%02X ", card_data->card_uid[i]);
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	4619      	mov	r1, r3
 800428a:	4815      	ldr	r0, [pc, #84]	@ (80042e0 <EMV_CollectCardBasicInfo+0xc0>)
 800428c:	f01d feb6 	bl	8021ffc <iprintf>
        for (int i = 0; i < card_data->card_uid_len; i++) {
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	7a9b      	ldrb	r3, [r3, #10]
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4293      	cmp	r3, r2
 80042a0:	dbee      	blt.n	8004280 <EMV_CollectCardBasicInfo+0x60>
        }
        printf("\r\n");
 80042a2:	4810      	ldr	r0, [pc, #64]	@ (80042e4 <EMV_CollectCardBasicInfo+0xc4>)
 80042a4:	f01d ff1a 	bl	80220dc <puts>
        DEBUG_PRINTF("SAK: 0x%02X, ATQA: %02X %02X\r\n",
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	7adb      	ldrb	r3, [r3, #11]
 80042ac:	4619      	mov	r1, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	7b1b      	ldrb	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	7b5b      	ldrb	r3, [r3, #13]
 80042b8:	480b      	ldr	r0, [pc, #44]	@ (80042e8 <EMV_CollectCardBasicInfo+0xc8>)
 80042ba:	f01d fe9f 	bl	8021ffc <iprintf>
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <EMV_CollectCardBasicInfo+0xbc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f01d fdc3 	bl	8021e50 <fflush>
                     card_data->card_sak, card_data->card_atqa[0], card_data->card_atqa[1]);

        return EMV_SUCCESS;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <EMV_CollectCardBasicInfo+0xb0>
    }

    return EMV_ERROR_CARD_NOT_EMV;
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	0802584c 	.word	0x0802584c
 80042dc:	20000084 	.word	0x20000084
 80042e0:	08025674 	.word	0x08025674
 80042e4:	0802567c 	.word	0x0802567c
 80042e8:	08025858 	.word	0x08025858

080042ec <EMV_CollectPPSEInfo>:

// ==================================================
// 新增功能2: 收集PPSE信息
// ==================================================
EMV_Result_t EMV_CollectPPSEInfo(EMV_Complete_Card_Data_t *card_data)
{
 80042ec:	b5b0      	push	{r4, r5, r7, lr}
 80042ee:	b08c      	sub	sp, #48	@ 0x30
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	6078      	str	r0, [r7, #4]
    uint8_t PPSE_SELECT_APDU[] = {
 80042f4:	4b30      	ldr	r3, [pc, #192]	@ (80043b8 <EMV_CollectPPSEInfo+0xcc>)
 80042f6:	f107 0410 	add.w	r4, r7, #16
 80042fa:	461d      	mov	r5, r3
 80042fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	6023      	str	r3, [r4, #0]
        0x00
    };

    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	817b      	strh	r3, [r7, #10]

    status = phpalI14443p4_Exchange(
 8004308:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800430c:	f004 fe70 	bl	8008ff0 <phNfcLib_GetDataParams>
 8004310:	f107 0210 	add.w	r2, r7, #16
 8004314:	f107 030a 	add.w	r3, r7, #10
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	f107 030c 	add.w	r3, r7, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2314      	movs	r3, #20
 8004322:	2100      	movs	r1, #0
 8004324:	f013 fabc 	bl	80178a0 <phpalI14443p4_Sw_Exchange>
 8004328:	4603      	mov	r3, r0
 800432a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        sizeof(PPSE_SELECT_APDU),
        &ppRxBuffer,
        &wRxLen
    );

    if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 800432c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800432e:	2b00      	cmp	r3, #0
 8004330:	d130      	bne.n	8004394 <EMV_CollectPPSEInfo+0xa8>
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d92d      	bls.n	8004394 <EMV_CollectPPSEInfo+0xa8>
        uint8_t sw1 = ppRxBuffer[wRxLen-2];
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	3b02      	subs	r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint8_t sw2 = ppRxBuffer[wRxLen-1];
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	897b      	ldrh	r3, [r7, #10]
 800434a:	3b01      	subs	r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

        if (sw1 == 0x90 && sw2 == 0x00) {
 8004354:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004358:	2b90      	cmp	r3, #144	@ 0x90
 800435a:	d11b      	bne.n	8004394 <EMV_CollectPPSEInfo+0xa8>
 800435c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d117      	bne.n	8004394 <EMV_CollectPPSEInfo+0xa8>
            // 保存完整PPSE响应数据
            card_data->ppse_len = wRxLen;
 8004364:	897a      	ldrh	r2, [r7, #10]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
            memcpy(card_data->ppse_data, ppRxBuffer, wRxLen);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	330e      	adds	r3, #14
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	897a      	ldrh	r2, [r7, #10]
 8004374:	4618      	mov	r0, r3
 8004376:	f01e f820 	bl	80223ba <memcpy>

            DEBUG_PRINTF("PPSE collected: %d bytes\r\n", wRxLen);
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	4619      	mov	r1, r3
 800437e:	480f      	ldr	r0, [pc, #60]	@ (80043bc <EMV_CollectPPSEInfo+0xd0>)
 8004380:	f01d fe3c 	bl	8021ffc <iprintf>
 8004384:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <EMV_CollectPPSEInfo+0xd4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4618      	mov	r0, r3
 800438c:	f01d fd60 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8004390:	2300      	movs	r3, #0
 8004392:	e00d      	b.n	80043b0 <EMV_CollectPPSEInfo+0xc4>
        }
    }

    // PPSE失败不是致命错误，可能是老卡
    DEBUG_PRINTF("PPSE not available, continuing...\r\n");
 8004394:	480b      	ldr	r0, [pc, #44]	@ (80043c4 <EMV_CollectPPSEInfo+0xd8>)
 8004396:	f01d fea1 	bl	80220dc <puts>
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <EMV_CollectPPSEInfo+0xd4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f01d fd55 	bl	8021e50 <fflush>
    card_data->ppse_len = 0;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
    return EMV_SUCCESS;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	@ 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}
 80043b8:	080256c4 	.word	0x080256c4
 80043bc:	08025878 	.word	0x08025878
 80043c0:	20000084 	.word	0x20000084
 80043c4:	08025894 	.word	0x08025894

080043c8 <EMV_CollectApplicationInfo>:

// ==================================================
// 新增功能3: 收集应用选择信息
// ==================================================
EMV_Result_t EMV_CollectApplicationInfo(EMV_Complete_Card_Data_t *card_data)
{
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b0a2      	sub	sp, #136	@ 0x88
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
    // 尝试多个常见AID
    uint8_t aids[][16] = {
 80043d0:	4b77      	ldr	r3, [pc, #476]	@ (80045b0 <EMV_CollectApplicationInfo+0x1e8>)
 80043d2:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80043d6:	461d      	mov	r5, r3
 80043d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0xA0, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10}, // MasterCard (7字节)
        {0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10}, // Visa (7字节)
        {0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01}, // UnionPay (7字节)
    };
    uint8_t aid_lens[] = {7, 7, 7};
 80043e8:	4a72      	ldr	r2, [pc, #456]	@ (80045b4 <EMV_CollectApplicationInfo+0x1ec>)
 80043ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	4611      	mov	r1, r2
 80043f2:	8019      	strh	r1, [r3, #0]
 80043f4:	3302      	adds	r3, #2
 80043f6:	0c12      	lsrs	r2, r2, #16
 80043f8:	701a      	strb	r2, [r3, #0]
    const char* aid_names[] = {"MasterCard", "Visa", "UnionPay"};
 80043fa:	4a6f      	ldr	r2, [pc, #444]	@ (80045b8 <EMV_CollectApplicationInfo+0x1f0>)
 80043fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004400:	ca07      	ldmia	r2, {r0, r1, r2}
 8004402:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (int i = 0; i < 3; i++) {
 8004406:	2300      	movs	r3, #0
 8004408:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800440a:	e0c7      	b.n	800459c <EMV_CollectApplicationInfo+0x1d4>
        DEBUG_PRINTF("Trying %s AID...\r\n", aid_names[i]);
 800440c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	3380      	adds	r3, #128	@ 0x80
 8004412:	443b      	add	r3, r7
 8004414:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004418:	4619      	mov	r1, r3
 800441a:	4868      	ldr	r0, [pc, #416]	@ (80045bc <EMV_CollectApplicationInfo+0x1f4>)
 800441c:	f01d fdee 	bl	8021ffc <iprintf>
 8004420:	4b67      	ldr	r3, [pc, #412]	@ (80045c0 <EMV_CollectApplicationInfo+0x1f8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f01d fd12 	bl	8021e50 <fflush>

        uint8_t select_apdu[32];
        uint8_t apdu_len = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

        select_apdu[apdu_len++] = 0x00;  // CLA
 8004432:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 800443c:	3380      	adds	r3, #128	@ 0x80
 800443e:	443b      	add	r3, r7
 8004440:	2200      	movs	r2, #0
 8004442:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = 0xA4;  // INS
 8004446:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 8004450:	3380      	adds	r3, #128	@ 0x80
 8004452:	443b      	add	r3, r7
 8004454:	22a4      	movs	r2, #164	@ 0xa4
 8004456:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = 0x04;  // P1
 800445a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 8004464:	3380      	adds	r3, #128	@ 0x80
 8004466:	443b      	add	r3, r7
 8004468:	2204      	movs	r2, #4
 800446a:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = 0x00;  // P2
 800446e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 8004478:	3380      	adds	r3, #128	@ 0x80
 800447a:	443b      	add	r3, r7
 800447c:	2200      	movs	r2, #0
 800447e:	f803 2c74 	strb.w	r2, [r3, #-116]
        select_apdu[apdu_len++] = aid_lens[i]; // LC
 8004482:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 800448c:	4619      	mov	r1, r3
 800448e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004494:	4413      	add	r3, r2
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	f101 0380 	add.w	r3, r1, #128	@ 0x80
 800449c:	443b      	add	r3, r7
 800449e:	f803 2c74 	strb.w	r2, [r3, #-116]

        memcpy(&select_apdu[apdu_len], aids[i], aid_lens[i]);
 80044a2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80044a6:	f107 020c 	add.w	r2, r7, #12
 80044aa:	18d0      	adds	r0, r2, r3
 80044ac:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80044b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	18d1      	adds	r1, r2, r3
 80044b6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80044ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044bc:	4413      	add	r3, r2
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f01d ff7a 	bl	80223ba <memcpy>
        apdu_len += aid_lens[i];
 80044c6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80044ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044cc:	4413      	add	r3, r2
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80044d4:	4413      	add	r3, r2
 80044d6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        select_apdu[apdu_len++] = 0x00;  // LE
 80044da:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	f887 207b 	strb.w	r2, [r7, #123]	@ 0x7b
 80044e4:	3380      	adds	r3, #128	@ 0x80
 80044e6:	443b      	add	r3, r7
 80044e8:	2200      	movs	r2, #0
 80044ea:	f803 2c74 	strb.w	r2, [r3, #-116]

        phStatus_t status;
        uint8_t *ppRxBuffer;
        uint16_t wRxLen = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        status = phpalI14443p4_Exchange(
 80044f2:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80044f6:	f004 fd7b 	bl	8008ff0 <phNfcLib_GetDataParams>
 80044fa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80044fe:	b299      	uxth	r1, r3
 8004500:	f107 020c 	add.w	r2, r7, #12
 8004504:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	460b      	mov	r3, r1
 8004512:	2100      	movs	r1, #0
 8004514:	f013 f9c4 	bl	80178a0 <phpalI14443p4_Sw_Exchange>
 8004518:	4603      	mov	r3, r0
 800451a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
            PH_EXCHANGE_DEFAULT,
            select_apdu, apdu_len,
            &ppRxBuffer, &wRxLen
        );

        if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 800451e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8004522:	2b00      	cmp	r3, #0
 8004524:	d137      	bne.n	8004596 <EMV_CollectApplicationInfo+0x1ce>
 8004526:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004528:	2b01      	cmp	r3, #1
 800452a:	d934      	bls.n	8004596 <EMV_CollectApplicationInfo+0x1ce>
            uint8_t sw1 = ppRxBuffer[wRxLen-2];
 800452c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004530:	3b02      	subs	r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            uint8_t sw2 = ppRxBuffer[wRxLen-1];
 800453a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800453e:	3b01      	subs	r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

            if (sw1 == 0x90 && sw2 == 0x00) {
 8004548:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800454c:	2b90      	cmp	r3, #144	@ 0x90
 800454e:	d122      	bne.n	8004596 <EMV_CollectApplicationInfo+0x1ce>
 8004550:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11e      	bne.n	8004596 <EMV_CollectApplicationInfo+0x1ce>
                // 成功选择应用，保存响应数据
                card_data->app_select_len = wRxLen;
 8004558:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
                memcpy(card_data->app_select_data, ppRxBuffer, wRxLen);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004566:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004568:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800456a:	4618      	mov	r0, r3
 800456c:	f01d ff25 	bl	80223ba <memcpy>

                DEBUG_PRINTF("%s application selected: %d bytes\r\n", aid_names[i], wRxLen);
 8004570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	3380      	adds	r3, #128	@ 0x80
 8004576:	443b      	add	r3, r7
 8004578:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800457c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800457e:	4619      	mov	r1, r3
 8004580:	4810      	ldr	r0, [pc, #64]	@ (80045c4 <EMV_CollectApplicationInfo+0x1fc>)
 8004582:	f01d fd3b 	bl	8021ffc <iprintf>
 8004586:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <EMV_CollectApplicationInfo+0x1f8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f01d fc5f 	bl	8021e50 <fflush>
                return EMV_SUCCESS;
 8004592:	2300      	movs	r3, #0
 8004594:	e007      	b.n	80045a6 <EMV_CollectApplicationInfo+0x1de>
    for (int i = 0; i < 3; i++) {
 8004596:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004598:	3301      	adds	r3, #1
 800459a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800459c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800459e:	2b02      	cmp	r3, #2
 80045a0:	f77f af34 	ble.w	800440c <EMV_CollectApplicationInfo+0x44>
            }
        }
    }

    return EMV_ERROR_APP_SELECT;
 80045a4:	2303      	movs	r3, #3
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3780      	adds	r7, #128	@ 0x80
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bdb0      	pop	{r4, r5, r7, pc}
 80045ae:	bf00      	nop
 80045b0:	080258f0 	.word	0x080258f0
 80045b4:	08025920 	.word	0x08025920
 80045b8:	08025944 	.word	0x08025944
 80045bc:	080258b8 	.word	0x080258b8
 80045c0:	20000084 	.word	0x20000084
 80045c4:	080258cc 	.word	0x080258cc

080045c8 <EMV_CollectGPOInfo>:

// ==================================================
// 新增功能4: 收集GPO信息
// ==================================================
EMV_Result_t EMV_CollectGPOInfo(EMV_Complete_Card_Data_t *card_data)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	@ 0x28
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	6078      	str	r0, [r7, #4]
    uint8_t gpo_apdu[] = {
 80045d0:	4a28      	ldr	r2, [pc, #160]	@ (8004674 <EMV_CollectGPOInfo+0xac>)
 80045d2:	f107 0314 	add.w	r3, r7, #20
 80045d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045da:	e883 0003 	stmia.w	r3, {r0, r1}
        0x80, 0xA8, 0x00, 0x00, 0x02, 0x83, 0x00, 0x00
    };

    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	81fb      	strh	r3, [r7, #14]

    status = phpalI14443p4_Exchange(
 80045e2:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80045e6:	f004 fd03 	bl	8008ff0 <phNfcLib_GetDataParams>
 80045ea:	f107 0214 	add.w	r2, r7, #20
 80045ee:	f107 030e 	add.w	r3, r7, #14
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2308      	movs	r3, #8
 80045fc:	2100      	movs	r1, #0
 80045fe:	f013 f94f 	bl	80178a0 <phpalI14443p4_Sw_Exchange>
 8004602:	4603      	mov	r3, r0
 8004604:	83fb      	strh	r3, [r7, #30]
        PH_EXCHANGE_DEFAULT,
        gpo_apdu, sizeof(gpo_apdu),
        &ppRxBuffer, &wRxLen
    );

    if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 8004606:	8bfb      	ldrh	r3, [r7, #30]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12d      	bne.n	8004668 <EMV_CollectGPOInfo+0xa0>
 800460c:	89fb      	ldrh	r3, [r7, #14]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d92a      	bls.n	8004668 <EMV_CollectGPOInfo+0xa0>
        uint8_t sw1 = ppRxBuffer[wRxLen-2];
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	3b02      	subs	r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	777b      	strb	r3, [r7, #29]
        uint8_t sw2 = ppRxBuffer[wRxLen-1];
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	89fb      	ldrh	r3, [r7, #14]
 8004622:	3b01      	subs	r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	773b      	strb	r3, [r7, #28]

        if (sw1 == 0x90 && sw2 == 0x00) {
 800462a:	7f7b      	ldrb	r3, [r7, #29]
 800462c:	2b90      	cmp	r3, #144	@ 0x90
 800462e:	d11b      	bne.n	8004668 <EMV_CollectGPOInfo+0xa0>
 8004630:	7f3b      	ldrb	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <EMV_CollectGPOInfo+0xa0>
            card_data->gpo_len = wRxLen;
 8004636:	89fa      	ldrh	r2, [r7, #14]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8a3 2312 	strh.w	r2, [r3, #786]	@ 0x312
            memcpy(card_data->gpo_data, ppRxBuffer, wRxLen);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8004644:	6939      	ldr	r1, [r7, #16]
 8004646:	89fa      	ldrh	r2, [r7, #14]
 8004648:	4618      	mov	r0, r3
 800464a:	f01d feb6 	bl	80223ba <memcpy>

            DEBUG_PRINTF("GPO collected: %d bytes\r\n", wRxLen);
 800464e:	89fb      	ldrh	r3, [r7, #14]
 8004650:	4619      	mov	r1, r3
 8004652:	4809      	ldr	r0, [pc, #36]	@ (8004678 <EMV_CollectGPOInfo+0xb0>)
 8004654:	f01d fcd2 	bl	8021ffc <iprintf>
 8004658:	4b08      	ldr	r3, [pc, #32]	@ (800467c <EMV_CollectGPOInfo+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f01d fbf6 	bl	8021e50 <fflush>
            return EMV_SUCCESS;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <EMV_CollectGPOInfo+0xa2>
        }
    }

    return EMV_ERROR_GPO;
 8004668:	2304      	movs	r3, #4
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	0802596c 	.word	0x0802596c
 8004678:	08025950 	.word	0x08025950
 800467c:	20000084 	.word	0x20000084

08004680 <EMV_CollectAllRecords>:

// ==================================================
// 新增功能5: 收集所有记录
// ==================================================
EMV_Result_t EMV_CollectAllRecords(EMV_Complete_Card_Data_t *card_data)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	@ 0x30
 8004684:	af02      	add	r7, sp, #8
 8004686:	6078      	str	r0, [r7, #4]
    // 尝试读取常见的SFI记录
    uint8_t sfi_list[] = {1, 2, 3, 4};
 8004688:	4b5a      	ldr	r3, [pc, #360]	@ (80047f4 <EMV_CollectAllRecords+0x174>)
 800468a:	61bb      	str	r3, [r7, #24]
    uint8_t max_records_per_sfi = 5;
 800468c:	2305      	movs	r3, #5
 800468e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    card_data->sfi_record_count = 0;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2d28 	strb.w	r2, [r3, #3368]	@ 0xd28

    for (int sfi_idx = 0; sfi_idx < sizeof(sfi_list); sfi_idx++) {
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
 800469e:	e08b      	b.n	80047b8 <EMV_CollectAllRecords+0x138>
        uint8_t sfi = sfi_list[sfi_idx];
 80046a0:	f107 0218 	add.w	r2, r7, #24
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	4413      	add	r3, r2
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        for (uint8_t record = 1; record <= max_records_per_sfi; record++) {
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b4:	e077      	b.n	80047a6 <EMV_CollectAllRecords+0x126>
            uint8_t read_record_apdu[5] = {
 80046b6:	2300      	movs	r3, #0
 80046b8:	743b      	strb	r3, [r7, #16]
 80046ba:	23b2      	movs	r3, #178	@ 0xb2
 80046bc:	747b      	strb	r3, [r7, #17]
 80046be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046c2:	74bb      	strb	r3, [r7, #18]
                0x00, 0xB2, record, (sfi << 3) | 0x04, 0x00
 80046c4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
            uint8_t read_record_apdu[5] = {
 80046d4:	74fb      	strb	r3, [r7, #19]
 80046d6:	2300      	movs	r3, #0
 80046d8:	753b      	strb	r3, [r7, #20]
            };

            phStatus_t status;
            uint8_t *ppRxBuffer;
            uint16_t wRxLen = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	817b      	strh	r3, [r7, #10]

            status = phpalI14443p4_Exchange(
 80046de:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80046e2:	f004 fc85 	bl	8008ff0 <phNfcLib_GetDataParams>
 80046e6:	f107 0210 	add.w	r2, r7, #16
 80046ea:	f107 030a 	add.w	r3, r7, #10
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	f107 030c 	add.w	r3, r7, #12
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	2305      	movs	r3, #5
 80046f8:	2100      	movs	r1, #0
 80046fa:	f013 f8d1 	bl	80178a0 <phpalI14443p4_Sw_Exchange>
 80046fe:	4603      	mov	r3, r0
 8004700:	83fb      	strh	r3, [r7, #30]
                PH_EXCHANGE_DEFAULT,
                read_record_apdu, sizeof(read_record_apdu),
                &ppRxBuffer, &wRxLen
            );

            if (status == PH_ERR_SUCCESS && wRxLen >= 2) {
 8004702:	8bfb      	ldrh	r3, [r7, #30]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d149      	bne.n	800479c <EMV_CollectAllRecords+0x11c>
 8004708:	897b      	ldrh	r3, [r7, #10]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d946      	bls.n	800479c <EMV_CollectAllRecords+0x11c>
                uint8_t sw1 = ppRxBuffer[wRxLen-2];
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	3b02      	subs	r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	777b      	strb	r3, [r7, #29]
                uint8_t sw2 = ppRxBuffer[wRxLen-1];
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	897b      	ldrh	r3, [r7, #10]
 800471e:	3b01      	subs	r3, #1
 8004720:	4413      	add	r3, r2
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	773b      	strb	r3, [r7, #28]

                if (sw1 == 0x90 && sw2 == 0x00) {
 8004726:	7f7b      	ldrb	r3, [r7, #29]
 8004728:	2b90      	cmp	r3, #144	@ 0x90
 800472a:	d142      	bne.n	80047b2 <EMV_CollectAllRecords+0x132>
 800472c:	7f3b      	ldrb	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13f      	bne.n	80047b2 <EMV_CollectAllRecords+0x132>
                    // 成功读取记录
                    if (card_data->sfi_record_count < 10) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8004738:	2b09      	cmp	r3, #9
 800473a:	d82f      	bhi.n	800479c <EMV_CollectAllRecords+0x11c>
                        card_data->sfi_record_lens[card_data->sfi_record_count] = wRxLen;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8004742:	8979      	ldrh	r1, [r7, #10]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	f503 63d1 	add.w	r3, r3, #1672	@ 0x688
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	460a      	mov	r2, r1
 8004750:	809a      	strh	r2, [r3, #4]
                        memcpy(card_data->sfi_records[card_data->sfi_record_count],
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	3304      	adds	r3, #4
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	897a      	ldrh	r2, [r7, #10]
 8004768:	4618      	mov	r0, r3
 800476a:	f01d fe26 	bl	80223ba <memcpy>
                               ppRxBuffer, wRxLen);
                        card_data->sfi_record_count++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 8004774:	3301      	adds	r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f883 2d28 	strb.w	r2, [r3, #3368]	@ 0xd28

                        DEBUG_PRINTF("SFI %d Record %d: %d bytes\r\n", sfi, record, wRxLen-2);
 800477e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8004782:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	3b02      	subs	r3, #2
 800478a:	481b      	ldr	r0, [pc, #108]	@ (80047f8 <EMV_CollectAllRecords+0x178>)
 800478c:	f01d fc36 	bl	8021ffc <iprintf>
 8004790:	4b1a      	ldr	r3, [pc, #104]	@ (80047fc <EMV_CollectAllRecords+0x17c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f01d fb5a 	bl	8021e50 <fflush>
        for (uint8_t record = 1; record <= max_records_per_sfi; record++) {
 800479c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047a0:	3301      	adds	r3, #1
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80047aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d981      	bls.n	80046b6 <EMV_CollectAllRecords+0x36>
    for (int sfi_idx = 0; sfi_idx < sizeof(sfi_list); sfi_idx++) {
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	3301      	adds	r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	f67f af70 	bls.w	80046a0 <EMV_CollectAllRecords+0x20>
                }
            }
        }
    }

    if (card_data->sfi_record_count > 0) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <EMV_CollectAllRecords+0x168>
        DEBUG_PRINTF("Total records collected: %d\r\n", card_data->sfi_record_count);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3d28 	ldrb.w	r3, [r3, #3368]	@ 0xd28
 80047d0:	4619      	mov	r1, r3
 80047d2:	480b      	ldr	r0, [pc, #44]	@ (8004800 <EMV_CollectAllRecords+0x180>)
 80047d4:	f01d fc12 	bl	8021ffc <iprintf>
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <EMV_CollectAllRecords+0x17c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f01d fb36 	bl	8021e50 <fflush>
        return EMV_SUCCESS;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <EMV_CollectAllRecords+0x16a>
    }

    return EMV_ERROR_READ_RECORD;
 80047e8:	2305      	movs	r3, #5
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3728      	adds	r7, #40	@ 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	04030201 	.word	0x04030201
 80047f8:	08025974 	.word	0x08025974
 80047fc:	20000084 	.word	0x20000084
 8004800:	08025994 	.word	0x08025994

08004804 <EMV_ShowSuccessIndication>:

// ==================================================
// 新增功能8: 硬件指示
// ==================================================
void EMV_ShowSuccessIndication(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("Transaction Successful!\r\n");
 8004808:	4805      	ldr	r0, [pc, #20]	@ (8004820 <EMV_ShowSuccessIndication+0x1c>)
 800480a:	f01d fc67 	bl	80220dc <puts>
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <EMV_ShowSuccessIndication+0x20>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f01d fb1b 	bl	8021e50 <fflush>
    // 可以添加LED闪烁、蜂鸣器提示等
    // beep_start(2, 200);  // 成功提示音
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	08025b90 	.word	0x08025b90
 8004824:	20000084 	.word	0x20000084

08004828 <EMV_ShowFailureIndication>:

void EMV_ShowFailureIndication(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
    DEBUG_PRINTF("Transaction Failed!\r\n");
 800482c:	4805      	ldr	r0, [pc, #20]	@ (8004844 <EMV_ShowFailureIndication+0x1c>)
 800482e:	f01d fc55 	bl	80220dc <puts>
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <EMV_ShowFailureIndication+0x20>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4618      	mov	r0, r3
 800483a:	f01d fb09 	bl	8021e50 <fflush>
    // 可以添加LED闪烁、蜂鸣器提示等
    // beep_start(3, 100);  // 失败提示音
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	08025bac 	.word	0x08025bac
 8004848:	20000084 	.word	0x20000084

0800484c <EmvcoProfileProcess>:
static phStatus_t EmvcoDataExchange(uint8_t * com_buffer, uint8_t cmdsize, uint8_t ** resp_buffer, uint32_t * wRxLength);
static void EmvcoRfReset(phacDiscLoop_Sw_DataParams_t * pDataParams);
static phStatus_t EmvcoDataLoopBack(phacDiscLoop_Sw_DataParams_t * pDataParams);

void EmvcoProfileProcess (phacDiscLoop_Sw_DataParams_t * pDataParams,phStatus_t eDiscStatus)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
	phStatus_t status = eDiscStatus;
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	81fb      	strh	r3, [r7, #14]

	if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b8b      	cmp	r3, #139	@ 0x8b
 8004862:	d104      	bne.n	800486e <EmvcoProfileProcess+0x22>
	{
		status = EmvcoDataLoopBack(pDataParams);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f861 	bl	800492c <EmvcoDataLoopBack>
 800486a:	4603      	mov	r3, r0
 800486c:	81fb      	strh	r3, [r7, #14]
	}

	if((status & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 800486e:	89fb      	ldrh	r3, [r7, #14]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b84      	cmp	r3, #132	@ 0x84
 8004874:	d002      	beq.n	800487c <EmvcoProfileProcess+0x30>
	{
		/* Perform RF Reset */
		EmvcoRfReset(pDataParams);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f804 	bl	8004884 <EmvcoRfReset>
	}
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <EmvcoRfReset>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static void EmvcoRfReset(phacDiscLoop_Sw_DataParams_t * pDataParams)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    phStatus_t status = PH_ERR_SUCCESS;
 800488c:	2300      	movs	r3, #0
 800488e:	81fb      	strh	r3, [r7, #14]

    /*RF Field OFF*/
    status = phhalHw_FieldOff(pDataParams->pHalDataParams);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	4618      	mov	r0, r3
 8004896:	f00b fbb3 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 800489a:	4603      	mov	r3, r0
 800489c:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <EmvcoRfReset+0x38>
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	461a      	mov	r2, r3
 80048a8:	2180      	movs	r1, #128	@ 0x80
 80048aa:	481e      	ldr	r0, [pc, #120]	@ (8004924 <EmvcoRfReset+0xa0>)
 80048ac:	f01d fba6 	bl	8021ffc <iprintf>
 80048b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <EmvcoRfReset+0xa4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f01d faca 	bl	8021e50 <fflush>

    status = phhalHw_Wait(pDataParams->pHalDataParams,PHHAL_HW_TIME_MICROSECONDS, 5100);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f00b fbbe 	bl	8010048 <phhalHw_Pn5180_Wait>
 80048cc:	4603      	mov	r3, r0
 80048ce:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 80048d0:	89fb      	ldrh	r3, [r7, #14]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <EmvcoRfReset+0x6a>
 80048d6:	89fb      	ldrh	r3, [r7, #14]
 80048d8:	461a      	mov	r2, r3
 80048da:	2183      	movs	r1, #131	@ 0x83
 80048dc:	4811      	ldr	r0, [pc, #68]	@ (8004924 <EmvcoRfReset+0xa0>)
 80048de:	f01d fb8d 	bl	8021ffc <iprintf>
 80048e2:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <EmvcoRfReset+0xa4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f01d fab1 	bl	8021e50 <fflush>

    /*RF Field ON*/
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	4618      	mov	r0, r3
 80048f4:	f00b fb2e 	bl	800ff54 <phhalHw_Pn5180_FieldOn>
 80048f8:	4603      	mov	r3, r0
 80048fa:	81fb      	strh	r3, [r7, #14]
    CHECK_STATUS(status);
 80048fc:	89fb      	ldrh	r3, [r7, #14]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <EmvcoRfReset+0x96>
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	461a      	mov	r2, r3
 8004906:	2187      	movs	r1, #135	@ 0x87
 8004908:	4806      	ldr	r0, [pc, #24]	@ (8004924 <EmvcoRfReset+0xa0>)
 800490a:	f01d fb77 	bl	8021ffc <iprintf>
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <EmvcoRfReset+0xa4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4618      	mov	r0, r3
 8004916:	f01d fa9b 	bl	8021e50 <fflush>

}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	08025bc4 	.word	0x08025bc4
 8004928:	20000084 	.word	0x20000084

0800492c <EmvcoDataLoopBack>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static phStatus_t EmvcoDataLoopBack(phacDiscLoop_Sw_DataParams_t * pDataParams)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
    uint32_t cmdsize, respsize;
    phStatus_t status;
    uint8_t bEndOfLoopBack = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	747b      	strb	r3, [r7, #17]
    uint8_t bRemovalProcedure = PH_OFF;
 8004938:	2300      	movs	r3, #0
 800493a:	743b      	strb	r3, [r7, #16]
    cmdsize = sizeof(PPSE_SELECT_APDU);
 800493c:	2314      	movs	r3, #20
 800493e:	617b      	str	r3, [r7, #20]

    status = EmvcoDataExchange(PPSE_SELECT_APDU, cmdsize, &response_buffer, &respsize);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	b2d9      	uxtb	r1, r3
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 800494a:	485e      	ldr	r0, [pc, #376]	@ (8004ac4 <EmvcoDataLoopBack+0x198>)
 800494c:	f000 f8d0 	bl	8004af0 <EmvcoDataExchange>
 8004950:	4603      	mov	r3, r0
 8004952:	827b      	strh	r3, [r7, #18]

#ifndef RUN_TEST_SUIT

    /*Check if P1 is 0x04 which means that the data field consists of DF name */
    if(PPSE_SELECT_APDU[2] == 0x04)
 8004954:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac4 <EmvcoDataLoopBack+0x198>)
 8004956:	789b      	ldrb	r3, [r3, #2]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d10e      	bne.n	800497a <EmvcoDataLoopBack+0x4e>
    {
        DEBUG_PRINTF("\n DF Name: \n");
 800495c:	485a      	ldr	r0, [pc, #360]	@ (8004ac8 <EmvcoDataLoopBack+0x19c>)
 800495e:	f01d fbbd 	bl	80220dc <puts>
 8004962:	4b5a      	ldr	r3, [pc, #360]	@ (8004acc <EmvcoDataLoopBack+0x1a0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f01d fa71 	bl	8021e50 <fflush>
        /* DF Size = Total Command size - size of(PDU Header + Expected Len(Le))*/
        phApp_Print_Buff(&PPSE_SELECT_APDU[5], PPSE_SELECT_APDU[4]);
 800496e:	4b55      	ldr	r3, [pc, #340]	@ (8004ac4 <EmvcoDataLoopBack+0x198>)
 8004970:	791b      	ldrb	r3, [r3, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	4856      	ldr	r0, [pc, #344]	@ (8004ad0 <EmvcoDataLoopBack+0x1a4>)
 8004976:	f000 f983 	bl	8004c80 <phApp_Print_Buff>
    }
    if (respsize > 0)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d021      	beq.n	80049c4 <EmvcoDataLoopBack+0x98>
    {
        memcpy(&PPSE_response_buffer[0],response_buffer,respsize);
 8004980:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4619      	mov	r1, r3
 8004988:	4852      	ldr	r0, [pc, #328]	@ (8004ad4 <EmvcoDataLoopBack+0x1a8>)
 800498a:	f01d fd16 	bl	80223ba <memcpy>
        DEBUG_PRINTF("\n SELECT_PPSE Res:\n");
 800498e:	4852      	ldr	r0, [pc, #328]	@ (8004ad8 <EmvcoDataLoopBack+0x1ac>)
 8004990:	f01d fba4 	bl	80220dc <puts>
 8004994:	4b4d      	ldr	r3, [pc, #308]	@ (8004acc <EmvcoDataLoopBack+0x1a0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4618      	mov	r0, r3
 800499c:	f01d fa58 	bl	8021e50 <fflush>
        /* Status word removed */
        phApp_Print_Buff(PPSE_response_buffer, (respsize - 2));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	3b02      	subs	r3, #2
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	484a      	ldr	r0, [pc, #296]	@ (8004ad4 <EmvcoDataLoopBack+0x1a8>)
 80049ac:	f000 f968 	bl	8004c80 <phApp_Print_Buff>
        DEBUG_PRINTF("\nTransaction Done Remove card\n");
 80049b0:	484a      	ldr	r0, [pc, #296]	@ (8004adc <EmvcoDataLoopBack+0x1b0>)
 80049b2:	f01d fb93 	bl	80220dc <puts>
 80049b6:	4b45      	ldr	r3, [pc, #276]	@ (8004acc <EmvcoDataLoopBack+0x1a0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4618      	mov	r0, r3
 80049be:	f01d fa47 	bl	8021e50 <fflush>
 80049c2:	e055      	b.n	8004a70 <EmvcoDataLoopBack+0x144>
    }
    else
    {
        DEBUG_PRINTF("\nFCI not recieved\n");
 80049c4:	4846      	ldr	r0, [pc, #280]	@ (8004ae0 <EmvcoDataLoopBack+0x1b4>)
 80049c6:	f01d fb89 	bl	80220dc <puts>
 80049ca:	4b40      	ldr	r3, [pc, #256]	@ (8004acc <EmvcoDataLoopBack+0x1a0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f01d fa3d 	bl	8021e50 <fflush>
#ifdef PPSE_NO_LE
        DEBUG_PRINTF("Transaction Done Remove card\n");
#else
        DEBUG_PRINTF("Transaction Failed Replace the card\n");
 80049d6:	4843      	ldr	r0, [pc, #268]	@ (8004ae4 <EmvcoDataLoopBack+0x1b8>)
 80049d8:	f01d fb80 	bl	80220dc <puts>
 80049dc:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <EmvcoDataLoopBack+0x1a0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f01d fa34 	bl	8021e50 <fflush>
#endif
    }

#endif

    while (!bEndOfLoopBack)
 80049e8:	e042      	b.n	8004a70 <EmvcoDataLoopBack+0x144>
    {
        if (respsize > 0)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d03d      	beq.n	8004a6c <EmvcoDataLoopBack+0x140>
        {
            if (respsize >= MiN_VALID_DATA_SIZE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d92a      	bls.n	8004a4c <EmvcoDataLoopBack+0x120>
            {
                /* EOT (End Of Test) Command. Exit the loop */
                if (eEmdRes_EOT == response_buffer[1])
 80049f6:	4b32      	ldr	r3, [pc, #200]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3301      	adds	r3, #1
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b70      	cmp	r3, #112	@ 0x70
 8004a00:	d104      	bne.n	8004a0c <EmvcoDataLoopBack+0xe0>
                {
                    /* Second byte = 0x70, stop the loopback */
                    bEndOfLoopBack = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	747b      	strb	r3, [r7, #17]
                    bRemovalProcedure = PH_ON;
 8004a06:	2301      	movs	r3, #1
 8004a08:	743b      	strb	r3, [r7, #16]
 8004a0a:	e031      	b.n	8004a70 <EmvcoDataLoopBack+0x144>
                }
                else if (eEmdRes_SW_0 == response_buffer[respsize - 2])
 8004a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3b02      	subs	r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b90      	cmp	r3, #144	@ 0x90
 8004a1a:	d114      	bne.n	8004a46 <EmvcoDataLoopBack+0x11a>
                {
                    /* Format the card response into a new command without the status word 0x90 0x00 */
                    cmdsize = respsize - 2;  /* To Remove two bytes of status word */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b02      	subs	r3, #2
 8004a20:	617b      	str	r3, [r7, #20]
                    memcpy(command_buffer, response_buffer, cmdsize);
 8004a22:	4b27      	ldr	r3, [pc, #156]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	482f      	ldr	r0, [pc, #188]	@ (8004ae8 <EmvcoDataLoopBack+0x1bc>)
 8004a2c:	f01d fcc5 	bl	80223ba <memcpy>

                    /* Send back(Command) : Received Response - Status_Word */
                    status = EmvcoDataExchange(command_buffer, cmdsize, &response_buffer, &respsize);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	b2d9      	uxtb	r1, r3
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4a21      	ldr	r2, [pc, #132]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 8004a3a:	482b      	ldr	r0, [pc, #172]	@ (8004ae8 <EmvcoDataLoopBack+0x1bc>)
 8004a3c:	f000 f858 	bl	8004af0 <EmvcoDataExchange>
 8004a40:	4603      	mov	r3, r0
 8004a42:	827b      	strh	r3, [r7, #18]
 8004a44:	e014      	b.n	8004a70 <EmvcoDataLoopBack+0x144>
                }
                else
                {
                    /* error Abort Loopback */
                    bEndOfLoopBack = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	747b      	strb	r3, [r7, #17]
 8004a4a:	e011      	b.n	8004a70 <EmvcoDataLoopBack+0x144>
                }
            }
            else/*if (respsize <6)*/
            {
                /* re-send the select appli APDU */
                status = EmvcoDataExchange(PPSE_SELECT_APDU, cmdsize, &response_buffer, &respsize);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	b2d9      	uxtb	r1, r3
 8004a50:	f107 030c 	add.w	r3, r7, #12
 8004a54:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac0 <EmvcoDataLoopBack+0x194>)
 8004a56:	481b      	ldr	r0, [pc, #108]	@ (8004ac4 <EmvcoDataLoopBack+0x198>)
 8004a58:	f000 f84a 	bl	8004af0 <EmvcoDataExchange>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	827b      	strh	r3, [r7, #18]
                if (respsize == 0)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <EmvcoDataLoopBack+0x144>
                {
                    bEndOfLoopBack = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	747b      	strb	r3, [r7, #17]
 8004a6a:	e001      	b.n	8004a70 <EmvcoDataLoopBack+0x144>
                }
            }
        }/*if(respsize > 0)*/
        else
        {
            bEndOfLoopBack = 1;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	747b      	strb	r3, [r7, #17]
    while (!bEndOfLoopBack)
 8004a70:	7c7b      	ldrb	r3, [r7, #17]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0b9      	beq.n	80049ea <EmvcoDataLoopBack+0xbe>
        }
    }/*while (!bEndOfLoopBack)*/

    if(bRemovalProcedure == PH_ON)
 8004a76:	7c3b      	ldrb	r3, [r7, #16]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d11b      	bne.n	8004ab4 <EmvcoDataLoopBack+0x188>
    {
        /* Set Poll state to perform Tag removal procedure*/
        status = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_REMOVAL);
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	2184      	movs	r1, #132	@ 0x84
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f005 f8bb 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 8004a86:	4603      	mov	r3, r0
 8004a88:	827b      	strh	r3, [r7, #18]
        CHECK_STATUS(status);
 8004a8a:	8a7b      	ldrh	r3, [r7, #18]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <EmvcoDataLoopBack+0x17c>
 8004a90:	8a7b      	ldrh	r3, [r7, #18]
 8004a92:	461a      	mov	r2, r3
 8004a94:	21ec      	movs	r1, #236	@ 0xec
 8004a96:	4815      	ldr	r0, [pc, #84]	@ (8004aec <EmvcoDataLoopBack+0x1c0>)
 8004a98:	f01d fab0 	bl	8021ffc <iprintf>
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <EmvcoDataLoopBack+0x1a0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f01d f9d4 	bl	8021e50 <fflush>

        status = phacDiscLoop_Run(pDataParams, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f004 ffd4 	bl	8009a58 <phacDiscLoop_Sw_Run>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	827b      	strh	r3, [r7, #18]
    }
    return status;
 8004ab4:	8a7b      	ldrh	r3, [r7, #18]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000898 	.word	0x20000898
 8004ac4:	20000024 	.word	0x20000024
 8004ac8:	08025c2c 	.word	0x08025c2c
 8004acc:	20000084 	.word	0x20000084
 8004ad0:	20000029 	.word	0x20000029
 8004ad4:	20000540 	.word	0x20000540
 8004ad8:	08025c38 	.word	0x08025c38
 8004adc:	08025c4c 	.word	0x08025c4c
 8004ae0:	08025c6c 	.word	0x08025c6c
 8004ae4:	08025c80 	.word	0x08025c80
 8004ae8:	20000640 	.word	0x20000640
 8004aec:	08025bc4 	.word	0x08025bc4

08004af0 <EmvcoDataExchange>:
* \return Status code
* \retval #PH_ERR_SUCCESS Operation successful.
* \retval Other Depending on implementation and underlying component.
*/
static phStatus_t EmvcoDataExchange(uint8_t * com_buffer, uint8_t cmdsize, uint8_t ** resp_buffer, uint32_t * wRxLength)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	460b      	mov	r3, r1
 8004afe:	72fb      	strb	r3, [r7, #11]
    phStatus_t status;
    uint8_t *ppRxBuffer;
    uint16_t wRxLen = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	82fb      	strh	r3, [r7, #22]

    // 打印发送的C-APDU
    DEBUG_PRINTF("\n=== C-APDU SEND (%d bytes) ===\n", cmdsize);
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4822      	ldr	r0, [pc, #136]	@ (8004b94 <EmvcoDataExchange+0xa4>)
 8004b0a:	f01d fa77 	bl	8021ffc <iprintf>
 8004b0e:	4b22      	ldr	r3, [pc, #136]	@ (8004b98 <EmvcoDataExchange+0xa8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f01d f99b 	bl	8021e50 <fflush>
    phApp_Print_Buff(com_buffer, cmdsize);
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f8ae 	bl	8004c80 <phApp_Print_Buff>

    status = phpalI14443p4_Exchange(phNfcLib_GetDataParams(PH_COMP_PAL_ISO14443P4), PH_EXCHANGE_DEFAULT,
 8004b24:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8004b28:	f004 fa62 	bl	8008ff0 <phNfcLib_GetDataParams>
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f107 0316 	add.w	r3, r7, #22
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	2100      	movs	r1, #0
 8004b42:	f012 fead 	bl	80178a0 <phpalI14443p4_Sw_Exchange>
 8004b46:	4603      	mov	r3, r0
 8004b48:	83fb      	strh	r3, [r7, #30]
    		com_buffer, cmdsize, &ppRxBuffer, &wRxLen);
    if (PH_ERR_SUCCESS == status)
 8004b4a:	8bfb      	ldrh	r3, [r7, #30]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d115      	bne.n	8004b7c <EmvcoDataExchange+0x8c>
    {
        /* set the pointer to the start of the R-APDU */
        *resp_buffer = &ppRxBuffer[0];
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]

        // 打印接收的R-APDU
        DEBUG_PRINTF("\n=== R-APDU RECV (%d bytes) ===\n", wRxLen);
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4810      	ldr	r0, [pc, #64]	@ (8004b9c <EmvcoDataExchange+0xac>)
 8004b5c:	f01d fa4e 	bl	8021ffc <iprintf>
 8004b60:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <EmvcoDataExchange+0xa8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f01d f972 	bl	8021e50 <fflush>
        phApp_Print_Buff(ppRxBuffer, wRxLen);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	8afa      	ldrh	r2, [r7, #22]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 f883 	bl	8004c80 <phApp_Print_Buff>
 8004b7a:	e001      	b.n	8004b80 <EmvcoDataExchange+0x90>
    }
    else
    {
        /* Exchange not successful, reset the number of rxd bytes */
        wRxLen = 0x00;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	82fb      	strh	r3, [r7, #22]
    }

    *wRxLength = wRxLen;
 8004b80:	8afb      	ldrh	r3, [r7, #22]
 8004b82:	461a      	mov	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	601a      	str	r2, [r3, #0]

    return status;
 8004b88:	8bfb      	ldrh	r3, [r7, #30]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	08025ca4 	.word	0x08025ca4
 8004b98:	20000084 	.word	0x20000084
 8004b9c:	08025cc8 	.word	0x08025cc8

08004ba0 <phApp_PrintTech>:
/*******************************************************************************
**   Function Definitions
*******************************************************************************/
/* Print technology being resolved */
void phApp_PrintTech(uint8_t TechType)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
    switch(TechType)
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	2b0f      	cmp	r3, #15
 8004bb0:	d854      	bhi.n	8004c5c <phApp_PrintTech+0xbc>
 8004bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <phApp_PrintTech+0x18>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c5d 	.word	0x08004c5d
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004c5d 	.word	0x08004c5d
 8004bcc:	08004c5d 	.word	0x08004c5d
 8004bd0:	08004c5d 	.word	0x08004c5d
 8004bd4:	08004c35 	.word	0x08004c35
 8004bd8:	08004c5d 	.word	0x08004c5d
 8004bdc:	08004c5d 	.word	0x08004c5d
 8004be0:	08004c5d 	.word	0x08004c5d
 8004be4:	08004c5d 	.word	0x08004c5d
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c5d 	.word	0x08004c5d
 8004bf4:	08004c49 	.word	0x08004c49
    {
    case PHAC_DISCLOOP_POS_BIT_MASK_A:
        DEBUG_PRINTF ("\tResolving Type A... \n");
 8004bf8:	481b      	ldr	r0, [pc, #108]	@ (8004c68 <phApp_PrintTech+0xc8>)
 8004bfa:	f01d fa6f 	bl	80220dc <puts>
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c6c <phApp_PrintTech+0xcc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f01d f923 	bl	8021e50 <fflush>
        break;
 8004c0a:	e028      	b.n	8004c5e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_B:
        DEBUG_PRINTF ("\tResolving Type B... \n");
 8004c0c:	4818      	ldr	r0, [pc, #96]	@ (8004c70 <phApp_PrintTech+0xd0>)
 8004c0e:	f01d fa65 	bl	80220dc <puts>
 8004c12:	4b16      	ldr	r3, [pc, #88]	@ (8004c6c <phApp_PrintTech+0xcc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f01d f919 	bl	8021e50 <fflush>
        break;
 8004c1e:	e01e      	b.n	8004c5e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F212:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 212... \n");
 8004c20:	4814      	ldr	r0, [pc, #80]	@ (8004c74 <phApp_PrintTech+0xd4>)
 8004c22:	f01d fa5b 	bl	80220dc <puts>
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <phApp_PrintTech+0xcc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f01d f90f 	bl	8021e50 <fflush>
        break;
 8004c32:	e014      	b.n	8004c5e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F424:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 424... \n");
 8004c34:	4810      	ldr	r0, [pc, #64]	@ (8004c78 <phApp_PrintTech+0xd8>)
 8004c36:	f01d fa51 	bl	80220dc <puts>
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <phApp_PrintTech+0xcc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f01d f905 	bl	8021e50 <fflush>
        break;
 8004c46:	e00a      	b.n	8004c5e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_V:
        DEBUG_PRINTF ("\tResolving Type V... \n");
 8004c48:	480c      	ldr	r0, [pc, #48]	@ (8004c7c <phApp_PrintTech+0xdc>)
 8004c4a:	f01d fa47 	bl	80220dc <puts>
 8004c4e:	4b07      	ldr	r3, [pc, #28]	@ (8004c6c <phApp_PrintTech+0xcc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f01d f8fb 	bl	8021e50 <fflush>
        break;
 8004c5a:	e000      	b.n	8004c5e <phApp_PrintTech+0xbe>

    default:
        break;
 8004c5c:	bf00      	nop
    }
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	08025cec 	.word	0x08025cec
 8004c6c:	20000084 	.word	0x20000084
 8004c70:	08025d04 	.word	0x08025d04
 8004c74:	08025d1c 	.word	0x08025d1c
 8004c78:	08025d48 	.word	0x08025d48
 8004c7c:	08025d74 	.word	0x08025d74

08004c80 <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e010      	b.n	8004cb4 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	480a      	ldr	r0, [pc, #40]	@ (8004cc8 <phApp_Print_Buff+0x48>)
 8004c9e:	f01d f9ad 	bl	8021ffc <iprintf>
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <phApp_Print_Buff+0x4c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f01d f8d1 	bl	8021e50 <fflush>
    for(i = 0; i < num; i++)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d3ea      	bcc.n	8004c92 <phApp_Print_Buff+0x12>
    }
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	08025d8c 	.word	0x08025d8c
 8004ccc:	20000084 	.word	0x20000084

08004cd0 <phApp_PrintTagInfo>:
* \param   pDataParams      The discovery loop data parameters
* \param   wNumberOfTags    Total number of tags detected
* \param   wTagsDetected    Technology Detected
*/
void phApp_PrintTagInfo(phacDiscLoop_Sw_DataParams_t *pDataParams, uint16_t wNumberOfTags, uint16_t wTagsDetected)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	803b      	strh	r3, [r7, #0]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint8_t bTagType;
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8004ce0:	883b      	ldrh	r3, [r7, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80da 	beq.w	8004ea0 <phApp_PrintTagInfo+0x1d0>
    {
        if(pDataParams->sTypeATargetInfo.bT1TFlag)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d032      	beq.n	8004d5c <phApp_PrintTagInfo+0x8c>
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 8004cf6:	4898      	ldr	r0, [pc, #608]	@ (8004f58 <phApp_PrintTagInfo+0x288>)
 8004cf8:	f01d f980 	bl	8021ffc <iprintf>
 8004cfc:	4b97      	ldr	r3, [pc, #604]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f01d f8a4 	bl	8021e50 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 8004d08:	4895      	ldr	r0, [pc, #596]	@ (8004f60 <phApp_PrintTagInfo+0x290>)
 8004d0a:	f01d f977 	bl	8021ffc <iprintf>
 8004d0e:	4b93      	ldr	r3, [pc, #588]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f01d f89b 	bl	8021e50 <fflush>
            phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7ff ffa9 	bl	8004c80 <phApp_Print_Buff>
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
            DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aSak);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8004d34:	4619      	mov	r1, r3
 8004d36:	488b      	ldr	r0, [pc, #556]	@ (8004f64 <phApp_PrintTagInfo+0x294>)
 8004d38:	f01d f960 	bl	8021ffc <iprintf>
 8004d3c:	4b87      	ldr	r3, [pc, #540]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f01d f884 	bl	8021e50 <fflush>
            DEBUG_PRINTF ("\n\t\tType: Type 1 Tag\n");
 8004d48:	4887      	ldr	r0, [pc, #540]	@ (8004f68 <phApp_PrintTagInfo+0x298>)
 8004d4a:	f01d f9c7 	bl	80220dc <puts>
 8004d4e:	4b83      	ldr	r3, [pc, #524]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f01d f87b 	bl	8021e50 <fflush>
 8004d5a:	e0a1      	b.n	8004ea0 <phApp_PrintTagInfo+0x1d0>
        }
        else
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 8004d5c:	487e      	ldr	r0, [pc, #504]	@ (8004f58 <phApp_PrintTagInfo+0x288>)
 8004d5e:	f01d f94d 	bl	8021ffc <iprintf>
 8004d62:	4b7e      	ldr	r3, [pc, #504]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f01d f871 	bl	8021e50 <fflush>
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
 8004d72:	e08f      	b.n	8004e94 <phApp_PrintTagInfo+0x1c4>
            {
                DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4619      	mov	r1, r3
 8004d7a:	487c      	ldr	r0, [pc, #496]	@ (8004f6c <phApp_PrintTagInfo+0x29c>)
 8004d7c:	f01d f93e 	bl	8021ffc <iprintf>
 8004d80:	4b76      	ldr	r3, [pc, #472]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f01d f862 	bl	8021e50 <fflush>
                DEBUG_PRINTF ("\n\t\tUID :");
 8004d8c:	4874      	ldr	r0, [pc, #464]	@ (8004f60 <phApp_PrintTagInfo+0x290>)
 8004d8e:	f01d f935 	bl	8021ffc <iprintf>
 8004d92:	4b72      	ldr	r3, [pc, #456]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f01d f859 	bl	8021e50 <fflush>
                phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aUid,
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	3358      	adds	r3, #88	@ 0x58
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4413      	add	r3, r2
 8004dac:	f103 0008 	add.w	r0, r3, #8
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	336a      	adds	r3, #106	@ 0x6a
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f7ff ff5d 	bl	8004c80 <phApp_Print_Buff>
                            pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize);
                DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak);
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	336b      	adds	r3, #107	@ 0x6b
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4862      	ldr	r0, [pc, #392]	@ (8004f64 <phApp_PrintTagInfo+0x294>)
 8004dda:	f01d f90f 	bl	8021ffc <iprintf>
 8004dde:	4b5f      	ldr	r3, [pc, #380]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f01d f833 	bl	8021e50 <fflush>

                if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & (uint8_t) ~0xFB) == 0)
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	336b      	adds	r3, #107	@ 0x6b
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d145      	bne.n	8004e8e <phApp_PrintTagInfo+0x1be>
                {
                    /* Bit b3 is set to zero, [Digital] 4.8.2 */
                    /* Mask out all other bits except for b7 and b6 */
                    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & 0x60);
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	336b      	adds	r3, #107	@ 0x6b
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e16:	73bb      	strb	r3, [r7, #14]
                    bTagType = bTagType >> 5;
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	73bb      	strb	r3, [r7, #14]

                    switch(bTagType)
 8004e1e:	7bbb      	ldrb	r3, [r7, #14]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d833      	bhi.n	8004e8c <phApp_PrintTagInfo+0x1bc>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <phApp_PrintTagInfo+0x15c>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e51 	.word	0x08004e51
 8004e34:	08004e65 	.word	0x08004e65
 8004e38:	08004e79 	.word	0x08004e79
                    {
                    case PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 2 Tag\n");
 8004e3c:	484c      	ldr	r0, [pc, #304]	@ (8004f70 <phApp_PrintTagInfo+0x2a0>)
 8004e3e:	f01d f94d 	bl	80220dc <puts>
 8004e42:	4b46      	ldr	r3, [pc, #280]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f01d f801 	bl	8021e50 <fflush>
                        break;
 8004e4e:	e01e      	b.n	8004e8e <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 4A Tag\n");
 8004e50:	4848      	ldr	r0, [pc, #288]	@ (8004f74 <phApp_PrintTagInfo+0x2a4>)
 8004e52:	f01d f943 	bl	80220dc <puts>
 8004e56:	4b41      	ldr	r3, [pc, #260]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f01c fff7 	bl	8021e50 <fflush>
                        break;
 8004e62:	e014      	b.n	8004e8e <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: P2P\n");
 8004e64:	4844      	ldr	r0, [pc, #272]	@ (8004f78 <phApp_PrintTagInfo+0x2a8>)
 8004e66:	f01d f939 	bl	80220dc <puts>
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f01c ffed 	bl	8021e50 <fflush>
                        break;
 8004e76:	e00a      	b.n	8004e8e <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type NFC_DEP and  4A Tag\n");
 8004e78:	4840      	ldr	r0, [pc, #256]	@ (8004f7c <phApp_PrintTagInfo+0x2ac>)
 8004e7a:	f01d f92f 	bl	80220dc <puts>
 8004e7e:	4b37      	ldr	r3, [pc, #220]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01c ffe3 	bl	8021e50 <fflush>
                        break;
 8004e8a:	e000      	b.n	8004e8e <phApp_PrintTagInfo+0x1be>
                    default:
                        break;
 8004e8c:	bf00      	nop
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	3301      	adds	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	887a      	ldrh	r2, [r7, #2]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f63f af6a 	bhi.w	8004d74 <phApp_PrintTagInfo+0xa4>
        }
    }
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 8004ea0:	883b      	ldrh	r3, [r7, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d03e      	beq.n	8004f28 <phApp_PrintTagInfo+0x258>
    {
        DEBUG_PRINTF("\tTechnology  : Type B");
 8004eaa:	4835      	ldr	r0, [pc, #212]	@ (8004f80 <phApp_PrintTagInfo+0x2b0>)
 8004eac:	f01d f8a6 	bl	8021ffc <iprintf>
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f01c ffca 	bl	8021e50 <fflush>
        /* Loop through all the Type B tags detected and print the Pupi */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	e024      	b.n	8004f0c <phApp_PrintTagInfo+0x23c>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4828      	ldr	r0, [pc, #160]	@ (8004f6c <phApp_PrintTagInfo+0x29c>)
 8004eca:	f01d f897 	bl	8021ffc <iprintf>
 8004ece:	4b23      	ldr	r3, [pc, #140]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f01c ffbb 	bl	8021e50 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 8004eda:	4821      	ldr	r0, [pc, #132]	@ (8004f60 <phApp_PrintTagInfo+0x290>)
 8004edc:	f01d f88e 	bl	8021ffc <iprintf>
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f01c ffb2 	bl	8021e50 <fflush>
            /* PUPI Length is always 4 bytes */
            phApp_Print_Buff( pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].aPupi, 0x04);
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	33c8      	adds	r3, #200	@ 0xc8
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	4413      	add	r3, r2
 8004efc:	3301      	adds	r3, #1
 8004efe:	2104      	movs	r1, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff febd 	bl	8004c80 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	887a      	ldrh	r2, [r7, #2]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d8d5      	bhi.n	8004ec2 <phApp_PrintTagInfo+0x1f2>
        }
        DEBUG_PRINTF("\n");
 8004f16:	200a      	movs	r0, #10
 8004f18:	f01d f882 	bl	8022020 <putchar>
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f01c ff94 	bl	8021e50 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 8004f28:	883b      	ldrh	r3, [r7, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <phApp_PrintTagInfo+0x26e>
        PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8004f32:	883b      	ldrh	r3, [r7, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 809b 	beq.w	8005074 <phApp_PrintTagInfo+0x3a4>
    {
        DEBUG_PRINTF("\tTechnology  : Type F");
 8004f3e:	4811      	ldr	r0, [pc, #68]	@ (8004f84 <phApp_PrintTagInfo+0x2b4>)
 8004f40:	f01d f85c 	bl	8021ffc <iprintf>
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <phApp_PrintTagInfo+0x28c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f01c ff80 	bl	8021e50 <fflush>

        /* Loop through all the type F tags and print the IDm */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	73fb      	strb	r3, [r7, #15]
 8004f54:	e089      	b.n	800506a <phApp_PrintTagInfo+0x39a>
 8004f56:	bf00      	nop
 8004f58:	08025d94 	.word	0x08025d94
 8004f5c:	20000084 	.word	0x20000084
 8004f60:	08025dac 	.word	0x08025dac
 8004f64:	08025db8 	.word	0x08025db8
 8004f68:	08025dc8 	.word	0x08025dc8
 8004f6c:	08025ddc 	.word	0x08025ddc
 8004f70:	08025de8 	.word	0x08025de8
 8004f74:	08025dfc 	.word	0x08025dfc
 8004f78:	08025e14 	.word	0x08025e14
 8004f7c:	08025e24 	.word	0x08025e24
 8004f80:	08025e48 	.word	0x08025e48
 8004f84:	08025e60 	.word	0x08025e60
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4885      	ldr	r0, [pc, #532]	@ (80051a4 <phApp_PrintTagInfo+0x4d4>)
 8004f90:	f01d f834 	bl	8021ffc <iprintf>
 8004f94:	4b84      	ldr	r3, [pc, #528]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f01c ff58 	bl	8021e50 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 8004fa0:	4882      	ldr	r0, [pc, #520]	@ (80051ac <phApp_PrintTagInfo+0x4dc>)
 8004fa2:	f01d f82b 	bl	8021ffc <iprintf>
 8004fa6:	4b80      	ldr	r3, [pc, #512]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f01c ff4f 	bl	8021e50 <fflush>
            phApp_Print_Buff( pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm,
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	4413      	add	r3, r2
 8004fba:	00da      	lsls	r2, r3, #3
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2108      	movs	r1, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fe58 	bl	8004c80 <phApp_Print_Buff>
                        PHAC_DISCLOOP_FELICA_IDM_LENGTH );
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	00da      	lsls	r2, r3, #3
 8004fdc:	1ad2      	subs	r2, r2, r3
 8004fde:	188b      	adds	r3, r1, r2
 8004fe0:	3394      	adds	r3, #148	@ 0x94
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d115      	bne.n	8005014 <phApp_PrintTagInfo+0x344>
                (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFE))
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	00da      	lsls	r2, r3, #3
 8004ff4:	1ad2      	subs	r2, r2, r3
 8004ff6:	188b      	adds	r3, r1, r2
 8004ff8:	3395      	adds	r3, #149	@ 0x95
 8004ffa:	781b      	ldrb	r3, [r3, #0]
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 8004ffc:	2bfe      	cmp	r3, #254	@ 0xfe
 8004ffe:	d109      	bne.n	8005014 <phApp_PrintTagInfo+0x344>
            {
                /* This is Type F tag with P2P capabilities */
                DEBUG_PRINTF ("\n\t\tType: P2P");
 8005000:	486b      	ldr	r0, [pc, #428]	@ (80051b0 <phApp_PrintTagInfo+0x4e0>)
 8005002:	f01c fffb 	bl	8021ffc <iprintf>
 8005006:	4b68      	ldr	r3, [pc, #416]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f01c ff1f 	bl	8021e50 <fflush>
 8005012:	e008      	b.n	8005026 <phApp_PrintTagInfo+0x356>
            }
            else
            {
                /* This is Type F T3T tag */
                DEBUG_PRINTF ("\n\t\tType: Type 3 Tag");
 8005014:	4867      	ldr	r0, [pc, #412]	@ (80051b4 <phApp_PrintTagInfo+0x4e4>)
 8005016:	f01c fff1 	bl	8021ffc <iprintf>
 800501a:	4b63      	ldr	r3, [pc, #396]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4618      	mov	r0, r3
 8005022:	f01c ff15 	bl	8021e50 <fflush>
            }

            if(pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].bBaud != PHAC_DISCLOOP_CON_BITR_212)
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	00da      	lsls	r2, r3, #3
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	188b      	adds	r3, r1, r2
 8005036:	33a6      	adds	r3, #166	@ 0xa6
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b04      	cmp	r3, #4
 800503c:	d009      	beq.n	8005052 <phApp_PrintTagInfo+0x382>
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 424\n");
 800503e:	485e      	ldr	r0, [pc, #376]	@ (80051b8 <phApp_PrintTagInfo+0x4e8>)
 8005040:	f01d f84c 	bl	80220dc <puts>
 8005044:	4b58      	ldr	r3, [pc, #352]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f01c ff00 	bl	8021e50 <fflush>
 8005050:	e008      	b.n	8005064 <phApp_PrintTagInfo+0x394>
            }
            else
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 212\n");
 8005052:	485a      	ldr	r0, [pc, #360]	@ (80051bc <phApp_PrintTagInfo+0x4ec>)
 8005054:	f01d f842 	bl	80220dc <puts>
 8005058:	4b53      	ldr	r3, [pc, #332]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f01c fef6 	bl	8021e50 <fflush>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	3301      	adds	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	b29b      	uxth	r3, r3
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	429a      	cmp	r2, r3
 8005072:	d889      	bhi.n	8004f88 <phApp_PrintTagInfo+0x2b8>
        }
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 8005074:	883b      	ldrh	r3, [r7, #0]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d03d      	beq.n	80050fa <phApp_PrintTagInfo+0x42a>
    {
        DEBUG_PRINTF("\tTechnology  : Type V / ISO 15693 / T5T");
 800507e:	4850      	ldr	r0, [pc, #320]	@ (80051c0 <phApp_PrintTagInfo+0x4f0>)
 8005080:	f01c ffbc 	bl	8021ffc <iprintf>
 8005084:	4b48      	ldr	r3, [pc, #288]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f01c fee0 	bl	8021e50 <fflush>
        /* Loop through all the Type V tags detected and print the UIDs */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	e023      	b.n	80050de <phApp_PrintTagInfo+0x40e>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	3301      	adds	r3, #1
 800509a:	4619      	mov	r1, r3
 800509c:	4841      	ldr	r0, [pc, #260]	@ (80051a4 <phApp_PrintTagInfo+0x4d4>)
 800509e:	f01c ffad 	bl	8021ffc <iprintf>
 80050a2:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f01c fed1 	bl	8021e50 <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80050ae:	483f      	ldr	r0, [pc, #252]	@ (80051ac <phApp_PrintTagInfo+0x4dc>)
 80050b0:	f01c ffa4 	bl	8021ffc <iprintf>
 80050b4:	4b3c      	ldr	r3, [pc, #240]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f01c fec8 	bl	8021e50 <fflush>
            phApp_Print_Buff( pDataParams->sTypeVTargetInfo.aTypeV[bIndex].aUid, 0x08);
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	33d8      	adds	r3, #216	@ 0xd8
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	330b      	adds	r3, #11
 80050d0:	2108      	movs	r1, #8
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fdd4 	bl	8004c80 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	3301      	adds	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d8d6      	bhi.n	8005096 <phApp_PrintTagInfo+0x3c6>
        }
        DEBUG_PRINTF("\n");
 80050e8:	200a      	movs	r0, #10
 80050ea:	f01c ff99 	bl	8022020 <putchar>
 80050ee:	4b2e      	ldr	r3, [pc, #184]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f01c feab 	bl	8021e50 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 80050fa:	883b      	ldrh	r3, [r7, #0]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d04b      	beq.n	800519c <phApp_PrintTagInfo+0x4cc>
    {
        DEBUG_PRINTF("\tTechnology  : ISO 18000p3m3 / EPC Gen2");
 8005104:	482f      	ldr	r0, [pc, #188]	@ (80051c4 <phApp_PrintTagInfo+0x4f4>)
 8005106:	f01c ff79 	bl	8021ffc <iprintf>
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4618      	mov	r0, r3
 8005112:	f01c fe9d 	bl	8021e50 <fflush>
        /* Loop through all the 18000p3m3 tags detected and print the UII */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	e031      	b.n	8005180 <phApp_PrintTagInfo+0x4b0>
        {
            DEBUG_PRINTF("\n\t\tCard: %d",bIndex + 1);
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	3301      	adds	r3, #1
 8005120:	4619      	mov	r1, r3
 8005122:	4820      	ldr	r0, [pc, #128]	@ (80051a4 <phApp_PrintTagInfo+0x4d4>)
 8005124:	f01c ff6a 	bl	8021ffc <iprintf>
 8005128:	4b1f      	ldr	r3, [pc, #124]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f01c fe8e 	bl	8021e50 <fflush>
            DEBUG_PRINTF("\n\t\tUII :");
 8005134:	4824      	ldr	r0, [pc, #144]	@ (80051c8 <phApp_PrintTagInfo+0x4f8>)
 8005136:	f01c ff61 	bl	8021ffc <iprintf>
 800513a:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f01c fe85 	bl	8021e50 <fflush>
            phApp_Print_Buff(
                pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].aUii,
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	4613      	mov	r3, r2
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	33e8      	adds	r3, #232	@ 0xe8
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	f103 0008 	add.w	r0, r3, #8
                (pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].wUiiLength / 8));
 800515a:	7bfa      	ldrb	r2, [r7, #15]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800516c:	881b      	ldrh	r3, [r3, #0]
            phApp_Print_Buff(
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	b29b      	uxth	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	4619      	mov	r1, r3
 8005176:	f7ff fd83 	bl	8004c80 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	3301      	adds	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	b29b      	uxth	r3, r3
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	429a      	cmp	r2, r3
 8005188:	d8c8      	bhi.n	800511c <phApp_PrintTagInfo+0x44c>
        }
        DEBUG_PRINTF("\n");
 800518a:	200a      	movs	r0, #10
 800518c:	f01c ff48 	bl	8022020 <putchar>
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <phApp_PrintTagInfo+0x4d8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f01c fe5a 	bl	8021e50 <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	08025ddc 	.word	0x08025ddc
 80051a8:	20000084 	.word	0x20000084
 80051ac:	08025dac 	.word	0x08025dac
 80051b0:	08025e14 	.word	0x08025e14
 80051b4:	08025e78 	.word	0x08025e78
 80051b8:	08025e8c 	.word	0x08025e8c
 80051bc:	08025ea0 	.word	0x08025ea0
 80051c0:	08025eb4 	.word	0x08025eb4
 80051c4:	08025edc 	.word	0x08025edc
 80051c8:	08025f04 	.word	0x08025f04

080051cc <phApp_CPU_Init>:
* This function will initialize Host Controller interfaced with NXP Reader IC's.
* Any initialization which is not generic across Platforms, should be done here.
* Note: For NXP NFC Controllers HOST initialization is not required.
*/
void phApp_CPU_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
	DEBUG_PRINTF("STM32 CPU already initialized\r\n");
 80051d0:	4805      	ldr	r0, [pc, #20]	@ (80051e8 <phApp_CPU_Init+0x1c>)
 80051d2:	f01c ff83 	bl	80220dc <puts>
 80051d6:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <phApp_CPU_Init+0x20>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4618      	mov	r0, r3
 80051de:	f01c fe37 	bl	8021e50 <fflush>
    }
#else
    /* In case of LPC series, startup file takes care of initializing clock and ports.
     * No initialization is required in Linux environment. */
#endif
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	080262a0 	.word	0x080262a0
 80051ec:	20000084 	.word	0x20000084

080051f0 <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80051f8:	2300      	movs	r3, #0
 80051fa:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60bb      	str	r3, [r7, #8]
#endif /* NXPBUILD__PHLN_LLCP_SW */

#ifdef NXPBUILD__PHAC_DISCLOOP_SW
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW)
    /* Assign the GI for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a11      	ldr	r2, [pc, #68]	@ (8005248 <phApp_Comp_Init+0x58>)
 8005204:	675a      	str	r2, [r3, #116]	@ 0x74
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.bGiLength = bLLCPGBLength;
 8005206:	4b11      	ldr	r3, [pc, #68]	@ (800524c <phApp_Comp_Init+0x5c>)
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    /* Assign the GI for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a0d      	ldr	r2, [pc, #52]	@ (8005248 <phApp_Comp_Init+0x58>)
 8005214:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.bGiLength = bLLCPGBLength;
 8005218:	4b0c      	ldr	r3, [pc, #48]	@ (800524c <phApp_Comp_Init+0x5c>)
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    /* Assign ATR response for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pAtrRes   = aResponseHolder;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <phApp_Comp_Init+0x60>)
 8005226:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) ||  defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <phApp_Comp_Init+0x60>)
 800522c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a07      	ldr	r2, [pc, #28]	@ (8005250 <phApp_Comp_Init+0x60>)
 8005234:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 8005238:	89fb      	ldrh	r3, [r7, #14]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000038 	.word	0x20000038
 800524c:	2000005c 	.word	0x2000005c
 8005250:	2000089c 	.word	0x2000089c

08005254 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
#ifdef PH_PLATFORM_HAS_ICFRONTEND
    // 如果不是Linux平台并且芯片不是PN5190，配置IRQ引脚
#if !(defined(PH_OSAL_LINUX) && defined(NXPBUILD__PHHAL_HW_PN5190))
    phDriver_Pin_Config_t pinCfg;

    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;		// 输出低电平
 800525a:	2300      	movs	r3, #0
 800525c:	717b      	strb	r3, [r7, #5]
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;	// 上拉
 800525e:	2301      	movs	r3, #1
 8005260:	713b      	strb	r3, [r7, #4]
    pinCfg.eInterruptConfig = PIN_IRQ_TRIGGER_TYPE;	// 下降沿触发
 8005262:	2304      	movs	r3, #4
 8005264:	71bb      	strb	r3, [r7, #6]

    phDriver_PinConfig(PHDRIVER_PIN_IRQ, PH_DRIVER_PINFUNC_INTERRUPT, &pinCfg);
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2204      	movs	r2, #4
 800526a:	2110      	movs	r1, #16
 800526c:	4803      	ldr	r0, [pc, #12]	@ (800527c <phApp_Configure_IRQ+0x28>)
 800526e:	f016 fd19 	bl	801bca4 <phDriver_PinConfig>
#endif /* PHDRIVER_KINETIS_K82 */

#endif /* #ifdef PH_PLATFORM_HAS_ICFRONTEND */

    // 可能不配置IRQ，直接返回
    return PH_ERR_SUCCESS;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	48000400 	.word	0x48000400

08005280 <phApp_HALConfigAutoColl>:
*******************************************************************************/
/**
* This function will initialize Hal Target Config
*/
phStatus_t phApp_HALConfigAutoColl(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	@ 0x28
 8005284:	af02      	add	r7, sp, #8
#ifdef NXPBUILD__PHHAL_HW_TARGET
    phStatus_t wStatus;
    uint8_t baDynamicUidConfig[1U] = { 1U };
 8005286:	2301      	movs	r3, #1
 8005288:	773b      	strb	r3, [r7, #28]
    uint8_t baReadEepromConfig[24U] = { 0U };
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	611a      	str	r2, [r3, #16]
 8005298:	615a      	str	r2, [r3, #20]

    /* Read Set Listen Parameters data from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 800529a:	4b54      	ldr	r3, [pc, #336]	@ (80053ec <phApp_HALConfigAutoColl+0x16c>)
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	1d3a      	adds	r2, r7, #4
 80052a0:	2318      	movs	r3, #24
 80052a2:	2140      	movs	r1, #64	@ 0x40
 80052a4:	f00e f98e 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 80052a8:	4603      	mov	r3, r0
 80052aa:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR,
        baReadEepromConfig,
        24U
        );
    CHECK_SUCCESS(wStatus);
 80052ac:	8bfb      	ldrh	r3, [r7, #30]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <phApp_HALConfigAutoColl+0x4e>
 80052b2:	8bfb      	ldrh	r3, [r7, #30]
 80052b4:	461a      	mov	r2, r3
 80052b6:	2152      	movs	r1, #82	@ 0x52
 80052b8:	484d      	ldr	r0, [pc, #308]	@ (80053f0 <phApp_HALConfigAutoColl+0x170>)
 80052ba:	f01c fe9f 	bl	8021ffc <iprintf>
 80052be:	4b4d      	ldr	r3, [pc, #308]	@ (80053f4 <phApp_HALConfigAutoColl+0x174>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f01c fdc3 	bl	8021e50 <fflush>
 80052ca:	8bfb      	ldrh	r3, [r7, #30]
 80052cc:	e08a      	b.n	80053e4 <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and configure Set Listen Parameters if EEPROM data is not correct. */
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	2202      	movs	r2, #2
 80052d2:	4949      	ldr	r1, [pc, #292]	@ (80053f8 <phApp_HALConfigAutoColl+0x178>)
 80052d4:	4618      	mov	r0, r3
 80052d6:	f01c ffe1 	bl	802229c <memcmp>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11a      	bne.n	8005316 <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	3302      	adds	r3, #2
 80052e4:	2203      	movs	r2, #3
 80052e6:	4945      	ldr	r1, [pc, #276]	@ (80053fc <phApp_HALConfigAutoColl+0x17c>)
 80052e8:	4618      	mov	r0, r3
 80052ea:	f01c ffd7 	bl	802229c <memcmp>
 80052ee:	4603      	mov	r3, r0
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d110      	bne.n	8005316 <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	3305      	adds	r3, #5
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	4b41      	ldr	r3, [pc, #260]	@ (8005400 <phApp_HALConfigAutoColl+0x180>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d109      	bne.n	8005316 <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[6U], poll_res, 18U) != 0x00))
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	3306      	adds	r3, #6
 8005306:	2212      	movs	r2, #18
 8005308:	493e      	ldr	r1, [pc, #248]	@ (8005404 <phApp_HALConfigAutoColl+0x184>)
 800530a:	4618      	mov	r0, r3
 800530c:	f01c ffc6 	bl	802229c <memcmp>
 8005310:	4603      	mov	r3, r0
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <phApp_HALConfigAutoColl+0xd8>
    {
        /* Configure Set Listen Parameters. */
        wStatus = phhalHw_Pn5180_SetListenParameters(
 8005316:	4b35      	ldr	r3, [pc, #212]	@ (80053ec <phApp_HALConfigAutoColl+0x16c>)
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <phApp_HALConfigAutoColl+0x180>)
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	4b3a      	ldr	r3, [pc, #232]	@ (8005408 <phApp_HALConfigAutoColl+0x188>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	4b37      	ldr	r3, [pc, #220]	@ (8005404 <phApp_HALConfigAutoColl+0x184>)
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	4a34      	ldr	r2, [pc, #208]	@ (80053fc <phApp_HALConfigAutoColl+0x17c>)
 800532c:	4932      	ldr	r1, [pc, #200]	@ (80053f8 <phApp_HALConfigAutoColl+0x178>)
 800532e:	f00d fab3 	bl	8012898 <phhalHw_Pn5180_SetListenParameters>
 8005332:	4603      	mov	r3, r0
 8005334:	83fb      	strh	r3, [r7, #30]
            &nfc_id1[0],
            sel_res,
            &poll_res[0],
            nfc_id3
            );
        CHECK_SUCCESS(wStatus);
 8005336:	8bfb      	ldrh	r3, [r7, #30]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <phApp_HALConfigAutoColl+0xd8>
 800533c:	8bfb      	ldrh	r3, [r7, #30]
 800533e:	461a      	mov	r2, r3
 8005340:	2163      	movs	r1, #99	@ 0x63
 8005342:	482b      	ldr	r0, [pc, #172]	@ (80053f0 <phApp_HALConfigAutoColl+0x170>)
 8005344:	f01c fe5a 	bl	8021ffc <iprintf>
 8005348:	4b2a      	ldr	r3, [pc, #168]	@ (80053f4 <phApp_HALConfigAutoColl+0x174>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f01c fd7e 	bl	8021e50 <fflush>
 8005354:	8bfb      	ldrh	r3, [r7, #30]
 8005356:	e045      	b.n	80053e4 <phApp_HALConfigAutoColl+0x164>
    }

    if (pHal->wFirmwareVer < 0x308U)
 8005358:	4b24      	ldr	r3, [pc, #144]	@ (80053ec <phApp_HALConfigAutoColl+0x16c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8005360:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8005364:	d201      	bcs.n	800536a <phApp_HALConfigAutoColl+0xea>
    {
        /* With Pn5180 FW version < 3.8, only static UID is supported. */
        baDynamicUidConfig[0] = 0x00;
 8005366:	2300      	movs	r3, #0
 8005368:	773b      	strb	r3, [r7, #28]
    }

    /* Read Dynamic UID configuration from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 800536a:	4b20      	ldr	r3, [pc, #128]	@ (80053ec <phApp_HALConfigAutoColl+0x16c>)
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	1d3a      	adds	r2, r7, #4
 8005370:	2301      	movs	r3, #1
 8005372:	2158      	movs	r1, #88	@ 0x58
 8005374:	f00e f926 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8005378:	4603      	mov	r3, r0
 800537a:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
        baReadEepromConfig,
        1U
        );
    CHECK_SUCCESS(wStatus);
 800537c:	8bfb      	ldrh	r3, [r7, #30]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00d      	beq.n	800539e <phApp_HALConfigAutoColl+0x11e>
 8005382:	8bfb      	ldrh	r3, [r7, #30]
 8005384:	461a      	mov	r2, r3
 8005386:	2173      	movs	r1, #115	@ 0x73
 8005388:	4819      	ldr	r0, [pc, #100]	@ (80053f0 <phApp_HALConfigAutoColl+0x170>)
 800538a:	f01c fe37 	bl	8021ffc <iprintf>
 800538e:	4b19      	ldr	r3, [pc, #100]	@ (80053f4 <phApp_HALConfigAutoColl+0x174>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4618      	mov	r0, r3
 8005396:	f01c fd5b 	bl	8021e50 <fflush>
 800539a:	8bfb      	ldrh	r3, [r7, #30]
 800539c:	e022      	b.n	80053e4 <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and perform Dynamic UID configuration if EEPROM data is not correct. */
    if (memcmp(baReadEepromConfig, baDynamicUidConfig, 1U) != 0x00)
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	f107 031c 	add.w	r3, r7, #28
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d01a      	beq.n	80053e2 <phApp_HALConfigAutoColl+0x162>
    {
        /* Configure Dynamic UID */
        wStatus = phhalHw_Pn5180_Instr_WriteE2Prom(
 80053ac:	4b0f      	ldr	r3, [pc, #60]	@ (80053ec <phApp_HALConfigAutoColl+0x16c>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	f107 021c 	add.w	r2, r7, #28
 80053b4:	2301      	movs	r3, #1
 80053b6:	2158      	movs	r1, #88	@ 0x58
 80053b8:	f00e f88c 	bl	80134d4 <phhalHw_Pn5180_Instr_WriteE2Prom>
 80053bc:	4603      	mov	r3, r0
 80053be:	83fb      	strh	r3, [r7, #30]
            (phhalHw_Pn5180_DataParams_t *) pHal,
            PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
            baDynamicUidConfig,
            1U
            );
        CHECK_SUCCESS(wStatus);
 80053c0:	8bfb      	ldrh	r3, [r7, #30]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <phApp_HALConfigAutoColl+0x162>
 80053c6:	8bfb      	ldrh	r3, [r7, #30]
 80053c8:	461a      	mov	r2, r3
 80053ca:	217f      	movs	r1, #127	@ 0x7f
 80053cc:	4808      	ldr	r0, [pc, #32]	@ (80053f0 <phApp_HALConfigAutoColl+0x170>)
 80053ce:	f01c fe15 	bl	8021ffc <iprintf>
 80053d2:	4b08      	ldr	r3, [pc, #32]	@ (80053f4 <phApp_HALConfigAutoColl+0x174>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4618      	mov	r0, r3
 80053da:	f01c fd39 	bl	8021e50 <fflush>
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	e000      	b.n	80053e4 <phApp_HALConfigAutoColl+0x164>
    }
#endif /* NXPBUILD__PHHAL_HW_TARGET */
    return PH_ERR_SUCCESS;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	200008e0 	.word	0x200008e0
 80053f0:	080262c0 	.word	0x080262c0
 80053f4:	20000084 	.word	0x20000084
 80053f8:	20000004 	.word	0x20000004
 80053fc:	20000008 	.word	0x20000008
 8005400:	2000000b 	.word	0x2000000b
 8005404:	20000010 	.word	0x20000010
 8005408:	2000000c 	.word	0x2000000c

0800540c <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	460b      	mov	r3, r1
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 800541a:	897b      	ldrh	r3, [r7, #10]
 800541c:	2b20      	cmp	r3, #32
 800541e:	d002      	beq.n	8005426 <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8005420:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8005424:	e01b      	b.n	800545e <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <phCryptoRng_Sw_Init+0x24>
 800542c:	2321      	movs	r3, #33	@ 0x21
 800542e:	e016      	b.n	800545e <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <phCryptoRng_Sw_Init+0x2e>
 8005436:	2321      	movs	r3, #33	@ 0x21
 8005438:	e011      	b.n	800545e <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f24e 4201 	movw	r2, #58369	@ 0xe401
 8005440:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3308      	adds	r3, #8
 800544c:	2210      	movs	r2, #16
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f01c ff33 	bl	80222bc <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8005468:	b5b0      	push	{r4, r5, r7, lr}
 800546a:	b092      	sub	sp, #72	@ 0x48
 800546c:	af04      	add	r7, sp, #16
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	2b20      	cmp	r3, #32
 800547a:	d90e      	bls.n	800549a <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f107 0414 	add.w	r4, r7, #20
 8005482:	461d      	mov	r5, r3
 8005484:	6828      	ldr	r0, [r5, #0]
 8005486:	6869      	ldr	r1, [r5, #4]
 8005488:	68aa      	ldr	r2, [r5, #8]
 800548a:	68eb      	ldr	r3, [r5, #12]
 800548c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800548e:	6928      	ldr	r0, [r5, #16]
 8005490:	6969      	ldr	r1, [r5, #20]
 8005492:	69aa      	ldr	r2, [r5, #24]
 8005494:	69eb      	ldr	r3, [r5, #28]
 8005496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005498:	e006      	b.n	80054a8 <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 800549a:	79fa      	ldrb	r2, [r7, #7]
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f01c ff89 	bl	80223ba <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	7f1b      	ldrb	r3, [r3, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10f      	bne.n	80054d0 <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 80054b0:	f107 0114 	add.w	r1, r7, #20
 80054b4:	2300      	movs	r3, #0
 80054b6:	9302      	str	r3, [sp, #8]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	2300      	movs	r3, #0
 80054c2:	2220      	movs	r2, #32
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f8a9 	bl	800561c <phCryptoRng_Sw_Instantiate>
 80054ca:	4603      	mov	r3, r0
 80054cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80054ce:	e00a      	b.n	80054e6 <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 80054d0:	f107 0114 	add.w	r1, r7, #20
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	2220      	movs	r2, #32
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f914 	bl	800570a <phCryptoRng_Sw_Reseed>
 80054e2:	4603      	mov	r3, r0
 80054e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 80054e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <phCryptoRng_Sw_Seed+0x9c>
 80054ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <phCryptoRng_Sw_Seed+0x9c>
 80054f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <phCryptoRng_Sw_Seed+0xa8>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	e000      	b.n	8005506 <phCryptoRng_Sw_Seed+0x9e>
 8005504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8005506:	4618      	mov	r0, r3
 8005508:	3738      	adds	r7, #56	@ 0x38
 800550a:	46bd      	mov	sp, r7
 800550c:	bdb0      	pop	{r4, r5, r7, pc}
 800550e:	bf00      	nop
 8005510:	ffffe400 	.word	0xffffe400

08005514 <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	@ 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9fa 	bl	8005918 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6858      	ldr	r0, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f103 0208 	add.w	r2, r3, #8
 800552e:	f107 030c 	add.w	r3, r7, #12
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2310      	movs	r3, #16
 8005536:	2100      	movs	r1, #0
 8005538:	f002 ff4e 	bl	80083d8 <phCryptoSym_Encrypt>
 800553c:	4603      	mov	r3, r0
 800553e:	83bb      	strh	r3, [r7, #28]
 8005540:	8bbb      	ldrh	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <phCryptoRng_Sw_Update+0x36>
 8005546:	8bbb      	ldrh	r3, [r7, #28]
 8005548:	e064      	b.n	8005614 <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d018      	beq.n	8005582 <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8005550:	2300      	movs	r3, #0
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e012      	b.n	800557c <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	3320      	adds	r3, #32
 800555a:	443b      	add	r3, r7
 800555c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8005560:	7ffb      	ldrb	r3, [r7, #31]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4413      	add	r3, r2
 8005566:	781a      	ldrb	r2, [r3, #0]
 8005568:	7ffb      	ldrb	r3, [r7, #31]
 800556a:	404a      	eors	r2, r1
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	3320      	adds	r3, #32
 8005570:	443b      	add	r3, r7
 8005572:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8005576:	7ffb      	ldrb	r3, [r7, #31]
 8005578:	3301      	adds	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	7ffb      	ldrb	r3, [r7, #31]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d9e9      	bls.n	8005556 <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f9c8 	bl	8005918 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6858      	ldr	r0, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f103 0208 	add.w	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3308      	adds	r3, #8
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	2310      	movs	r3, #16
 800559a:	2100      	movs	r1, #0
 800559c:	f002 ff1c 	bl	80083d8 <phCryptoSym_Encrypt>
 80055a0:	4603      	mov	r3, r0
 80055a2:	83bb      	strh	r3, [r7, #28]
 80055a4:	8bbb      	ldrh	r3, [r7, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <phCryptoRng_Sw_Update+0x9a>
 80055aa:	8bbb      	ldrh	r3, [r7, #28]
 80055ac:	e032      	b.n	8005614 <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d018      	beq.n	80055e6 <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 80055b4:	2300      	movs	r3, #0
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e012      	b.n	80055e0 <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	7a19      	ldrb	r1, [r3, #8]
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	3310      	adds	r3, #16
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	4413      	add	r3, r2
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
 80055ce:	404a      	eors	r2, r1
 80055d0:	b2d1      	uxtb	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	460a      	mov	r2, r1
 80055d8:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	3301      	adds	r3, #1
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d9e9      	bls.n	80055ba <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f107 010c 	add.w	r1, r7, #12
 80055ee:	2200      	movs	r2, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 ffb6 	bl	8008562 <phCryptoSym_LoadKeyDirect>
 80055f6:	4603      	mov	r3, r0
 80055f8:	83bb      	strh	r3, [r7, #28]
 80055fa:	8bbb      	ldrh	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <phCryptoRng_Sw_Update+0xf0>
 8005600:	8bbb      	ldrh	r3, [r7, #28]
 8005602:	e007      	b.n	8005614 <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	2210      	movs	r2, #16
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f01c fe55 	bl	80222bc <memset>
    return PH_ERR_SUCCESS;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	@ 0x38
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005638:	441a      	add	r2, r3
 800563a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800563e:	4413      	add	r3, r2
 8005640:	2b20      	cmp	r3, #32
 8005642:	d002      	beq.n	800564a <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8005644:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8005648:	e05b      	b.n	8005702 <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f01c feb1 	bl	80223ba <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	f107 0214 	add.w	r2, r7, #20
 800565e:	4413      	add	r3, r2
 8005660:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f01c fea7 	bl	80223ba <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 800566c:	88fa      	ldrh	r2, [r7, #6]
 800566e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8005672:	4413      	add	r3, r2
 8005674:	f107 0214 	add.w	r2, r7, #20
 8005678:	4413      	add	r3, r2
 800567a:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800567e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005680:	4618      	mov	r0, r3
 8005682:	f01c fe9a 	bl	80223ba <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	4619      	mov	r1, r3
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f88f 	bl	80057b0 <phCryptoRng_Sw_BlockCipherDf>
 8005692:	4603      	mov	r3, r0
 8005694:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005696:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <phCryptoRng_Sw_Instantiate+0x84>
 800569c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800569e:	e030      	b.n	8005702 <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3308      	adds	r3, #8
 80056a4:	2210      	movs	r2, #16
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f01c fe07 	bl	80222bc <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6858      	ldr	r0, [r3, #4]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3308      	adds	r3, #8
 80056b6:	2200      	movs	r2, #0
 80056b8:	4619      	mov	r1, r3
 80056ba:	f002 ff52 	bl	8008562 <phCryptoSym_LoadKeyDirect>
 80056be:	4603      	mov	r3, r0
 80056c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80056c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <phCryptoRng_Sw_Instantiate+0xb0>
 80056c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056ca:	e01a      	b.n	8005702 <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ff1e 	bl	8005514 <phCryptoRng_Sw_Update>
 80056d8:	4603      	mov	r3, r0
 80056da:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80056dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <phCryptoRng_Sw_Instantiate+0xca>
 80056e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056e4:	e00d      	b.n	8005702 <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 80056f2:	f107 0314 	add.w	r3, r7, #20
 80056f6:	2220      	movs	r2, #32
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f01c fdde 	bl	80222bc <memset>

    return PH_ERR_SUCCESS;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3738      	adds	r7, #56	@ 0x38
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b08e      	sub	sp, #56	@ 0x38
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	7f1b      	ldrb	r3, [r3, #28]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d002      	beq.n	8005728 <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 8005722:	f24e 4325 	movw	r3, #58405	@ 0xe425
 8005726:	e03e      	b.n	80057a6 <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800572e:	4413      	add	r3, r2
 8005730:	2b20      	cmp	r3, #32
 8005732:	d002      	beq.n	800573a <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8005734:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8005738:	e035      	b.n	80057a6 <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f107 0314 	add.w	r3, r7, #20
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f01c fe39 	bl	80223ba <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	f107 0214 	add.w	r2, r7, #20
 800574e:	4413      	add	r3, r2
 8005750:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f01c fe2f 	bl	80223ba <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	4619      	mov	r1, r3
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f824 	bl	80057b0 <phCryptoRng_Sw_BlockCipherDf>
 8005768:	4603      	mov	r3, r0
 800576a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800576c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <phCryptoRng_Sw_Reseed+0x6c>
 8005772:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005774:	e017      	b.n	80057a6 <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	4619      	mov	r1, r3
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fec9 	bl	8005514 <phCryptoRng_Sw_Update>
 8005782:	4603      	mov	r3, r0
 8005784:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005786:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <phCryptoRng_Sw_Reseed+0x86>
 800578c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800578e:	e00a      	b.n	80057a6 <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8005796:	f107 0314 	add.w	r3, r7, #20
 800579a:	2220      	movs	r2, #32
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f01c fd8c 	bl	80222bc <memset>

    return PH_ERR_SUCCESS;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3738      	adds	r7, #56	@ 0x38
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b096      	sub	sp, #88	@ 0x58
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	4954      	ldr	r1, [pc, #336]	@ (8005914 <phCryptoRng_Sw_BlockCipherDf+0x164>)
 80057c2:	4618      	mov	r0, r3
 80057c4:	f002 fecd 	bl	8008562 <phCryptoSym_LoadKeyDirect>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <phCryptoRng_Sw_BlockCipherDf+0x2c>
 80057d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057da:	e097      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 80057dc:	f107 030c 	add.w	r3, r7, #12
 80057e0:	2240      	movs	r2, #64	@ 0x40
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f01c fd69 	bl	80222bc <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 80057ea:	2320      	movs	r3, #32
 80057ec:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 80057ee:	2320      	movs	r3, #32
 80057f0:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	3318      	adds	r3, #24
 80057fa:	2220      	movs	r2, #32
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f01c fddb 	bl	80223ba <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 8005804:	2380      	movs	r3, #128	@ 0x80
 8005806:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f107 010c 	add.w	r1, r7, #12
 8005812:	2210      	movs	r2, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f002 fe6e 	bl	80084f6 <phCryptoSym_LoadIv>
 800581a:	4603      	mov	r3, r0
 800581c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005820:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <phCryptoRng_Sw_BlockCipherDf+0x7e>
 8005828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800582c:	e06e      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6858      	ldr	r0, [r3, #4]
 8005832:	f107 020c 	add.w	r2, r7, #12
 8005836:	f107 030b 	add.w	r3, r7, #11
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2340      	movs	r3, #64	@ 0x40
 8005842:	2101      	movs	r1, #1
 8005844:	f002 fe0a 	bl	800845c <phCryptoSym_CalculateMac>
 8005848:	4603      	mov	r3, r0
 800584a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800584e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <phCryptoRng_Sw_BlockCipherDf+0xac>
 8005856:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800585a:	e057      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 800585c:	2301      	movs	r3, #1
 800585e:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6858      	ldr	r0, [r3, #4]
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	461a      	mov	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	4413      	add	r3, r2
 800586c:	f107 010c 	add.w	r1, r7, #12
 8005870:	f107 020b 	add.w	r2, r7, #11
 8005874:	9201      	str	r2, [sp, #4]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2340      	movs	r3, #64	@ 0x40
 800587a:	460a      	mov	r2, r1
 800587c:	2101      	movs	r1, #1
 800587e:	f002 fded 	bl	800845c <phCryptoSym_CalculateMac>
 8005882:	4603      	mov	r3, r0
 8005884:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <phCryptoRng_Sw_BlockCipherDf+0xe6>
 8005890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005894:	e03a      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f002 fe5f 	bl	8008562 <phCryptoSym_LoadKeyDirect>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80058aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <phCryptoRng_Sw_BlockCipherDf+0x108>
 80058b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058b6:	e029      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6858      	ldr	r0, [r3, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	f103 0210 	add.w	r2, r3, #16
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	2310      	movs	r3, #16
 80058c8:	2100      	movs	r1, #0
 80058ca:	f002 fd85 	bl	80083d8 <phCryptoSym_Encrypt>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80058d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <phCryptoRng_Sw_BlockCipherDf+0x132>
 80058dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058e0:	e014      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6858      	ldr	r0, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	3310      	adds	r3, #16
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2310      	movs	r3, #16
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	2100      	movs	r1, #0
 80058f2:	f002 fd71 	bl	80083d8 <phCryptoSym_Encrypt>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80058fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8005904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005908:	e000      	b.n	800590c <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3750      	adds	r7, #80	@ 0x50
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	08026468 	.word	0x08026468

08005918 <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	e018      	b.n	8005958 <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	7a1b      	ldrb	r3, [r3, #8]
 800592e:	2bff      	cmp	r3, #255	@ 0xff
 8005930:	d00a      	beq.n	8005948 <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	441a      	add	r2, r3
 8005938:	7a12      	ldrb	r2, [r2, #8]
 800593a:	3201      	adds	r2, #1
 800593c:	b2d1      	uxtb	r1, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	4413      	add	r3, r2
 8005942:	460a      	mov	r2, r1
 8005944:	721a      	strb	r2, [r3, #8]
            break;
 8005946:	e00b      	b.n	8005960 <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	2200      	movs	r2, #0
 8005950:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	3301      	adds	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d9e3      	bls.n	8005926 <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <phCryptoRng_Seed+0x1a>
 8005980:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8005984:	e027      	b.n	80059d6 <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <phCryptoRng_Seed+0x2c>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <phCryptoRng_Seed+0x2c>
 8005992:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8005996:	e01e      	b.n	80059d6 <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059a0:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 80059a4:	d004      	beq.n	80059b0 <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 80059a6:	f24e 4320 	movw	r3, #58400	@ 0xe420
 80059aa:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80059ac:	8afb      	ldrh	r3, [r7, #22]
 80059ae:	e012      	b.n	80059d6 <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d108      	bne.n	80059cc <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	461a      	mov	r2, r3
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fd51 	bl	8005468 <phCryptoRng_Sw_Seed>
 80059c6:	4603      	mov	r3, r0
 80059c8:	82fb      	strh	r3, [r7, #22]
            break;
 80059ca:	e003      	b.n	80059d4 <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 80059cc:	f24e 4320 	movw	r3, #58400	@ 0xe420
 80059d0:	82fb      	strh	r3, [r7, #22]
            break;
 80059d2:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80059d4:	8afb      	ldrh	r3, [r7, #22]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	460b      	mov	r3, r1
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	2b40      	cmp	r3, #64	@ 0x40
 80059f4:	d002      	beq.n	80059fc <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80059f6:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80059fa:	e016      	b.n	8005a2a <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <phCryptoSym_Sw_Init+0x28>
 8005a02:	2321      	movs	r3, #33	@ 0x21
 8005a04:	e011      	b.n	8005a2a <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8005a0c:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f80c 	bl	8005a32 <phCryptoSym_Sw_InvalidateKey>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	82fb      	strh	r3, [r7, #22]
 8005a1e:	8afb      	ldrh	r3, [r7, #22]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <phCryptoSym_Sw_Init+0x4a>
 8005a24:	8afb      	ldrh	r3, [r7, #22]
 8005a26:	e000      	b.n	8005a2a <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	2220      	movs	r2, #32
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f01c fc3a 	bl	80222bc <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3328      	adds	r3, #40	@ 0x28
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f01c fc33 	bl	80222bc <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a5c:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	460b      	mov	r3, r1
 8005a82:	817b      	strh	r3, [r7, #10]
 8005a84:	4613      	mov	r3, r2
 8005a86:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fb13 	bl	80060d0 <phCryptoSym_Sw_GetConfig>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	82fb      	strh	r3, [r7, #22]
 8005aae:	8afb      	ldrh	r3, [r7, #22]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <phCryptoSym_Sw_Encrypt+0x44>
 8005ab4:	8afb      	ldrh	r3, [r7, #22]
 8005ab6:	e097      	b.n	8005be8 <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 8005ab8:	8aba      	ldrh	r2, [r7, #20]
 8005aba:	893b      	ldrh	r3, [r7, #8]
 8005abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ac0:	fb01 f202 	mul.w	r2, r1, r2
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005acc:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005ad0:	e08a      	b.n	8005be8 <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3328      	adds	r3, #40	@ 0x28
 8005ad6:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8005adc:	e070      	b.n	8005bc0 <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d009      	beq.n	8005afa <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 8005ae6:	8bfb      	ldrh	r3, [r7, #30]
 8005ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aea:	18d0      	adds	r0, r2, r3
 8005aec:	8bfb      	ldrh	r3, [r7, #30]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	8aba      	ldrh	r2, [r7, #20]
 8005af4:	4619      	mov	r1, r3
 8005af6:	f01c fc60 	bl	80223ba <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 8005afa:	897b      	ldrh	r3, [r7, #10]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d027      	beq.n	8005b52 <phCryptoSym_Sw_Encrypt+0xde>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db22      	blt.n	8005b4c <phCryptoSym_Sw_Encrypt+0xd8>
 8005b06:	3b01      	subs	r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d81f      	bhi.n	8005b4c <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	777b      	strb	r3, [r7, #29]
 8005b10:	e016      	b.n	8005b40 <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 8005b12:	7f7a      	ldrb	r2, [r7, #29]
 8005b14:	8bfb      	ldrh	r3, [r7, #30]
 8005b16:	4413      	add	r3, r2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	4413      	add	r3, r2
 8005b1e:	7819      	ldrb	r1, [r3, #0]
 8005b20:	7f7b      	ldrb	r3, [r7, #29]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	7f78      	ldrb	r0, [r7, #29]
 8005b2a:	8bfb      	ldrh	r3, [r7, #30]
 8005b2c:	4403      	add	r3, r0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	4403      	add	r3, r0
 8005b34:	404a      	eors	r2, r1
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005b3a:	7f7b      	ldrb	r3, [r7, #29]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	777b      	strb	r3, [r7, #29]
 8005b40:	7f7b      	ldrb	r3, [r7, #29]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	8abb      	ldrh	r3, [r7, #20]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d3e3      	bcc.n	8005b12 <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 8005b4a:	e003      	b.n	8005b54 <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8005b4c:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8005b50:	e04a      	b.n	8005be8 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8005b52:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8005b54:	897b      	ldrh	r3, [r7, #10]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d10d      	bne.n	8005b78 <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b60:	4413      	add	r3, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f002 fb91 	bl	800828c <phCryptoSym_Sw_DecryptBlock>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	82fb      	strh	r3, [r7, #22]
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00f      	beq.n	8005b94 <phCryptoSym_Sw_Encrypt+0x120>
 8005b74:	8afb      	ldrh	r3, [r7, #22]
 8005b76:	e037      	b.n	8005be8 <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8005b78:	8bfb      	ldrh	r3, [r7, #30]
 8005b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b7c:	4413      	add	r3, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f002 fadd 	bl	8008140 <phCryptoSym_Sw_EncryptBlock>
 8005b86:	4603      	mov	r3, r0
 8005b88:	82fb      	strh	r3, [r7, #22]
 8005b8a:	8afb      	ldrh	r3, [r7, #22]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <phCryptoSym_Sw_Encrypt+0x120>
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	e029      	b.n	8005be8 <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 8005b94:	897b      	ldrh	r3, [r7, #10]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <phCryptoSym_Sw_Encrypt+0x142>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db07      	blt.n	8005bb0 <phCryptoSym_Sw_Encrypt+0x13c>
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d804      	bhi.n	8005bb0 <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 8005ba6:	8bfb      	ldrh	r3, [r7, #30]
 8005ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005baa:	4413      	add	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
                break;
 8005bae:	e003      	b.n	8005bb8 <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8005bb0:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8005bb4:	e018      	b.n	8005be8 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8005bb6:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8005bb8:	8aba      	ldrh	r2, [r7, #20]
 8005bba:	8bfb      	ldrh	r3, [r7, #30]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8005bc0:	8bfa      	ldrh	r2, [r7, #30]
 8005bc2:	893b      	ldrh	r3, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d38a      	bcc.n	8005ade <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d003      	beq.n	8005bd8 <phCryptoSym_Sw_Encrypt+0x164>
 8005bd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da06      	bge.n	8005be6 <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3328      	adds	r3, #40	@ 0x28
 8005bdc:	8aba      	ldrh	r2, [r7, #20]
 8005bde:	69b9      	ldr	r1, [r7, #24]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f01c fbea 	bl	80223ba <memcpy>
    }

    return PH_ERR_SUCCESS;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b094      	sub	sp, #80	@ 0x50
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	607a      	str	r2, [r7, #4]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	817b      	strh	r3, [r7, #10]
 8005c00:	4613      	mov	r3, r2
 8005c02:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8005c26:	f107 0320 	add.w	r3, r7, #32
 8005c2a:	2210      	movs	r2, #16
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f01c fb44 	bl	80222bc <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8005c34:	f107 0310 	add.w	r3, r7, #16
 8005c38:	2210      	movs	r2, #16
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f01c fb3d 	bl	80222bc <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 8005c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 8005c48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f01c fb33 	bl	80222bc <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8005c56:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fa36 	bl	80060d0 <phCryptoSym_Sw_GetConfig>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005c6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <phCryptoSym_Sw_CalculateMac+0x88>
 8005c72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c76:	e175      	b.n	8005f64 <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8005c78:	897b      	ldrh	r3, [r7, #10]
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d007      	beq.n	8005c9a <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3328      	adds	r3, #40	@ 0x28
 8005c8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f01c fb11 	bl	80222bc <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8005c9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da0e      	bge.n	8005cc0 <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 8005ca2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cac:	fb01 f202 	mul.w	r2, r1, r2
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80ac 	beq.w	8005e12 <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005cba:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005cbe:	e151      	b.n	8005f64 <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 8005cc0:	897b      	ldrh	r3, [r7, #10]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <phCryptoSym_Sw_CalculateMac+0xde>
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d015      	beq.n	8005cf8 <phCryptoSym_Sw_CalculateMac+0x108>
 8005ccc:	e011      	b.n	8005cf2 <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 8005cce:	f107 0210 	add.w	r2, r7, #16
 8005cd2:	f107 0320 	add.w	r3, r7, #32
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f002 f987 	bl	8007fec <phCryptoSym_Sw_CMAC_GenerateK1K2>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ce4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <phCryptoSym_Sw_CalculateMac+0x10c>
 8005cec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cf0:	e138      	b.n	8005f64 <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8005cf2:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8005cf6:	e135      	b.n	8005f64 <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 8005cfc:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 8005cfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005d02:	893b      	ldrh	r3, [r7, #8]
 8005d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d08:	fb01 f202 	mul.w	r2, r1, r2
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 8005d14:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <phCryptoSym_Sw_CalculateMac+0x132>
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d13f      	bne.n	8005da2 <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 8005d22:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	893a      	ldrh	r2, [r7, #8]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 8005d2e:	893b      	ldrh	r3, [r7, #8]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	18d1      	adds	r1, r2, r3
 8005d34:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005d38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f01c fb3c 	bl	80223ba <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 8005d42:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005d46:	3350      	adds	r3, #80	@ 0x50
 8005d48:	443b      	add	r3, r7
 8005d4a:	2280      	movs	r2, #128	@ 0x80
 8005d4c:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8005d50:	897b      	ldrh	r3, [r7, #10]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d15c      	bne.n	8005e12 <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005d5e:	e018      	b.n	8005d92 <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 8005d60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d64:	3350      	adds	r3, #80	@ 0x50
 8005d66:	443b      	add	r3, r7
 8005d68:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8005d6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d70:	3350      	adds	r3, #80	@ 0x50
 8005d72:	443b      	add	r3, r7
 8005d74:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8005d78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d7c:	404a      	eors	r2, r1
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	3350      	adds	r3, #80	@ 0x50
 8005d82:	443b      	add	r3, r7
 8005d84:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005d88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005d92:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d3df      	bcc.n	8005d60 <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8005da0:	e037      	b.n	8005e12 <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 8005da2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005da6:	893a      	ldrh	r2, [r7, #8]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	18d1      	adds	r1, r2, r3
 8005db2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005db6:	461a      	mov	r2, r3
 8005db8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f01c fafc 	bl	80223ba <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d123      	bne.n	8005e12 <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005dd0:	e018      	b.n	8005e04 <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 8005dd2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005dd6:	3350      	adds	r3, #80	@ 0x50
 8005dd8:	443b      	add	r3, r7
 8005dda:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8005dde:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005de2:	3350      	adds	r3, #80	@ 0x50
 8005de4:	443b      	add	r3, r7
 8005de6:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8005dea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005dee:	404a      	eors	r2, r1
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	3350      	adds	r3, #80	@ 0x50
 8005df4:	443b      	add	r3, r7
 8005df6:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005dfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005dfe:	3301      	adds	r3, #1
 8005e00:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005e04:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3df      	bcc.n	8005dd2 <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3328      	adds	r3, #40	@ 0x28
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8005e1e:	e03b      	b.n	8005e98 <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005e26:	e019      	b.n	8005e5c <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 8005e28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e2e:	4413      	add	r3, r2
 8005e30:	7819      	ldrb	r1, [r3, #0]
 8005e32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8005e36:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e3a:	4413      	add	r3, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4413      	add	r3, r2
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e48:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005e4a:	4403      	add	r3, r0
 8005e4c:	404a      	eors	r2, r1
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005e52:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e56:	3301      	adds	r3, #1
 8005e58:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005e5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3de      	bcc.n	8005e28 <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8005e6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f002 f967 	bl	8008140 <phCryptoSym_Sw_EncryptBlock>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005e78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <phCryptoSym_Sw_CalculateMac+0x296>
 8005e80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e84:	e06e      	b.n	8005f64 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 8005e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e88:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8005e8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005e8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e92:	4413      	add	r3, r2
 8005e94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8005e98:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3be      	bcc.n	8005e20 <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8005ea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	db2f      	blt.n	8005f0a <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005eb0:	e016      	b.n	8005ee0 <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 8005eb2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb8:	4413      	add	r3, r2
 8005eba:	7819      	ldrb	r1, [r3, #0]
 8005ebc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ec0:	3350      	adds	r3, #80	@ 0x50
 8005ec2:	443b      	add	r3, r7
 8005ec4:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8005ec8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ecc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005ece:	4403      	add	r3, r0
 8005ed0:	404a      	eors	r2, r1
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8005ed6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005eda:	3301      	adds	r3, #1
 8005edc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8005ee0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d3e1      	bcc.n	8005eb2 <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8005eee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f002 f925 	bl	8008140 <phCryptoSym_Sw_EncryptBlock>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005efc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <phCryptoSym_Sw_CalculateMac+0x31a>
 8005f04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f08:	e02c      	b.n	8005f64 <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d003      	beq.n	8005f1a <phCryptoSym_Sw_CalculateMac+0x32a>
 8005f12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da08      	bge.n	8005f2c <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3328      	adds	r3, #40	@ 0x28
 8005f1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005f22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f24:	4618      	mov	r0, r3
 8005f26:	f01c fa48 	bl	80223ba <memcpy>
 8005f2a:	e007      	b.n	8005f3c <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3328      	adds	r3, #40	@ 0x28
 8005f30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f01c f9c0 	bl	80222bc <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8005f3c:	f107 0320 	add.w	r3, r7, #32
 8005f40:	2210      	movs	r2, #16
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f01c f9b9 	bl	80222bc <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8005f4a:	f107 0310 	add.w	r3, r7, #16
 8005f4e:	2210      	movs	r2, #16
 8005f50:	2100      	movs	r1, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	f01c f9b2 	bl	80222bc <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 8005f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f60:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3750      	adds	r7, #80	@ 0x50
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8005f82:	f107 0314 	add.w	r3, r7, #20
 8005f86:	461a      	mov	r2, r3
 8005f88:	2102      	movs	r1, #2
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f8a0 	bl	80060d0 <phCryptoSym_Sw_GetConfig>
 8005f90:	4603      	mov	r3, r0
 8005f92:	82fb      	strh	r3, [r7, #22]
 8005f94:	8afb      	ldrh	r3, [r7, #22]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <phCryptoSym_Sw_LoadIv+0x32>
 8005f9a:	8afb      	ldrh	r3, [r7, #22]
 8005f9c:	e00f      	b.n	8005fbe <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	8abb      	ldrh	r3, [r7, #20]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d002      	beq.n	8005fae <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005fa8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005fac:	e007      	b.n	8005fbe <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3328      	adds	r3, #40	@ 0x28
 8005fb2:	8aba      	ldrh	r2, [r7, #20]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f01c f9ff 	bl	80223ba <memcpy>

    return PH_ERR_SUCCESS;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	2220      	movs	r2, #32
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f01c f96a 	bl	80222bc <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d859      	bhi.n	80060a2 <phCryptoSym_Sw_LoadKeyDirect+0xda>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	08006041 	.word	0x08006041
 8006000:	0800605b 	.word	0x0800605b
 8006004:	08006073 	.word	0x08006073
 8006008:	0800608b 	.word	0x0800608b
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 800600c:	232c      	movs	r3, #44	@ 0x2c
 800600e:	2204      	movs	r2, #4
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f8d8 	bl	80061c8 <phCryptoSym_Sw_Aes_KeyExpansion>
 8006018:	4603      	mov	r3, r0
 800601a:	82fb      	strh	r3, [r7, #22]
 800601c:	8afb      	ldrh	r3, [r7, #22]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d042      	beq.n	80060a8 <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 8006022:	8afb      	ldrh	r3, [r7, #22]
 8006024:	e04f      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8006026:	2334      	movs	r3, #52	@ 0x34
 8006028:	2206      	movs	r2, #6
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f8cb 	bl	80061c8 <phCryptoSym_Sw_Aes_KeyExpansion>
 8006032:	4603      	mov	r3, r0
 8006034:	82fb      	strh	r3, [r7, #22]
 8006036:	8afb      	ldrh	r3, [r7, #22]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d037      	beq.n	80060ac <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 800603c:	8afb      	ldrh	r3, [r7, #22]
 800603e:	e042      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8006040:	233c      	movs	r3, #60	@ 0x3c
 8006042:	2208      	movs	r2, #8
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f8be 	bl	80061c8 <phCryptoSym_Sw_Aes_KeyExpansion>
 800604c:	4603      	mov	r3, r0
 800604e:	82fb      	strh	r3, [r7, #22]
 8006050:	8afb      	ldrh	r3, [r7, #22]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02c      	beq.n	80060b0 <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 8006056:	8afb      	ldrh	r3, [r7, #22]
 8006058:	e035      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 800605a:	2201      	movs	r2, #1
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fe62 	bl	8006d28 <phCryptoSym_Sw_Des_KeyInit>
 8006064:	4603      	mov	r3, r0
 8006066:	82fb      	strh	r3, [r7, #22]
 8006068:	8afb      	ldrh	r3, [r7, #22]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d022      	beq.n	80060b4 <phCryptoSym_Sw_LoadKeyDirect+0xec>
 800606e:	8afb      	ldrh	r3, [r7, #22]
 8006070:	e029      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 8006072:	2202      	movs	r2, #2
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fe56 	bl	8006d28 <phCryptoSym_Sw_Des_KeyInit>
 800607c:	4603      	mov	r3, r0
 800607e:	82fb      	strh	r3, [r7, #22]
 8006080:	8afb      	ldrh	r3, [r7, #22]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d018      	beq.n	80060b8 <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 8006086:	8afb      	ldrh	r3, [r7, #22]
 8006088:	e01d      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 800608a:	2203      	movs	r2, #3
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fe4a 	bl	8006d28 <phCryptoSym_Sw_Des_KeyInit>
 8006094:	4603      	mov	r3, r0
 8006096:	82fb      	strh	r3, [r7, #22]
 8006098:	8afb      	ldrh	r3, [r7, #22]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00e      	beq.n	80060bc <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 800609e:	8afb      	ldrh	r3, [r7, #22]
 80060a0:	e011      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80060a2:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80060a6:	e00e      	b.n	80060c6 <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 80060a8:	bf00      	nop
 80060aa:	e008      	b.n	80060be <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80060ac:	bf00      	nop
 80060ae:	e006      	b.n	80060be <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80060b0:	bf00      	nop
 80060b2:	e004      	b.n	80060be <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80060b4:	bf00      	nop
 80060b6:	e002      	b.n	80060be <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80060b8:	bf00      	nop
 80060ba:	e000      	b.n	80060be <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80060bc:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop

080060d0 <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	460b      	mov	r3, r1
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 80060de:	897b      	ldrh	r3, [r7, #10]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d867      	bhi.n	80061b4 <phCryptoSym_Sw_GetConfig+0xe4>
 80060e4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <phCryptoSym_Sw_GetConfig+0x1c>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006197 	.word	0x08006197
 80060f0:	08006109 	.word	0x08006109
 80060f4:	08006169 	.word	0x08006169
 80060f8:	080061a1 	.word	0x080061a1
 80060fc:	080061b5 	.word	0x080061b5
 8006100:	080061b5 	.word	0x080061b5
 8006104:	080061ab 	.word	0x080061ab
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800610c:	2b05      	cmp	r3, #5
 800610e:	d827      	bhi.n	8006160 <phCryptoSym_Sw_GetConfig+0x90>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <phCryptoSym_Sw_GetConfig+0x48>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	08006131 	.word	0x08006131
 800611c:	08006139 	.word	0x08006139
 8006120:	08006141 	.word	0x08006141
 8006124:	08006149 	.word	0x08006149
 8006128:	08006151 	.word	0x08006151
 800612c:	08006159 	.word	0x08006159
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2210      	movs	r2, #16
 8006134:	801a      	strh	r2, [r3, #0]
                    break;
 8006136:	e016      	b.n	8006166 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2218      	movs	r2, #24
 800613c:	801a      	strh	r2, [r3, #0]
                    break;
 800613e:	e012      	b.n	8006166 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	801a      	strh	r2, [r3, #0]
                    break;
 8006146:	e00e      	b.n	8006166 <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2208      	movs	r2, #8
 800614c:	801a      	strh	r2, [r3, #0]
                    break;
 800614e:	e00a      	b.n	8006166 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2210      	movs	r2, #16
 8006154:	801a      	strh	r2, [r3, #0]
                    break;
 8006156:	e006      	b.n	8006166 <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2218      	movs	r2, #24
 800615c:	801a      	strh	r2, [r3, #0]
                    break;
 800615e:	e002      	b.n	8006166 <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8006160:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006164:	e02a      	b.n	80061bc <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 8006166:	e028      	b.n	80061ba <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800616c:	2b02      	cmp	r3, #2
 800616e:	dc02      	bgt.n	8006176 <phCryptoSym_Sw_GetConfig+0xa6>
 8006170:	2b00      	cmp	r3, #0
 8006172:	da04      	bge.n	800617e <phCryptoSym_Sw_GetConfig+0xae>
 8006174:	e00b      	b.n	800618e <phCryptoSym_Sw_GetConfig+0xbe>
 8006176:	3b03      	subs	r3, #3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d808      	bhi.n	800618e <phCryptoSym_Sw_GetConfig+0xbe>
 800617c:	e003      	b.n	8006186 <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2210      	movs	r2, #16
 8006182:	801a      	strh	r2, [r3, #0]
                    break;
 8006184:	e006      	b.n	8006194 <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2208      	movs	r2, #8
 800618a:	801a      	strh	r2, [r3, #0]
                    break;
 800618c:	e002      	b.n	8006194 <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800618e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006192:	e013      	b.n	80061bc <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 8006194:	e011      	b.n	80061ba <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	801a      	strh	r2, [r3, #0]
            break;
 800619e:	e00c      	b.n	80061ba <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	801a      	strh	r2, [r3, #0]
            break;
 80061a8:	e007      	b.n	80061ba <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	801a      	strh	r2, [r3, #0]
            break;
 80061b2:	e002      	b.n	80061ba <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80061b4:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80061b8:	e000      	b.n	80061bc <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	460b      	mov	r3, r1
 80061d8:	71fb      	strb	r3, [r7, #7]
 80061da:	4613      	mov	r3, r2
 80061dc:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f103 0008 	add.w	r0, r3, #8
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	461a      	mov	r2, r3
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	f01c f8e5 	bl	80223ba <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b090      	sub	sp, #64	@ 0x40
 80061fe:	af02      	add	r7, sp, #8
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	4613      	mov	r3, r2
 8006206:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006212:	2b02      	cmp	r3, #2
 8006214:	d00e      	beq.n	8006234 <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 8006216:	2b02      	cmp	r3, #2
 8006218:	dc10      	bgt.n	800623c <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 800621e:	2b01      	cmp	r3, #1
 8006220:	d004      	beq.n	800622c <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 8006222:	e00b      	b.n	800623c <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 8006224:	2304      	movs	r3, #4
 8006226:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800622a:	e00a      	b.n	8006242 <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 800622c:	2306      	movs	r3, #6
 800622e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8006232:	e006      	b.n	8006242 <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8006234:	2308      	movs	r3, #8
 8006236:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800623a:	e002      	b.n	8006242 <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 800623c:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8006240:	e04a      	b.n	80062d8 <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f103 0108 	add.w	r1, r3, #8
 8006248:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800624c:	009a      	lsls	r2, r3, #2
 800624e:	f107 0314 	add.w	r3, r7, #20
 8006252:	4618      	mov	r0, r3
 8006254:	f01c f8b1 	bl	80223ba <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 8006258:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800625c:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8006260:	f107 0114 	add.w	r1, r7, #20
 8006264:	200f      	movs	r0, #15
 8006266:	9000      	str	r0, [sp, #0]
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f000 fba9 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006274:	e015      	b.n	80062a2 <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 8006276:	68b8      	ldr	r0, [r7, #8]
 8006278:	f000 f8c8 	bl	800640c <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 800627c:	68b8      	ldr	r0, [r7, #8]
 800627e:	f000 fa09 	bl	8006694 <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 8006282:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006286:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800628a:	f107 0114 	add.w	r1, r7, #20
 800628e:	200f      	movs	r0, #15
 8006290:	9000      	str	r0, [sp, #0]
 8006292:	68b8      	ldr	r0, [r7, #8]
 8006294:	f000 fb94 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 8006298:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800629c:	3301      	adds	r3, #1
 800629e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80062a2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d3e4      	bcc.n	8006276 <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f000 f8ad 	bl	800640c <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80062b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062b6:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80062ba:	f107 0114 	add.w	r1, r7, #20
 80062be:	200f      	movs	r0, #15
 80062c0:	9000      	str	r0, [sp, #0]
 80062c2:	68b8      	ldr	r0, [r7, #8]
 80062c4:	f000 fb7c 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	2220      	movs	r2, #32
 80062ce:	2100      	movs	r1, #0
 80062d0:	4618      	mov	r0, r3
 80062d2:	f01b fff3 	bl	80222bc <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3738      	adds	r7, #56	@ 0x38
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b090      	sub	sp, #64	@ 0x40
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d014      	beq.n	8006320 <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	dc19      	bgt.n	800632e <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d007      	beq.n	8006312 <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 8006302:	e014      	b.n	800632e <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 8006304:	2304      	movs	r3, #4
 8006306:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 800630a:	232b      	movs	r3, #43	@ 0x2b
 800630c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8006310:	e010      	b.n	8006334 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8006312:	2306      	movs	r3, #6
 8006314:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 8006318:	2333      	movs	r3, #51	@ 0x33
 800631a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 800631e:	e009      	b.n	8006334 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8006320:	2308      	movs	r3, #8
 8006322:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 8006326:	233b      	movs	r3, #59	@ 0x3b
 8006328:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 800632c:	e002      	b.n	8006334 <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 800632e:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8006332:	e066      	b.n	8006402 <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f103 0108 	add.w	r1, r3, #8
 800633a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800633e:	009a      	lsls	r2, r3, #2
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4618      	mov	r0, r3
 8006346:	f01c f838 	bl	80223ba <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006356:	e00f      	b.n	8006378 <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 8006358:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800635c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006360:	f107 0114 	add.w	r1, r7, #20
 8006364:	2030      	movs	r0, #48	@ 0x30
 8006366:	9000      	str	r0, [sp, #0]
 8006368:	68b8      	ldr	r0, [r7, #8]
 800636a:	f000 fb29 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 800636e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006372:	3301      	adds	r3, #1
 8006374:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006378:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	429a      	cmp	r2, r3
 8006380:	d9ea      	bls.n	8006358 <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8006382:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006386:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800638a:	f107 0114 	add.w	r1, r7, #20
 800638e:	20c0      	movs	r0, #192	@ 0xc0
 8006390:	9000      	str	r0, [sp, #0]
 8006392:	68b8      	ldr	r0, [r7, #8]
 8006394:	f000 fb14 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	3b01      	subs	r3, #1
 800639c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80063a0:	e015      	b.n	80063ce <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80063a2:	68b8      	ldr	r0, [r7, #8]
 80063a4:	f000 f8d4 	bl	8006550 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80063a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80063ac:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80063b0:	f107 0114 	add.w	r1, r7, #20
 80063b4:	20c0      	movs	r0, #192	@ 0xc0
 80063b6:	9000      	str	r0, [sp, #0]
 80063b8:	68b8      	ldr	r0, [r7, #8]
 80063ba:	f000 fb01 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 80063be:	68b8      	ldr	r0, [r7, #8]
 80063c0:	f000 fa06 	bl	80067d0 <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 80063c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063c8:	3b01      	subs	r3, #1
 80063ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80063ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e5      	bne.n	80063a2 <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f000 f8ba 	bl	8006550 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80063dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80063e0:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80063e4:	f107 0114 	add.w	r1, r7, #20
 80063e8:	20c0      	movs	r0, #192	@ 0xc0
 80063ea:	9000      	str	r0, [sp, #0]
 80063ec:	68b8      	ldr	r0, [r7, #8]
 80063ee:	f000 fae7 	bl	80069c0 <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80063f2:	f107 0314 	add.w	r3, r7, #20
 80063f6:	2220      	movs	r2, #32
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f01b ff5e 	bl	80222bc <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3738      	adds	r7, #56	@ 0x38
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	4b4c      	ldr	r3, [pc, #304]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800641c:	5c9a      	ldrb	r2, [r3, r2]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3304      	adds	r3, #4
 800642e:	4a47      	ldr	r2, [pc, #284]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006430:	5c52      	ldrb	r2, [r2, r1]
 8006432:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3308      	adds	r3, #8
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3308      	adds	r3, #8
 8006440:	4a42      	ldr	r2, [pc, #264]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006442:	5c52      	ldrb	r2, [r2, r1]
 8006444:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	330c      	adds	r3, #12
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	4619      	mov	r1, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	330c      	adds	r3, #12
 8006452:	4a3e      	ldr	r2, [pc, #248]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006454:	5c52      	ldrb	r2, [r2, r1]
 8006456:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3301      	adds	r3, #1
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	4b3a      	ldr	r3, [pc, #232]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006462:	5c9b      	ldrb	r3, [r3, r2]
 8006464:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3305      	adds	r3, #5
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	4619      	mov	r1, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3301      	adds	r3, #1
 8006472:	4a36      	ldr	r2, [pc, #216]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006474:	5c52      	ldrb	r2, [r2, r1]
 8006476:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3309      	adds	r3, #9
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	4619      	mov	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3305      	adds	r3, #5
 8006484:	4a31      	ldr	r2, [pc, #196]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006486:	5c52      	ldrb	r2, [r2, r1]
 8006488:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	330d      	adds	r3, #13
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3309      	adds	r3, #9
 8006496:	4a2d      	ldr	r2, [pc, #180]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006498:	5c52      	ldrb	r2, [r2, r1]
 800649a:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	330d      	adds	r3, #13
 80064a0:	7bfa      	ldrb	r2, [r7, #15]
 80064a2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3302      	adds	r3, #2
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b27      	ldr	r3, [pc, #156]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80064ae:	5c9b      	ldrb	r3, [r3, r2]
 80064b0:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	330a      	adds	r3, #10
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	4619      	mov	r1, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3302      	adds	r3, #2
 80064be:	4a23      	ldr	r2, [pc, #140]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80064c0:	5c52      	ldrb	r2, [r2, r1]
 80064c2:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	330a      	adds	r3, #10
 80064c8:	7bfa      	ldrb	r2, [r7, #15]
 80064ca:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3306      	adds	r3, #6
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	4b1d      	ldr	r3, [pc, #116]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80064d6:	5c9b      	ldrb	r3, [r3, r2]
 80064d8:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	330e      	adds	r3, #14
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	4619      	mov	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3306      	adds	r3, #6
 80064e6:	4a19      	ldr	r2, [pc, #100]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80064e8:	5c52      	ldrb	r2, [r2, r1]
 80064ea:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	330e      	adds	r3, #14
 80064f0:	7bfa      	ldrb	r2, [r7, #15]
 80064f2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	330f      	adds	r3, #15
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	4b13      	ldr	r3, [pc, #76]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80064fe:	5c9b      	ldrb	r3, [r3, r2]
 8006500:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	330b      	adds	r3, #11
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	330f      	adds	r3, #15
 800650e:	4a0f      	ldr	r2, [pc, #60]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006510:	5c52      	ldrb	r2, [r2, r1]
 8006512:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3307      	adds	r3, #7
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	330b      	adds	r3, #11
 8006520:	4a0a      	ldr	r2, [pc, #40]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006522:	5c52      	ldrb	r2, [r2, r1]
 8006524:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3303      	adds	r3, #3
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3307      	adds	r3, #7
 8006532:	4a06      	ldr	r2, [pc, #24]	@ (800654c <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8006534:	5c52      	ldrb	r2, [r2, r1]
 8006536:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3303      	adds	r3, #3
 800653c:	7bfa      	ldrb	r2, [r7, #15]
 800653e:	701a      	strb	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	08026478 	.word	0x08026478

08006550 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	4b4c      	ldr	r3, [pc, #304]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006560:	5c9a      	ldrb	r2, [r3, r2]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4a47      	ldr	r2, [pc, #284]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006574:	5c52      	ldrb	r2, [r2, r1]
 8006576:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3308      	adds	r3, #8
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	4619      	mov	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3308      	adds	r3, #8
 8006584:	4a42      	ldr	r2, [pc, #264]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006586:	5c52      	ldrb	r2, [r2, r1]
 8006588:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	330c      	adds	r3, #12
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	4619      	mov	r1, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	330c      	adds	r3, #12
 8006596:	4a3e      	ldr	r2, [pc, #248]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006598:	5c52      	ldrb	r2, [r2, r1]
 800659a:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	330d      	adds	r3, #13
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80065a6:	5c9b      	ldrb	r3, [r3, r2]
 80065a8:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3309      	adds	r3, #9
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	330d      	adds	r3, #13
 80065b6:	4a36      	ldr	r2, [pc, #216]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80065b8:	5c52      	ldrb	r2, [r2, r1]
 80065ba:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3305      	adds	r3, #5
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3309      	adds	r3, #9
 80065c8:	4a31      	ldr	r2, [pc, #196]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80065ca:	5c52      	ldrb	r2, [r2, r1]
 80065cc:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3301      	adds	r3, #1
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4619      	mov	r1, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3305      	adds	r3, #5
 80065da:	4a2d      	ldr	r2, [pc, #180]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80065dc:	5c52      	ldrb	r2, [r2, r1]
 80065de:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3302      	adds	r3, #2
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	4b27      	ldr	r3, [pc, #156]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80065f2:	5c9b      	ldrb	r3, [r3, r2]
 80065f4:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	330a      	adds	r3, #10
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	4619      	mov	r1, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3302      	adds	r3, #2
 8006602:	4a23      	ldr	r2, [pc, #140]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006604:	5c52      	ldrb	r2, [r2, r1]
 8006606:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	330a      	adds	r3, #10
 800660c:	7bfa      	ldrb	r2, [r7, #15]
 800660e:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3306      	adds	r3, #6
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	4b1d      	ldr	r3, [pc, #116]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800661a:	5c9b      	ldrb	r3, [r3, r2]
 800661c:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	330e      	adds	r3, #14
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3306      	adds	r3, #6
 800662a:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800662c:	5c52      	ldrb	r2, [r2, r1]
 800662e:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	330e      	adds	r3, #14
 8006634:	7bfa      	ldrb	r2, [r7, #15]
 8006636:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3303      	adds	r3, #3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	4b13      	ldr	r3, [pc, #76]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006642:	5c9b      	ldrb	r3, [r3, r2]
 8006644:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3307      	adds	r3, #7
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3303      	adds	r3, #3
 8006652:	4a0f      	ldr	r2, [pc, #60]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006654:	5c52      	ldrb	r2, [r2, r1]
 8006656:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	330b      	adds	r3, #11
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	4619      	mov	r1, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3307      	adds	r3, #7
 8006664:	4a0a      	ldr	r2, [pc, #40]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006666:	5c52      	ldrb	r2, [r2, r1]
 8006668:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	330f      	adds	r3, #15
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	4619      	mov	r1, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	330b      	adds	r3, #11
 8006676:	4a06      	ldr	r2, [pc, #24]	@ (8006690 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8006678:	5c52      	ldrb	r2, [r2, r1]
 800667a:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	330f      	adds	r3, #15
 8006680:	7bfa      	ldrb	r2, [r7, #15]
 8006682:	701a      	strb	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	08026578 	.word	0x08026578

08006694 <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	e089      	b.n	80067b6 <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	4b48      	ldr	r3, [pc, #288]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80066aa:	5c9a      	ldrb	r2, [r3, r2]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3301      	adds	r3, #1
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	4619      	mov	r1, r3
 80066b4:	4b45      	ldr	r3, [pc, #276]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80066b6:	5c59      	ldrb	r1, [r3, r1]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3301      	adds	r3, #1
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	404b      	eors	r3, r1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	4053      	eors	r3, r2
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3302      	adds	r3, #2
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	4053      	eors	r3, r2
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3303      	adds	r3, #3
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	4053      	eors	r3, r2
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	781a      	ldrb	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3301      	adds	r3, #1
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4b38      	ldr	r3, [pc, #224]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80066ea:	5c5b      	ldrb	r3, [r3, r1]
 80066ec:	4053      	eors	r3, r2
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3302      	adds	r3, #2
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	4b34      	ldr	r3, [pc, #208]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80066fa:	5c59      	ldrb	r1, [r3, r1]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3302      	adds	r3, #2
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	404b      	eors	r3, r1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	4053      	eors	r3, r2
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3303      	adds	r3, #3
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	4053      	eors	r3, r2
 8006712:	b2db      	uxtb	r3, r3
 8006714:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3301      	adds	r3, #1
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4053      	eors	r3, r2
 8006722:	b2da      	uxtb	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3302      	adds	r3, #2
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	4619      	mov	r1, r3
 800672c:	4b27      	ldr	r3, [pc, #156]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 800672e:	5c5b      	ldrb	r3, [r3, r1]
 8006730:	4053      	eors	r3, r2
 8006732:	b2da      	uxtb	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3303      	adds	r3, #3
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	4b23      	ldr	r3, [pc, #140]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 800673e:	5c59      	ldrb	r1, [r3, r1]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3303      	adds	r3, #3
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	404b      	eors	r3, r1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	4053      	eors	r3, r2
 800674c:	b2db      	uxtb	r3, r3
 800674e:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8006758:	5c9a      	ldrb	r2, [r3, r2]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4053      	eors	r3, r2
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3301      	adds	r3, #1
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4053      	eors	r3, r2
 800676a:	b2da      	uxtb	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3302      	adds	r3, #2
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	4053      	eors	r3, r2
 8006774:	b2da      	uxtb	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3303      	adds	r3, #3
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	4b13      	ldr	r3, [pc, #76]	@ (80067cc <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8006780:	5c5b      	ldrb	r3, [r3, r1]
 8006782:	4053      	eors	r3, r2
 8006784:	b2db      	uxtb	r3, r3
 8006786:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	7a3a      	ldrb	r2, [r7, #8]
 8006790:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	7a7a      	ldrb	r2, [r7, #9]
 800679a:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	7aba      	ldrb	r2, [r7, #10]
 80067a4:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	7afa      	ldrb	r2, [r7, #11]
 80067ae:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	3301      	adds	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	f67f af72 	bls.w	80066a2 <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	08026678 	.word	0x08026678

080067d0 <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	e0df      	b.n	800699e <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	4b73      	ldr	r3, [pc, #460]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80067e6:	5c9a      	ldrb	r2, [r3, r2]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	4619      	mov	r1, r3
 80067ee:	4b72      	ldr	r3, [pc, #456]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 80067f0:	5c5b      	ldrb	r3, [r3, r1]
 80067f2:	4053      	eors	r3, r2
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3301      	adds	r3, #1
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	4619      	mov	r1, r3
 80067fe:	4b6f      	ldr	r3, [pc, #444]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8006800:	5c59      	ldrb	r1, [r3, r1]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3301      	adds	r3, #1
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	4b6b      	ldr	r3, [pc, #428]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 800680c:	5c1b      	ldrb	r3, [r3, r0]
 800680e:	404b      	eors	r3, r1
 8006810:	b2db      	uxtb	r3, r3
 8006812:	4053      	eors	r3, r2
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3302      	adds	r3, #2
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	4b65      	ldr	r3, [pc, #404]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8006820:	5c59      	ldrb	r1, [r3, r1]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3302      	adds	r3, #2
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	404b      	eors	r3, r1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	4053      	eors	r3, r2
 800682e:	b2da      	uxtb	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3303      	adds	r3, #3
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	4619      	mov	r1, r3
 8006838:	4b60      	ldr	r3, [pc, #384]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 800683a:	5c5b      	ldrb	r3, [r3, r1]
 800683c:	4053      	eors	r3, r2
 800683e:	b2db      	uxtb	r3, r3
 8006840:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	4b5c      	ldr	r3, [pc, #368]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 800684a:	5c9a      	ldrb	r2, [r3, r2]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	4b57      	ldr	r3, [pc, #348]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8006856:	5c59      	ldrb	r1, [r3, r1]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3301      	adds	r3, #1
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	4b55      	ldr	r3, [pc, #340]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006862:	5c1b      	ldrb	r3, [r3, r0]
 8006864:	404b      	eors	r3, r1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4053      	eors	r3, r2
 800686a:	b2da      	uxtb	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3302      	adds	r3, #2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	4b51      	ldr	r3, [pc, #324]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8006876:	5c59      	ldrb	r1, [r3, r1]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3302      	adds	r3, #2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	4b4d      	ldr	r3, [pc, #308]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006882:	5c1b      	ldrb	r3, [r3, r0]
 8006884:	404b      	eors	r3, r1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4053      	eors	r3, r2
 800688a:	b2da      	uxtb	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3303      	adds	r3, #3
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8006896:	5c59      	ldrb	r1, [r3, r1]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3303      	adds	r3, #3
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	404b      	eors	r3, r1
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	4053      	eors	r3, r2
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	4b41      	ldr	r3, [pc, #260]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80068b0:	5c9a      	ldrb	r2, [r3, r2]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	4053      	eors	r3, r2
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3301      	adds	r3, #1
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	4b3e      	ldr	r3, [pc, #248]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80068c4:	5c5b      	ldrb	r3, [r3, r1]
 80068c6:	4053      	eors	r3, r2
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3302      	adds	r3, #2
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	4619      	mov	r1, r3
 80068d2:	4b38      	ldr	r3, [pc, #224]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80068d4:	5c59      	ldrb	r1, [r3, r1]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3302      	adds	r3, #2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	4b36      	ldr	r3, [pc, #216]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 80068e0:	5c1b      	ldrb	r3, [r3, r0]
 80068e2:	404b      	eors	r3, r1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	4053      	eors	r3, r2
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3303      	adds	r3, #3
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	4b32      	ldr	r3, [pc, #200]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80068f4:	5c59      	ldrb	r1, [r3, r1]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3303      	adds	r3, #3
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	4b2e      	ldr	r3, [pc, #184]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006900:	5c1b      	ldrb	r3, [r3, r0]
 8006902:	404b      	eors	r3, r1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	4053      	eors	r3, r2
 8006908:	b2db      	uxtb	r3, r3
 800690a:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8006914:	5c9a      	ldrb	r2, [r3, r2]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	4b26      	ldr	r3, [pc, #152]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 800691e:	5c5b      	ldrb	r3, [r3, r1]
 8006920:	4053      	eors	r3, r2
 8006922:	b2da      	uxtb	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3301      	adds	r3, #1
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 800692e:	5c59      	ldrb	r1, [r3, r1]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3301      	adds	r3, #1
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	404b      	eors	r3, r1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4053      	eors	r3, r2
 800693c:	b2da      	uxtb	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3302      	adds	r3, #2
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4619      	mov	r1, r3
 8006946:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8006948:	5c5b      	ldrb	r3, [r3, r1]
 800694a:	4053      	eors	r3, r2
 800694c:	b2da      	uxtb	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3303      	adds	r3, #3
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	4b17      	ldr	r3, [pc, #92]	@ (80069b4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8006958:	5c59      	ldrb	r1, [r3, r1]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3303      	adds	r3, #3
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	4b15      	ldr	r3, [pc, #84]	@ (80069b8 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8006964:	5c1b      	ldrb	r3, [r3, r0]
 8006966:	404b      	eors	r3, r1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	4053      	eors	r3, r2
 800696c:	b2db      	uxtb	r3, r3
 800696e:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	7a3a      	ldrb	r2, [r7, #8]
 8006978:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	7a7a      	ldrb	r2, [r7, #9]
 8006982:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	607a      	str	r2, [r7, #4]
 800698a:	7aba      	ldrb	r2, [r7, #10]
 800698c:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	7afa      	ldrb	r2, [r7, #11]
 8006996:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	3301      	adds	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	f67f af1c 	bls.w	80067de <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	08026878 	.word	0x08026878
 80069b8:	08026678 	.word	0x08026678
 80069bc:	08026778 	.word	0x08026778

080069c0 <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	@ 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e197      	b.n	8006d08 <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	fbb3 f1f2 	udiv	r1, r3, r2
 80069e2:	fb01 f202 	mul.w	r2, r1, r2
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 80069f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80069fa:	d150      	bne.n	8006a9e <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 80069fc:	7ffb      	ldrb	r3, [r7, #31]
 80069fe:	f1c3 0303 	rsb	r3, r3, #3
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	7819      	ldrb	r1, [r3, #0]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
 8006a10:	f1c3 0303 	rsb	r3, r3, #3
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	4403      	add	r3, r0
 8006a1a:	404a      	eors	r2, r1
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8006a20:	7ffb      	ldrb	r3, [r7, #31]
 8006a22:	f1c3 0303 	rsb	r3, r3, #3
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	3301      	adds	r3, #1
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	7819      	ldrb	r1, [r3, #0]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	3301      	adds	r3, #1
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	7ffb      	ldrb	r3, [r7, #31]
 8006a38:	f1c3 0303 	rsb	r3, r3, #3
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	3301      	adds	r3, #1
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	4403      	add	r3, r0
 8006a44:	404a      	eors	r2, r1
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 8006a4a:	7ffb      	ldrb	r3, [r7, #31]
 8006a4c:	f1c3 0303 	rsb	r3, r3, #3
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	3302      	adds	r3, #2
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	7819      	ldrb	r1, [r3, #0]
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	7ffb      	ldrb	r3, [r7, #31]
 8006a62:	f1c3 0303 	rsb	r3, r3, #3
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	3302      	adds	r3, #2
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	4403      	add	r3, r0
 8006a6e:	404a      	eors	r2, r1
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 8006a74:	7ffb      	ldrb	r3, [r7, #31]
 8006a76:	f1c3 0303 	rsb	r3, r3, #3
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3303      	adds	r3, #3
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	7819      	ldrb	r1, [r3, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3303      	adds	r3, #3
 8006a88:	781a      	ldrb	r2, [r3, #0]
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
 8006a8c:	f1c3 0303 	rsb	r3, r3, #3
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	3303      	adds	r3, #3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	4403      	add	r3, r0
 8006a98:	404a      	eors	r2, r1
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d903      	bls.n	8006ab0 <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	e0d1      	b.n	8006c54 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d153      	bne.n	8006b5e <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	7dbb      	ldrb	r3, [r7, #22]
 8006aca:	69b9      	ldr	r1, [r7, #24]
 8006acc:	440b      	add	r3, r1
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4b93      	ldr	r3, [pc, #588]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006ad4:	5c59      	ldrb	r1, [r3, r1]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7818      	ldrb	r0, [r3, #0]
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	488f      	ldr	r0, [pc, #572]	@ (8006d24 <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 8006ae6:	5cc3      	ldrb	r3, [r0, r3]
 8006ae8:	404b      	eors	r3, r1
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4053      	eors	r3, r2
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	7dbb      	ldrb	r3, [r7, #22]
 8006b00:	69b9      	ldr	r1, [r7, #24]
 8006b02:	440b      	add	r3, r1
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	4b85      	ldr	r3, [pc, #532]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006b0a:	5c5b      	ldrb	r3, [r3, r1]
 8006b0c:	4053      	eors	r3, r2
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	3301      	adds	r3, #1
 8006b18:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	7dbb      	ldrb	r3, [r7, #22]
 8006b20:	69b9      	ldr	r1, [r7, #24]
 8006b22:	440b      	add	r3, r1
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	4b7d      	ldr	r3, [pc, #500]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006b2a:	5c5b      	ldrb	r3, [r3, r1]
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	7dbb      	ldrb	r3, [r7, #22]
 8006b40:	3b04      	subs	r3, #4
 8006b42:	69b9      	ldr	r1, [r7, #24]
 8006b44:	440b      	add	r3, r1
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4b75      	ldr	r3, [pc, #468]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006b4c:	5c5b      	ldrb	r3, [r3, r1]
 8006b4e:	4053      	eors	r3, r2
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e07a      	b.n	8006c54 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d147      	bne.n	8006bf4 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	78fa      	ldrb	r2, [r7, #3]
 8006b6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b6e:	fb01 f202 	mul.w	r2, r1, r2
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d13c      	bne.n	8006bf4 <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	4619      	mov	r1, r3
 8006b86:	4b66      	ldr	r3, [pc, #408]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006b88:	5c5b      	ldrb	r3, [r3, r1]
 8006b8a:	4053      	eors	r3, r2
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	3301      	adds	r3, #1
 8006b96:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	3b04      	subs	r3, #4
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006ba6:	5c5b      	ldrb	r3, [r3, r1]
 8006ba8:	4053      	eors	r3, r2
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4b57      	ldr	r3, [pc, #348]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006bc4:	5c5b      	ldrb	r3, [r3, r1]
 8006bc6:	4053      	eors	r3, r2
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	3b04      	subs	r3, #4
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	4619      	mov	r1, r3
 8006be0:	4b4f      	ldr	r3, [pc, #316]	@ (8006d20 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8006be2:	5c5b      	ldrb	r3, [r3, r1]
 8006be4:	4053      	eors	r3, r2
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e02f      	b.n	8006c54 <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	3b04      	subs	r3, #4
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	4053      	eors	r3, r2
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	3b04      	subs	r3, #4
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4053      	eors	r3, r2
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	3b04      	subs	r3, #4
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4053      	eors	r3, r2
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	3b04      	subs	r3, #4
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4053      	eors	r3, r2
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	3301      	adds	r3, #1
 8006c52:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8006c54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c58:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c5a:	d006      	beq.n	8006c6a <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e005      	b.n	8006c76 <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 8006c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d141      	bne.n	8006d02 <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 8006c7e:	7ffb      	ldrb	r3, [r7, #31]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	7819      	ldrb	r1, [r3, #0]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	3b04      	subs	r3, #4
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	7ffb      	ldrb	r3, [r7, #31]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4403      	add	r3, r0
 8006c96:	404a      	eors	r2, r1
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 8006c9c:	7ffb      	ldrb	r3, [r7, #31]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	7819      	ldrb	r1, [r3, #0]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	3b03      	subs	r3, #3
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	7ffb      	ldrb	r3, [r7, #31]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	4403      	add	r3, r0
 8006cb8:	404a      	eors	r2, r1
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	3302      	adds	r3, #2
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	7819      	ldrb	r1, [r3, #0]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3b02      	subs	r3, #2
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	7ffb      	ldrb	r3, [r7, #31]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	4403      	add	r3, r0
 8006cda:	404a      	eors	r2, r1
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 8006ce0:	7ffb      	ldrb	r3, [r7, #31]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	7819      	ldrb	r1, [r3, #0]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	7ffb      	ldrb	r3, [r7, #31]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	3303      	adds	r3, #3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	4403      	add	r3, r0
 8006cfc:	404a      	eors	r2, r1
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	3301      	adds	r3, #1
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	7ffb      	ldrb	r3, [r7, #31]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f67f ae64 	bls.w	80069d8 <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	3724      	adds	r7, #36	@ 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	08026478 	.word	0x08026478
 8006d24:	08026978 	.word	0x08026978

08006d28 <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 8006d36:	e00b      	b.n	8006d50 <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	18d0      	adds	r0, r2, r3
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	3308      	adds	r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f000 f9f0 	bl	8007130 <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	1e5a      	subs	r2, r3, #1
 8006d54:	71fa      	strb	r2, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1ee      	bne.n	8006d38 <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	3308      	adds	r3, #8
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 8006d7e:	f107 0310 	add.w	r3, r7, #16
 8006d82:	4619      	mov	r1, r3
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 f887 	bl	8006e98 <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e021      	b.n	8006dd4 <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 8006d90:	7ffb      	ldrb	r3, [r7, #31]
 8006d92:	4a1a      	ldr	r2, [pc, #104]	@ (8006dfc <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8006d94:	5cd3      	ldrb	r3, [r2, r3]
 8006d96:	4619      	mov	r1, r3
 8006d98:	69b8      	ldr	r0, [r7, #24]
 8006d9a:	f000 fd8f 	bl	80078bc <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	7ffb      	ldrb	r3, [r7, #31]
 8006da4:	4915      	ldr	r1, [pc, #84]	@ (8006dfc <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8006da6:	5ccb      	ldrb	r3, [r1, r3]
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f000 fd86 	bl	80078bc <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3320      	adds	r3, #32
 8006db4:	4619      	mov	r1, r3
 8006db6:	69b8      	ldr	r0, [r7, #24]
 8006db8:	f000 fa3f 	bl	800723a <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f103 0220 	add.w	r2, r3, #32
 8006dc2:	f107 0310 	add.w	r3, r7, #16
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fdc2 	bl	8007952 <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 8006dce:	7ffb      	ldrb	r3, [r7, #31]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	7ffb      	ldrb	r3, [r7, #31]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	d9da      	bls.n	8006d90 <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 8006dda:	f107 0310 	add.w	r3, r7, #16
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fdf3 	bl	80079ca <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 8006de4:	f107 0310 	add.w	r3, r7, #16
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f8f3 	bl	8006fd6 <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08026984 	.word	0x08026984

08006e00 <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	3308      	adds	r3, #8
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 8006e1a:	f107 0310 	add.w	r3, r7, #16
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68b8      	ldr	r0, [r7, #8]
 8006e22:	f000 f839 	bl	8006e98 <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 8006e26:	230f      	movs	r3, #15
 8006e28:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3320      	adds	r3, #32
 8006e2e:	4619      	mov	r1, r3
 8006e30:	69b8      	ldr	r0, [r7, #24]
 8006e32:	f000 fa02 	bl	800723a <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 8006e36:	7ffb      	ldrb	r3, [r7, #31]
 8006e38:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8006e3a:	5cd3      	ldrb	r3, [r2, r3]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	69b8      	ldr	r0, [r7, #24]
 8006e40:	f000 fce5 	bl	800780e <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
 8006e4a:	4912      	ldr	r1, [pc, #72]	@ (8006e94 <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8006e4c:	5ccb      	ldrb	r3, [r1, r3]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f000 fcdc 	bl	800780e <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f103 0220 	add.w	r2, r3, #32
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	4611      	mov	r1, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fd75 	bl	8007952 <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 8006e68:	7ffb      	ldrb	r3, [r7, #31]
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	77fa      	strb	r2, [r7, #31]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1db      	bne.n	8006e2a <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 8006e72:	f107 0310 	add.w	r3, r7, #16
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fda7 	bl	80079ca <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 f8a7 	bl	8006fd6 <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	08026984 	.word	0x08026984

08006e98 <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e089      	b.n	8006fc0 <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73bb      	strb	r3, [r7, #14]
 8006ebe:	e046      	b.n	8006f4e <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	b25a      	sxtb	r2, r3
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	440b      	add	r3, r1
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ed6:	b25b      	sxtb	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b25a      	sxtb	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3304      	adds	r3, #4
 8006eee:	0852      	lsrs	r2, r2, #1
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	781a      	ldrb	r2, [r3, #0]
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	440b      	add	r3, r1
 8006f02:	0052      	lsls	r2, r2, #1
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b25a      	sxtb	r2, r3
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	440b      	add	r3, r1
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	b25b      	sxtb	r3, r3
 8006f18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	440b      	add	r3, r1
 8006f42:	0052      	lsls	r2, r2, #1
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	73bb      	strb	r3, [r7, #14]
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b06      	cmp	r3, #6
 8006f52:	d9b5      	bls.n	8006ec0 <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3304      	adds	r3, #4
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b25a      	sxtb	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3307      	adds	r3, #7
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	b25b      	sxtb	r3, r3
 8006f64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f68:	b25b      	sxtb	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b25a      	sxtb	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3304      	adds	r3, #4
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3307      	adds	r3, #7
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3307      	adds	r3, #7
 8006f80:	0052      	lsls	r2, r2, #1
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	b25a      	sxtb	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3307      	adds	r3, #7
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	b25b      	sxtb	r3, r3
 8006f94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3307      	adds	r3, #7
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3307      	adds	r3, #7
 8006fae:	0052      	lsls	r2, r2, #1
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	f67f af72 	bls.w	8006eac <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	72fb      	strb	r3, [r7, #11]
 8006fe4:	e099      	b.n	800711a <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	4413      	add	r3, r2
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	72bb      	strb	r3, [r7, #10]
 8006ff8:	e04c      	b.n	8007094 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	4413      	add	r3, r2
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b25a      	sxtb	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3304      	adds	r3, #4
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	b25b      	sxtb	r3, r3
 8007012:	4313      	orrs	r3, r2
 8007014:	b259      	sxtb	r1, r3
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	4413      	add	r3, r2
 800701c:	b2ca      	uxtb	r2, r1
 800701e:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	4413      	add	r3, r2
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	440b      	add	r3, r1
 800702e:	0052      	lsls	r2, r2, #1
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4413      	add	r3, r2
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b25a      	sxtb	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b25b      	sxtb	r3, r3
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	b25b      	sxtb	r3, r3
 800704a:	4313      	orrs	r3, r2
 800704c:	b259      	sxtb	r1, r3
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	4413      	add	r3, r2
 8007054:	b2ca      	uxtb	r2, r1
 8007056:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4413      	add	r3, r2
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	440b      	add	r3, r1
 8007066:	0052      	lsls	r2, r2, #1
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	b2da      	uxtb	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3304      	adds	r3, #4
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3304      	adds	r3, #4
 8007082:	0852      	lsrs	r2, r2, #1
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
            inTmp++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 800708e:	7abb      	ldrb	r3, [r7, #10]
 8007090:	3301      	adds	r3, #1
 8007092:	72bb      	strb	r3, [r7, #10]
 8007094:	7abb      	ldrb	r3, [r7, #10]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d9af      	bls.n	8006ffa <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	4413      	add	r3, r2
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b25a      	sxtb	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3304      	adds	r3, #4
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b259      	sxtb	r1, r3
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	b2ca      	uxtb	r2, r1
 80070be:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4413      	add	r3, r2
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	440b      	add	r3, r1
 80070ce:	0052      	lsls	r2, r2, #1
 80070d0:	b2d2      	uxtb	r2, r2
 80070d2:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4413      	add	r3, r2
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	b25a      	sxtb	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	b25b      	sxtb	r3, r3
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	b25b      	sxtb	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b259      	sxtb	r1, r3
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	4413      	add	r3, r2
 80070f4:	b2ca      	uxtb	r2, r1
 80070f6:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3304      	adds	r3, #4
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3304      	adds	r3, #4
 800710e:	0852      	lsrs	r2, r2, #1
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	2b07      	cmp	r3, #7
 800711e:	f67f af62 	bls.w	8006fe6 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	6810      	ldr	r0, [r2, #0]
 8007142:	6851      	ldr	r1, [r2, #4]
 8007144:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]
 800714a:	e050      	b.n	80071ee <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4413      	add	r3, r2
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 8007156:	2300      	movs	r3, #0
 8007158:	75bb      	strb	r3, [r7, #22]
 800715a:	e02d      	b.n	80071b8 <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	4413      	add	r3, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b25a      	sxtb	r2, r3
 8007166:	7dbb      	ldrb	r3, [r7, #22]
 8007168:	3318      	adds	r3, #24
 800716a:	443b      	add	r3, r7
 800716c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007170:	b25b      	sxtb	r3, r3
 8007172:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007176:	b25b      	sxtb	r3, r3
 8007178:	4313      	orrs	r3, r2
 800717a:	b259      	sxtb	r1, r3
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4413      	add	r3, r2
 8007182:	b2ca      	uxtb	r2, r1
 8007184:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	4413      	add	r3, r2
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	440b      	add	r3, r1
 8007194:	0852      	lsrs	r2, r2, #1
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 800719a:	7dbb      	ldrb	r3, [r7, #22]
 800719c:	3318      	adds	r3, #24
 800719e:	443b      	add	r3, r7
 80071a0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80071a4:	7dbb      	ldrb	r3, [r7, #22]
 80071a6:	0052      	lsls	r2, r2, #1
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	3318      	adds	r3, #24
 80071ac:	443b      	add	r3, r7
 80071ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 80071b2:	7dbb      	ldrb	r3, [r7, #22]
 80071b4:	3301      	adds	r3, #1
 80071b6:	75bb      	strb	r3, [r7, #22]
 80071b8:	7dbb      	ldrb	r3, [r7, #22]
 80071ba:	2b06      	cmp	r3, #6
 80071bc:	d9ce      	bls.n	800715c <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	4413      	add	r3, r2
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b25a      	sxtb	r2, r3
 80071c8:	7cfb      	ldrb	r3, [r7, #19]
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071d0:	b25b      	sxtb	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b259      	sxtb	r1, r3
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	4413      	add	r3, r2
 80071dc:	b2ca      	uxtb	r2, r1
 80071de:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 80071e0:	7cfb      	ldrb	r3, [r7, #19]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	3301      	adds	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b06      	cmp	r3, #6
 80071f2:	d9ab      	bls.n	800714c <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	3303      	adds	r3, #3
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	3307      	adds	r3, #7
 80071fe:	0112      	lsls	r2, r2, #4
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	3303      	adds	r3, #3
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	3303      	adds	r3, #3
 800720e:	f022 020f 	bic.w	r2, r2, #15
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	799b      	ldrb	r3, [r3, #6]
 800721a:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	3306      	adds	r3, #6
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	7912      	ldrb	r2, [r2, #4]
 8007224:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	3304      	adds	r3, #4
 800722a:	7dfa      	ldrb	r2, [r7, #23]
 800722c:	701a      	strb	r2, [r3, #0]

}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3301      	adds	r3, #1
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	b2da      	uxtb	r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3302      	adds	r3, #2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4313      	orrs	r3, r2
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3301      	adds	r3, #1
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	089b      	lsrs	r3, r3, #2
 8007280:	b2db      	uxtb	r3, r3
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4313      	orrs	r3, r2
 800728a:	b2da      	uxtb	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b25a      	sxtb	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3302      	adds	r3, #2
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b25b      	sxtb	r3, r3
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	b25b      	sxtb	r3, r3
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	b25b      	sxtb	r3, r3
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b25b      	sxtb	r3, r3
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	099b      	lsrs	r3, r3, #6
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	08db      	lsrs	r3, r3, #3
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4313      	orrs	r3, r2
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	781a      	ldrb	r2, [r3, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	f002 0220 	and.w	r2, r2, #32
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b25a      	sxtb	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3303      	adds	r3, #3
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b25b      	sxtb	r3, r3
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	b25b      	sxtb	r3, r3
 800730c:	4313      	orrs	r3, r2
 800730e:	b25a      	sxtb	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	3301      	adds	r3, #1
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b25a      	sxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3301      	adds	r3, #1
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b25b      	sxtb	r3, r3
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	b25b      	sxtb	r3, r3
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	b25b      	sxtb	r3, r3
 8007332:	4313      	orrs	r3, r2
 8007334:	b25a      	sxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	3301      	adds	r3, #1
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b25a      	sxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b25b      	sxtb	r3, r3
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	b25b      	sxtb	r3, r3
 8007352:	4313      	orrs	r3, r2
 8007354:	b25a      	sxtb	r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	7819      	ldrb	r1, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3302      	adds	r3, #2
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	b2da      	uxtb	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	3301      	adds	r3, #1
 8007378:	430a      	orrs	r2, r1
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	7819      	ldrb	r1, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3301      	adds	r3, #1
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	099b      	lsrs	r3, r3, #6
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	b2da      	uxtb	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	3301      	adds	r3, #1
 8007398:	430a      	orrs	r2, r1
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3302      	adds	r3, #2
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	3302      	adds	r3, #2
 80073ac:	f002 0220 	and.w	r2, r2, #32
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	3302      	adds	r3, #2
 80073b8:	7819      	ldrb	r1, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3302      	adds	r3, #2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	3302      	adds	r3, #2
 80073ce:	430a      	orrs	r2, r1
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	3302      	adds	r3, #2
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3301      	adds	r3, #1
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	085b      	lsrs	r3, r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	3302      	adds	r3, #2
 80073ee:	430a      	orrs	r2, r1
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	3302      	adds	r3, #2
 80073f8:	7819      	ldrb	r1, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	089b      	lsrs	r3, r3, #2
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	b2da      	uxtb	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3302      	adds	r3, #2
 800740c:	430a      	orrs	r2, r1
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	3302      	adds	r3, #2
 8007416:	7819      	ldrb	r1, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3303      	adds	r3, #3
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	b2da      	uxtb	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	3302      	adds	r3, #2
 800742c:	430a      	orrs	r2, r1
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	3302      	adds	r3, #2
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b25a      	sxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b25b      	sxtb	r3, r3
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	b25b      	sxtb	r3, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	b25a      	sxtb	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	3302      	adds	r3, #2
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3301      	adds	r3, #1
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	015b      	lsls	r3, r3, #5
 800745a:	b2da      	uxtb	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	3303      	adds	r3, #3
 8007460:	f002 0220 	and.w	r2, r2, #32
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	3303      	adds	r3, #3
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b25a      	sxtb	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b25b      	sxtb	r3, r3
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	b25b      	sxtb	r3, r3
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	b25b      	sxtb	r3, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	b25a      	sxtb	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	3303      	adds	r3, #3
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	3303      	adds	r3, #3
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3303      	adds	r3, #3
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	089b      	lsrs	r3, r3, #2
 800749a:	b2db      	uxtb	r3, r3
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	3303      	adds	r3, #3
 80074a6:	430a      	orrs	r2, r1
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	3303      	adds	r3, #3
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3302      	adds	r3, #2
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	089b      	lsrs	r3, r3, #2
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	3303      	adds	r3, #3
 80074c6:	430a      	orrs	r2, r1
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	3303      	adds	r3, #3
 80074d0:	7819      	ldrb	r1, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3301      	adds	r3, #1
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	089b      	lsrs	r3, r3, #2
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	3303      	adds	r3, #3
 80074e6:	430a      	orrs	r2, r1
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	3303      	adds	r3, #3
 80074f0:	7819      	ldrb	r1, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	099b      	lsrs	r3, r3, #6
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	3303      	adds	r3, #3
 8007504:	430a      	orrs	r2, r1
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3305      	adds	r3, #5
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	b2da      	uxtb	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	3304      	adds	r3, #4
 8007518:	f002 0220 	and.w	r2, r2, #32
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	3304      	adds	r3, #4
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	b25a      	sxtb	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3306      	adds	r3, #6
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b25b      	sxtb	r3, r3
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	b25b      	sxtb	r3, r3
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	b25b      	sxtb	r3, r3
 800753a:	4313      	orrs	r3, r2
 800753c:	b25a      	sxtb	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	3304      	adds	r3, #4
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	3304      	adds	r3, #4
 800754a:	7819      	ldrb	r1, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3304      	adds	r3, #4
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	089b      	lsrs	r3, r3, #2
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	3304      	adds	r3, #4
 8007560:	430a      	orrs	r2, r1
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	3304      	adds	r3, #4
 800756a:	7819      	ldrb	r1, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3305      	adds	r3, #5
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	b2da      	uxtb	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	3304      	adds	r3, #4
 8007580:	430a      	orrs	r2, r1
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	3304      	adds	r3, #4
 800758a:	7819      	ldrb	r1, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3306      	adds	r3, #6
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	3304      	adds	r3, #4
 80075a0:	430a      	orrs	r2, r1
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	3304      	adds	r3, #4
 80075aa:	7819      	ldrb	r1, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3307      	adds	r3, #7
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	3304      	adds	r3, #4
 80075c0:	430a      	orrs	r2, r1
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3304      	adds	r3, #4
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	3305      	adds	r3, #5
 80075d4:	f002 0220 	and.w	r2, r2, #32
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	3305      	adds	r3, #5
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b25a      	sxtb	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3305      	adds	r3, #5
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b25b      	sxtb	r3, r3
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	4313      	orrs	r3, r2
 80075f4:	b25a      	sxtb	r2, r3
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	3305      	adds	r3, #5
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	3305      	adds	r3, #5
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b25a      	sxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3306      	adds	r3, #6
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b25b      	sxtb	r3, r3
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	b25b      	sxtb	r3, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	b25a      	sxtb	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	3305      	adds	r3, #5
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	3305      	adds	r3, #5
 8007628:	7819      	ldrb	r1, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3306      	adds	r3, #6
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	b2da      	uxtb	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	3305      	adds	r3, #5
 800763e:	430a      	orrs	r2, r1
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	3305      	adds	r3, #5
 8007648:	7819      	ldrb	r1, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3304      	adds	r3, #4
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	089b      	lsrs	r3, r3, #2
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	b2da      	uxtb	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	3305      	adds	r3, #5
 800765e:	430a      	orrs	r2, r1
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	3305      	adds	r3, #5
 8007668:	7819      	ldrb	r1, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3306      	adds	r3, #6
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	091b      	lsrs	r3, r3, #4
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3305      	adds	r3, #5
 800767e:	430a      	orrs	r2, r1
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3305      	adds	r3, #5
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	015b      	lsls	r3, r3, #5
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	3306      	adds	r3, #6
 8007692:	f002 0220 	and.w	r2, r2, #32
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	3306      	adds	r3, #6
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b25a      	sxtb	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3306      	adds	r3, #6
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b25a      	sxtb	r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	3306      	adds	r3, #6
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	3306      	adds	r3, #6
 80076c4:	7819      	ldrb	r1, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3305      	adds	r3, #5
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	089b      	lsrs	r3, r3, #2
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	3306      	adds	r3, #6
 80076da:	430a      	orrs	r2, r1
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	3306      	adds	r3, #6
 80076e4:	7819      	ldrb	r1, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3307      	adds	r3, #7
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	089b      	lsrs	r3, r3, #2
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3306      	adds	r3, #6
 80076fa:	430a      	orrs	r2, r1
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	3306      	adds	r3, #6
 8007704:	7819      	ldrb	r1, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3304      	adds	r3, #4
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	b2da      	uxtb	r2, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	3306      	adds	r3, #6
 800771a:	430a      	orrs	r2, r1
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	3306      	adds	r3, #6
 8007724:	7819      	ldrb	r1, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3307      	adds	r3, #7
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	09db      	lsrs	r3, r3, #7
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	3306      	adds	r3, #6
 8007734:	430a      	orrs	r2, r1
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3306      	adds	r3, #6
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	3307      	adds	r3, #7
 8007748:	f002 0220 	and.w	r2, r2, #32
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	3307      	adds	r3, #7
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b25a      	sxtb	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3305      	adds	r3, #5
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b25b      	sxtb	r3, r3
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	b25b      	sxtb	r3, r3
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	b25b      	sxtb	r3, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	b25a      	sxtb	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	3307      	adds	r3, #7
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	3307      	adds	r3, #7
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b25a      	sxtb	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3306      	adds	r3, #6
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b25b      	sxtb	r3, r3
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	b25b      	sxtb	r3, r3
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	b25b      	sxtb	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b25a      	sxtb	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	3307      	adds	r3, #7
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	3307      	adds	r3, #7
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b25a      	sxtb	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b25b      	sxtb	r3, r3
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	b25b      	sxtb	r3, r3
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b25a      	sxtb	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3307      	adds	r3, #7
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3307      	adds	r3, #7
 80077c6:	7819      	ldrb	r1, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3304      	adds	r3, #4
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	099b      	lsrs	r3, r3, #6
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	3307      	adds	r3, #7
 80077dc:	430a      	orrs	r2, r1
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	3307      	adds	r3, #7
 80077e6:	7819      	ldrb	r1, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	091b      	lsrs	r3, r3, #4
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	3307      	adds	r3, #7
 80077fc:	430a      	orrs	r2, r1
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 8007822:	e041      	b.n	80078a8 <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
 8007828:	e01f      	b.n	800786a <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	01db      	lsls	r3, r3, #7
 8007834:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	440b      	add	r3, r1
 8007844:	0852      	lsrs	r2, r2, #1
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	4413      	add	r3, r2
 8007850:	7819      	ldrb	r1, [r3, #0]
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	7bba      	ldrb	r2, [r7, #14]
 800785a:	430a      	orrs	r2, r1
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8007860:	7b7b      	ldrb	r3, [r7, #13]
 8007862:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	3301      	adds	r3, #1
 8007868:	73fb      	strb	r3, [r7, #15]
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d9dc      	bls.n	800782a <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3303      	adds	r3, #3
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00f      	beq.n	800789e <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007886:	b2da      	uxtb	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3303      	adds	r3, #3
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3303      	adds	r3, #3
 8007896:	f022 020f 	bic.w	r2, r2, #15
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1ba      	bne.n	8007824 <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 80078d0:	e035      	b.n	800793e <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 80078d2:	2304      	movs	r3, #4
 80078d4:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	3b01      	subs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	09db      	lsrs	r3, r3, #7
 80078e6:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	440b      	add	r3, r1
 80078f6:	0052      	lsls	r2, r2, #1
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	7819      	ldrb	r1, [r3, #0]
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	7bba      	ldrb	r2, [r7, #14]
 800790c:	430a      	orrs	r2, r1
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8007912:	7b7b      	ldrb	r3, [r7, #13]
 8007914:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1dc      	bne.n	80078d6 <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d008      	beq.n	8007934 <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3303      	adds	r3, #3
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3303      	adds	r3, #3
 800792c:	f042 0210 	orr.w	r2, r2, #16
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	3b01      	subs	r3, #1
 800793c:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1c6      	bne.n	80078d2 <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f83f 	bl	80079f8 <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3304      	adds	r3, #4
 800797e:	7819      	ldrb	r1, [r3, #0]
 8007980:	7b3a      	ldrb	r2, [r7, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3304      	adds	r3, #4
 8007986:	404a      	eors	r2, r1
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3305      	adds	r3, #5
 8007990:	7819      	ldrb	r1, [r3, #0]
 8007992:	7b7a      	ldrb	r2, [r7, #13]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3305      	adds	r3, #5
 8007998:	404a      	eors	r2, r1
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3306      	adds	r3, #6
 80079a2:	7819      	ldrb	r1, [r3, #0]
 80079a4:	7bba      	ldrb	r2, [r7, #14]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3306      	adds	r3, #6
 80079aa:	404a      	eors	r2, r1
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3307      	adds	r3, #7
 80079b4:	7819      	ldrb	r1, [r3, #0]
 80079b6:	7bfa      	ldrb	r2, [r7, #15]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3307      	adds	r3, #7
 80079bc:	404a      	eors	r2, r1
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3304      	adds	r3, #4
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	601a      	str	r2, [r3, #0]
}
 80079ec:	bf00      	nop
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8007a02:	f107 030c 	add.w	r3, r7, #12
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fa4d 	bl	8007ea8 <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	75fb      	strb	r3, [r7, #23]
 8007a12:	e06d      	b.n	8007af0 <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	3318      	adds	r3, #24
 8007a1a:	443b      	add	r3, r7
 8007a1c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	440b      	add	r3, r1
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4053      	eors	r3, r2
 8007a2c:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8007a2e:	7dbb      	ldrb	r3, [r7, #22]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	7dbb      	ldrb	r3, [r7, #22]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7dbb      	ldrb	r3, [r7, #22]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 030f 	and.w	r3, r3, #15
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	4313      	orrs	r3, r2
 8007a54:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	005a      	lsls	r2, r3, #1
 8007a5a:	7dbb      	ldrb	r3, [r7, #22]
 8007a5c:	4923      	ldr	r1, [pc, #140]	@ (8007aec <phCryptoSym_Sw_Des_F+0xf4>)
 8007a5e:	0192      	lsls	r2, r2, #6
 8007a60:	440a      	add	r2, r1
 8007a62:	4413      	add	r3, r2
 8007a64:	781a      	ldrb	r2, [r3, #0]
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	0112      	lsls	r2, r2, #4
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	3318      	adds	r3, #24
 8007a6e:	443b      	add	r3, r7
 8007a70:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	3301      	adds	r3, #1
 8007a7a:	3318      	adds	r3, #24
 8007a7c:	443b      	add	r3, r7
 8007a7e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	3301      	adds	r3, #1
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	440b      	add	r3, r1
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4053      	eors	r3, r2
 8007a90:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8007a92:	7dbb      	ldrb	r3, [r7, #22]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	7dbb      	ldrb	r3, [r7, #22]
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	7dbb      	ldrb	r3, [r7, #22]
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	3318      	adds	r3, #24
 8007abe:	443b      	add	r3, r7
 8007ac0:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	7dbb      	ldrb	r3, [r7, #22]
 8007acc:	4807      	ldr	r0, [pc, #28]	@ (8007aec <phCryptoSym_Sw_Des_F+0xf4>)
 8007ace:	0192      	lsls	r2, r2, #6
 8007ad0:	4402      	add	r2, r0
 8007ad2:	4413      	add	r3, r2
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	3318      	adds	r3, #24
 8007ade:	443b      	add	r3, r7
 8007ae0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
 8007aea:	e001      	b.n	8007af0 <phCryptoSym_Sw_Des_F+0xf8>
 8007aec:	08026994 	.word	0x08026994
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d98e      	bls.n	8007a14 <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 8007af6:	7b3a      	ldrb	r2, [r7, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3301      	adds	r3, #1
 8007afc:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 8007b04:	7b3b      	ldrb	r3, [r7, #12]
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 8007b0c:	7b3a      	ldrb	r2, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3302      	adds	r3, #2
 8007b12:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b25a      	sxtb	r2, r3
 8007b22:	7b3b      	ldrb	r3, [r7, #12]
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	015b      	lsls	r3, r3, #5
 8007b28:	b25b      	sxtb	r3, r3
 8007b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2e:	b25b      	sxtb	r3, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b25a      	sxtb	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3302      	adds	r3, #2
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8007b3c:	7b3b      	ldrb	r3, [r7, #12]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8007b4c:	7b3b      	ldrb	r3, [r7, #12]
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3303      	adds	r3, #3
 8007b56:	f002 0210 	and.w	r2, r2, #16
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 8007b5e:	7b3b      	ldrb	r3, [r7, #12]
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3303      	adds	r3, #3
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b25a      	sxtb	r2, r3
 8007b6e:	7b3b      	ldrb	r3, [r7, #12]
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	b25b      	sxtb	r3, r3
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	b25a      	sxtb	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3303      	adds	r3, #3
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 8007b84:	7b3b      	ldrb	r3, [r7, #12]
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3302      	adds	r3, #2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b25a      	sxtb	r2, r3
 8007b94:	7b3b      	ldrb	r3, [r7, #12]
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b25a      	sxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	7b7b      	ldrb	r3, [r7, #13]
 8007bb0:	01db      	lsls	r3, r3, #7
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	b25a      	sxtb	r2, r3
 8007bc4:	7b7b      	ldrb	r3, [r7, #13]
 8007bc6:	b25b      	sxtb	r3, r3
 8007bc8:	015b      	lsls	r3, r3, #5
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	b25b      	sxtb	r3, r3
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	b25a      	sxtb	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3302      	adds	r3, #2
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b25a      	sxtb	r2, r3
 8007be6:	7b7b      	ldrb	r3, [r7, #13]
 8007be8:	b25b      	sxtb	r3, r3
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	b25a      	sxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3303      	adds	r3, #3
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b25a      	sxtb	r2, r3
 8007c08:	7b7b      	ldrb	r3, [r7, #13]
 8007c0a:	b25b      	sxtb	r3, r3
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	b25b      	sxtb	r3, r3
 8007c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	4313      	orrs	r3, r2
 8007c18:	b25a      	sxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3303      	adds	r3, #3
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 8007c22:	7b7b      	ldrb	r3, [r7, #13]
 8007c24:	089b      	lsrs	r3, r3, #2
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b25a      	sxtb	r2, r3
 8007c30:	7b7b      	ldrb	r3, [r7, #13]
 8007c32:	b25b      	sxtb	r3, r3
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8007c44:	7b7b      	ldrb	r3, [r7, #13]
 8007c46:	085b      	lsrs	r3, r3, #1
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3303      	adds	r3, #3
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	b25a      	sxtb	r2, r3
 8007c54:	7b7b      	ldrb	r3, [r7, #13]
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b25a      	sxtb	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3303      	adds	r3, #3
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 8007c6a:	7b7b      	ldrb	r3, [r7, #13]
 8007c6c:	08db      	lsrs	r3, r3, #3
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3301      	adds	r3, #1
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	b25a      	sxtb	r2, r3
 8007c7a:	7b7b      	ldrb	r3, [r7, #13]
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b25a      	sxtb	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8007c90:	7b7b      	ldrb	r3, [r7, #13]
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b25a      	sxtb	r2, r3
 8007ca0:	7b7b      	ldrb	r3, [r7, #13]
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	b25b      	sxtb	r3, r3
 8007caa:	4313      	orrs	r3, r2
 8007cac:	b25a      	sxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	781a      	ldrb	r2, [r3, #0]
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	09db      	lsrs	r3, r3, #7
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	7819      	ldrb	r1, [r3, #0]
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3303      	adds	r3, #3
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b25a      	sxtb	r2, r3
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	b25b      	sxtb	r3, r3
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	b25b      	sxtb	r3, r3
 8007cf4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007cf8:	b25b      	sxtb	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	b25a      	sxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3303      	adds	r3, #3
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b25a      	sxtb	r2, r3
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	b25b      	sxtb	r3, r3
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b25a      	sxtb	r2, r3
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3303      	adds	r3, #3
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	b25a      	sxtb	r2, r3
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	b25b      	sxtb	r3, r3
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b25a      	sxtb	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b25a      	sxtb	r2, r3
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	b25b      	sxtb	r3, r3
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	b25b      	sxtb	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b25a      	sxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3301      	adds	r3, #1
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3302      	adds	r3, #2
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b25a      	sxtb	r2, r3
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	b25a      	sxtb	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3302      	adds	r3, #2
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b25a      	sxtb	r2, r3
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	b25a      	sxtb	r2, r3
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	b25b      	sxtb	r3, r3
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b25a      	sxtb	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3303      	adds	r3, #3
 8007de4:	7819      	ldrb	r1, [r3, #0]
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	09db      	lsrs	r3, r3, #7
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3303      	adds	r3, #3
 8007df0:	430a      	orrs	r2, r1
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3302      	adds	r3, #2
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b25a      	sxtb	r2, r3
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	b25a      	sxtb	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3302      	adds	r3, #2
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3303      	adds	r3, #3
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b25a      	sxtb	r2, r3
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	b25b      	sxtb	r3, r3
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	b25a      	sxtb	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3303      	adds	r3, #3
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	089b      	lsrs	r3, r3, #2
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3301      	adds	r3, #1
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b25a      	sxtb	r2, r3
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	b25b      	sxtb	r3, r3
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	b25b      	sxtb	r3, r3
 8007e54:	4313      	orrs	r3, r2
 8007e56:	b25a      	sxtb	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b25a      	sxtb	r2, r3
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	b25a      	sxtb	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3302      	adds	r3, #2
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b25a      	sxtb	r2, r3
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	b25b      	sxtb	r3, r3
 8007e96:	4313      	orrs	r3, r2
 8007e98:	b25b      	sxtb	r3, r3
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	701a      	strb	r2, [r3, #0]

}
 8007ea0:	bf00      	nop
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3303      	adds	r3, #3
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	015b      	lsls	r3, r3, #5
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	09db      	lsrs	r3, r3, #7
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	015b      	lsls	r3, r3, #5
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	08db      	lsrs	r3, r3, #3
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	4313      	orrs	r3, r2
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3301      	adds	r3, #1
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3302      	adds	r3, #2
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	09db      	lsrs	r3, r3, #7
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	3303      	adds	r3, #3
 8007f3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	015b      	lsls	r3, r3, #5
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3302      	adds	r3, #2
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	08db      	lsrs	r3, r3, #3
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	3304      	adds	r3, #4
 8007f68:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3302      	adds	r3, #2
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3303      	adds	r3, #3
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	09db      	lsrs	r3, r3, #7
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	3305      	adds	r3, #5
 8007f8c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3302      	adds	r3, #2
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	015b      	lsls	r3, r3, #5
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3303      	adds	r3, #3
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	08db      	lsrs	r3, r3, #3
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3306      	adds	r3, #6
 8007fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3303      	adds	r3, #3
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	09db      	lsrs	r3, r3, #7
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	701a      	strb	r2, [r3, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	@ 0x28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 8007ff8:	f107 0314 	add.w	r3, r7, #20
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f01a f95b 	bl	80222bc <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8008006:	f107 0312 	add.w	r3, r7, #18
 800800a:	461a      	mov	r2, r3
 800800c:	2102      	movs	r1, #2
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7fe f85e 	bl	80060d0 <phCryptoSym_Sw_GetConfig>
 8008014:	4603      	mov	r3, r0
 8008016:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008018:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 800801e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008020:	e058      	b.n	80080d4 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 8008022:	8a7b      	ldrh	r3, [r7, #18]
 8008024:	2b08      	cmp	r3, #8
 8008026:	d005      	beq.n	8008034 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 8008028:	2b10      	cmp	r3, #16
 800802a:	d107      	bne.n	800803c <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 800802c:	2387      	movs	r3, #135	@ 0x87
 800802e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8008032:	e006      	b.n	8008042 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 8008034:	231b      	movs	r3, #27
 8008036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800803a:	e002      	b.n	8008042 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 800803c:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8008040:	e048      	b.n	80080d4 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 8008042:	f107 0314 	add.w	r3, r7, #20
 8008046:	4619      	mov	r1, r3
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f879 	bl	8008140 <phCryptoSym_Sw_EncryptBlock>
 800804e:	4603      	mov	r3, r0
 8008050:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 8008058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800805a:	e03b      	b.n	80080d4 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 800805c:	8a7b      	ldrh	r3, [r7, #18]
 800805e:	b2d9      	uxtb	r1, r3
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f838 	bl	80080dc <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 800806c:	7d3b      	ldrb	r3, [r7, #20]
 800806e:	b25b      	sxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	da0d      	bge.n	8008090 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 8008074:	8a7b      	ldrh	r3, [r7, #18]
 8008076:	3b01      	subs	r3, #1
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	4413      	add	r3, r2
 800807c:	7819      	ldrb	r1, [r3, #0]
 800807e:	8a7b      	ldrh	r3, [r7, #18]
 8008080:	3b01      	subs	r3, #1
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800808a:	404a      	eors	r2, r1
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 8008090:	8a7b      	ldrh	r3, [r7, #18]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	4619      	mov	r1, r3
 8008098:	68b8      	ldr	r0, [r7, #8]
 800809a:	f000 f81f 	bl	80080dc <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	da0d      	bge.n	80080c4 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 80080a8:	8a7b      	ldrh	r3, [r7, #18]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	4413      	add	r3, r2
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	8a7b      	ldrh	r3, [r7, #18]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4413      	add	r3, r2
 80080ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80080be:	404a      	eors	r2, r1
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	2210      	movs	r2, #16
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f01a f8f5 	bl	80222bc <memset>

    return PH_ERR_SUCCESS;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3728      	adds	r7, #40	@ 0x28
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	460b      	mov	r3, r1
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 80080f4:	7afb      	ldrb	r3, [r7, #11]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	440b      	add	r3, r1
 8008102:	0052      	lsls	r2, r2, #1
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	7819      	ldrb	r1, [r3, #0]
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4413      	add	r3, r2
 8008116:	7dfa      	ldrb	r2, [r7, #23]
 8008118:	430a      	orrs	r2, r1
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	09db      	lsrs	r3, r3, #7
 8008128:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1de      	bne.n	80080ee <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
	...

08008140 <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800814e:	2b05      	cmp	r3, #5
 8008150:	f200 8088 	bhi.w	8008264 <phCryptoSym_Sw_EncryptBlock+0x124>
 8008154:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <phCryptoSym_Sw_EncryptBlock+0x1c>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	08008175 	.word	0x08008175
 8008160:	0800818d 	.word	0x0800818d
 8008164:	080081a5 	.word	0x080081a5
 8008168:	080081bd 	.word	0x080081bd
 800816c:	080081d5 	.word	0x080081d5
 8008170:	0800821d 	.word	0x0800821d
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 8008174:	220a      	movs	r2, #10
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7fe f83e 	bl	80061fa <phCryptoSym_Sw_Aes_EncryptBlock>
 800817e:	4603      	mov	r3, r0
 8008180:	81fb      	strh	r3, [r7, #14]
 8008182:	89fb      	ldrh	r3, [r7, #14]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d070      	beq.n	800826a <phCryptoSym_Sw_EncryptBlock+0x12a>
 8008188:	89fb      	ldrh	r3, [r7, #14]
 800818a:	e07a      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 800818c:	220c      	movs	r2, #12
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe f832 	bl	80061fa <phCryptoSym_Sw_Aes_EncryptBlock>
 8008196:	4603      	mov	r3, r0
 8008198:	81fb      	strh	r3, [r7, #14]
 800819a:	89fb      	ldrh	r3, [r7, #14]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d066      	beq.n	800826e <phCryptoSym_Sw_EncryptBlock+0x12e>
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	e06e      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80081a4:	220e      	movs	r2, #14
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe f826 	bl	80061fa <phCryptoSym_Sw_Aes_EncryptBlock>
 80081ae:	4603      	mov	r3, r0
 80081b0:	81fb      	strh	r3, [r7, #14]
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d05c      	beq.n	8008272 <phCryptoSym_Sw_EncryptBlock+0x132>
 80081b8:	89fb      	ldrh	r3, [r7, #14]
 80081ba:	e062      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80081bc:	2200      	movs	r2, #0
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fe fdcf 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 80081c6:	4603      	mov	r3, r0
 80081c8:	81fb      	strh	r3, [r7, #14]
 80081ca:	89fb      	ldrh	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d052      	beq.n	8008276 <phCryptoSym_Sw_EncryptBlock+0x136>
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	e056      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80081d4:	2200      	movs	r2, #0
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe fdc3 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 80081de:	4603      	mov	r3, r0
 80081e0:	81fb      	strh	r3, [r7, #14]
 80081e2:	89fb      	ldrh	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <phCryptoSym_Sw_EncryptBlock+0xac>
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	e04a      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80081ec:	2201      	movs	r2, #1
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fe fe05 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 80081f6:	4603      	mov	r3, r0
 80081f8:	81fb      	strh	r3, [r7, #14]
 80081fa:	89fb      	ldrh	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <phCryptoSym_Sw_EncryptBlock+0xc4>
 8008200:	89fb      	ldrh	r3, [r7, #14]
 8008202:	e03e      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8008204:	2200      	movs	r2, #0
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7fe fdab 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 800820e:	4603      	mov	r3, r0
 8008210:	81fb      	strh	r3, [r7, #14]
 8008212:	89fb      	ldrh	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d030      	beq.n	800827a <phCryptoSym_Sw_EncryptBlock+0x13a>
 8008218:	89fb      	ldrh	r3, [r7, #14]
 800821a:	e032      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800821c:	2200      	movs	r2, #0
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7fe fd9f 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 8008226:	4603      	mov	r3, r0
 8008228:	81fb      	strh	r3, [r7, #14]
 800822a:	89fb      	ldrh	r3, [r7, #14]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <phCryptoSym_Sw_EncryptBlock+0xf4>
 8008230:	89fb      	ldrh	r3, [r7, #14]
 8008232:	e026      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8008234:	2201      	movs	r2, #1
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7fe fde1 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 800823e:	4603      	mov	r3, r0
 8008240:	81fb      	strh	r3, [r7, #14]
 8008242:	89fb      	ldrh	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <phCryptoSym_Sw_EncryptBlock+0x10c>
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	e01a      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800824c:	2202      	movs	r2, #2
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fe fd87 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 8008256:	4603      	mov	r3, r0
 8008258:	81fb      	strh	r3, [r7, #14]
 800825a:	89fb      	ldrh	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <phCryptoSym_Sw_EncryptBlock+0x13e>
 8008260:	89fb      	ldrh	r3, [r7, #14]
 8008262:	e00e      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8008264:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8008268:	e00b      	b.n	8008282 <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 800826a:	bf00      	nop
 800826c:	e008      	b.n	8008280 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800826e:	bf00      	nop
 8008270:	e006      	b.n	8008280 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800827e:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop

0800828c <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800829a:	2b05      	cmp	r3, #5
 800829c:	f200 8088 	bhi.w	80083b0 <phCryptoSym_Sw_DecryptBlock+0x124>
 80082a0:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <phCryptoSym_Sw_DecryptBlock+0x1c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082c1 	.word	0x080082c1
 80082ac:	080082d9 	.word	0x080082d9
 80082b0:	080082f1 	.word	0x080082f1
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008321 	.word	0x08008321
 80082bc:	08008369 	.word	0x08008369
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80082c0:	220a      	movs	r2, #10
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7fe f80b 	bl	80062e0 <phCryptoSym_Sw_Aes_DecryptBlock>
 80082ca:	4603      	mov	r3, r0
 80082cc:	81fb      	strh	r3, [r7, #14]
 80082ce:	89fb      	ldrh	r3, [r7, #14]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d070      	beq.n	80083b6 <phCryptoSym_Sw_DecryptBlock+0x12a>
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	e07a      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80082d8:	220c      	movs	r2, #12
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7fd ffff 	bl	80062e0 <phCryptoSym_Sw_Aes_DecryptBlock>
 80082e2:	4603      	mov	r3, r0
 80082e4:	81fb      	strh	r3, [r7, #14]
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d066      	beq.n	80083ba <phCryptoSym_Sw_DecryptBlock+0x12e>
 80082ec:	89fb      	ldrh	r3, [r7, #14]
 80082ee:	e06e      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80082f0:	220e      	movs	r2, #14
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fd fff3 	bl	80062e0 <phCryptoSym_Sw_Aes_DecryptBlock>
 80082fa:	4603      	mov	r3, r0
 80082fc:	81fb      	strh	r3, [r7, #14]
 80082fe:	89fb      	ldrh	r3, [r7, #14]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d05c      	beq.n	80083be <phCryptoSym_Sw_DecryptBlock+0x132>
 8008304:	89fb      	ldrh	r3, [r7, #14]
 8008306:	e062      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8008308:	2200      	movs	r2, #0
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7fe fd77 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 8008312:	4603      	mov	r3, r0
 8008314:	81fb      	strh	r3, [r7, #14]
 8008316:	89fb      	ldrh	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d052      	beq.n	80083c2 <phCryptoSym_Sw_DecryptBlock+0x136>
 800831c:	89fb      	ldrh	r3, [r7, #14]
 800831e:	e056      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8008320:	2200      	movs	r2, #0
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fe fd6b 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 800832a:	4603      	mov	r3, r0
 800832c:	81fb      	strh	r3, [r7, #14]
 800832e:	89fb      	ldrh	r3, [r7, #14]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <phCryptoSym_Sw_DecryptBlock+0xac>
 8008334:	89fb      	ldrh	r3, [r7, #14]
 8008336:	e04a      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8008338:	2201      	movs	r2, #1
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7fe fd11 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 8008342:	4603      	mov	r3, r0
 8008344:	81fb      	strh	r3, [r7, #14]
 8008346:	89fb      	ldrh	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <phCryptoSym_Sw_DecryptBlock+0xc4>
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	e03e      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8008350:	2200      	movs	r2, #0
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fe fd53 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 800835a:	4603      	mov	r3, r0
 800835c:	81fb      	strh	r3, [r7, #14]
 800835e:	89fb      	ldrh	r3, [r7, #14]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d030      	beq.n	80083c6 <phCryptoSym_Sw_DecryptBlock+0x13a>
 8008364:	89fb      	ldrh	r3, [r7, #14]
 8008366:	e032      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8008368:	2202      	movs	r2, #2
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fe fd47 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 8008372:	4603      	mov	r3, r0
 8008374:	81fb      	strh	r3, [r7, #14]
 8008376:	89fb      	ldrh	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <phCryptoSym_Sw_DecryptBlock+0xf4>
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	e026      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8008380:	2201      	movs	r2, #1
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7fe fced 	bl	8006d64 <phCryptoSym_Sw_Des_EncryptBlock>
 800838a:	4603      	mov	r3, r0
 800838c:	81fb      	strh	r3, [r7, #14]
 800838e:	89fb      	ldrh	r3, [r7, #14]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <phCryptoSym_Sw_DecryptBlock+0x10c>
 8008394:	89fb      	ldrh	r3, [r7, #14]
 8008396:	e01a      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8008398:	2200      	movs	r2, #0
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7fe fd2f 	bl	8006e00 <phCryptoSym_Sw_Des_DecryptBlock>
 80083a2:	4603      	mov	r3, r0
 80083a4:	81fb      	strh	r3, [r7, #14]
 80083a6:	89fb      	ldrh	r3, [r7, #14]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00e      	beq.n	80083ca <phCryptoSym_Sw_DecryptBlock+0x13e>
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	e00e      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80083b0:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80083b4:	e00b      	b.n	80083ce <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 80083b6:	bf00      	nop
 80083b8:	e008      	b.n	80083cc <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80083ba:	bf00      	nop
 80083bc:	e006      	b.n	80083cc <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80083be:	bf00      	nop
 80083c0:	e004      	b.n	80083cc <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80083c2:	bf00      	nop
 80083c4:	e002      	b.n	80083cc <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80083ca:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop

080083d8 <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	461a      	mov	r2, r3
 80083e4:	460b      	mov	r3, r1
 80083e6:	817b      	strh	r3, [r7, #10]
 80083e8:	4613      	mov	r3, r2
 80083ea:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <phCryptoSym_Encrypt+0x20>
 80083f2:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80083f6:	e02d      	b.n	8008454 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <phCryptoSym_Encrypt+0x2c>
 80083fe:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8008402:	e027      	b.n	8008454 <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <phCryptoSym_Encrypt+0x38>
 800840a:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800840e:	e021      	b.n	8008454 <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008418:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800841c:	d004      	beq.n	8008428 <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800841e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8008422:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8008424:	8afb      	ldrh	r3, [r7, #22]
 8008426:	e015      	b.n	8008454 <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b01      	cmp	r3, #1
 8008430:	d10b      	bne.n	800844a <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 8008432:	893a      	ldrh	r2, [r7, #8]
 8008434:	8979      	ldrh	r1, [r7, #10]
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7fd fb18 	bl	8005a74 <phCryptoSym_Sw_Encrypt>
 8008444:	4603      	mov	r3, r0
 8008446:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 8008448:	e003      	b.n	8008452 <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800844a:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800844e:	82fb      	strh	r3, [r7, #22]
            break;
 8008450:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8008452:	8afb      	ldrh	r3, [r7, #22]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	461a      	mov	r2, r3
 8008468:	460b      	mov	r3, r1
 800846a:	817b      	strh	r3, [r7, #10]
 800846c:	4613      	mov	r3, r2
 800846e:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <phCryptoSym_CalculateMac+0x20>
 8008476:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800847a:	e038      	b.n	80084ee <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 800847c:	893b      	ldrh	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <phCryptoSym_CalculateMac+0x32>
 8008488:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800848c:	e02f      	b.n	80084ee <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <phCryptoSym_CalculateMac+0x3e>
 8008494:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8008498:	e029      	b.n	80084ee <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <phCryptoSym_CalculateMac+0x4a>
 80084a0:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80084a4:	e023      	b.n	80084ee <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80084ae:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80084b2:	d004      	beq.n	80084be <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80084b4:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80084b8:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	e017      	b.n	80084ee <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d10d      	bne.n	80084e4 <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 80084c8:	893a      	ldrh	r2, [r7, #8]
 80084ca:	8979      	ldrh	r1, [r7, #10]
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	4613      	mov	r3, r2
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7fd fb89 	bl	8005bf0 <phCryptoSym_Sw_CalculateMac>
 80084de:	4603      	mov	r3, r0
 80084e0:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 80084e2:	e003      	b.n	80084ec <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80084e4:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80084e8:	82fb      	strh	r3, [r7, #22]
            break;
 80084ea:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80084ec:	8afb      	ldrh	r3, [r7, #22]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	4613      	mov	r3, r2
 8008502:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <phCryptoSym_LoadIv+0x1a>
 800850a:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800850e:	e024      	b.n	800855a <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <phCryptoSym_LoadIv+0x26>
 8008516:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800851a:	e01e      	b.n	800855a <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008524:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8008528:	d004      	beq.n	8008534 <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800852a:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800852e:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8008530:	8afb      	ldrh	r3, [r7, #22]
 8008532:	e012      	b.n	800855a <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d108      	bne.n	8008550 <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	461a      	mov	r2, r3
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7fd fd11 	bl	8005f6c <phCryptoSym_Sw_LoadIv>
 800854a:	4603      	mov	r3, r0
 800854c:	82fb      	strh	r3, [r7, #22]
            break;
 800854e:	e003      	b.n	8008558 <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8008550:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8008554:	82fb      	strh	r3, [r7, #22]
            break;
 8008556:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8008558:	8afb      	ldrh	r3, [r7, #22]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d102      	bne.n	800857c <phCryptoSym_LoadKeyDirect+0x1a>
 8008576:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800857a:	e024      	b.n	80085c6 <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <phCryptoSym_LoadKeyDirect+0x26>
 8008582:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8008586:	e01e      	b.n	80085c6 <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008590:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8008594:	d004      	beq.n	80085a0 <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8008596:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800859a:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 800859c:	8afb      	ldrh	r3, [r7, #22]
 800859e:	e012      	b.n	80085c6 <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d108      	bne.n	80085bc <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7fd fd09 	bl	8005fc8 <phCryptoSym_Sw_LoadKeyDirect>
 80085b6:	4603      	mov	r3, r0
 80085b8:	82fb      	strh	r3, [r7, #22]
            break;
 80085ba:	e003      	b.n	80085c4 <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80085bc:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80085c0:	82fb      	strh	r3, [r7, #22]
            break;
 80085c2:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80085c4:	8afb      	ldrh	r3, [r7, #22]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b088      	sub	sp, #32
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	461a      	mov	r2, r3
 80085da:	460b      	mov	r3, r1
 80085dc:	817b      	strh	r3, [r7, #10]
 80085de:	4613      	mov	r3, r2
 80085e0:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 80085e2:	897b      	ldrh	r3, [r7, #10]
 80085e4:	2b18      	cmp	r3, #24
 80085e6:	d002      	beq.n	80085ee <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 80085e8:	f24e 2320 	movw	r3, #57888	@ 0xe220
 80085ec:	e07b      	b.n	80086e6 <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <phKeyStore_Sw_Init+0x2a>
 80085f4:	2321      	movs	r3, #33	@ 0x21
 80085f6:	e076      	b.n	80086e6 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <phKeyStore_Sw_Init+0x34>
 80085fe:	2321      	movs	r3, #33	@ 0x21
 8008600:	e071      	b.n	80086e6 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <phKeyStore_Sw_Init+0x3e>
 8008608:	2321      	movs	r3, #33	@ 0x21
 800860a:	e06c      	b.n	80086e6 <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <phKeyStore_Sw_Init+0x48>
 8008612:	2321      	movs	r3, #33	@ 0x21
 8008614:	e067      	b.n	80086e6 <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f24e 2201 	movw	r2, #57857	@ 0xe201
 800861c:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008628:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	893a      	ldrh	r2, [r7, #8]
 800862e:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008634:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800863a:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008640:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 8008642:	2300      	movs	r3, #0
 8008644:	83fb      	strh	r3, [r7, #30]
 8008646:	e02e      	b.n	80086a6 <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	8bfb      	ldrh	r3, [r7, #30]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008656:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	8bfb      	ldrh	r3, [r7, #30]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008666:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8008668:	2300      	movs	r3, #0
 800866a:	83bb      	strh	r3, [r7, #28]
 800866c:	e013      	b.n	8008696 <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 800866e:	f107 0314 	add.w	r3, r7, #20
 8008672:	8bba      	ldrh	r2, [r7, #28]
 8008674:	8bf9      	ldrh	r1, [r7, #30]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f90a 	bl	8008890 <phKeyStore_Sw_GetKeyValuePtrPos>
 800867c:	4603      	mov	r3, r0
 800867e:	837b      	strh	r3, [r7, #26]
 8008680:	8b7b      	ldrh	r3, [r7, #26]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <phKeyStore_Sw_Init+0xbc>
 8008686:	8b7b      	ldrh	r3, [r7, #26]
 8008688:	e02d      	b.n	80086e6 <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2200      	movs	r2, #0
 800868e:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8008690:	8bbb      	ldrh	r3, [r7, #28]
 8008692:	3301      	adds	r3, #1
 8008694:	83bb      	strh	r3, [r7, #28]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	89db      	ldrh	r3, [r3, #14]
 800869a:	8bba      	ldrh	r2, [r7, #28]
 800869c:	429a      	cmp	r2, r3
 800869e:	d3e6      	bcc.n	800866e <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 80086a0:	8bfb      	ldrh	r3, [r7, #30]
 80086a2:	3301      	adds	r3, #1
 80086a4:	83fb      	strh	r3, [r7, #30]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	899b      	ldrh	r3, [r3, #12]
 80086aa:	8bfa      	ldrh	r2, [r7, #30]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3cb      	bcc.n	8008648 <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 80086b0:	2300      	movs	r3, #0
 80086b2:	83fb      	strh	r3, [r7, #30]
 80086b4:	e011      	b.n	80086da <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	8bfb      	ldrh	r3, [r7, #30]
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	4413      	add	r3, r2
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	8bfb      	ldrh	r3, [r7, #30]
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4413      	add	r3, r2
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 80086d4:	8bfb      	ldrh	r3, [r7, #30]
 80086d6:	3301      	adds	r3, #1
 80086d8:	83fb      	strh	r3, [r7, #30]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8a9b      	ldrh	r3, [r3, #20]
 80086de:	8bfa      	ldrh	r2, [r7, #30]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d3e8      	bcc.n	80086b6 <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	807b      	strh	r3, [r7, #2]
 80086fa:	4613      	mov	r3, r2
 80086fc:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	899b      	ldrh	r3, [r3, #12]
 8008702:	887a      	ldrh	r2, [r7, #2]
 8008704:	429a      	cmp	r2, r3
 8008706:	d302      	bcc.n	800870e <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8008708:	f24e 2321 	movw	r3, #57889	@ 0xe221
 800870c:	e038      	b.n	8008780 <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 800870e:	883b      	ldrh	r3, [r7, #0]
 8008710:	2b06      	cmp	r3, #6
 8008712:	d902      	bls.n	800871a <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8008714:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8008718:	e032      	b.n	8008780 <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 800871a:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	887b      	ldrh	r3, [r7, #2]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	883a      	ldrh	r2, [r7, #0]
 8008728:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	887b      	ldrh	r3, [r7, #2]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008738:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 800873a:	2300      	movs	r3, #0
 800873c:	81fb      	strh	r3, [r7, #14]
 800873e:	e019      	b.n	8008774 <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 8008740:	f107 0308 	add.w	r3, r7, #8
 8008744:	89fa      	ldrh	r2, [r7, #14]
 8008746:	8879      	ldrh	r1, [r7, #2]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f8a1 	bl	8008890 <phKeyStore_Sw_GetKeyValuePtrPos>
 800874e:	4603      	mov	r3, r0
 8008750:	81bb      	strh	r3, [r7, #12]
 8008752:	89bb      	ldrh	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <phKeyStore_Sw_FormatKeyEntry+0x6e>
 8008758:	89bb      	ldrh	r3, [r7, #12]
 800875a:	e011      	b.n	8008780 <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2220      	movs	r2, #32
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f019 fda7 	bl	80222bc <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 800876e:	89fb      	ldrh	r3, [r7, #14]
 8008770:	3301      	adds	r3, #1
 8008772:	81fb      	strh	r3, [r7, #14]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	89db      	ldrh	r3, [r3, #14]
 8008778:	89fa      	ldrh	r2, [r7, #14]
 800877a:	429a      	cmp	r2, r3
 800877c:	d3e0      	bcc.n	8008740 <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 8008788:	b590      	push	{r4, r7, lr}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4603      	mov	r3, r0
 8008798:	817b      	strh	r3, [r7, #10]
 800879a:	460b      	mov	r3, r1
 800879c:	813b      	strh	r3, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 80087a2:	f107 0310 	add.w	r3, r7, #16
 80087a6:	893a      	ldrh	r2, [r7, #8]
 80087a8:	8979      	ldrh	r1, [r7, #10]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 f827 	bl	80087fe <phKeyStore_Sw_GetKeyValuePtrVersion>
 80087b0:	4603      	mov	r3, r0
 80087b2:	82fb      	strh	r3, [r7, #22]
 80087b4:	8afb      	ldrh	r3, [r7, #22]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <phKeyStore_Sw_SetKey+0x36>
 80087ba:	8afb      	ldrh	r3, [r7, #22]
 80087bc:	e01b      	b.n	80087f6 <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	897b      	ldrh	r3, [r7, #10]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	88fa      	ldrh	r2, [r7, #6]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d002      	beq.n	80087d6 <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80087d0:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80087d4:	e00f      	b.n	80087f6 <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	461c      	mov	r4, r3
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f88d 	bl	80088fc <phKeyStore_GetKeySize>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087e8:	4620      	mov	r0, r4
 80087ea:	f019 fde6 	bl	80223ba <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80087f2:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd90      	pop	{r4, r7, pc}

080087fe <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	607b      	str	r3, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	817b      	strh	r3, [r7, #10]
 800880c:	4613      	mov	r3, r2
 800880e:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	899b      	ldrh	r3, [r3, #12]
 800881a:	897a      	ldrh	r2, [r7, #10]
 800881c:	429a      	cmp	r2, r3
 800881e:	d302      	bcc.n	8008826 <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8008820:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8008824:	e02e      	b.n	8008884 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8008826:	2300      	movs	r3, #0
 8008828:	82fb      	strh	r3, [r7, #22]
 800882a:	e01b      	b.n	8008864 <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	89db      	ldrh	r3, [r3, #14]
 8008834:	8979      	ldrh	r1, [r7, #10]
 8008836:	fb11 f303 	smulbb	r3, r1, r3
 800883a:	b29b      	uxth	r3, r3
 800883c:	4619      	mov	r1, r3
 800883e:	8afb      	ldrh	r3, [r7, #22]
 8008840:	440b      	add	r3, r1
 8008842:	4619      	mov	r1, r3
 8008844:	460b      	mov	r3, r1
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	440b      	add	r3, r1
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	8c1b      	ldrh	r3, [r3, #32]
 8008858:	893a      	ldrh	r2, [r7, #8]
 800885a:	429a      	cmp	r2, r3
 800885c:	d008      	beq.n	8008870 <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 800885e:	8afb      	ldrh	r3, [r7, #22]
 8008860:	3301      	adds	r3, #1
 8008862:	82fb      	strh	r3, [r7, #22]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	89db      	ldrh	r3, [r3, #14]
 8008868:	8afa      	ldrh	r2, [r7, #22]
 800886a:	429a      	cmp	r2, r3
 800886c:	d3de      	bcc.n	800882c <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 800886e:	e000      	b.n	8008872 <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 8008870:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	89db      	ldrh	r3, [r3, #14]
 8008876:	8afa      	ldrh	r2, [r7, #22]
 8008878:	429a      	cmp	r2, r3
 800887a:	d102      	bne.n	8008882 <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 800887c:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8008880:	e000      	b.n	8008884 <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	817b      	strh	r3, [r7, #10]
 800889e:	4613      	mov	r3, r2
 80088a0:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	899b      	ldrh	r3, [r3, #12]
 80088ac:	897a      	ldrh	r2, [r7, #10]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d302      	bcc.n	80088b8 <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80088b2:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80088b6:	e01b      	b.n	80088f0 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	89db      	ldrh	r3, [r3, #14]
 80088bc:	893a      	ldrh	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80088c2:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80088c6:	e013      	b.n	80088f0 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	89db      	ldrh	r3, [r3, #14]
 80088d0:	8979      	ldrh	r1, [r7, #10]
 80088d2:	fb11 f303 	smulbb	r3, r1, r3
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	4619      	mov	r1, r3
 80088da:	893b      	ldrh	r3, [r7, #8]
 80088dc:	440b      	add	r3, r1
 80088de:	4619      	mov	r1, r3
 80088e0:	460b      	mov	r3, r1
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	440b      	add	r3, r1
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	441a      	add	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2b06      	cmp	r3, #6
 800890a:	d81b      	bhi.n	8008944 <phKeyStore_GetKeySize+0x48>
 800890c:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <phKeyStore_GetKeySize+0x18>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008939 	.word	0x08008939
 8008918:	0800893d 	.word	0x0800893d
 800891c:	08008941 	.word	0x08008941
 8008920:	08008935 	.word	0x08008935
 8008924:	08008939 	.word	0x08008939
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008931 	.word	0x08008931
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8008930:	230c      	movs	r3, #12
 8008932:	e008      	b.n	8008946 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8008934:	2308      	movs	r3, #8
 8008936:	e006      	b.n	8008946 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 8008938:	2310      	movs	r3, #16
 800893a:	e004      	b.n	8008946 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 800893c:	2318      	movs	r3, #24
 800893e:	e002      	b.n	8008946 <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8008940:	2320      	movs	r3, #32
 8008942:	e000      	b.n	8008946 <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8008944:	2300      	movs	r3, #0
    }
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop

08008954 <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8008962:	2302      	movs	r3, #2
 8008964:	e010      	b.n	8008988 <phNfcLib_SetContext+0x34>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a0a      	ldr	r2, [pc, #40]	@ (8008994 <phNfcLib_SetContext+0x40>)
 800896c:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	461a      	mov	r2, r3
 8008974:	4b07      	ldr	r3, [pc, #28]	@ (8008994 <phNfcLib_SetContext+0x40>)
 8008976:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	461a      	mov	r2, r3
 8008980:	4b04      	ldr	r3, [pc, #16]	@ (8008994 <phNfcLib_SetContext+0x40>)
 8008982:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	200008e4 	.word	0x200008e4

08008998 <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 800899e:	2300      	movs	r3, #0
 80089a0:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 80089a2:	2301      	movs	r3, #1
 80089a4:	9303      	str	r3, [sp, #12]
 80089a6:	4b3c      	ldr	r3, [pc, #240]	@ (8008a98 <phNfcLib_CommonLayer_Init+0x100>)
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	2302      	movs	r3, #2
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	4b3b      	ldr	r3, [pc, #236]	@ (8008a9c <phNfcLib_CommonLayer_Init+0x104>)
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	2308      	movs	r3, #8
 80089b4:	4a3a      	ldr	r2, [pc, #232]	@ (8008aa0 <phNfcLib_CommonLayer_Init+0x108>)
 80089b6:	2118      	movs	r1, #24
 80089b8:	483a      	ldr	r0, [pc, #232]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 80089ba:	f7ff fe08 	bl	80085ce <phKeyStore_Sw_Init>
 80089be:	4603      	mov	r3, r0
 80089c0:	80fb      	strh	r3, [r7, #6]
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d162      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 80089c8:	2206      	movs	r2, #6
 80089ca:	2101      	movs	r1, #1
 80089cc:	4835      	ldr	r0, [pc, #212]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 80089ce:	f7ff fe8e 	bl	80086ee <phKeyStore_Sw_FormatKeyEntry>
 80089d2:	4603      	mov	r3, r0
 80089d4:	80fb      	strh	r3, [r7, #6]
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d158      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 80089dc:	2300      	movs	r3, #0
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	4b31      	ldr	r3, [pc, #196]	@ (8008aa8 <phNfcLib_CommonLayer_Init+0x110>)
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2306      	movs	r3, #6
 80089e6:	2200      	movs	r2, #0
 80089e8:	2101      	movs	r1, #1
 80089ea:	482e      	ldr	r0, [pc, #184]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 80089ec:	f7ff fecc 	bl	8008788 <phKeyStore_Sw_SetKey>
 80089f0:	4603      	mov	r3, r0
 80089f2:	80fb      	strh	r3, [r7, #6]
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d149      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 80089fa:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 80089fc:	2140      	movs	r1, #64	@ 0x40
 80089fe:	482b      	ldr	r0, [pc, #172]	@ (8008aac <phNfcLib_CommonLayer_Init+0x114>)
 8008a00:	f7fc ffed 	bl	80059de <phCryptoSym_Sw_Init>
 8008a04:	4603      	mov	r3, r0
 8008a06:	80fb      	strh	r3, [r7, #6]
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d13f      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8008a0e:	4a25      	ldr	r2, [pc, #148]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 8008a10:	2140      	movs	r1, #64	@ 0x40
 8008a12:	4827      	ldr	r0, [pc, #156]	@ (8008ab0 <phNfcLib_CommonLayer_Init+0x118>)
 8008a14:	f7fc ffe3 	bl	80059de <phCryptoSym_Sw_Init>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	80fb      	strh	r3, [r7, #6]
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d135      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8008a22:	4a20      	ldr	r2, [pc, #128]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 8008a24:	2140      	movs	r1, #64	@ 0x40
 8008a26:	4823      	ldr	r0, [pc, #140]	@ (8008ab4 <phNfcLib_CommonLayer_Init+0x11c>)
 8008a28:	f7fc ffd9 	bl	80059de <phCryptoSym_Sw_Init>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	80fb      	strh	r3, [r7, #6]
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12b      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 8008a36:	22ff      	movs	r2, #255	@ 0xff
 8008a38:	2100      	movs	r1, #0
 8008a3a:	481f      	ldr	r0, [pc, #124]	@ (8008ab8 <phNfcLib_CommonLayer_Init+0x120>)
 8008a3c:	f019 fc3e 	bl	80222bc <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 8008a40:	22ff      	movs	r2, #255	@ 0xff
 8008a42:	491d      	ldr	r1, [pc, #116]	@ (8008ab8 <phNfcLib_CommonLayer_Init+0x120>)
 8008a44:	481d      	ldr	r0, [pc, #116]	@ (8008abc <phNfcLib_CommonLayer_Init+0x124>)
 8008a46:	f000 fc49 	bl	80092dc <phTMIUtils_Init>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	80fb      	strh	r3, [r7, #6]
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11c      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8008a54:	4a13      	ldr	r2, [pc, #76]	@ (8008aa4 <phNfcLib_CommonLayer_Init+0x10c>)
 8008a56:	2140      	movs	r1, #64	@ 0x40
 8008a58:	4819      	ldr	r0, [pc, #100]	@ (8008ac0 <phNfcLib_CommonLayer_Init+0x128>)
 8008a5a:	f7fc ffc0 	bl	80059de <phCryptoSym_Sw_Init>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	80fb      	strh	r3, [r7, #6]
 8008a62:	88fb      	ldrh	r3, [r7, #6]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d112      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 8008a68:	4a15      	ldr	r2, [pc, #84]	@ (8008ac0 <phNfcLib_CommonLayer_Init+0x128>)
 8008a6a:	2120      	movs	r1, #32
 8008a6c:	4815      	ldr	r0, [pc, #84]	@ (8008ac4 <phNfcLib_CommonLayer_Init+0x12c>)
 8008a6e:	f7fc fccd 	bl	800540c <phCryptoRng_Sw_Init>
 8008a72:	4603      	mov	r3, r0
 8008a74:	80fb      	strh	r3, [r7, #6]
 8008a76:	88fb      	ldrh	r3, [r7, #6]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d108      	bne.n	8008a8e <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	4912      	ldr	r1, [pc, #72]	@ (8008ac8 <phNfcLib_CommonLayer_Init+0x130>)
 8008a80:	4810      	ldr	r0, [pc, #64]	@ (8008ac4 <phNfcLib_CommonLayer_Init+0x12c>)
 8008a82:	f7fc ff73 	bl	800596c <phCryptoRng_Seed>
 8008a86:	4603      	mov	r3, r0
 8008a88:	80fb      	strh	r3, [r7, #6]
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20001bd8 	.word	0x20001bd8
 8008a9c:	200019b8 	.word	0x200019b8
 8008aa0:	20001998 	.word	0x20001998
 8008aa4:	20000a80 	.word	0x20000a80
 8008aa8:	20000064 	.word	0x20000064
 8008aac:	20001124 	.word	0x20001124
 8008ab0:	20001164 	.word	0x20001164
 8008ab4:	200011a4 	.word	0x200011a4
 8008ab8:	200015b4 	.word	0x200015b4
 8008abc:	20001944 	.word	0x20001944
 8008ac0:	20001958 	.word	0x20001958
 8008ac4:	200011e4 	.word	0x200011e4
 8008ac8:	200015ac 	.word	0x200015ac

08008acc <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 8008ad6:	4a3c      	ldr	r2, [pc, #240]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008ad8:	2118      	movs	r1, #24
 8008ada:	483c      	ldr	r0, [pc, #240]	@ (8008bcc <phNfcLib_PAL_Init+0x100>)
 8008adc:	f00d f92c 	bl	8015d38 <phpalI14443p3a_Sw_Init>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	80fb      	strh	r3, [r7, #6]
 8008ae4:	88fb      	ldrh	r3, [r7, #6]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d169      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 8008aea:	4a37      	ldr	r2, [pc, #220]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008aec:	212c      	movs	r1, #44	@ 0x2c
 8008aee:	4838      	ldr	r0, [pc, #224]	@ (8008bd0 <phNfcLib_PAL_Init+0x104>)
 8008af0:	f00d ff22 	bl	8016938 <phpalI14443p3b_Sw_Init>
 8008af4:	4603      	mov	r3, r0
 8008af6:	80fb      	strh	r3, [r7, #6]
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d15f      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 8008afe:	4a32      	ldr	r2, [pc, #200]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b00:	2114      	movs	r1, #20
 8008b02:	4834      	ldr	r0, [pc, #208]	@ (8008bd4 <phNfcLib_PAL_Init+0x108>)
 8008b04:	f010 f838 	bl	8018b78 <phpalI14443p4a_Sw_Init>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	80fb      	strh	r3, [r7, #6]
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d155      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 8008b12:	4a2d      	ldr	r2, [pc, #180]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b14:	2114      	movs	r1, #20
 8008b16:	4830      	ldr	r0, [pc, #192]	@ (8008bd8 <phNfcLib_PAL_Init+0x10c>)
 8008b18:	f00e fd82 	bl	8017620 <phpalI14443p4_Sw_Init>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	80fb      	strh	r3, [r7, #6]
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d14b      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 8008b26:	4b2c      	ldr	r3, [pc, #176]	@ (8008bd8 <phNfcLib_PAL_Init+0x10c>)
 8008b28:	4a27      	ldr	r2, [pc, #156]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b2a:	210c      	movs	r1, #12
 8008b2c:	482b      	ldr	r0, [pc, #172]	@ (8008bdc <phNfcLib_PAL_Init+0x110>)
 8008b2e:	f011 fe1c 	bl	801a76a <phpalMifare_Sw_Init>
 8008b32:	4603      	mov	r3, r0
 8008b34:	80fb      	strh	r3, [r7, #6]
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d140      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8008b3c:	4a22      	ldr	r2, [pc, #136]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b3e:	2120      	movs	r1, #32
 8008b40:	4827      	ldr	r0, [pc, #156]	@ (8008be0 <phNfcLib_PAL_Init+0x114>)
 8008b42:	f00c fe9f 	bl	8015884 <phpalFelica_Sw_Init>
 8008b46:	4603      	mov	r3, r0
 8008b48:	80fb      	strh	r3, [r7, #6]
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d136      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 8008b50:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b52:	211c      	movs	r1, #28
 8008b54:	4823      	ldr	r0, [pc, #140]	@ (8008be4 <phNfcLib_PAL_Init+0x118>)
 8008b56:	f011 fe31 	bl	801a7bc <phpalSli15693_Sw_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	80fb      	strh	r3, [r7, #6]
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d12c      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8008b64:	4a18      	ldr	r2, [pc, #96]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b66:	210c      	movs	r1, #12
 8008b68:	481f      	ldr	r0, [pc, #124]	@ (8008be8 <phNfcLib_PAL_Init+0x11c>)
 8008b6a:	f010 fdde 	bl	801972a <phpalI18000p3m3_Sw_Init>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	80fb      	strh	r3, [r7, #6]
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d122      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_EPCUID_SW */

        /* Initialize 18092 Initiator PAL component */
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mPI_Sw_Init(
 8008b78:	4a13      	ldr	r2, [pc, #76]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b7a:	2124      	movs	r1, #36	@ 0x24
 8008b7c:	481b      	ldr	r0, [pc, #108]	@ (8008bec <phNfcLib_PAL_Init+0x120>)
 8008b7e:	f010 ffbb 	bl	8019af8 <phpalI18092mPI_Sw_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	80fb      	strh	r3, [r7, #6]
 8008b86:	88fb      	ldrh	r3, [r7, #6]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d118      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 8008b8c:	4b18      	ldr	r3, [pc, #96]	@ (8008bf0 <phNfcLib_PAL_Init+0x124>)
 8008b8e:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8008b92:	4a0d      	ldr	r2, [pc, #52]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008b94:	2134      	movs	r1, #52	@ 0x34
 8008b96:	4817      	ldr	r0, [pc, #92]	@ (8008bf4 <phNfcLib_PAL_Init+0x128>)
 8008b98:	f010 fd20 	bl	80195dc <phpalI14443p4mC_Sw_Init>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	80fb      	strh	r3, [r7, #6]
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10b      	bne.n	8008bbe <phNfcLib_PAL_Init+0xf2>
            ));
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

        /* Initialize 18092 Target PAL component */
#ifdef NXPBUILD__PHPAL_I18092MT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mT_Sw_Init(
 8008ba6:	4b12      	ldr	r3, [pc, #72]	@ (8008bf0 <phNfcLib_PAL_Init+0x124>)
 8008ba8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8008bac:	4a06      	ldr	r2, [pc, #24]	@ (8008bc8 <phNfcLib_PAL_Init+0xfc>)
 8008bae:	214c      	movs	r1, #76	@ 0x4c
 8008bb0:	4811      	ldr	r0, [pc, #68]	@ (8008bf8 <phNfcLib_PAL_Init+0x12c>)
 8008bb2:	f011 fd29 	bl	801a608 <phpalI18092mT_Sw_Init>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	80fb      	strh	r3, [r7, #6]
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 8008bbe:	88fb      	ldrh	r3, [r7, #6]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	200008ec 	.word	0x200008ec
 8008bcc:	20000a9c 	.word	0x20000a9c
 8008bd0:	20000ab4 	.word	0x20000ab4
 8008bd4:	20000ae0 	.word	0x20000ae0
 8008bd8:	20000af4 	.word	0x20000af4
 8008bdc:	20000bfc 	.word	0x20000bfc
 8008be0:	20000b30 	.word	0x20000b30
 8008be4:	20000b08 	.word	0x20000b08
 8008be8:	20000b24 	.word	0x20000b24
 8008bec:	20000b50 	.word	0x20000b50
 8008bf0:	200008e4 	.word	0x200008e4
 8008bf4:	20000bc4 	.word	0x20000bc4
 8008bf8:	20000b74 	.word	0x20000b74

08008bfc <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8008c02:	2300      	movs	r3, #0
 8008c04:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 8008c06:	4a7b      	ldr	r2, [pc, #492]	@ (8008df4 <phNfcLib_AL_Init+0x1f8>)
 8008c08:	210c      	movs	r1, #12
 8008c0a:	487b      	ldr	r0, [pc, #492]	@ (8008df8 <phNfcLib_AL_Init+0x1fc>)
 8008c0c:	f005 fc14 	bl	800e438 <phalFelica_Sw_Init>
 8008c10:	4603      	mov	r3, r0
 8008c12:	80fb      	strh	r3, [r7, #6]
 8008c14:	88fb      	ldrh	r3, [r7, #6]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f040 80e6 	bne.w	8008de8 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 8008c1c:	4b77      	ldr	r3, [pc, #476]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008c1e:	4a78      	ldr	r2, [pc, #480]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008c20:	210c      	movs	r1, #12
 8008c22:	4878      	ldr	r0, [pc, #480]	@ (8008e04 <phNfcLib_AL_Init+0x208>)
 8008c24:	f005 fd60 	bl	800e6e8 <phalMfc_Sw_Init>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	80fb      	strh	r3, [r7, #6]
 8008c2c:	88fb      	ldrh	r3, [r7, #6]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 80da 	bne.w	8008de8 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8008c34:	4b74      	ldr	r3, [pc, #464]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008c3e:	4a70      	ldr	r2, [pc, #448]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008c40:	211c      	movs	r1, #28
 8008c42:	4872      	ldr	r0, [pc, #456]	@ (8008e0c <phNfcLib_AL_Init+0x210>)
 8008c44:	f006 f850 	bl	800ece8 <phalMful_Sw_Init>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	80fb      	strh	r3, [r7, #6]
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f040 80ca 	bne.w	8008de8 <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8008c54:	4b6e      	ldr	r3, [pc, #440]	@ (8008e10 <phNfcLib_AL_Init+0x214>)
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	4b6b      	ldr	r3, [pc, #428]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4b66      	ldr	r3, [pc, #408]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008c62:	4a67      	ldr	r2, [pc, #412]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008c64:	2168      	movs	r1, #104	@ 0x68
 8008c66:	486b      	ldr	r0, [pc, #428]	@ (8008e14 <phNfcLib_AL_Init+0x218>)
 8008c68:	f005 fd67 	bl	800e73a <phalMfdf_Sw_Init>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	80fb      	strh	r3, [r7, #6]
 8008c70:	88fb      	ldrh	r3, [r7, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f040 80b8 	bne.w	8008de8 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 8008c78:	4b67      	ldr	r3, [pc, #412]	@ (8008e18 <phNfcLib_AL_Init+0x21c>)
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	4a67      	ldr	r2, [pc, #412]	@ (8008e1c <phNfcLib_AL_Init+0x220>)
 8008c7e:	8812      	ldrh	r2, [r2, #0]
 8008c80:	9205      	str	r2, [sp, #20]
 8008c82:	4a67      	ldr	r2, [pc, #412]	@ (8008e20 <phNfcLib_AL_Init+0x224>)
 8008c84:	9204      	str	r2, [sp, #16]
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	4b66      	ldr	r3, [pc, #408]	@ (8008e24 <phNfcLib_AL_Init+0x228>)
 8008c8a:	9302      	str	r3, [sp, #8]
 8008c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	4b65      	ldr	r3, [pc, #404]	@ (8008e28 <phNfcLib_AL_Init+0x22c>)
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	4b59      	ldr	r3, [pc, #356]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008c96:	4a5a      	ldr	r2, [pc, #360]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008c98:	2154      	movs	r1, #84	@ 0x54
 8008c9a:	4864      	ldr	r0, [pc, #400]	@ (8008e2c <phNfcLib_AL_Init+0x230>)
 8008c9c:	f006 f959 	bl	800ef52 <phalVca_Sw_Init>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	80fb      	strh	r3, [r7, #6]
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 809e 	bne.w	8008de8 <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 8008cac:	4b58      	ldr	r3, [pc, #352]	@ (8008e10 <phNfcLib_AL_Init+0x214>)
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8008e2c <phNfcLib_AL_Init+0x230>)
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8008e30 <phNfcLib_AL_Init+0x234>)
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	4b53      	ldr	r3, [pc, #332]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008cba:	9302      	str	r3, [sp, #8]
 8008cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8008e34 <phNfcLib_AL_Init+0x238>)
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	4b59      	ldr	r3, [pc, #356]	@ (8008e28 <phNfcLib_AL_Init+0x22c>)
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008cc8:	21b4      	movs	r1, #180	@ 0xb4
 8008cca:	485b      	ldr	r0, [pc, #364]	@ (8008e38 <phNfcLib_AL_Init+0x23c>)
 8008ccc:	f005 fd9f 	bl	800e80e <phalMfdfEVx_Sw_Init>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	80fb      	strh	r3, [r7, #6]
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f040 8086 	bne.w	8008de8 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8008cdc:	4956      	ldr	r1, [pc, #344]	@ (8008e38 <phNfcLib_AL_Init+0x23c>)
 8008cde:	4853      	ldr	r0, [pc, #332]	@ (8008e2c <phNfcLib_AL_Init+0x230>)
 8008ce0:	f006 faad 	bl	800f23e <phalVca_SetApplicationType>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	80fb      	strh	r3, [r7, #6]
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d17c      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 8008cee:	4b48      	ldr	r3, [pc, #288]	@ (8008e10 <phNfcLib_AL_Init+0x214>)
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8008e30 <phNfcLib_AL_Init+0x234>)
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	4b44      	ldr	r3, [pc, #272]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8008e34 <phNfcLib_AL_Init+0x238>)
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8008e28 <phNfcLib_AL_Init+0x22c>)
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4b3e      	ldr	r3, [pc, #248]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008d04:	4a3e      	ldr	r2, [pc, #248]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008d06:	21ac      	movs	r1, #172	@ 0xac
 8008d08:	484c      	ldr	r0, [pc, #304]	@ (8008e3c <phNfcLib_AL_Init+0x240>)
 8008d0a:	f005 fe32 	bl	800e972 <phalMfdfLight_Sw_Init>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	80fb      	strh	r3, [r7, #6]
 8008d12:	88fb      	ldrh	r3, [r7, #6]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d167      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 8008d18:	4b44      	ldr	r3, [pc, #272]	@ (8008e2c <phNfcLib_AL_Init+0x230>)
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	4b44      	ldr	r3, [pc, #272]	@ (8008e30 <phNfcLib_AL_Init+0x234>)
 8008d1e:	9304      	str	r3, [sp, #16]
 8008d20:	4b47      	ldr	r3, [pc, #284]	@ (8008e40 <phNfcLib_AL_Init+0x244>)
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	4b38      	ldr	r3, [pc, #224]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	4b42      	ldr	r3, [pc, #264]	@ (8008e34 <phNfcLib_AL_Init+0x238>)
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8008e28 <phNfcLib_AL_Init+0x22c>)
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4b32      	ldr	r3, [pc, #200]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008d32:	4a33      	ldr	r2, [pc, #204]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008d34:	2184      	movs	r1, #132	@ 0x84
 8008d36:	4843      	ldr	r0, [pc, #268]	@ (8008e44 <phNfcLib_AL_Init+0x248>)
 8008d38:	f005 fed9 	bl	800eaee <phalMfpEVx_Sw_Init>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	80fb      	strh	r3, [r7, #6]
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d150      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8008d46:	493f      	ldr	r1, [pc, #252]	@ (8008e44 <phNfcLib_AL_Init+0x248>)
 8008d48:	4838      	ldr	r0, [pc, #224]	@ (8008e2c <phNfcLib_AL_Init+0x230>)
 8008d4a:	f006 fa78 	bl	800f23e <phalVca_SetApplicationType>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	80fb      	strh	r3, [r7, #6]
 8008d52:	88fb      	ldrh	r3, [r7, #6]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d147      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 8008d58:	4b2d      	ldr	r3, [pc, #180]	@ (8008e10 <phNfcLib_AL_Init+0x214>)
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008d5e:	9302      	str	r3, [sp, #8]
 8008d60:	4b34      	ldr	r3, [pc, #208]	@ (8008e34 <phNfcLib_AL_Init+0x238>)
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	4b30      	ldr	r3, [pc, #192]	@ (8008e28 <phNfcLib_AL_Init+0x22c>)
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4b24      	ldr	r3, [pc, #144]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008d6a:	4a25      	ldr	r2, [pc, #148]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008d6c:	21a8      	movs	r1, #168	@ 0xa8
 8008d6e:	4836      	ldr	r0, [pc, #216]	@ (8008e48 <phNfcLib_AL_Init+0x24c>)
 8008d70:	f005 fc06 	bl	800e580 <phalMfNtag42XDna_Sw_Init>
 8008d74:	4603      	mov	r3, r0
 8008d76:	80fb      	strh	r3, [r7, #6]
 8008d78:	88fb      	ldrh	r3, [r7, #6]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d134      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 8008d7e:	4a33      	ldr	r2, [pc, #204]	@ (8008e4c <phNfcLib_AL_Init+0x250>)
 8008d80:	2110      	movs	r1, #16
 8008d82:	4833      	ldr	r0, [pc, #204]	@ (8008e50 <phNfcLib_AL_Init+0x254>)
 8008d84:	f005 ffeb 	bl	800ed5e <phalT1T_Sw_Init>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	80fb      	strh	r3, [r7, #6]
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d12a      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 8008d92:	4b1a      	ldr	r3, [pc, #104]	@ (8008dfc <phNfcLib_AL_Init+0x200>)
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	4b1c      	ldr	r3, [pc, #112]	@ (8008e08 <phNfcLib_AL_Init+0x20c>)
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8008e54 <phNfcLib_AL_Init+0x258>)
 8008d9e:	2120      	movs	r1, #32
 8008da0:	482d      	ldr	r0, [pc, #180]	@ (8008e58 <phNfcLib_AL_Init+0x25c>)
 8008da2:	f005 fbb4 	bl	800e50e <phalICode_Sw_Init>
 8008da6:	4603      	mov	r3, r0
 8008da8:	80fb      	strh	r3, [r7, #6]
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11b      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 8008db0:	4b26      	ldr	r3, [pc, #152]	@ (8008e4c <phNfcLib_AL_Init+0x250>)
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	4b28      	ldr	r3, [pc, #160]	@ (8008e58 <phNfcLib_AL_Init+0x25c>)
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <phNfcLib_AL_Init+0x204>)
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008df8 <phNfcLib_AL_Init+0x1fc>)
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	4b12      	ldr	r3, [pc, #72]	@ (8008e0c <phNfcLib_AL_Init+0x210>)
 8008dc2:	4a23      	ldr	r2, [pc, #140]	@ (8008e50 <phNfcLib_AL_Init+0x254>)
 8008dc4:	2180      	movs	r1, #128	@ 0x80
 8008dc6:	4825      	ldr	r0, [pc, #148]	@ (8008e5c <phNfcLib_AL_Init+0x260>)
 8008dc8:	f006 f873 	bl	800eeb2 <phalTop_Sw_Init>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	80fb      	strh	r3, [r7, #6]
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d108      	bne.n	8008de8 <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 8008dd6:	4a22      	ldr	r2, [pc, #136]	@ (8008e60 <phNfcLib_AL_Init+0x264>)
 8008dd8:	210c      	movs	r1, #12
 8008dda:	4822      	ldr	r0, [pc, #136]	@ (8008e64 <phNfcLib_AL_Init+0x268>)
 8008ddc:	f005 fb54 	bl	800e488 <phalI18000p3m3_Sw_Init>
 8008de0:	4603      	mov	r3, r0
 8008de2:	80fb      	strh	r3, [r7, #6]
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 8008de8:	88fb      	ldrh	r3, [r7, #6]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000b30 	.word	0x20000b30
 8008df8:	20000c14 	.word	0x20000c14
 8008dfc:	20000a80 	.word	0x20000a80
 8008e00:	20000bfc 	.word	0x20000bfc
 8008e04:	20000c40 	.word	0x20000c40
 8008e08:	200011e4 	.word	0x200011e4
 8008e0c:	20000e98 	.word	0x20000e98
 8008e10:	200008ec 	.word	0x200008ec
 8008e14:	20000c4c 	.word	0x20000c4c
 8008e18:	2000005e 	.word	0x2000005e
 8008e1c:	20000060 	.word	0x20000060
 8008e20:	20001774 	.word	0x20001774
 8008e24:	200016b4 	.word	0x200016b4
 8008e28:	20001124 	.word	0x20001124
 8008e2c:	200018f0 	.word	0x200018f0
 8008e30:	20001944 	.word	0x20001944
 8008e34:	20001164 	.word	0x20001164
 8008e38:	20000cb4 	.word	0x20000cb4
 8008e3c:	20000d68 	.word	0x20000d68
 8008e40:	200011a4 	.word	0x200011a4
 8008e44:	20000e14 	.word	0x20000e14
 8008e48:	20000eb4 	.word	0x20000eb4
 8008e4c:	20000a9c 	.word	0x20000a9c
 8008e50:	20000f5c 	.word	0x20000f5c
 8008e54:	20000b08 	.word	0x20000b08
 8008e58:	20000c20 	.word	0x20000c20
 8008e5c:	20000f6c 	.word	0x20000f6c
 8008e60:	20000b24 	.word	0x20000b24
 8008e64:	20000c08 	.word	0x20000c08

08008e68 <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 8008e72:	2301      	movs	r3, #1
 8008e74:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 8008e76:	4b4d      	ldr	r3, [pc, #308]	@ (8008fac <phNfcLib_Init+0x144>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f040 8091 	bne.w	8008fa2 <phNfcLib_Init+0x13a>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 8008e80:	f7ff fd8a 	bl	8008998 <phNfcLib_CommonLayer_Init>
 8008e84:	4603      	mov	r3, r0
 8008e86:	80fb      	strh	r3, [r7, #6]
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d15d      	bne.n	8008f4a <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 8008e8e:	4b48      	ldr	r3, [pc, #288]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	4b46      	ldr	r3, [pc, #280]	@ (8008fb4 <phNfcLib_Init+0x14c>)
 8008e9a:	9302      	str	r3, [sp, #8]
 8008e9c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	4b45      	ldr	r3, [pc, #276]	@ (8008fb8 <phNfcLib_Init+0x150>)
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	4b45      	ldr	r3, [pc, #276]	@ (8008fbc <phNfcLib_Init+0x154>)
 8008ea8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8008eac:	4844      	ldr	r0, [pc, #272]	@ (8008fc0 <phNfcLib_Init+0x158>)
 8008eae:	f006 fa23 	bl	800f2f8 <phhalHw_Pn5180_Init>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	80fb      	strh	r3, [r7, #6]
 8008eb6:	88fb      	ldrh	r3, [r7, #6]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <phNfcLib_Init+0x58>
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	e071      	b.n	8008fa4 <phNfcLib_Init+0x13c>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 8008ec0:	f7ff fe04 	bl	8008acc <phNfcLib_PAL_Init>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	80fb      	strh	r3, [r7, #6]
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d13d      	bne.n	8008f4a <phNfcLib_Init+0xe2>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 8008ece:	f7ff fe95 	bl	8008bfc <phNfcLib_AL_Init>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d136      	bne.n	8008f4a <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 8008edc:	4a38      	ldr	r2, [pc, #224]	@ (8008fc0 <phNfcLib_Init+0x158>)
 8008ede:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8008ee2:	4838      	ldr	r0, [pc, #224]	@ (8008fc4 <phNfcLib_Init+0x15c>)
 8008ee4:	f000 fc18 	bl	8009718 <phacDiscLoop_Sw_Init>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	80fb      	strh	r3, [r7, #6]
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d12b      	bne.n	8008f4a <phNfcLib_Init+0xe2>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 8008ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008ef4:	4a32      	ldr	r2, [pc, #200]	@ (8008fc0 <phNfcLib_Init+0x158>)
 8008ef6:	f8c3 2730 	str.w	r2, [r3, #1840]	@ 0x730

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 8008efa:	4b2d      	ldr	r3, [pc, #180]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008efc:	4a32      	ldr	r2, [pc, #200]	@ (8008fc8 <phNfcLib_Init+0x160>)
 8008efe:	f8c3 2734 	str.w	r2, [r3, #1844]	@ 0x734
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 8008f02:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f04:	4a31      	ldr	r2, [pc, #196]	@ (8008fcc <phNfcLib_Init+0x164>)
 8008f06:	f8c3 273c 	str.w	r2, [r3, #1852]	@ 0x73c
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 8008f0a:	4b29      	ldr	r3, [pc, #164]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f0c:	4a30      	ldr	r2, [pc, #192]	@ (8008fd0 <phNfcLib_Init+0x168>)
 8008f0e:	f8c3 2744 	str.w	r2, [r3, #1860]	@ 0x744
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 8008f12:	4b27      	ldr	r3, [pc, #156]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f14:	4a2f      	ldr	r2, [pc, #188]	@ (8008fd4 <phNfcLib_Init+0x16c>)
 8008f16:	f8c3 2740 	str.w	r2, [r3, #1856]	@ 0x740
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 8008f1a:	4b25      	ldr	r3, [pc, #148]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8008fd8 <phNfcLib_Init+0x170>)
 8008f1e:	f8c3 2738 	str.w	r2, [r3, #1848]	@ 0x738
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 8008f22:	4b23      	ldr	r3, [pc, #140]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f24:	4a2d      	ldr	r2, [pc, #180]	@ (8008fdc <phNfcLib_Init+0x174>)
 8008f26:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
 8008f2a:	4b21      	ldr	r3, [pc, #132]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8008fe0 <phNfcLib_Init+0x178>)
 8008f2e:	f8c3 2754 	str.w	r2, [r3, #1876]	@ 0x754
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 8008f32:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f34:	4a2b      	ldr	r2, [pc, #172]	@ (8008fe4 <phNfcLib_Init+0x17c>)
 8008f36:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe8 <phNfcLib_Init+0x180>)
 8008f3e:	f8c3 2750 	str.w	r2, [r3, #1872]	@ 0x750
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 8008f42:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f44:	4a29      	ldr	r2, [pc, #164]	@ (8008fec <phNfcLib_Init+0x184>)
 8008f46:	f8c3 2758 	str.w	r2, [r3, #1880]	@ 0x758
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <phNfcLib_Init+0xee>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 8008f50:	2310      	movs	r3, #16
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	e025      	b.n	8008fa2 <phNfcLib_Init+0x13a>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 8008f56:	4b15      	ldr	r3, [pc, #84]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 8008f5c:	4b13      	ldr	r3, [pc, #76]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 8008f62:	4b12      	ldr	r3, [pc, #72]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 8008f68:	4b10      	ldr	r3, [pc, #64]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f70:	2201      	movs	r2, #1
 8008f72:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 8008f74:	4b0d      	ldr	r3, [pc, #52]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 8008f80:	4b0a      	ldr	r3, [pc, #40]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 8008f86:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f88:	22ff      	movs	r2, #255	@ 0xff
 8008f8a:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 8008f8e:	4b08      	ldr	r3, [pc, #32]	@ (8008fb0 <phNfcLib_Init+0x148>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 8008f96:	4b05      	ldr	r3, [pc, #20]	@ (8008fac <phNfcLib_Init+0x144>)
 8008f98:	2208      	movs	r2, #8
 8008f9a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 8008fa2:	683b      	ldr	r3, [r7, #0]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20001204 	.word	0x20001204
 8008fb0:	200008e4 	.word	0x200008e4
 8008fb4:	20001348 	.word	0x20001348
 8008fb8:	2000121c 	.word	0x2000121c
 8008fbc:	20000a80 	.word	0x20000a80
 8008fc0:	200008ec 	.word	0x200008ec
 8008fc4:	20000fec 	.word	0x20000fec
 8008fc8:	20000a9c 	.word	0x20000a9c
 8008fcc:	20000ab4 	.word	0x20000ab4
 8008fd0:	20000ae0 	.word	0x20000ae0
 8008fd4:	20000af4 	.word	0x20000af4
 8008fd8:	20000b30 	.word	0x20000b30
 8008fdc:	20000b08 	.word	0x20000b08
 8008fe0:	20000b50 	.word	0x20000b50
 8008fe4:	20000b24 	.word	0x20000b24
 8008fe8:	20000c08 	.word	0x20000c08
 8008fec:	20000f5c 	.word	0x20000f5c

08008ff0 <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 8008ffe:	4b9a      	ldr	r3, [pc, #616]	@ (8009268 <phNfcLib_GetDataParams+0x278>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 8129 	beq.w	800925a <phNfcLib_GetDataParams+0x26a>
    {
        switch(wComponent & PH_COMP_MASK)
 8009008:	88fb      	ldrh	r3, [r7, #6]
 800900a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800900e:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 8009012:	f000 811e 	beq.w	8009252 <phNfcLib_GetDataParams+0x262>
 8009016:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 800901a:	f300 811d 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800901e:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8009022:	f000 8113 	beq.w	800924c <phNfcLib_GetDataParams+0x25c>
 8009026:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 800902a:	f300 8115 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800902e:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 8009032:	f000 8105 	beq.w	8009240 <phNfcLib_GetDataParams+0x250>
 8009036:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 800903a:	f300 810d 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800903e:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8009042:	f000 8100 	beq.w	8009246 <phNfcLib_GetDataParams+0x256>
 8009046:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800904a:	f300 8105 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800904e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009052:	f000 80f2 	beq.w	800923a <phNfcLib_GetDataParams+0x24a>
 8009056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800905a:	f300 80fd 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800905e:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8009062:	f000 80d5 	beq.w	8009210 <phNfcLib_GetDataParams+0x220>
 8009066:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 800906a:	f300 80f5 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800906e:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 8009072:	f000 80c7 	beq.w	8009204 <phNfcLib_GetDataParams+0x214>
 8009076:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800907a:	f300 80ed 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800907e:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 8009082:	f000 80c2 	beq.w	800920a <phNfcLib_GetDataParams+0x21a>
 8009086:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 800908a:	f300 80e5 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800908e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009092:	f000 80b4 	beq.w	80091fe <phNfcLib_GetDataParams+0x20e>
 8009096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800909a:	f300 80dd 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800909e:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80090a2:	f000 80c4 	beq.w	800922e <phNfcLib_GetDataParams+0x23e>
 80090a6:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80090aa:	f300 80d5 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 80090ae:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80090b2:	f000 80b9 	beq.w	8009228 <phNfcLib_GetDataParams+0x238>
 80090b6:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80090ba:	f300 80cd 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 80090be:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80090c2:	f000 8099 	beq.w	80091f8 <phNfcLib_GetDataParams+0x208>
 80090c6:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80090ca:	f300 80c5 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 80090ce:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80090d2:	f000 80af 	beq.w	8009234 <phNfcLib_GetDataParams+0x244>
 80090d6:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80090da:	f300 80bd 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 80090de:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80090e2:	f000 809e 	beq.w	8009222 <phNfcLib_GetDataParams+0x232>
 80090e6:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80090ea:	f300 80b5 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 80090ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80090f2:	f000 8093 	beq.w	800921c <phNfcLib_GetDataParams+0x22c>
 80090f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80090fa:	f300 80ad 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 80090fe:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8009102:	f000 8088 	beq.w	8009216 <phNfcLib_GetDataParams+0x226>
 8009106:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 800910a:	f300 80a5 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800910e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009112:	d06e      	beq.n	80091f2 <phNfcLib_GetDataParams+0x202>
 8009114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009118:	f300 809e 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800911c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009120:	d064      	beq.n	80091ec <phNfcLib_GetDataParams+0x1fc>
 8009122:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009126:	f300 8097 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 800912a:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 800912e:	d05a      	beq.n	80091e6 <phNfcLib_GetDataParams+0x1f6>
 8009130:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8009134:	f300 8090 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 8009138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800913c:	d04d      	beq.n	80091da <phNfcLib_GetDataParams+0x1ea>
 800913e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009142:	f300 8089 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 8009146:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800914a:	d043      	beq.n	80091d4 <phNfcLib_GetDataParams+0x1e4>
 800914c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8009150:	f300 8082 	bgt.w	8009258 <phNfcLib_GetDataParams+0x268>
 8009154:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009158:	d039      	beq.n	80091ce <phNfcLib_GetDataParams+0x1de>
 800915a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800915e:	dc7b      	bgt.n	8009258 <phNfcLib_GetDataParams+0x268>
 8009160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009164:	d03c      	beq.n	80091e0 <phNfcLib_GetDataParams+0x1f0>
 8009166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800916a:	dc75      	bgt.n	8009258 <phNfcLib_GetDataParams+0x268>
 800916c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009170:	d02a      	beq.n	80091c8 <phNfcLib_GetDataParams+0x1d8>
 8009172:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009176:	dc6f      	bgt.n	8009258 <phNfcLib_GetDataParams+0x268>
 8009178:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800917c:	d021      	beq.n	80091c2 <phNfcLib_GetDataParams+0x1d2>
 800917e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009182:	dc69      	bgt.n	8009258 <phNfcLib_GetDataParams+0x268>
 8009184:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009188:	d018      	beq.n	80091bc <phNfcLib_GetDataParams+0x1cc>
 800918a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800918e:	dc63      	bgt.n	8009258 <phNfcLib_GetDataParams+0x268>
 8009190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009194:	d00f      	beq.n	80091b6 <phNfcLib_GetDataParams+0x1c6>
 8009196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800919a:	dc5d      	bgt.n	8009258 <phNfcLib_GetDataParams+0x268>
 800919c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a0:	d003      	beq.n	80091aa <phNfcLib_GetDataParams+0x1ba>
 80091a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a6:	d003      	beq.n	80091b0 <phNfcLib_GetDataParams+0x1c0>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 80091a8:	e056      	b.n	8009258 <phNfcLib_GetDataParams+0x268>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 80091aa:	4b30      	ldr	r3, [pc, #192]	@ (800926c <phNfcLib_GetDataParams+0x27c>)
 80091ac:	60fb      	str	r3, [r7, #12]
            break;
 80091ae:	e054      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 80091b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009270 <phNfcLib_GetDataParams+0x280>)
 80091b2:	60fb      	str	r3, [r7, #12]
            break;
 80091b4:	e051      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 80091b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009274 <phNfcLib_GetDataParams+0x284>)
 80091b8:	60fb      	str	r3, [r7, #12]
            break;
 80091ba:	e04e      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 80091bc:	4b2e      	ldr	r3, [pc, #184]	@ (8009278 <phNfcLib_GetDataParams+0x288>)
 80091be:	60fb      	str	r3, [r7, #12]
            break;
 80091c0:	e04b      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 80091c2:	4b2e      	ldr	r3, [pc, #184]	@ (800927c <phNfcLib_GetDataParams+0x28c>)
 80091c4:	60fb      	str	r3, [r7, #12]
            break;
 80091c6:	e048      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 80091c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009280 <phNfcLib_GetDataParams+0x290>)
 80091ca:	60fb      	str	r3, [r7, #12]
            break;
 80091cc:	e045      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 80091ce:	4b2d      	ldr	r3, [pc, #180]	@ (8009284 <phNfcLib_GetDataParams+0x294>)
 80091d0:	60fb      	str	r3, [r7, #12]
            break;
 80091d2:	e042      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 80091d4:	4b2c      	ldr	r3, [pc, #176]	@ (8009288 <phNfcLib_GetDataParams+0x298>)
 80091d6:	60fb      	str	r3, [r7, #12]
            break;
 80091d8:	e03f      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mPI;
 80091da:	4b2c      	ldr	r3, [pc, #176]	@ (800928c <phNfcLib_GetDataParams+0x29c>)
 80091dc:	60fb      	str	r3, [r7, #12]
            break;
 80091de:	e03c      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 80091e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009290 <phNfcLib_GetDataParams+0x2a0>)
 80091e2:	60fb      	str	r3, [r7, #12]
            break;
 80091e4:	e039      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mT;
 80091e6:	4b2b      	ldr	r3, [pc, #172]	@ (8009294 <phNfcLib_GetDataParams+0x2a4>)
 80091e8:	60fb      	str	r3, [r7, #12]
            break;
 80091ea:	e036      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 80091ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009298 <phNfcLib_GetDataParams+0x2a8>)
 80091ee:	60fb      	str	r3, [r7, #12]
            break;
 80091f0:	e033      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 80091f2:	4b2a      	ldr	r3, [pc, #168]	@ (800929c <phNfcLib_GetDataParams+0x2ac>)
 80091f4:	60fb      	str	r3, [r7, #12]
            break;
 80091f6:	e030      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 80091f8:	4b29      	ldr	r3, [pc, #164]	@ (80092a0 <phNfcLib_GetDataParams+0x2b0>)
 80091fa:	60fb      	str	r3, [r7, #12]
            break;
 80091fc:	e02d      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 80091fe:	4b29      	ldr	r3, [pc, #164]	@ (80092a4 <phNfcLib_GetDataParams+0x2b4>)
 8009200:	60fb      	str	r3, [r7, #12]
            break;
 8009202:	e02a      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 8009204:	4b28      	ldr	r3, [pc, #160]	@ (80092a8 <phNfcLib_GetDataParams+0x2b8>)
 8009206:	60fb      	str	r3, [r7, #12]
            break;
 8009208:	e027      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 800920a:	4b28      	ldr	r3, [pc, #160]	@ (80092ac <phNfcLib_GetDataParams+0x2bc>)
 800920c:	60fb      	str	r3, [r7, #12]
            break;
 800920e:	e024      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 8009210:	4b27      	ldr	r3, [pc, #156]	@ (80092b0 <phNfcLib_GetDataParams+0x2c0>)
 8009212:	60fb      	str	r3, [r7, #12]
            break;
 8009214:	e021      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 8009216:	4b27      	ldr	r3, [pc, #156]	@ (80092b4 <phNfcLib_GetDataParams+0x2c4>)
 8009218:	60fb      	str	r3, [r7, #12]
            break;
 800921a:	e01e      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 800921c:	4b26      	ldr	r3, [pc, #152]	@ (80092b8 <phNfcLib_GetDataParams+0x2c8>)
 800921e:	60fb      	str	r3, [r7, #12]
            break;
 8009220:	e01b      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 8009222:	4b26      	ldr	r3, [pc, #152]	@ (80092bc <phNfcLib_GetDataParams+0x2cc>)
 8009224:	60fb      	str	r3, [r7, #12]
            break;
 8009226:	e018      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 8009228:	4b25      	ldr	r3, [pc, #148]	@ (80092c0 <phNfcLib_GetDataParams+0x2d0>)
 800922a:	60fb      	str	r3, [r7, #12]
            break;
 800922c:	e015      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 800922e:	4b25      	ldr	r3, [pc, #148]	@ (80092c4 <phNfcLib_GetDataParams+0x2d4>)
 8009230:	60fb      	str	r3, [r7, #12]
            break;
 8009232:	e012      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 8009234:	4b24      	ldr	r3, [pc, #144]	@ (80092c8 <phNfcLib_GetDataParams+0x2d8>)
 8009236:	60fb      	str	r3, [r7, #12]
            break;
 8009238:	e00f      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 800923a:	4b24      	ldr	r3, [pc, #144]	@ (80092cc <phNfcLib_GetDataParams+0x2dc>)
 800923c:	60fb      	str	r3, [r7, #12]
            break;
 800923e:	e00c      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sKeyStore;
 8009240:	4b23      	ldr	r3, [pc, #140]	@ (80092d0 <phNfcLib_GetDataParams+0x2e0>)
 8009242:	60fb      	str	r3, [r7, #12]
            break;
 8009244:	e009      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoSym;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
            break;
 800924a:	e006      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoRng;
 800924c:	4b21      	ldr	r3, [pc, #132]	@ (80092d4 <phNfcLib_GetDataParams+0x2e4>)
 800924e:	60fb      	str	r3, [r7, #12]
            break;
 8009250:	e003      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            pDataparam = &sTMI;
 8009252:	4b21      	ldr	r3, [pc, #132]	@ (80092d8 <phNfcLib_GetDataParams+0x2e8>)
 8009254:	60fb      	str	r3, [r7, #12]
            break;
 8009256:	e000      	b.n	800925a <phNfcLib_GetDataParams+0x26a>
            break;
 8009258:	bf00      	nop
        }
    }
    return pDataparam;
 800925a:	68fb      	ldr	r3, [r7, #12]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	20001204 	.word	0x20001204
 800926c:	200008ec 	.word	0x200008ec
 8009270:	20000a9c 	.word	0x20000a9c
 8009274:	20000ab4 	.word	0x20000ab4
 8009278:	20000ae0 	.word	0x20000ae0
 800927c:	20000af4 	.word	0x20000af4
 8009280:	20000bfc 	.word	0x20000bfc
 8009284:	20000b08 	.word	0x20000b08
 8009288:	20000b24 	.word	0x20000b24
 800928c:	20000b50 	.word	0x20000b50
 8009290:	20000b30 	.word	0x20000b30
 8009294:	20000b74 	.word	0x20000b74
 8009298:	20000bc4 	.word	0x20000bc4
 800929c:	20000c40 	.word	0x20000c40
 80092a0:	20000c4c 	.word	0x20000c4c
 80092a4:	20000cb4 	.word	0x20000cb4
 80092a8:	20000d68 	.word	0x20000d68
 80092ac:	20000e14 	.word	0x20000e14
 80092b0:	20000eb4 	.word	0x20000eb4
 80092b4:	20000e98 	.word	0x20000e98
 80092b8:	20000c14 	.word	0x20000c14
 80092bc:	20000c20 	.word	0x20000c20
 80092c0:	20000f5c 	.word	0x20000f5c
 80092c4:	20000f6c 	.word	0x20000f6c
 80092c8:	20000c08 	.word	0x20000c08
 80092cc:	20000fec 	.word	0x20000fec
 80092d0:	20000a80 	.word	0x20000a80
 80092d4:	200011e4 	.word	0x200011e4
 80092d8:	20001944 	.word	0x20001944

080092dc <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <phTMIUtils_Init+0x16>
 80092ee:	2321      	movs	r3, #33	@ 0x21
 80092f0:	e018      	b.n	8009324 <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <phTMIUtils_Init+0x22>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80092fe:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8009302:	e00f      	b.n	8009324 <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <phTMIUtils_ActivateTMICollection+0x1a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 800934a:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800934e:	e02c      	b.n	80093aa <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	2b04      	cmp	r3, #4
 8009354:	d825      	bhi.n	80093a2 <phTMIUtils_ActivateTMICollection+0x72>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <phTMIUtils_ActivateTMICollection+0x2c>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009371 	.word	0x08009371
 8009360:	08009385 	.word	0x08009385
 8009364:	0800938d 	.word	0x0800938d
 8009368:	08009385 	.word	0x08009385
 800936c:	08009395 	.word	0x08009395
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	731a      	strb	r2, [r3, #12]
        break;
 8009382:	e011      	b.n	80093a8 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	731a      	strb	r2, [r3, #12]
        break;
 800938a:	e00d      	b.n	80093a8 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	731a      	strb	r2, [r3, #12]
        break;
 8009392:	e009      	b.n	80093a8 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	611a      	str	r2, [r3, #16]
        break;
 80093a0:	e002      	b.n	80093a8 <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80093a2:	f24e 5321 	movw	r3, #58657	@ 0xe521
 80093a6:	e000      	b.n	80093aa <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop

080093b8 <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6039      	str	r1, [r7, #0]
 80093c0:	4611      	mov	r1, r2
 80093c2:	461a      	mov	r2, r3
 80093c4:	4603      	mov	r3, r0
 80093c6:	71fb      	strb	r3, [r7, #7]
 80093c8:	460b      	mov	r3, r1
 80093ca:	80bb      	strh	r3, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <phTools_DecodeParity+0x24>
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d102      	bne.n	80093e2 <phTools_DecodeParity+0x2a>
 80093dc:	79bb      	ldrb	r3, [r7, #6]
 80093de:	2b07      	cmp	r3, #7
 80093e0:	d902      	bls.n	80093e8 <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 80093e2:	f24e 3321 	movw	r3, #58145	@ 0xe321
 80093e6:	e0fa      	b.n	80095de <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 80093e8:	88bb      	ldrh	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10d      	bne.n	800940a <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 80093ee:	79bb      	ldrb	r3, [r7, #6]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d107      	bne.n	8009404 <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	2200      	movs	r2, #0
 80093f8:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	2200      	movs	r2, #0
 80093fe:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 8009400:	2300      	movs	r3, #0
 8009402:	e0ec      	b.n	80095de <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 8009404:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8009408:	e0e9      	b.n	80095de <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 800940a:	79bb      	ldrb	r3, [r7, #6]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d111      	bne.n	8009434 <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 8009410:	88bb      	ldrh	r3, [r7, #4]
 8009412:	4a75      	ldr	r2, [pc, #468]	@ (80095e8 <phTools_DecodeParity+0x230>)
 8009414:	fba2 2303 	umull	r2, r3, r2, r3
 8009418:	085b      	lsrs	r3, r3, #1
 800941a:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 800941c:	88ba      	ldrh	r2, [r7, #4]
 800941e:	4b72      	ldr	r3, [pc, #456]	@ (80095e8 <phTools_DecodeParity+0x230>)
 8009420:	fba3 1302 	umull	r1, r3, r3, r2
 8009424:	0859      	lsrs	r1, r3, #1
 8009426:	460b      	mov	r3, r1
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	440b      	add	r3, r1
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	b29b      	uxth	r3, r3
 8009430:	73fb      	strb	r3, [r7, #15]
 8009432:	e012      	b.n	800945a <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 8009434:	88bb      	ldrh	r3, [r7, #4]
 8009436:	3b01      	subs	r3, #1
 8009438:	4a6b      	ldr	r2, [pc, #428]	@ (80095e8 <phTools_DecodeParity+0x230>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 8009442:	88bb      	ldrh	r3, [r7, #4]
 8009444:	1e59      	subs	r1, r3, #1
 8009446:	4b68      	ldr	r3, [pc, #416]	@ (80095e8 <phTools_DecodeParity+0x230>)
 8009448:	fba3 2301 	umull	r2, r3, r3, r1
 800944c:	085a      	lsrs	r2, r3, #1
 800944e:	4613      	mov	r3, r2
 8009450:	00db      	lsls	r3, r3, #3
 8009452:	4413      	add	r3, r2
 8009454:	1aca      	subs	r2, r1, r3
 8009456:	4613      	mov	r3, r2
 8009458:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 800945a:	8a3b      	ldrh	r3, [r7, #16]
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	b29a      	uxth	r2, r3
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	b29b      	uxth	r3, r3
 8009464:	4413      	add	r3, r2
 8009466:	b29a      	uxth	r2, r3
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 800946c:	7bfa      	ldrb	r2, [r7, #15]
 800946e:	79bb      	ldrb	r3, [r7, #6]
 8009470:	429a      	cmp	r2, r3
 8009472:	d905      	bls.n	8009480 <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947e:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 8009480:	79bb      	ldrb	r3, [r7, #6]
 8009482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009484:	8812      	ldrh	r2, [r2, #0]
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	b2da      	uxtb	r2, r3
 8009490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009492:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 80094a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	8c3a      	ldrh	r2, [r7, #32]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d205      	bcs.n	80094be <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	2200      	movs	r2, #0
 80094b6:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 80094b8:	f24e 3304 	movw	r3, #58116	@ 0xe304
 80094bc:	e08f      	b.n	80095de <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 80094c6:	2307      	movs	r3, #7
 80094c8:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 80094ca:	e068      	b.n	800959e <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 80094cc:	8afb      	ldrh	r3, [r7, #22]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4413      	add	r3, r2
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	7cfb      	ldrb	r3, [r7, #19]
 80094d8:	f1c3 0307 	rsb	r3, r3, #7
 80094dc:	fa42 f103 	asr.w	r1, r2, r3
 80094e0:	8abb      	ldrh	r3, [r7, #20]
 80094e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e4:	4413      	add	r3, r2
 80094e6:	b2ca      	uxtb	r2, r1
 80094e8:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 80094ea:	8afb      	ldrh	r3, [r7, #22]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	88bb      	ldrh	r3, [r7, #4]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d243      	bcs.n	800957c <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 80094f4:	8abb      	ldrh	r3, [r7, #20]
 80094f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094f8:	4413      	add	r3, r2
 80094fa:	7819      	ldrb	r1, [r3, #0]
 80094fc:	8afb      	ldrh	r3, [r7, #22]
 80094fe:	3301      	adds	r3, #1
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	4413      	add	r3, r2
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	7cfb      	ldrb	r3, [r7, #19]
 800950a:	3301      	adds	r3, #1
 800950c:	fa02 f303 	lsl.w	r3, r2, r3
 8009510:	b2da      	uxtb	r2, r3
 8009512:	8abb      	ldrh	r3, [r7, #20]
 8009514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009516:	4403      	add	r3, r0
 8009518:	430a      	orrs	r2, r1
 800951a:	b2d2      	uxtb	r2, r2
 800951c:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 800951e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 8009526:	8abb      	ldrh	r3, [r7, #20]
 8009528:	3301      	adds	r3, #1
 800952a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800952c:	8812      	ldrh	r2, [r2, #0]
 800952e:	4293      	cmp	r3, r2
 8009530:	d224      	bcs.n	800957c <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 8009532:	8abb      	ldrh	r3, [r7, #20]
 8009534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009536:	4413      	add	r3, r2
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	79fa      	ldrb	r2, [r7, #7]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f854 	bl	80095ec <phTools_CalcParity>
 8009544:	4603      	mov	r3, r0
 8009546:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 8009548:	8afb      	ldrh	r3, [r7, #22]
 800954a:	3301      	adds	r3, #1
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	4413      	add	r3, r2
 8009550:	781a      	ldrb	r2, [r3, #0]
 8009552:	7cfb      	ldrb	r3, [r7, #19]
 8009554:	f1c3 0307 	rsb	r3, r3, #7
 8009558:	2101      	movs	r1, #1
 800955a:	fa01 f303 	lsl.w	r3, r1, r3
 800955e:	b2db      	uxtb	r3, r3
 8009560:	4013      	ands	r3, r2
 8009562:	b2db      	uxtb	r3, r3
 8009564:	4619      	mov	r1, r3
 8009566:	7bba      	ldrb	r2, [r7, #14]
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	f1c3 0307 	rsb	r3, r3, #7
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	4299      	cmp	r1, r3
 8009574:	d002      	beq.n	800957c <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 8009576:	f24e 3302 	movw	r3, #58114	@ 0xe302
 800957a:	e030      	b.n	80095de <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 800957c:	7cfb      	ldrb	r3, [r7, #19]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d104      	bne.n	800958c <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 8009582:	2308      	movs	r3, #8
 8009584:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 8009586:	8afb      	ldrh	r3, [r7, #22]
 8009588:	3301      	adds	r3, #1
 800958a:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 800958c:	8abb      	ldrh	r3, [r7, #20]
 800958e:	3301      	adds	r3, #1
 8009590:	82bb      	strh	r3, [r7, #20]
 8009592:	8afb      	ldrh	r3, [r7, #22]
 8009594:	3301      	adds	r3, #1
 8009596:	82fb      	strh	r3, [r7, #22]
 8009598:	7cfb      	ldrb	r3, [r7, #19]
 800959a:	3b01      	subs	r3, #1
 800959c:	74fb      	strb	r3, [r7, #19]
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	8aba      	ldrh	r2, [r7, #20]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d391      	bcc.n	80094cc <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 80095a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d015      	beq.n	80095dc <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b8:	4413      	add	r3, r2
 80095ba:	7819      	ldrb	r1, [r3, #0]
 80095bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f1c3 0308 	rsb	r3, r3, #8
 80095c4:	22ff      	movs	r2, #255	@ 0xff
 80095c6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095d4:	4403      	add	r3, r0
 80095d6:	400a      	ands	r2, r1
 80095d8:	b2d2      	uxtb	r2, r2
 80095da:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	38e38e39 	.word	0x38e38e39

080095ec <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	460a      	mov	r2, r1
 80095f6:	71fb      	strb	r3, [r7, #7]
 80095f8:	4613      	mov	r3, r2
 80095fa:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 80095fc:	79bb      	ldrb	r3, [r7, #6]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 8009602:	2300      	movs	r3, #0
 8009604:	73bb      	strb	r3, [r7, #14]
 8009606:	e001      	b.n	800960c <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 8009608:	2301      	movs	r3, #1
 800960a:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
 8009610:	e00f      	b.n	8009632 <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2201      	movs	r2, #1
 8009616:	fa02 f303 	lsl.w	r3, r2, r3
 800961a:	b2da      	uxtb	r2, r3
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	4013      	ands	r3, r2
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <phTools_CalcParity+0x40>
        {
            ++bParity;
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	3301      	adds	r3, #1
 800962a:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	3301      	adds	r3, #1
 8009630:	73fb      	strb	r3, [r7, #15]
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b07      	cmp	r3, #7
 8009636:	d9ec      	bls.n	8009612 <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	b2db      	uxtb	r3, r3
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	6039      	str	r1, [r7, #0]
 8009656:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b2da      	uxtb	r2, r3
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	4053      	eors	r3, r2
 8009662:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 8009664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009668:	011b      	lsls	r3, r3, #4
 800966a:	b25a      	sxtb	r2, r3
 800966c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009670:	4053      	eors	r3, r2
 8009672:	b25b      	sxtb	r3, r3
 8009674:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	b29b      	uxth	r3, r3
 800967e:	b21a      	sxth	r2, r3
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	b21b      	sxth	r3, r3
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	b21b      	sxth	r3, r3
 8009688:	4053      	eors	r3, r2
 800968a:	b21a      	sxth	r2, r3
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	b21b      	sxth	r3, r3
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	b21b      	sxth	r3, r3
 8009694:	4053      	eors	r3, r2
 8009696:	b21a      	sxth	r2, r3
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	091b      	lsrs	r3, r3, #4
 800969c:	b2db      	uxtb	r3, r3
 800969e:	b21b      	sxth	r3, r3
 80096a0:	4053      	eors	r3, r2
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	801a      	strh	r2, [r3, #0]
}
 80096aa:	bf00      	nop
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 80096c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096ca:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	60fa      	str	r2, [r7, #12]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 80096d6:	f107 0214 	add.w	r2, r7, #20
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff ffb4 	bl	800964c <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	60bb      	str	r3, [r7, #8]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1ed      	bne.n	80096cc <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 80096f0:	8abb      	ldrh	r3, [r7, #20]
 80096f2:	43db      	mvns	r3, r3
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 80096f8:	8abb      	ldrh	r3, [r7, #20]
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 8009700:	8abb      	ldrh	r3, [r7, #20]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3301      	adds	r3, #1
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	460b      	mov	r3, r1
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 8009726:	897b      	ldrh	r3, [r7, #10]
 8009728:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800972c:	d002      	beq.n	8009734 <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 800972e:	f244 0320 	movw	r3, #16416	@ 0x4020
 8009732:	e189      	b.n	8009a48 <phacDiscLoop_Sw_Init+0x330>
    }

    PH_ASSERT_NULL(pDataParams);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <phacDiscLoop_Sw_Init+0x26>
 800973a:	2321      	movs	r3, #33	@ 0x21
 800973c:	e184      	b.n	8009a48 <phacDiscLoop_Sw_Init+0x330>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f244 0201 	movw	r2, #16385	@ 0x4001
 8009744:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2222      	movs	r2, #34	@ 0x22
 8009794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4aa6      	ldr	r2, [pc, #664]	@ (8009a54 <phacDiscLoop_Sw_Init+0x33c>)
 80097ba:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80097e6:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2208      	movs	r2, #8
 80097f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800980a:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	789b      	ldrb	r3, [r3, #2]
 8009810:	f043 0301 	orr.w	r3, r3, #1
 8009814:	b2da      	uxtb	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	709a      	strb	r2, [r3, #2]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	78db      	ldrb	r3, [r3, #3]
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	b2da      	uxtb	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	795b      	ldrb	r3, [r3, #5]
 800982c:	f043 0301 	orr.w	r3, r3, #1
 8009830:	b2da      	uxtb	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	799b      	ldrb	r3, [r3, #6]
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8009850:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	789b      	ldrb	r3, [r3, #2]
 8009856:	f043 0302 	orr.w	r3, r3, #2
 800985a:	b2da      	uxtb	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8009872:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 800987a:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	789b      	ldrb	r3, [r3, #2]
 8009880:	f043 030c 	orr.w	r3, r3, #12
 8009884:	b2da      	uxtb	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212 ;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	78db      	ldrb	r3, [r3, #3]
 800988e:	f043 0302 	orr.w	r3, r3, #2
 8009892:	b2da      	uxtb	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	78db      	ldrb	r3, [r3, #3]
 800989c:	f043 0304 	orr.w	r3, r3, #4
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	795b      	ldrb	r3, [r3, #5]
 80098aa:	f043 0304 	orr.w	r3, r3, #4
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	795b      	ldrb	r3, [r3, #5]
 80098b8:	f043 0308 	orr.w	r3, r3, #8
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	799b      	ldrb	r3, [r3, #6]
 80098c6:	f043 0304 	orr.w	r3, r3, #4
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	799b      	ldrb	r3, [r3, #6]
 80098d4:	f043 0308 	orr.w	r3, r3, #8
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80098ea:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	789b      	ldrb	r3, [r3, #2]
 80098f0:	f043 0310 	orr.w	r3, r3, #16
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009906:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	789b      	ldrb	r3, [r3, #2]
 800990c:	f043 0320 	orr.w	r3, r3, #32
 8009910:	b2da      	uxtb	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    #if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid        = 0;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri        = 0;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2208      	movs	r2, #8
 8009942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2208      	movs	r2, #8
 800997a:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	22ff      	movs	r2, #255	@ 0xff
 80099b2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	22ff      	movs	r2, #255	@ 0xff
 80099ba:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2203      	movs	r2, #3
 80099c2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
 80099ca:	e00d      	b.n	80099e8 <phacDiscLoop_Sw_Init+0x2d0>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 80099cc:	7dfa      	ldrb	r2, [r7, #23]
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	4413      	add	r3, r2
 80099d6:	00da      	lsls	r2, r3, #3
 80099d8:	1ad2      	subs	r2, r2, r3
 80099da:	188b      	adds	r3, r1, r2
 80099dc:	33a7      	adds	r3, #167	@ 0xa7
 80099de:	2200      	movs	r2, #0
 80099e0:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	3301      	adds	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0ee      	beq.n	80099cc <phacDiscLoop_Sw_Init+0x2b4>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid          = 0;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri          = 0;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2203      	movs	r2, #3
 8009a32:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	08026b94 	.word	0x08026b94

08009a58 <phacDiscLoop_Sw_Run>:
// discoveryLoop的核心调度函数：根据入口点参数执行轮询（Poll）模式或监听（Listen）模式的标签发现流程
phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* 关闭干扰检测 Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a68:	2200      	movs	r2, #0
 8009a6a:	215e      	movs	r1, #94	@ 0x5e
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f006 fba7 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8009a72:	4603      	mov	r3, r0
 8009a74:	81fb      	strh	r3, [r7, #14]
 8009a76:	89fb      	ldrh	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <phacDiscLoop_Sw_Run+0x28>
 8009a7c:	89fb      	ldrh	r3, [r7, #14]
 8009a7e:	e0b9      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a84:	2200      	movs	r2, #0
 8009a86:	2120      	movs	r1, #32
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f006 fb99 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	81fb      	strh	r3, [r7, #14]
 8009a92:	89fb      	ldrh	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <phacDiscLoop_Sw_Run+0x44>
 8009a98:	89fb      	ldrh	r3, [r7, #14]
 8009a9a:	e0ab      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <phacDiscLoop_Sw_Run+0x50>
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d07a      	beq.n	8009b9c <phacDiscLoop_Sw_Run+0x144>
 8009aa6:	e0a3      	b.n	8009bf0 <phacDiscLoop_Sw_Run+0x198>
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

		/* 低功耗卡检测LPCD */
#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	7fdb      	ldrb	r3, [r3, #31]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d017      	beq.n	8009ae0 <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	891b      	ldrh	r3, [r3, #8]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d113      	bne.n	8009ae0 <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009abc:	4618      	mov	r0, r3
 8009abe:	f008 fdfb 	bl	80126b8 <phhalHw_Pn5180_Lpcd>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8009ac6:	89fb      	ldrh	r3, [r7, #14]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d008      	beq.n	8009ae0 <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8009ace:	89fb      	ldrh	r3, [r7, #14]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d102      	bne.n	8009adc <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 8009ad6:	f244 0384 	movw	r3, #16516	@ 0x4084
 8009ada:	e08b      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	e089      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* 1.1 主动轮询模式 Check for active poll configuration */
    	// 如果当前设置了 Active Polling 模式，并且处于“轮询检测”的状态
        if((0U != (pDataParams->bActPollTechCfg))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d037      	beq.n	8009b58 <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	891b      	ldrh	r3, [r3, #8]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d133      	bne.n	8009b58 <phacDiscLoop_Sw_Run+0x100>
        {
        	/* 尝试使用不同速率（106/212/424 kbps）的NFC P2P主动通信模式与周围的目标设备建立连接
            *  先关闭 RF 场地 -> 等待恢复时间 -> 设置协议速率 -> 开场 -> 发送 ATR 请求
			*	-> 根据返回状态判断是否成功建立连接
            */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f931 	bl	800ad58 <phacDiscLoop_Sw_Int_ActivePollMode>
 8009af6:	4603      	mov	r3, r0
 8009af8:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8009afa:	89fb      	ldrh	r3, [r7, #14]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b84      	cmp	r3, #132	@ 0x84
 8009b00:	d00f      	beq.n	8009b22 <phacDiscLoop_Sw_Run+0xca>
            {
            	// 失败
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8009b02:	89fb      	ldrh	r3, [r7, #14]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b8c      	cmp	r3, #140	@ 0x8c
 8009b08:	d009      	beq.n	8009b1e <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 8009b0a:	89fb      	ldrh	r3, [r7, #14]
 8009b0c:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8009b0e:	2b82      	cmp	r3, #130	@ 0x82
 8009b10:	d005      	beq.n	8009b1e <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	89fa      	ldrh	r2, [r7, #14]
 8009b16:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8009b18:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8009b1c:	e06a      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
                }
                // 成功
                return wDiscloopStatus;
 8009b1e:	89fb      	ldrh	r3, [r7, #14]
 8009b20:	e068      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b26:	4618      	mov	r0, r3
 8009b28:	f006 fa6a 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	81fb      	strh	r3, [r7, #14]
 8009b30:	89fb      	ldrh	r3, [r7, #14]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <phacDiscLoop_Sw_Run+0xe2>
 8009b36:	89fb      	ldrh	r3, [r7, #14]
 8009b38:	e05c      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	8b9b      	ldrh	r3, [r3, #28]
 8009b42:	461a      	mov	r2, r3
 8009b44:	2100      	movs	r1, #0
 8009b46:	f006 fa7f 	bl	8010048 <phhalHw_Pn5180_Wait>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	81fb      	strh	r3, [r7, #14]
 8009b4e:	89fb      	ldrh	r3, [r7, #14]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <phacDiscLoop_Sw_Run+0x100>
 8009b54:	89fb      	ldrh	r3, [r7, #14]
 8009b56:	e04d      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
        }

        /* 1.2 被动轮询模式 Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d012      	beq.n	8009b86 <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fa5a 	bl	800b01a <phacDiscLoop_Sw_Int_PollMode>
 8009b66:	4603      	mov	r3, r0
 8009b68:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8009b6a:	89fb      	ldrh	r3, [r7, #14]
 8009b6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b74:	d005      	beq.n	8009b82 <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	89fa      	ldrh	r2, [r7, #14]
 8009b7a:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8009b7c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8009b80:	e038      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8009b82:	89fb      	ldrh	r3, [r7, #14]
 8009b84:	e036      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009b96:	f244 0384 	movw	r3, #16516	@ 0x4084
 8009b9a:	e02b      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
        }

    /* 2. 监听模式 */
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	795b      	ldrb	r3, [r3, #5]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <phacDiscLoop_Sw_Run+0x154>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	799b      	ldrb	r3, [r3, #6]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01e      	beq.n	8009bea <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f006 fa25 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	81fb      	strh	r3, [r7, #14]
 8009bba:	89fb      	ldrh	r3, [r7, #14]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <phacDiscLoop_Sw_Run+0x16c>
 8009bc0:	89fb      	ldrh	r3, [r7, #14]
 8009bc2:	e017      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f867 	bl	800ac98 <phacDiscLoop_Sw_Int_ListenMode>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8009bce:	89fb      	ldrh	r3, [r7, #14]
 8009bd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bd8:	d005      	beq.n	8009be6 <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	89fa      	ldrh	r2, [r7, #14]
 8009bde:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8009be0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8009be4:	e006      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8009be6:	89fb      	ldrh	r3, [r7, #14]
 8009be8:	e004      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009bea:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009bee:	e001      	b.n	8009bf4 <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009bf0:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	807b      	strh	r3, [r7, #2]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 8009c14:	887b      	ldrh	r3, [r7, #2]
 8009c16:	2b94      	cmp	r3, #148	@ 0x94
 8009c18:	f200 8463 	bhi.w	800a4e2 <phacDiscLoop_Sw_SetConfig+0x8e6>
 8009c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <phacDiscLoop_Sw_SetConfig+0x28>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009ee1 	.word	0x08009ee1
 8009c28:	08009ee9 	.word	0x08009ee9
 8009c2c:	08009ef1 	.word	0x08009ef1
 8009c30:	08009f09 	.word	0x08009f09
 8009c34:	08009f21 	.word	0x08009f21
 8009c38:	08009f29 	.word	0x08009f29
 8009c3c:	08009f5b 	.word	0x08009f5b
 8009c40:	0800a4e3 	.word	0x0800a4e3
 8009c44:	0800a4e3 	.word	0x0800a4e3
 8009c48:	0800a4e3 	.word	0x0800a4e3
 8009c4c:	0800a4e3 	.word	0x0800a4e3
 8009c50:	0800a4e3 	.word	0x0800a4e3
 8009c54:	0800a4e3 	.word	0x0800a4e3
 8009c58:	0800a4e3 	.word	0x0800a4e3
 8009c5c:	0800a4e3 	.word	0x0800a4e3
 8009c60:	0800a4e3 	.word	0x0800a4e3
 8009c64:	0800a06d 	.word	0x0800a06d
 8009c68:	0800a1cf 	.word	0x0800a1cf
 8009c6c:	0800a2eb 	.word	0x0800a2eb
 8009c70:	0800a371 	.word	0x0800a371
 8009c74:	0800a475 	.word	0x0800a475
 8009c78:	0800a4e3 	.word	0x0800a4e3
 8009c7c:	0800a4e3 	.word	0x0800a4e3
 8009c80:	0800a4e3 	.word	0x0800a4e3
 8009c84:	0800a4e3 	.word	0x0800a4e3
 8009c88:	0800a4e3 	.word	0x0800a4e3
 8009c8c:	0800a4e3 	.word	0x0800a4e3
 8009c90:	0800a4e3 	.word	0x0800a4e3
 8009c94:	0800a4e3 	.word	0x0800a4e3
 8009c98:	0800a4e3 	.word	0x0800a4e3
 8009c9c:	0800a4e3 	.word	0x0800a4e3
 8009ca0:	0800a4e3 	.word	0x0800a4e3
 8009ca4:	0800a4e3 	.word	0x0800a4e3
 8009ca8:	0800a4e3 	.word	0x0800a4e3
 8009cac:	0800a4e3 	.word	0x0800a4e3
 8009cb0:	0800a4e3 	.word	0x0800a4e3
 8009cb4:	0800a4e3 	.word	0x0800a4e3
 8009cb8:	0800a4e3 	.word	0x0800a4e3
 8009cbc:	0800a4e3 	.word	0x0800a4e3
 8009cc0:	0800a4e3 	.word	0x0800a4e3
 8009cc4:	0800a4e3 	.word	0x0800a4e3
 8009cc8:	0800a4e3 	.word	0x0800a4e3
 8009ccc:	0800a4e3 	.word	0x0800a4e3
 8009cd0:	0800a4e3 	.word	0x0800a4e3
 8009cd4:	0800a4e3 	.word	0x0800a4e3
 8009cd8:	0800a4e3 	.word	0x0800a4e3
 8009cdc:	0800a4e3 	.word	0x0800a4e3
 8009ce0:	0800a4e3 	.word	0x0800a4e3
 8009ce4:	0800a1e9 	.word	0x0800a1e9
 8009ce8:	0800a1f5 	.word	0x0800a1f5
 8009cec:	0800a20f 	.word	0x0800a20f
 8009cf0:	0800a227 	.word	0x0800a227
 8009cf4:	0800a23f 	.word	0x0800a23f
 8009cf8:	0800a24b 	.word	0x0800a24b
 8009cfc:	0800a273 	.word	0x0800a273
 8009d00:	0800a4e3 	.word	0x0800a4e3
 8009d04:	0800a4e3 	.word	0x0800a4e3
 8009d08:	0800a4e3 	.word	0x0800a4e3
 8009d0c:	0800a4e3 	.word	0x0800a4e3
 8009d10:	0800a4e3 	.word	0x0800a4e3
 8009d14:	0800a4e3 	.word	0x0800a4e3
 8009d18:	0800a4e3 	.word	0x0800a4e3
 8009d1c:	0800a4e3 	.word	0x0800a4e3
 8009d20:	0800a4e3 	.word	0x0800a4e3
 8009d24:	0800a0c9 	.word	0x0800a0c9
 8009d28:	0800a0e1 	.word	0x0800a0e1
 8009d2c:	0800a0f9 	.word	0x0800a0f9
 8009d30:	0800a105 	.word	0x0800a105
 8009d34:	0800a12d 	.word	0x0800a12d
 8009d38:	0800a155 	.word	0x0800a155
 8009d3c:	0800a16d 	.word	0x0800a16d
 8009d40:	0800a185 	.word	0x0800a185
 8009d44:	0800a19f 	.word	0x0800a19f
 8009d48:	0800a1b7 	.word	0x0800a1b7
 8009d4c:	0800a4e3 	.word	0x0800a4e3
 8009d50:	0800a4e3 	.word	0x0800a4e3
 8009d54:	0800a4e3 	.word	0x0800a4e3
 8009d58:	0800a4e3 	.word	0x0800a4e3
 8009d5c:	0800a4e3 	.word	0x0800a4e3
 8009d60:	0800a4e3 	.word	0x0800a4e3
 8009d64:	0800a4e3 	.word	0x0800a4e3
 8009d68:	0800a305 	.word	0x0800a305
 8009d6c:	0800a31d 	.word	0x0800a31d
 8009d70:	0800a335 	.word	0x0800a335
 8009d74:	0800a341 	.word	0x0800a341
 8009d78:	0800a359 	.word	0x0800a359
 8009d7c:	0800a4e3 	.word	0x0800a4e3
 8009d80:	0800a2df 	.word	0x0800a2df
 8009d84:	0800a4e3 	.word	0x0800a4e3
 8009d88:	0800a4e3 	.word	0x0800a4e3
 8009d8c:	0800a4e3 	.word	0x0800a4e3
 8009d90:	0800a4e3 	.word	0x0800a4e3
 8009d94:	0800a4e3 	.word	0x0800a4e3
 8009d98:	0800a4e3 	.word	0x0800a4e3
 8009d9c:	0800a4e3 	.word	0x0800a4e3
 8009da0:	0800a4e3 	.word	0x0800a4e3
 8009da4:	0800a38b 	.word	0x0800a38b
 8009da8:	0800a3cb 	.word	0x0800a3cb
 8009dac:	0800a4e3 	.word	0x0800a4e3
 8009db0:	0800a4e3 	.word	0x0800a4e3
 8009db4:	0800a4e3 	.word	0x0800a4e3
 8009db8:	0800a4e3 	.word	0x0800a4e3
 8009dbc:	0800a4e3 	.word	0x0800a4e3
 8009dc0:	0800a4e3 	.word	0x0800a4e3
 8009dc4:	0800a4e3 	.word	0x0800a4e3
 8009dc8:	0800a4e3 	.word	0x0800a4e3
 8009dcc:	0800a4e3 	.word	0x0800a4e3
 8009dd0:	0800a4e3 	.word	0x0800a4e3
 8009dd4:	0800a4e3 	.word	0x0800a4e3
 8009dd8:	0800a4e3 	.word	0x0800a4e3
 8009ddc:	0800a4e3 	.word	0x0800a4e3
 8009de0:	0800a4e3 	.word	0x0800a4e3
 8009de4:	0800a48f 	.word	0x0800a48f
 8009de8:	0800a4ad 	.word	0x0800a4ad
 8009dec:	0800a4e3 	.word	0x0800a4e3
 8009df0:	0800a4e3 	.word	0x0800a4e3
 8009df4:	0800a4e3 	.word	0x0800a4e3
 8009df8:	0800a4e3 	.word	0x0800a4e3
 8009dfc:	0800a4e3 	.word	0x0800a4e3
 8009e00:	0800a4e3 	.word	0x0800a4e3
 8009e04:	0800a4e3 	.word	0x0800a4e3
 8009e08:	0800a4e3 	.word	0x0800a4e3
 8009e0c:	0800a4e3 	.word	0x0800a4e3
 8009e10:	0800a4e3 	.word	0x0800a4e3
 8009e14:	0800a4e3 	.word	0x0800a4e3
 8009e18:	0800a4e3 	.word	0x0800a4e3
 8009e1c:	0800a4e3 	.word	0x0800a4e3
 8009e20:	0800a4e3 	.word	0x0800a4e3
 8009e24:	0800a045 	.word	0x0800a045
 8009e28:	0800a4e3 	.word	0x0800a4e3
 8009e2c:	08009f79 	.word	0x08009f79
 8009e30:	08009e97 	.word	0x08009e97
 8009e34:	08009ea1 	.word	0x08009ea1
 8009e38:	0800a4e3 	.word	0x0800a4e3
 8009e3c:	08009f63 	.word	0x08009f63
 8009e40:	0800a4e3 	.word	0x0800a4e3
 8009e44:	08009ed5 	.word	0x08009ed5
 8009e48:	08009e79 	.word	0x08009e79
 8009e4c:	08009e83 	.word	0x08009e83
 8009e50:	08009e8d 	.word	0x08009e8d
 8009e54:	08009ecb 	.word	0x08009ecb
 8009e58:	0800a4e3 	.word	0x0800a4e3
 8009e5c:	0800a4e3 	.word	0x0800a4e3
 8009e60:	0800a4e3 	.word	0x0800a4e3
 8009e64:	0800a4cb 	.word	0x0800a4cb
 8009e68:	0800a04f 	.word	0x0800a04f
 8009e6c:	08009f31 	.word	0x08009f31
 8009e70:	0800a087 	.word	0x0800a087
 8009e74:	0800a29b 	.word	0x0800a29b
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 8009e78:	883b      	ldrh	r3, [r7, #0]
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	719a      	strb	r2, [r3, #6]
        break;
 8009e80:	e334      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 8009e82:	883b      	ldrh	r3, [r7, #0]
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	70da      	strb	r2, [r3, #3]
        break;
 8009e8a:	e32f      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 8009e8c:	883b      	ldrh	r3, [r7, #0]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	715a      	strb	r2, [r3, #5]
        break;
 8009e94:	e32a      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 8009e96:	883b      	ldrh	r3, [r7, #0]
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	779a      	strb	r2, [r3, #30]
        break;
 8009e9e:	e325      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8009ea0:	883b      	ldrh	r3, [r7, #0]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d00a      	beq.n	8009ebe <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 8009ea8:	883b      	ldrh	r3, [r7, #0]
 8009eaa:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d006      	beq.n	8009ebe <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 8009eb0:	883b      	ldrh	r3, [r7, #0]
 8009eb2:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d002      	beq.n	8009ebe <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009eb8:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009ebc:	e317      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 8009ebe:	883b      	ldrh	r3, [r7, #0]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	811a      	strh	r2, [r3, #8]
        break;
 8009ec8:	e310      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 8009eca:	883b      	ldrh	r3, [r7, #0]
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	709a      	strb	r2, [r3, #2]
        break;
 8009ed2:	e30b      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 8009ed4:	883b      	ldrh	r3, [r7, #0]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 8009ede:	e305      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	883a      	ldrh	r2, [r7, #0]
 8009ee4:	821a      	strh	r2, [r3, #16]
        break;
 8009ee6:	e301      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	883a      	ldrh	r2, [r7, #0]
 8009eec:	825a      	strh	r2, [r3, #18]
        break;
 8009eee:	e2fd      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 8009ef0:	883b      	ldrh	r3, [r7, #0]
 8009ef2:	f644 72af 	movw	r2, #20399	@ 0x4faf
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d802      	bhi.n	8009f00 <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009efa:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009efe:	e2f6      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	883a      	ldrh	r2, [r7, #0]
 8009f04:	829a      	strh	r2, [r3, #20]
        break;
 8009f06:	e2f1      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 8009f08:	883b      	ldrh	r3, [r7, #0]
 8009f0a:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d802      	bhi.n	8009f18 <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009f12:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009f16:	e2ea      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	883a      	ldrh	r2, [r7, #0]
 8009f1c:	82da      	strh	r2, [r3, #22]
        break;
 8009f1e:	e2e5      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	883a      	ldrh	r2, [r7, #0]
 8009f24:	831a      	strh	r2, [r3, #24]
        break;
 8009f26:	e2e1      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	883a      	ldrh	r2, [r7, #0]
 8009f2c:	835a      	strh	r2, [r3, #26]
        break;
 8009f2e:	e2dd      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8009f30:	883b      	ldrh	r3, [r7, #0]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d105      	bne.n	8009f48 <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8009f3c:	883b      	ldrh	r3, [r7, #0]
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009f48:	f244 0323 	movw	r3, #16419	@ 0x4023
 8009f4c:	e2cf      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 8009f4e:	883b      	ldrh	r3, [r7, #0]
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 8009f58:	e2c8      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	883a      	ldrh	r2, [r7, #0]
 8009f5e:	839a      	strh	r2, [r3, #28]
        break;
 8009f60:	e2c4      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 8009f62:	883b      	ldrh	r3, [r7, #0]
 8009f64:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f66:	d902      	bls.n	8009f6e <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009f68:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009f6c:	e2bf      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 8009f6e:	883b      	ldrh	r3, [r7, #0]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	711a      	strb	r2, [r3, #4]
        break;
 8009f76:	e2b9      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 8009f78:	883b      	ldrh	r3, [r7, #0]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d008      	beq.n	8009f90 <phacDiscLoop_Sw_SetConfig+0x394>
 8009f7e:	883b      	ldrh	r3, [r7, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d005      	beq.n	8009f90 <phacDiscLoop_Sw_SetConfig+0x394>
 8009f84:	883b      	ldrh	r3, [r7, #0]
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d002      	beq.n	8009f90 <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009f8a:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009f8e:	e2ae      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 8009f90:	883b      	ldrh	r3, [r7, #0]
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9e:	883a      	ldrh	r2, [r7, #0]
 8009fa0:	215a      	movs	r1, #90	@ 0x5a
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f006 f90c 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	81fb      	strh	r3, [r7, #14]
 8009fac:	89fb      	ldrh	r3, [r7, #14]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <phacDiscLoop_Sw_SetConfig+0x3ba>
 8009fb2:	89fb      	ldrh	r3, [r7, #14]
 8009fb4:	e29b      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fba:	883a      	ldrh	r2, [r7, #0]
 8009fbc:	2106      	movs	r1, #6
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f00e fd4e 	bl	8018a60 <phpalI14443p4_Sw_SetConfig>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	81fb      	strh	r3, [r7, #14]
 8009fc8:	89fb      	ldrh	r3, [r7, #14]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <phacDiscLoop_Sw_SetConfig+0x3d6>
 8009fce:	89fb      	ldrh	r3, [r7, #14]
 8009fd0:	e28d      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd6:	883a      	ldrh	r2, [r7, #0]
 8009fd8:	2101      	movs	r1, #1
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f00c fd12 	bl	8016a04 <phpalI14443p3b_Sw_SetConfig>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	81fb      	strh	r3, [r7, #14]
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <phacDiscLoop_Sw_SetConfig+0x3f2>
 8009fea:	89fb      	ldrh	r3, [r7, #14]
 8009fec:	e27f      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff2:	883a      	ldrh	r2, [r7, #0]
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f00b fecf 	bl	8015d9a <phpalI14443p3a_Sw_SetConfig>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	81fb      	strh	r3, [r7, #14]
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <phacDiscLoop_Sw_SetConfig+0x40e>
 800a006:	89fb      	ldrh	r3, [r7, #14]
 800a008:	e271      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a00e:	883a      	ldrh	r2, [r7, #0]
 800a010:	2101      	movs	r1, #1
 800a012:	4618      	mov	r0, r3
 800a014:	f00e fdf6 	bl	8018c04 <phpalI14443p4a_Sw_SetConfig>
 800a018:	4603      	mov	r3, r0
 800a01a:	81fb      	strh	r3, [r7, #14]
 800a01c:	89fb      	ldrh	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <phacDiscLoop_Sw_SetConfig+0x42a>
 800a022:	89fb      	ldrh	r3, [r7, #14]
 800a024:	e263      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02a:	883a      	ldrh	r2, [r7, #0]
 800a02c:	210a      	movs	r1, #10
 800a02e:	4618      	mov	r0, r3
 800a030:	f010 ff8a 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 800a034:	4603      	mov	r3, r0
 800a036:	81fb      	strh	r3, [r7, #14]
 800a038:	89fb      	ldrh	r3, [r7, #14]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 8255 	beq.w	800a4ea <phacDiscLoop_Sw_SetConfig+0x8ee>
 800a040:	89fb      	ldrh	r3, [r7, #14]
 800a042:	e254      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 800a044:	883b      	ldrh	r3, [r7, #0]
 800a046:	b2da      	uxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	77da      	strb	r2, [r3, #31]
        break;
 800a04c:	e24e      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 800a04e:	883b      	ldrh	r3, [r7, #0]
 800a050:	2b08      	cmp	r3, #8
 800a052:	d005      	beq.n	800a060 <phacDiscLoop_Sw_SetConfig+0x464>
 800a054:	883b      	ldrh	r3, [r7, #0]
 800a056:	2b08      	cmp	r3, #8
 800a058:	d002      	beq.n	800a060 <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a05a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a05e:	e246      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 800a060:	883b      	ldrh	r3, [r7, #0]
 800a062:	b2da      	uxtb	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 800a06a:	e23f      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a06c:	883b      	ldrh	r3, [r7, #0]
 800a06e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a076:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a07a:	e238      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 800a07c:	883b      	ldrh	r3, [r7, #0]
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	729a      	strb	r2, [r3, #10]
        break;
 800a084:	e232      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 800a086:	883b      	ldrh	r3, [r7, #0]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d006      	beq.n	800a09c <phacDiscLoop_Sw_SetConfig+0x4a0>
 800a08e:	883b      	ldrh	r3, [r7, #0]
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a096:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a09a:	e228      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 800a09c:	883b      	ldrh	r3, [r7, #0]
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a0a4:	7b7b      	ldrb	r3, [r7, #13]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a0aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a0ae:	e21e      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 800a0b0:	7b7a      	ldrb	r2, [r7, #13]
 800a0b2:	883b      	ldrh	r3, [r7, #0]
 800a0b4:	b2d8      	uxtb	r0, r3
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	440b      	add	r3, r1
 800a0c0:	336c      	adds	r3, #108	@ 0x6c
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	701a      	strb	r2, [r3, #0]
        break;
 800a0c6:	e211      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 800a0c8:	883b      	ldrh	r3, [r7, #0]
 800a0ca:	2b0c      	cmp	r3, #12
 800a0cc:	d902      	bls.n	800a0d4 <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a0ce:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a0d2:	e20c      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 800a0d4:	883b      	ldrh	r3, [r7, #0]
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        break;
 800a0de:	e205      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 800a0e0:	883b      	ldrh	r3, [r7, #0]
 800a0e2:	2b0e      	cmp	r3, #14
 800a0e4:	d902      	bls.n	800a0ec <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a0e6:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a0ea:	e200      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 800a0ec:	883b      	ldrh	r3, [r7, #0]
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        break;
 800a0f6:	e1f9      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 800a0f8:	883b      	ldrh	r3, [r7, #0]
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        break;
 800a102:	e1f3      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800a104:	883b      	ldrh	r3, [r7, #0]
 800a106:	2b03      	cmp	r3, #3
 800a108:	d807      	bhi.n	800a11a <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800a110:	2b01      	cmp	r3, #1
 800a112:	d105      	bne.n	800a120 <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800a114:	883b      	ldrh	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a11a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a11e:	e1e6      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 800a120:	883b      	ldrh	r3, [r7, #0]
 800a122:	b2da      	uxtb	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        break;
 800a12a:	e1df      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800a12c:	883b      	ldrh	r3, [r7, #0]
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d807      	bhi.n	800a142 <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d105      	bne.n	800a148 <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800a13c:	883b      	ldrh	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a142:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a146:	e1d2      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 800a148:	883b      	ldrh	r3, [r7, #0]
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        break;
 800a152:	e1cb      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 800a154:	883b      	ldrh	r3, [r7, #0]
 800a156:	2b0e      	cmp	r3, #14
 800a158:	d902      	bls.n	800a160 <phacDiscLoop_Sw_SetConfig+0x564>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a15a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a15e:	e1c6      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid = (uint8_t)wValue;
 800a160:	883b      	ldrh	r3, [r7, #0]
 800a162:	b2da      	uxtb	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 800a16a:	e1bf      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 800a16c:	883b      	ldrh	r3, [r7, #0]
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d902      	bls.n	800a178 <phacDiscLoop_Sw_SetConfig+0x57c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a172:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a176:	e1ba      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri = (uint8_t)wValue;
 800a178:	883b      	ldrh	r3, [r7, #0]
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 800a182:	e1b3      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        if (wValue == 0U)
 800a184:	883b      	ldrh	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d104      	bne.n	800a194 <phacDiscLoop_Sw_SetConfig+0x598>
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_OFF;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        }
        else
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
        }
        break;
 800a192:	e1ab      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 800a19c:	e1a6      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        if (wValue > 255U)
 800a19e:	883b      	ldrh	r3, [r7, #0]
 800a1a0:	2bff      	cmp	r3, #255	@ 0xff
 800a1a2:	d902      	bls.n	800a1aa <phacDiscLoop_Sw_SetConfig+0x5ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a1a4:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a1a8:	e1a1      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad = (uint8_t)wValue;
 800a1aa:	883b      	ldrh	r3, [r7, #0]
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 800a1b4:	e19a      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 800a1b6:	883b      	ldrh	r3, [r7, #0]
 800a1b8:	2b30      	cmp	r3, #48	@ 0x30
 800a1ba:	d902      	bls.n	800a1c2 <phacDiscLoop_Sw_SetConfig+0x5c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a1bc:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a1c0:	e195      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength = (uint8_t)wValue;
 800a1c2:	883b      	ldrh	r3, [r7, #0]
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        break;
 800a1cc:	e18e      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a1ce:	883b      	ldrh	r3, [r7, #0]
 800a1d0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <phacDiscLoop_Sw_SetConfig+0x5e2>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a1d8:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a1dc:	e187      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 800a1de:	883b      	ldrh	r3, [r7, #0]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	72da      	strb	r2, [r3, #11]
    break;
 800a1e6:	e181      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 800a1e8:	883b      	ldrh	r3, [r7, #0]
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
      break;
 800a1f2:	e17b      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 800a1f4:	883b      	ldrh	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d104      	bne.n	800a204 <phacDiscLoop_Sw_SetConfig+0x608>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 800a202:	e173      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      break;
 800a20c:	e16e      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 800a20e:	883b      	ldrh	r3, [r7, #0]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d902      	bls.n	800a21a <phacDiscLoop_Sw_SetConfig+0x61e>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a214:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a218:	e169      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 800a21a:	883b      	ldrh	r3, [r7, #0]
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
      break;
 800a224:	e162      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 800a226:	883b      	ldrh	r3, [r7, #0]
 800a228:	2b0e      	cmp	r3, #14
 800a22a:	d902      	bls.n	800a232 <phacDiscLoop_Sw_SetConfig+0x636>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a22c:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a230:	e15d      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 800a232:	883b      	ldrh	r3, [r7, #0]
 800a234:	b2da      	uxtb	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
      break;
 800a23c:	e156      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 800a23e:	883b      	ldrh	r3, [r7, #0]
 800a240:	b2da      	uxtb	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
        break;
 800a248:	e150      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800a24a:	883b      	ldrh	r3, [r7, #0]
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d807      	bhi.n	800a260 <phacDiscLoop_Sw_SetConfig+0x664>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800a256:	2b01      	cmp	r3, #1
 800a258:	d105      	bne.n	800a266 <phacDiscLoop_Sw_SetConfig+0x66a>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800a25a:	883b      	ldrh	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <phacDiscLoop_Sw_SetConfig+0x66a>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a260:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a264:	e143      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 800a266:	883b      	ldrh	r3, [r7, #0]
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
      break;
 800a270:	e13c      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800a272:	883b      	ldrh	r3, [r7, #0]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d807      	bhi.n	800a288 <phacDiscLoop_Sw_SetConfig+0x68c>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d105      	bne.n	800a28e <phacDiscLoop_Sw_SetConfig+0x692>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800a282:	883b      	ldrh	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <phacDiscLoop_Sw_SetConfig+0x692>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a288:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a28c:	e12f      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 800a28e:	883b      	ldrh	r3, [r7, #0]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
      break;
 800a298:	e128      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 800a29a:	883b      	ldrh	r3, [r7, #0]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d006      	beq.n	800a2b0 <phacDiscLoop_Sw_SetConfig+0x6b4>
 800a2a2:	883b      	ldrh	r3, [r7, #0]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <phacDiscLoop_Sw_SetConfig+0x6b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a2aa:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a2ae:	e11e      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 800a2b0:	883b      	ldrh	r3, [r7, #0]
 800a2b2:	0a1b      	lsrs	r3, r3, #8
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a2b8:	7b7b      	ldrb	r3, [r7, #13]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <phacDiscLoop_Sw_SetConfig+0x6c8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a2be:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a2c2:	e114      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 800a2c4:	7b7a      	ldrb	r2, [r7, #13]
 800a2c6:	883b      	ldrh	r3, [r7, #0]
 800a2c8:	b2d8      	uxtb	r0, r3
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	33dc      	adds	r3, #220	@ 0xdc
 800a2d8:	4602      	mov	r2, r0
 800a2da:	701a      	strb	r2, [r3, #0]
        break;
 800a2dc:	e106      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 800a2de:	883b      	ldrh	r3, [r7, #0]
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 800a2e8:	e100      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a2ea:	883b      	ldrh	r3, [r7, #0]
 800a2ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <phacDiscLoop_Sw_SetConfig+0x6fe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a2f4:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a2f8:	e0f9      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 800a2fa:	883b      	ldrh	r3, [r7, #0]
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	731a      	strb	r2, [r3, #12]
        break;
 800a302:	e0f3      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 800a304:	883b      	ldrh	r3, [r7, #0]
 800a306:	2b0e      	cmp	r3, #14
 800a308:	d902      	bls.n	800a310 <phacDiscLoop_Sw_SetConfig+0x714>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a30a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a30e:	e0ee      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid = (uint8_t)wValue;
 800a310:	883b      	ldrh	r3, [r7, #0]
 800a312:	b2da      	uxtb	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
        break;
 800a31a:	e0e7      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 800a31c:	883b      	ldrh	r3, [r7, #0]
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d902      	bls.n	800a328 <phacDiscLoop_Sw_SetConfig+0x72c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a322:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a326:	e0e2      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri = (uint8_t)wValue;
 800a328:	883b      	ldrh	r3, [r7, #0]
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
        break;
 800a332:	e0db      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable = (uint8_t)wValue;
 800a334:	883b      	ldrh	r3, [r7, #0]
 800a336:	b2da      	uxtb	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
        break;
 800a33e:	e0d5      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        if (wValue > 255U)
 800a340:	883b      	ldrh	r3, [r7, #0]
 800a342:	2bff      	cmp	r3, #255	@ 0xff
 800a344:	d902      	bls.n	800a34c <phacDiscLoop_Sw_SetConfig+0x750>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a346:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a34a:	e0d0      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad = (uint8_t)wValue;
 800a34c:	883b      	ldrh	r3, [r7, #0]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
        break;
 800a356:	e0c9      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 800a358:	883b      	ldrh	r3, [r7, #0]
 800a35a:	2b30      	cmp	r3, #48	@ 0x30
 800a35c:	d902      	bls.n	800a364 <phacDiscLoop_Sw_SetConfig+0x768>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a35e:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a362:	e0c4      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength = (uint8_t)wValue;
 800a364:	883b      	ldrh	r3, [r7, #0]
 800a366:	b2da      	uxtb	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
        break;
 800a36e:	e0bd      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 800a370:	883b      	ldrh	r3, [r7, #0]
 800a372:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <phacDiscLoop_Sw_SetConfig+0x784>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a37a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a37e:	e0b6      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 800a380:	883b      	ldrh	r3, [r7, #0]
 800a382:	b2da      	uxtb	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	739a      	strb	r2, [r3, #14]
        break;
 800a388:	e0b0      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 800a38a:	883b      	ldrh	r3, [r7, #0]
 800a38c:	2b0d      	cmp	r3, #13
 800a38e:	d005      	beq.n	800a39c <phacDiscLoop_Sw_SetConfig+0x7a0>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 800a390:	883b      	ldrh	r3, [r7, #0]
 800a392:	2b0c      	cmp	r3, #12
 800a394:	d002      	beq.n	800a39c <phacDiscLoop_Sw_SetConfig+0x7a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a396:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a39a:	e0a8      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 800a39c:	883b      	ldrh	r3, [r7, #0]
 800a39e:	2b0d      	cmp	r3, #13
 800a3a0:	d109      	bne.n	800a3b6 <phacDiscLoop_Sw_SetConfig+0x7ba>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 800a3b4:	e09a      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800a3bc:	f023 0302 	bic.w	r3, r3, #2
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        break;
 800a3c8:	e090      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 800a3ca:	883b      	ldrh	r3, [r7, #0]
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d008      	beq.n	800a3e2 <phacDiscLoop_Sw_SetConfig+0x7e6>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 800a3d0:	883b      	ldrh	r3, [r7, #0]
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d005      	beq.n	800a3e2 <phacDiscLoop_Sw_SetConfig+0x7e6>
 800a3d6:	883b      	ldrh	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <phacDiscLoop_Sw_SetConfig+0x7e6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a3dc:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a3e0:	e085      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e6:	f107 020a 	add.w	r2, r7, #10
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f010 ff81 	bl	801b2f4 <phpalSli15693_Sw_GetConfig>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	81fb      	strh	r3, [r7, #14]
 800a3f6:	89fb      	ldrh	r3, [r7, #14]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <phacDiscLoop_Sw_SetConfig+0x804>
 800a3fc:	89fb      	ldrh	r3, [r7, #14]
 800a3fe:	e076      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 800a400:	883b      	ldrh	r3, [r7, #0]
 800a402:	2b10      	cmp	r3, #16
 800a404:	d10a      	bne.n	800a41c <phacDiscLoop_Sw_SetConfig+0x820>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 800a406:	897b      	ldrh	r3, [r7, #10]
 800a408:	f043 0310 	orr.w	r3, r3, #16
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 800a410:	897b      	ldrh	r3, [r7, #10]
 800a412:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a416:	b29b      	uxth	r3, r3
 800a418:	817b      	strh	r3, [r7, #10]
 800a41a:	e017      	b.n	800a44c <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 800a41c:	883b      	ldrh	r3, [r7, #0]
 800a41e:	2b20      	cmp	r3, #32
 800a420:	d10a      	bne.n	800a438 <phacDiscLoop_Sw_SetConfig+0x83c>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 800a422:	897b      	ldrh	r3, [r7, #10]
 800a424:	f043 0320 	orr.w	r3, r3, #32
 800a428:	b29b      	uxth	r3, r3
 800a42a:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 800a42c:	897b      	ldrh	r3, [r7, #10]
 800a42e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800a432:	b29b      	uxth	r3, r3
 800a434:	817b      	strh	r3, [r7, #10]
 800a436:	e009      	b.n	800a44c <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 800a438:	897b      	ldrh	r3, [r7, #10]
 800a43a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a43e:	b29b      	uxth	r3, r3
 800a440:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 800a442:	897b      	ldrh	r3, [r7, #10]
 800a444:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800a448:	b29b      	uxth	r3, r3
 800a44a:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a450:	897a      	ldrh	r2, [r7, #10]
 800a452:	2100      	movs	r1, #0
 800a454:	4618      	mov	r0, r3
 800a456:	f010 fd77 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 800a45a:	4603      	mov	r3, r0
 800a45c:	81fb      	strh	r3, [r7, #14]
 800a45e:	89fb      	ldrh	r3, [r7, #14]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <phacDiscLoop_Sw_SetConfig+0x86c>
 800a464:	89fb      	ldrh	r3, [r7, #14]
 800a466:	e042      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 800a468:	883b      	ldrh	r3, [r7, #0]
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
        break;
 800a472:	e03b      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 800a474:	883b      	ldrh	r3, [r7, #0]
 800a476:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <phacDiscLoop_Sw_SetConfig+0x888>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a47e:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a482:	e034      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 800a484:	883b      	ldrh	r3, [r7, #0]
 800a486:	b2da      	uxtb	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	73da      	strb	r2, [r3, #15]
        break;
 800a48c:	e02e      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 800a48e:	883b      	ldrh	r3, [r7, #0]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d005      	beq.n	800a4a0 <phacDiscLoop_Sw_SetConfig+0x8a4>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 800a494:	883b      	ldrh	r3, [r7, #0]
 800a496:	2b03      	cmp	r3, #3
 800a498:	d002      	beq.n	800a4a0 <phacDiscLoop_Sw_SetConfig+0x8a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a49a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a49e:	e026      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 800a4a0:	883b      	ldrh	r3, [r7, #0]
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        break;
 800a4aa:	e01f      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 800a4ac:	883b      	ldrh	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <phacDiscLoop_Sw_SetConfig+0x8c2>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 800a4b2:	883b      	ldrh	r3, [r7, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d002      	beq.n	800a4be <phacDiscLoop_Sw_SetConfig+0x8c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a4b8:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a4bc:	e017      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 800a4be:	883b      	ldrh	r3, [r7, #0]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        break;
 800a4c8:	e010      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 800a4ca:	883b      	ldrh	r3, [r7, #0]
 800a4cc:	2bff      	cmp	r3, #255	@ 0xff
 800a4ce:	d902      	bls.n	800a4d6 <phacDiscLoop_Sw_SetConfig+0x8da>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a4d0:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a4d4:	e00b      	b.n	800a4ee <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 800a4d6:	883b      	ldrh	r3, [r7, #0]
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
        break;
 800a4e0:	e004      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a4e2:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a4e6:	81fb      	strh	r3, [r7, #14]
 800a4e8:	e000      	b.n	800a4ec <phacDiscLoop_Sw_SetConfig+0x8f0>
        break;
 800a4ea:	bf00      	nop
    }

    return status;
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop

0800a4f8 <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	460b      	mov	r3, r1
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800a506:	2300      	movs	r3, #0
 800a508:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 800a50a:	897b      	ldrh	r3, [r7, #10]
 800a50c:	2b92      	cmp	r3, #146	@ 0x92
 800a50e:	f200 82a4 	bhi.w	800aa5a <phacDiscLoop_Sw_GetConfig+0x562>
 800a512:	a201      	add	r2, pc, #4	@ (adr r2, 800a518 <phacDiscLoop_Sw_GetConfig+0x20>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a821 	.word	0x0800a821
 800a51c:	0800a8df 	.word	0x0800a8df
 800a520:	0800a92d 	.word	0x0800a92d
 800a524:	0800a937 	.word	0x0800a937
 800a528:	0800a9bd 	.word	0x0800a9bd
 800a52c:	0800aa0d 	.word	0x0800aa0d
 800a530:	0800a7fb 	.word	0x0800a7fb
 800a534:	0800aa5b 	.word	0x0800aa5b
 800a538:	0800aa5b 	.word	0x0800aa5b
 800a53c:	0800aa5b 	.word	0x0800aa5b
 800a540:	0800aa5b 	.word	0x0800aa5b
 800a544:	0800aa5b 	.word	0x0800aa5b
 800a548:	0800aa5b 	.word	0x0800aa5b
 800a54c:	0800aa5b 	.word	0x0800aa5b
 800a550:	0800aa5b 	.word	0x0800aa5b
 800a554:	0800aa5b 	.word	0x0800aa5b
 800a558:	0800a839 	.word	0x0800a839
 800a55c:	0800a8f7 	.word	0x0800a8f7
 800a560:	0800a94f 	.word	0x0800a94f
 800a564:	0800a9c7 	.word	0x0800a9c7
 800a568:	0800aa17 	.word	0x0800aa17
 800a56c:	0800aa5b 	.word	0x0800aa5b
 800a570:	0800aa5b 	.word	0x0800aa5b
 800a574:	0800aa5b 	.word	0x0800aa5b
 800a578:	0800aa5b 	.word	0x0800aa5b
 800a57c:	0800aa5b 	.word	0x0800aa5b
 800a580:	0800aa5b 	.word	0x0800aa5b
 800a584:	0800aa5b 	.word	0x0800aa5b
 800a588:	0800aa5b 	.word	0x0800aa5b
 800a58c:	0800aa5b 	.word	0x0800aa5b
 800a590:	0800aa5b 	.word	0x0800aa5b
 800a594:	0800aa5b 	.word	0x0800aa5b
 800a598:	0800a82b 	.word	0x0800a82b
 800a59c:	0800a8e9 	.word	0x0800a8e9
 800a5a0:	0800a941 	.word	0x0800a941
 800a5a4:	0800a9d3 	.word	0x0800a9d3
 800a5a8:	0800aa23 	.word	0x0800aa23
 800a5ac:	0800a903 	.word	0x0800a903
 800a5b0:	0800aa5b 	.word	0x0800aa5b
 800a5b4:	0800aa5b 	.word	0x0800aa5b
 800a5b8:	0800aa5b 	.word	0x0800aa5b
 800a5bc:	0800aa5b 	.word	0x0800aa5b
 800a5c0:	0800aa5b 	.word	0x0800aa5b
 800a5c4:	0800aa5b 	.word	0x0800aa5b
 800a5c8:	0800aa5b 	.word	0x0800aa5b
 800a5cc:	0800aa5b 	.word	0x0800aa5b
 800a5d0:	0800aa5b 	.word	0x0800aa5b
 800a5d4:	0800aa5b 	.word	0x0800aa5b
 800a5d8:	0800aa5b 	.word	0x0800aa5b
 800a5dc:	0800aa5b 	.word	0x0800aa5b
 800a5e0:	0800aa5b 	.word	0x0800aa5b
 800a5e4:	0800aa5b 	.word	0x0800aa5b
 800a5e8:	0800aa5b 	.word	0x0800aa5b
 800a5ec:	0800a911 	.word	0x0800a911
 800a5f0:	0800a91f 	.word	0x0800a91f
 800a5f4:	0800aa5b 	.word	0x0800aa5b
 800a5f8:	0800aa5b 	.word	0x0800aa5b
 800a5fc:	0800aa5b 	.word	0x0800aa5b
 800a600:	0800aa5b 	.word	0x0800aa5b
 800a604:	0800aa5b 	.word	0x0800aa5b
 800a608:	0800aa5b 	.word	0x0800aa5b
 800a60c:	0800aa5b 	.word	0x0800aa5b
 800a610:	0800aa5b 	.word	0x0800aa5b
 800a614:	0800aa5b 	.word	0x0800aa5b
 800a618:	0800a845 	.word	0x0800a845
 800a61c:	0800a853 	.word	0x0800a853
 800a620:	0800a861 	.word	0x0800a861
 800a624:	0800a87d 	.word	0x0800a87d
 800a628:	0800a86f 	.word	0x0800a86f
 800a62c:	0800a88b 	.word	0x0800a88b
 800a630:	0800a899 	.word	0x0800a899
 800a634:	0800a8a7 	.word	0x0800a8a7
 800a638:	0800a8b5 	.word	0x0800a8b5
 800a63c:	0800a8c3 	.word	0x0800a8c3
 800a640:	0800aa5b 	.word	0x0800aa5b
 800a644:	0800aa5b 	.word	0x0800aa5b
 800a648:	0800aa5b 	.word	0x0800aa5b
 800a64c:	0800aa5b 	.word	0x0800aa5b
 800a650:	0800aa5b 	.word	0x0800aa5b
 800a654:	0800aa5b 	.word	0x0800aa5b
 800a658:	0800a8d1 	.word	0x0800a8d1
 800a65c:	0800a969 	.word	0x0800a969
 800a660:	0800a977 	.word	0x0800a977
 800a664:	0800a985 	.word	0x0800a985
 800a668:	0800a993 	.word	0x0800a993
 800a66c:	0800a9a1 	.word	0x0800a9a1
 800a670:	0800a9af 	.word	0x0800a9af
 800a674:	0800a95b 	.word	0x0800a95b
 800a678:	0800aa5b 	.word	0x0800aa5b
 800a67c:	0800aa5b 	.word	0x0800aa5b
 800a680:	0800aa5b 	.word	0x0800aa5b
 800a684:	0800aa5b 	.word	0x0800aa5b
 800a688:	0800aa5b 	.word	0x0800aa5b
 800a68c:	0800aa5b 	.word	0x0800aa5b
 800a690:	0800aa5b 	.word	0x0800aa5b
 800a694:	0800aa5b 	.word	0x0800aa5b
 800a698:	0800a9e1 	.word	0x0800a9e1
 800a69c:	0800a9ff 	.word	0x0800a9ff
 800a6a0:	0800aa5b 	.word	0x0800aa5b
 800a6a4:	0800aa5b 	.word	0x0800aa5b
 800a6a8:	0800aa5b 	.word	0x0800aa5b
 800a6ac:	0800aa5b 	.word	0x0800aa5b
 800a6b0:	0800aa5b 	.word	0x0800aa5b
 800a6b4:	0800aa5b 	.word	0x0800aa5b
 800a6b8:	0800aa5b 	.word	0x0800aa5b
 800a6bc:	0800aa5b 	.word	0x0800aa5b
 800a6c0:	0800aa5b 	.word	0x0800aa5b
 800a6c4:	0800aa5b 	.word	0x0800aa5b
 800a6c8:	0800aa5b 	.word	0x0800aa5b
 800a6cc:	0800aa5b 	.word	0x0800aa5b
 800a6d0:	0800aa5b 	.word	0x0800aa5b
 800a6d4:	0800aa5b 	.word	0x0800aa5b
 800a6d8:	0800aa31 	.word	0x0800aa31
 800a6dc:	0800aa3f 	.word	0x0800aa3f
 800a6e0:	0800aa5b 	.word	0x0800aa5b
 800a6e4:	0800aa5b 	.word	0x0800aa5b
 800a6e8:	0800aa5b 	.word	0x0800aa5b
 800a6ec:	0800aa5b 	.word	0x0800aa5b
 800a6f0:	0800aa5b 	.word	0x0800aa5b
 800a6f4:	0800aa5b 	.word	0x0800aa5b
 800a6f8:	0800aa5b 	.word	0x0800aa5b
 800a6fc:	0800aa5b 	.word	0x0800aa5b
 800a700:	0800aa5b 	.word	0x0800aa5b
 800a704:	0800aa5b 	.word	0x0800aa5b
 800a708:	0800aa5b 	.word	0x0800aa5b
 800a70c:	0800aa5b 	.word	0x0800aa5b
 800a710:	0800aa5b 	.word	0x0800aa5b
 800a714:	0800aa5b 	.word	0x0800aa5b
 800a718:	0800a7e5 	.word	0x0800a7e5
 800a71c:	0800a7bf 	.word	0x0800a7bf
 800a720:	0800aa5b 	.word	0x0800aa5b
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a795 	.word	0x0800a795
 800a72c:	0800a7f1 	.word	0x0800a7f1
 800a730:	0800a7cd 	.word	0x0800a7cd
 800a734:	0800a7b1 	.word	0x0800a7b1
 800a738:	0800a7a3 	.word	0x0800a7a3
 800a73c:	0800a771 	.word	0x0800a771
 800a740:	0800a77d 	.word	0x0800a77d
 800a744:	0800a765 	.word	0x0800a765
 800a748:	0800a7d9 	.word	0x0800a7d9
 800a74c:	0800aa5b 	.word	0x0800aa5b
 800a750:	0800aa5b 	.word	0x0800aa5b
 800a754:	0800aa5b 	.word	0x0800aa5b
 800a758:	0800aa4d 	.word	0x0800aa4d
 800a75c:	0800a805 	.word	0x0800a805
 800a760:	0800a813 	.word	0x0800a813
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	795b      	ldrb	r3, [r3, #5]
 800a768:	461a      	mov	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	801a      	strh	r2, [r3, #0]
        break;
 800a76e:	e177      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	799b      	ldrb	r3, [r3, #6]
 800a774:	461a      	mov	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	801a      	strh	r2, [r3, #0]
        break;
 800a77a:	e171      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	78db      	ldrb	r3, [r3, #3]
 800a780:	461a      	mov	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	801a      	strh	r2, [r3, #0]
        break;
 800a786:	e16b      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	7f9b      	ldrb	r3, [r3, #30]
 800a78c:	461a      	mov	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	801a      	strh	r2, [r3, #0]
        break;
 800a792:	e165      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	891b      	ldrh	r3, [r3, #8]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	801a      	strh	r2, [r3, #0]
        break;
 800a7a0:	e15e      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	801a      	strh	r2, [r3, #0]
        break;
 800a7ae:	e157      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	801a      	strh	r2, [r3, #0]
        break;
 800a7bc:	e150      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	801a      	strh	r2, [r3, #0]
         break;
 800a7ca:	e149      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	791b      	ldrb	r3, [r3, #4]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	801a      	strh	r2, [r3, #0]
        break;
 800a7d6:	e143      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	789b      	ldrb	r3, [r3, #2]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	801a      	strh	r2, [r3, #0]
        break;
 800a7e2:	e13d      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	7fdb      	ldrb	r3, [r3, #31]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	801a      	strh	r2, [r3, #0]
        break;
 800a7ee:	e137      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	801a      	strh	r2, [r3, #0]
        break;
 800a7f8:	e132      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	8b9a      	ldrh	r2, [r3, #28]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	801a      	strh	r2, [r3, #0]
        break;
 800a802:	e12d      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a80a:	461a      	mov	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	801a      	strh	r2, [r3, #0]
        break;
 800a810:	e126      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a818:	461a      	mov	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	801a      	strh	r2, [r3, #0]
        break;
 800a81e:	e11f      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	8a1a      	ldrh	r2, [r3, #16]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	801a      	strh	r2, [r3, #0]
        break;
 800a828:	e11a      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a830:	461a      	mov	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	801a      	strh	r2, [r3, #0]
        break;
 800a836:	e113      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	7a9b      	ldrb	r3, [r3, #10]
 800a83c:	461a      	mov	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	801a      	strh	r2, [r3, #0]
        break;
 800a842:	e10d      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a84a:	461a      	mov	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	801a      	strh	r2, [r3, #0]
        break;
 800a850:	e106      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800a858:	461a      	mov	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	801a      	strh	r2, [r3, #0]
        break;
 800a85e:	e0ff      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800a866:	461a      	mov	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	801a      	strh	r2, [r3, #0]
        break;
 800a86c:	e0f8      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a874:	461a      	mov	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	801a      	strh	r2, [r3, #0]
        break;
 800a87a:	e0f1      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800a882:	461a      	mov	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	801a      	strh	r2, [r3, #0]
        break;
 800a888:	e0ea      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a890:	461a      	mov	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	801a      	strh	r2, [r3, #0]
        break;
 800a896:	e0e3      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800a89e:	461a      	mov	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	801a      	strh	r2, [r3, #0]
        break;
 800a8a4:	e0dc      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	801a      	strh	r2, [r3, #0]
        break;
 800a8b2:	e0d5      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	801a      	strh	r2, [r3, #0]
        break;
 800a8c0:	e0ce      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	801a      	strh	r2, [r3, #0]
        break;
 800a8ce:	e0c7      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	801a      	strh	r2, [r3, #0]
        break;
 800a8dc:	e0c0      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	8a5a      	ldrh	r2, [r3, #18]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	801a      	strh	r2, [r3, #0]
        break;
 800a8e6:	e0bb      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	801a      	strh	r2, [r3, #0]
        break;
 800a8f4:	e0b4      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	7adb      	ldrb	r3, [r3, #11]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	801a      	strh	r2, [r3, #0]
        break;
 800a900:	e0ae      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800a908:	461a      	mov	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	801a      	strh	r2, [r3, #0]
        break;
 800a90e:	e0a7      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	801a      	strh	r2, [r3, #0]
        break;
 800a91c:	e0a0      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800a924:	461a      	mov	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	801a      	strh	r2, [r3, #0]
        break;
 800a92a:	e099      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8a9a      	ldrh	r2, [r3, #20]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	801a      	strh	r2, [r3, #0]
         break;
 800a934:	e094      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8ada      	ldrh	r2, [r3, #22]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	801a      	strh	r2, [r3, #0]
         break;
 800a93e:	e08f      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a946:	461a      	mov	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	801a      	strh	r2, [r3, #0]
        break;
 800a94c:	e088      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	7b1b      	ldrb	r3, [r3, #12]
 800a952:	461a      	mov	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	801a      	strh	r2, [r3, #0]
        break;
 800a958:	e082      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a960:	461a      	mov	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	801a      	strh	r2, [r3, #0]
         break;
 800a966:	e07b      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a96e:	461a      	mov	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	801a      	strh	r2, [r3, #0]
        break;
 800a974:	e074      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a97c:	461a      	mov	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	801a      	strh	r2, [r3, #0]
        break;
 800a982:	e06d      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800a98a:	461a      	mov	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	801a      	strh	r2, [r3, #0]
        break;
 800a990:	e066      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800a998:	461a      	mov	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	801a      	strh	r2, [r3, #0]
        break;
 800a99e:	e05f      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	801a      	strh	r2, [r3, #0]
        break;
 800a9ac:	e058      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	801a      	strh	r2, [r3, #0]
        break;
 800a9ba:	e051      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8b1a      	ldrh	r2, [r3, #24]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	801a      	strh	r2, [r3, #0]
        break;
 800a9c4:	e04c      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	7b9b      	ldrb	r3, [r3, #14]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	801a      	strh	r2, [r3, #0]
        break;
 800a9d0:	e046      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800a9d8:	461a      	mov	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	801a      	strh	r2, [r3, #0]
        break;
 800a9de:	e03f      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <phacDiscLoop_Sw_GetConfig+0x4fe>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	220d      	movs	r2, #13
 800a9f2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 800a9f4:	e034      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	220c      	movs	r2, #12
 800a9fa:	801a      	strh	r2, [r3, #0]
        break;
 800a9fc:	e030      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800aa04:	461a      	mov	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	801a      	strh	r2, [r3, #0]
        break;
 800aa0a:	e029      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	8b5a      	ldrh	r2, [r3, #26]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	801a      	strh	r2, [r3, #0]
        break;
 800aa14:	e024      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	7bdb      	ldrb	r3, [r3, #15]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	801a      	strh	r2, [r3, #0]
        break;
 800aa20:	e01e      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800aa28:	461a      	mov	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	801a      	strh	r2, [r3, #0]
        break;
 800aa2e:	e017      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800aa36:	461a      	mov	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	801a      	strh	r2, [r3, #0]
        break;
 800aa3c:	e010      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 800aa44:	461a      	mov	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	801a      	strh	r2, [r3, #0]
        break;
 800aa4a:	e009      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800aa52:	461a      	mov	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	801a      	strh	r2, [r3, #0]
        break;
 800aa58:	e002      	b.n	800aa60 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800aa5a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800aa5e:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 800aa60:	8afb      	ldrh	r3, [r7, #22]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop

0800aa70 <phacDiscLoop_Sw_ActivateCard>:
phStatus_t phacDiscLoop_Sw_ActivateCard(
                                        phacDiscLoop_Sw_DataParams_t * pDataParams,
                                        uint8_t bTechType,
                                        uint8_t bTagIndex
                                        )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	70fb      	strb	r3, [r7, #3]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	70bb      	strb	r3, [r7, #2]
    return phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, bTechType, bTagIndex);
 800aa80:	78ba      	ldrb	r2, [r7, #2]
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 ff40 	bl	800b90c <phacDiscLoop_Sw_Int_ActivateDevice>
 800aa8c:	4603      	mov	r3, r0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	737b      	strb	r3, [r7, #13]
 800aaac:	e0ba      	b.n	800ac24 <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aab2:	7b7b      	ldrb	r3, [r7, #13]
 800aab4:	4413      	add	r3, r2
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 800aaba:	7b3b      	ldrb	r3, [r7, #12]
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	f240 80ae 	bls.w	800ac1e <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800aac2:	7b3b      	ldrb	r3, [r7, #12]
 800aac4:	2b05      	cmp	r3, #5
 800aac6:	d106      	bne.n	800aad6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	789b      	ldrb	r3, [r3, #2]
 800aacc:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 80a3 	beq.w	800ac1c <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800aad6:	7b3b      	ldrb	r3, [r7, #12]
 800aad8:	2b05      	cmp	r3, #5
 800aada:	d115      	bne.n	800ab08 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800aae0:	2b20      	cmp	r3, #32
 800aae2:	d111      	bne.n	800ab08 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 800aae4:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 800aae8:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 800aaea:	893b      	ldrh	r3, [r7, #8]
 800aaec:	461a      	mov	r2, r3
 800aaee:	2105      	movs	r1, #5
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7ff f883 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	81fb      	strh	r3, [r7, #14]
 800aafa:	89fb      	ldrh	r3, [r7, #14]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 800ab00:	89fb      	ldrh	r3, [r7, #14]
 800ab02:	e094      	b.n	800ac2e <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 800ab04:	89fb      	ldrh	r3, [r7, #14]
 800ab06:	e092      	b.n	800ac2e <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 800ab08:	7b7b      	ldrb	r3, [r7, #13]
 800ab0a:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 800ab0c:	7afb      	ldrb	r3, [r7, #11]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab16:	7afb      	ldrb	r3, [r7, #11]
 800ab18:	4413      	add	r3, r2
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 800ab1e:	7b3b      	ldrb	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d105      	bne.n	800ab30 <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	789b      	ldrb	r3, [r3, #2]
 800ab28:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d134      	bne.n	800ab9a <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 800ab30:	7b3b      	ldrb	r3, [r7, #12]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d105      	bne.n	800ab42 <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	789b      	ldrb	r3, [r3, #2]
 800ab3a:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d12b      	bne.n	800ab9a <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 800ab42:	7b3b      	ldrb	r3, [r7, #12]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d105      	bne.n	800ab54 <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	789b      	ldrb	r3, [r3, #2]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d122      	bne.n	800ab9a <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 800ab54:	7b3b      	ldrb	r3, [r7, #12]
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d105      	bne.n	800ab66 <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	789b      	ldrb	r3, [r3, #2]
 800ab5e:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d119      	bne.n	800ab9a <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 800ab66:	7b3b      	ldrb	r3, [r7, #12]
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d105      	bne.n	800ab78 <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	789b      	ldrb	r3, [r3, #2]
 800ab70:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d110      	bne.n	800ab9a <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 800ab78:	7b3b      	ldrb	r3, [r7, #12]
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d105      	bne.n	800ab8a <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	789b      	ldrb	r3, [r3, #2]
 800ab82:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d107      	bne.n	800ab9a <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 800ab90:	2306      	movs	r3, #6
 800ab92:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1b8      	bne.n	800ab0c <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 800ab9a:	7b3b      	ldrb	r3, [r7, #12]
 800ab9c:	2b06      	cmp	r3, #6
 800ab9e:	d825      	bhi.n	800abec <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 800aba0:	a201      	add	r2, pc, #4	@ (adr r2, 800aba8 <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800abc5 	.word	0x0800abc5
 800abac:	0800abcd 	.word	0x0800abcd
 800abb0:	0800abd5 	.word	0x0800abd5
 800abb4:	0800abd5 	.word	0x0800abd5
 800abb8:	0800abdd 	.word	0x0800abdd
 800abbc:	0800abed 	.word	0x0800abed
 800abc0:	0800abe5 	.word	0x0800abe5
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 800abc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800abc8:	813b      	strh	r3, [r7, #8]
                break;
 800abca:	e013      	b.n	800abf4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 800abcc:	f640 63d8 	movw	r3, #3800	@ 0xed8
 800abd0:	813b      	strh	r3, [r7, #8]
                break;
 800abd2:	e00f      	b.n	800abf4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 800abd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800abd8:	813b      	strh	r3, [r7, #8]
                break;
 800abda:	e00b      	b.n	800abf4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 800abdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800abe0:	813b      	strh	r3, [r7, #8]
                break;
 800abe2:	e007      	b.n	800abf4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 800abe4:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 800abe8:	813b      	strh	r3, [r7, #8]
                break;
 800abea:	e003      	b.n	800abf4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 800abec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800abf0:	813b      	strh	r3, [r7, #8]
                break;
 800abf2:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800abf8:	7b7b      	ldrb	r3, [r7, #13]
 800abfa:	4413      	add	r3, r2
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b05      	cmp	r3, #5
 800ac00:	d10d      	bne.n	800ac1e <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 800ac02:	893b      	ldrh	r3, [r7, #8]
 800ac04:	461a      	mov	r2, r3
 800ac06:	2105      	movs	r1, #5
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7fe fff7 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	81fb      	strh	r3, [r7, #14]
 800ac12:	89fb      	ldrh	r3, [r7, #14]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 800ac18:	89fb      	ldrh	r3, [r7, #14]
 800ac1a:	e008      	b.n	800ac2e <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 800ac1c:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800ac1e:	7b7b      	ldrb	r3, [r7, #13]
 800ac20:	3301      	adds	r3, #1
 800ac22:	737b      	strb	r3, [r7, #13]
 800ac24:	7b7b      	ldrb	r3, [r7, #13]
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	f67f af41 	bls.w	800aaae <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 800ac2c:	89fb      	ldrh	r3, [r7, #14]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop

0800ac38 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac44:	4618      	mov	r0, r3
 800ac46:	f005 f9db 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	81fb      	strh	r3, [r7, #14]
 800ac4e:	89fb      	ldrh	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 800ac54:	89fb      	ldrh	r3, [r7, #14]
 800ac56:	e01b      	b.n	800ac90 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f005 f9f0 	bl	8010048 <phhalHw_Pn5180_Wait>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	81fb      	strh	r3, [r7, #14]
 800ac6c:	89fb      	ldrh	r3, [r7, #14]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 800ac72:	89fb      	ldrh	r3, [r7, #14]
 800ac74:	e00c      	b.n	800ac90 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f005 f96a 	bl	800ff54 <phhalHw_Pn5180_FieldOn>
 800ac80:	4603      	mov	r3, r0
 800ac82:	81fb      	strh	r3, [r7, #14]
 800ac84:	89fb      	ldrh	r3, [r7, #14]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 800ac8a:	89fb      	ldrh	r3, [r7, #14]
 800ac8c:	e000      	b.n	800ac90 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 800ac98:	b590      	push	{r4, r7, lr}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800aca0:	237f      	movs	r3, #127	@ 0x7f
 800aca2:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800acaa:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 800acac:	2300      	movs	r3, #0
 800acae:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	799b      	ldrb	r3, [r3, #6]
 800acb4:	f003 0307 	and.w	r3, r3, #7
 800acb8:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	799b      	ldrb	r3, [r3, #6]
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 800acc6:	89bb      	ldrh	r3, [r7, #12]
 800acc8:	f043 0304 	orr.w	r3, r3, #4
 800accc:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 800acce:	89bb      	ldrh	r3, [r7, #12]
 800acd0:	021b      	lsls	r3, r3, #8
 800acd2:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	795b      	ldrb	r3, [r3, #5]
 800acd8:	b21b      	sxth	r3, r3
 800acda:	f003 0307 	and.w	r3, r3, #7
 800acde:	b21a      	sxth	r2, r3
 800ace0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	795b      	ldrb	r3, [r3, #5]
 800acee:	f003 0308 	and.w	r3, r3, #8
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 800acf6:	89bb      	ldrh	r3, [r7, #12]
 800acf8:	f043 0304 	orr.w	r3, r3, #4
 800acfc:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f503 7498 	add.w	r4, r3, #304	@ 0x130
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800ad14:	89b9      	ldrh	r1, [r7, #12]
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	4623      	mov	r3, r4
 800ad1a:	f007 fa3d 	bl	8012198 <phhalHw_Pn5180_Autocoll>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 800ad22:	897b      	ldrh	r3, [r7, #10]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	1e5a      	subs	r2, r3, #1
 800ad2e:	73fa      	strb	r2, [r7, #15]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e4      	bne.n	800acfe <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 800ad34:	897b      	ldrh	r3, [r7, #10]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b10      	cmp	r3, #16
 800ad3a:	d102      	bne.n	800ad42 <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 800ad3c:	f244 0383 	movw	r3, #16515	@ 0x4083
 800ad40:	e006      	b.n	800ad50 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 800ad42:	897b      	ldrh	r3, [r7, #10]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 800ad48:	897b      	ldrh	r3, [r7, #10]
 800ad4a:	e001      	b.n	800ad50 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 800ad4c:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd90      	pop	{r4, r7, pc}

0800ad58 <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	b08c      	sub	sp, #48	@ 0x30
 800ad5e:	af06      	add	r7, sp, #24
 800ad60:	6078      	str	r0, [r7, #4]
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    phStatus_t PH_MEMLOC_REM   status;
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus = PH_OFF;
 800ad62:	2300      	movs	r3, #0
 800ad64:	827b      	strh	r3, [r7, #18]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800ad6e:	2300      	movs	r3, #0
 800ad70:	757b      	strb	r3, [r7, #21]
 800ad72:	e147      	b.n	800b004 <phacDiscLoop_Sw_Int_ActivePollMode+0x2ac>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	78db      	ldrb	r3, [r3, #3]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	7d7b      	ldrb	r3, [r7, #21]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad82:	400b      	ands	r3, r1
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	f000 8097 	beq.w	800aeb8 <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	f200 8132 	bhi.w	800aff4 <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d003      	beq.n	800ad9c <phacDiscLoop_Sw_Int_ActivePollMode+0x44>
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	f000 808f 	beq.w	800aeb8 <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
                }
#endif
                break;

            default:
                break;
 800ad9a:	e12b      	b.n	800aff4 <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
                status = phhalHw_GetConfig(
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada0:	f107 0212 	add.w	r2, r7, #18
 800ada4:	215f      	movs	r1, #95	@ 0x5f
 800ada6:	4618      	mov	r0, r3
 800ada8:	f006 fe58 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 800adac:	4603      	mov	r3, r0
 800adae:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800adb0:	8afb      	ldrh	r3, [r7, #22]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <phacDiscLoop_Sw_Int_ActivePollMode+0x62>
 800adb6:	8afb      	ldrh	r3, [r7, #22]
 800adb8:	e12a      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_ON)
 800adba:	8a7b      	ldrh	r3, [r7, #18]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10e      	bne.n	800adde <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	8b9b      	ldrh	r3, [r3, #28]
 800adc8:	461a      	mov	r2, r3
 800adca:	2135      	movs	r1, #53	@ 0x35
 800adcc:	f005 f9f8 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800add0:	4603      	mov	r3, r0
 800add2:	82fb      	strh	r3, [r7, #22]
 800add4:	8afb      	ldrh	r3, [r7, #22]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
 800adda:	8afb      	ldrh	r3, [r7, #22]
 800addc:	e118      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phhalHw_ApplyProtocolSettings(
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade2:	2107      	movs	r1, #7
 800ade4:	4618      	mov	r0, r3
 800ade6:	f004 fc6d 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800adea:	4603      	mov	r3, r0
 800adec:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800adee:	8afb      	ldrh	r3, [r7, #22]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <phacDiscLoop_Sw_Int_ActivePollMode+0xa0>
 800adf4:	8afb      	ldrh	r3, [r7, #22]
 800adf6:	e10b      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fdef 	bl	800b9dc <phacDiscLoop_Sw_Int_FieldOn>
 800adfe:	4603      	mov	r3, r0
 800ae00:	82fb      	strh	r3, [r7, #22]
 800ae02:	8afb      	ldrh	r3, [r7, #22]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <phacDiscLoop_Sw_Int_ActivePollMode+0xb4>
 800ae08:	8afb      	ldrh	r3, [r7, #22]
 800ae0a:	e101      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_OFF)
 800ae0c:	8a7b      	ldrh	r3, [r7, #18]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10e      	bne.n	800ae30 <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	8b9b      	ldrh	r3, [r3, #28]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	2135      	movs	r1, #53	@ 0x35
 800ae1e:	f005 f9cf 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800ae22:	4603      	mov	r3, r0
 800ae24:	82fb      	strh	r3, [r7, #22]
 800ae26:	8afb      	ldrh	r3, [r7, #22]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
 800ae2c:	8afb      	ldrh	r3, [r7, #22]
 800ae2e:	e0ef      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phpalI18092mPI_Atr(
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f103 0c60 	add.w	ip, r3, #96	@ 0x60
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 800ae5c:	687c      	ldr	r4, [r7, #4]
 800ae5e:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800ae60:	687d      	ldr	r5, [r7, #4]
 800ae62:	3580      	adds	r5, #128	@ 0x80
 800ae64:	9505      	str	r5, [sp, #20]
 800ae66:	9404      	str	r4, [sp, #16]
 800ae68:	9003      	str	r0, [sp, #12]
 800ae6a:	9102      	str	r1, [sp, #8]
 800ae6c:	9201      	str	r2, [sp, #4]
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	4643      	mov	r3, r8
 800ae72:	4672      	mov	r2, lr
 800ae74:	4661      	mov	r1, ip
 800ae76:	4630      	mov	r0, r6
 800ae78:	f00e fea6 	bl	8019bc8 <phpalI18092mPI_Sw_Atr>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	82fb      	strh	r3, [r7, #22]
                if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800ae80:	8afb      	ldrh	r3, [r7, #22]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10f      	bne.n	800aea8 <phacDiscLoop_Sw_Int_ActivePollMode+0x150>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800ae8e:	7d7b      	ldrb	r3, [r7, #21]
 800ae90:	2101      	movs	r1, #1
 800ae92:	fa01 f303 	lsl.w	r3, r1, r3
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800aea2:	f244 038c 	movw	r3, #16524	@ 0x408c
 800aea6:	e0b3      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 800aea8:	8afb      	ldrh	r3, [r7, #22]
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	f040 80a3 	bne.w	800aff8 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a0>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800aeb2:	f244 0384 	movw	r3, #16516	@ 0x4084
 800aeb6:	e0ab      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aebc:	4618      	mov	r0, r3
 800aebe:	f005 f89f 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 800aec2:	4603      	mov	r3, r0
 800aec4:	82fb      	strh	r3, [r7, #22]
 800aec6:	8afb      	ldrh	r3, [r7, #22]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <phacDiscLoop_Sw_Int_ActivePollMode+0x178>
 800aecc:	8afb      	ldrh	r3, [r7, #22]
 800aece:	e09f      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	8b9b      	ldrh	r3, [r3, #28]
 800aed8:	461a      	mov	r2, r3
 800aeda:	2100      	movs	r1, #0
 800aedc:	f005 f8b4 	bl	8010048 <phhalHw_Pn5180_Wait>
 800aee0:	4603      	mov	r3, r0
 800aee2:	82fb      	strh	r3, [r7, #22]
 800aee4:	8afb      	ldrh	r3, [r7, #22]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <phacDiscLoop_Sw_Int_ActivePollMode+0x196>
 800aeea:	8afb      	ldrh	r3, [r7, #22]
 800aeec:	e090      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if((PH_ON << bIndex) == PHAC_DISCLOOP_ACT_POS_BIT_MASK_212)
 800aeee:	7d7b      	ldrb	r3, [r7, #21]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d108      	bne.n	800af06 <phacDiscLoop_Sw_Int_ActivePollMode+0x1ae>
                    status = phhalHw_ApplyProtocolSettings(
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef8:	2108      	movs	r1, #8
 800aefa:	4618      	mov	r0, r3
 800aefc:	f004 fbe2 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800af00:	4603      	mov	r3, r0
 800af02:	82fb      	strh	r3, [r7, #22]
 800af04:	e007      	b.n	800af16 <phacDiscLoop_Sw_Int_ActivePollMode+0x1be>
                    status = phhalHw_ApplyProtocolSettings(
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0a:	2109      	movs	r1, #9
 800af0c:	4618      	mov	r0, r3
 800af0e:	f004 fbd9 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800af12:	4603      	mov	r3, r0
 800af14:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800af16:	8afb      	ldrh	r3, [r7, #22]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <phacDiscLoop_Sw_Int_ActivePollMode+0x1c8>
 800af1c:	8afb      	ldrh	r3, [r7, #22]
 800af1e:	e077      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fd5b 	bl	800b9dc <phacDiscLoop_Sw_Int_FieldOn>
 800af26:	4603      	mov	r3, r0
 800af28:	82fb      	strh	r3, [r7, #22]
 800af2a:	8afb      	ldrh	r3, [r7, #22]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <phacDiscLoop_Sw_Int_ActivePollMode+0x1dc>
 800af30:	8afb      	ldrh	r3, [r7, #22]
 800af32:	e06d      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8b9b      	ldrh	r3, [r3, #28]
 800af3c:	461a      	mov	r2, r3
 800af3e:	2135      	movs	r1, #53	@ 0x35
 800af40:	f005 f93e 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800af44:	4603      	mov	r3, r0
 800af46:	82fb      	strh	r3, [r7, #22]
 800af48:	8afb      	ldrh	r3, [r7, #22]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <phacDiscLoop_Sw_Int_ActivePollMode+0x1fa>
 800af4e:	8afb      	ldrh	r3, [r7, #22]
 800af50:	e05e      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[0].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 800af58:	f107 0308 	add.w	r3, r7, #8
 800af5c:	2208      	movs	r2, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f017 fa2b 	bl	80223ba <memcpy>
                aNfcId3[8] = 0x00;
 800af64:	2300      	movs	r3, #0
 800af66:	743b      	strb	r3, [r7, #16]
                aNfcId3[9] = 0x00;
 800af68:	2300      	movs	r3, #0
 800af6a:	747b      	strb	r3, [r7, #17]
                status = phpalI18092mPI_Atr(
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800af94:	687c      	ldr	r4, [r7, #4]
 800af96:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 800af9a:	687d      	ldr	r5, [r7, #4]
 800af9c:	35bc      	adds	r5, #188	@ 0xbc
 800af9e:	f107 0c08 	add.w	ip, r7, #8
 800afa2:	9505      	str	r5, [sp, #20]
 800afa4:	9404      	str	r4, [sp, #16]
 800afa6:	9003      	str	r0, [sp, #12]
 800afa8:	9102      	str	r1, [sp, #8]
 800afaa:	9201      	str	r2, [sp, #4]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	4643      	mov	r3, r8
 800afb0:	4672      	mov	r2, lr
 800afb2:	4661      	mov	r1, ip
 800afb4:	4630      	mov	r0, r6
 800afb6:	f00e fe07 	bl	8019bc8 <phpalI18092mPI_Sw_Atr>
 800afba:	4603      	mov	r3, r0
 800afbc:	82fb      	strh	r3, [r7, #22]
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800afbe:	8afb      	ldrh	r3, [r7, #22]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10f      	bne.n	800afe6 <phacDiscLoop_Sw_Int_ActivePollMode+0x28e>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800afcc:	7d7b      	ldrb	r3, [r7, #21]
 800afce:	2101      	movs	r1, #1
 800afd0:	fa01 f303 	lsl.w	r3, r1, r3
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	4313      	orrs	r3, r2
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800afe0:	f244 038c 	movw	r3, #16524	@ 0x408c
 800afe4:	e014      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 800afe6:	8afb      	ldrh	r3, [r7, #22]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b02      	cmp	r3, #2
 800afec:	d106      	bne.n	800affc <phacDiscLoop_Sw_Int_ActivePollMode+0x2a4>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800afee:	f244 0384 	movw	r3, #16516	@ 0x4084
 800aff2:	e00d      	b.n	800b010 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                break;
 800aff4:	bf00      	nop
 800aff6:	e002      	b.n	800affe <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 800aff8:	bf00      	nop
 800affa:	e000      	b.n	800affe <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 800affc:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800affe:	7d7b      	ldrb	r3, [r7, #21]
 800b000:	3301      	adds	r3, #1
 800b002:	757b      	strb	r3, [r7, #21]
 800b004:	7d7b      	ldrb	r3, [r7, #21]
 800b006:	2b02      	cmp	r3, #2
 800b008:	f67f aeb4 	bls.w	800ad74 <phacDiscLoop_Sw_Int_ActivePollMode+0x1c>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b00c:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b01a <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 800b022:	2300      	movs	r3, #0
 800b024:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 800b026:	2321      	movs	r3, #33	@ 0x21
 800b028:	81fb      	strh	r3, [r7, #14]

    /* 技术检测阶段 */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	891b      	ldrh	r3, [r3, #8]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d145      	bne.n	800b0be <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d004      	beq.n	800b046 <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800b042:	2b03      	cmp	r3, #3
 800b044:	d110      	bne.n	800b068 <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7919      	ldrb	r1, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	789a      	ldrb	r2, [r3, #2]
 800b04e:	f107 030b 	add.w	r3, r7, #11
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f976 	bl	800b344 <phacDiscLoop_Sw_Int_TechDetectActivity>
 800b058:	4603      	mov	r3, r0
 800b05a:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800b05c:	89fb      	ldrh	r3, [r7, #14]
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b12      	cmp	r3, #18
 800b062:	d116      	bne.n	800b092 <phacDiscLoop_Sw_Int_PollMode+0x78>
 800b064:	89fb      	ldrh	r3, [r7, #14]
 800b066:	e092      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d10f      	bne.n	800b092 <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	789b      	ldrb	r3, [r3, #2]
 800b076:	f107 020b 	add.w	r2, r7, #11
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fa95 	bl	800b5ac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 800b082:	4603      	mov	r3, r0
 800b084:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800b086:	89fb      	ldrh	r3, [r7, #14]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b12      	cmp	r3, #18
 800b08c:	d101      	bne.n	800b092 <phacDiscLoop_Sw_Int_PollMode+0x78>
 800b08e:	89fb      	ldrh	r3, [r7, #14]
 800b090:	e07d      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	7fdb      	ldrb	r3, [r3, #31]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d006      	beq.n	800b0b0 <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 800b0a2:	89fb      	ldrh	r3, [r7, #14]
 800b0a4:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 800b0a6:	2b84      	cmp	r3, #132	@ 0x84
 800b0a8:	d102      	bne.n	800b0b0 <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b0aa:	f244 0386 	movw	r3, #16518	@ 0x4086
 800b0ae:	e06e      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800b0b0:	89fb      	ldrh	r3, [r7, #14]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b87      	cmp	r3, #135	@ 0x87
 800b0b6:	d102      	bne.n	800b0be <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	811a      	strh	r2, [r3, #8]
        }
    }

    /* 碰撞处理 Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	891b      	ldrh	r3, [r3, #8]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d145      	bne.n	800b152 <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	789b      	ldrb	r3, [r3, #2]
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 800b0d4:	7b7b      	ldrb	r3, [r7, #13]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 800b0da:	7b7b      	ldrb	r3, [r7, #13]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	7b7b      	ldrb	r3, [r7, #13]
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d005      	beq.n	800b0f6 <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800b0ea:	f244 0321 	movw	r3, #16417	@ 0x4021
 800b0ee:	e04e      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800b0f0:	f244 0321 	movw	r3, #16417	@ 0x4021
 800b0f4:	e04b      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	733b      	strb	r3, [r7, #12]
 800b0fa:	e005      	b.n	800b108 <phacDiscLoop_Sw_Int_PollMode+0xee>
 800b0fc:	7b7b      	ldrb	r3, [r7, #13]
 800b0fe:	085b      	lsrs	r3, r3, #1
 800b100:	737b      	strb	r3, [r7, #13]
 800b102:	7b3b      	ldrb	r3, [r7, #12]
 800b104:	3301      	adds	r3, #1
 800b106:	733b      	strb	r3, [r7, #12]
 800b108:	7b7b      	ldrb	r3, [r7, #13]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1f6      	bne.n	800b0fc <phacDiscLoop_Sw_Int_PollMode+0xe2>
 800b10e:	7b3b      	ldrb	r3, [r7, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <phacDiscLoop_Sw_Int_PollMode+0xfe>
 800b114:	237f      	movs	r3, #127	@ 0x7f
 800b116:	e03a      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 800b118:	7b3b      	ldrb	r3, [r7, #12]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fbb7 	bl	800b894 <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 800b126:	4603      	mov	r3, r0
 800b128:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 800b12a:	89fb      	ldrh	r3, [r7, #14]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b89      	cmp	r3, #137	@ 0x89
 800b130:	d109      	bne.n	800b146 <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 800b132:	7b3b      	ldrb	r3, [r7, #12]
 800b134:	3b01      	subs	r3, #1
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2200      	movs	r2, #0
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fbe5 	bl	800b90c <phacDiscLoop_Sw_Int_ActivateDevice>
 800b142:	4603      	mov	r3, r0
 800b144:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 800b146:	89fb      	ldrh	r3, [r7, #14]
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b12      	cmp	r3, #18
 800b14c:	d101      	bne.n	800b152 <phacDiscLoop_Sw_Int_PollMode+0x138>
 800b14e:	89fb      	ldrh	r3, [r7, #14]
 800b150:	e01d      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
    }

    /* 移除检测 */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	891b      	ldrh	r3, [r3, #8]
 800b156:	2b03      	cmp	r3, #3
 800b158:	d109      	bne.n	800b16e <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b160:	2b01      	cmp	r3, #1
 800b162:	d104      	bne.n	800b16e <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f816 	bl	800b196 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 800b16a:	4603      	mov	r3, r0
 800b16c:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800b16e:	89fb      	ldrh	r3, [r7, #14]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00b      	beq.n	800b18c <phacDiscLoop_Sw_Int_PollMode+0x172>
 800b174:	89fb      	ldrh	r3, [r7, #14]
 800b176:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <phacDiscLoop_Sw_Int_PollMode+0x172>
 800b17e:	89fb      	ldrh	r3, [r7, #14]
 800b180:	b2db      	uxtb	r3, r3
 800b182:	b29b      	uxth	r3, r3
 800b184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b188:	b29b      	uxth	r3, r3
 800b18a:	e000      	b.n	800b18e <phacDiscLoop_Sw_Int_PollMode+0x174>
 800b18c:	89fb      	ldrh	r3, [r7, #14]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b086      	sub	sp, #24
 800b19a:	af02      	add	r7, sp, #8
 800b19c:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f004 ff2a 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	81fb      	strh	r3, [r7, #14]
 800b1b0:	89fb      	ldrh	r3, [r7, #14]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 800b1b6:	89fb      	ldrh	r3, [r7, #14]
 800b1b8:	e0bf      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1be:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f004 ff3f 	bl	8010048 <phhalHw_Pn5180_Wait>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	81fb      	strh	r3, [r7, #14]
 800b1ce:	89fb      	ldrh	r3, [r7, #14]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 800b1d4:	89fb      	ldrh	r3, [r7, #14]
 800b1d6:	e0b0      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d054      	beq.n	800b296 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f004 fa62 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b200:	4603      	mov	r3, r0
 800b202:	81fb      	strh	r3, [r7, #14]
 800b204:	89fb      	ldrh	r3, [r7, #14]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 800b20a:	89fb      	ldrh	r3, [r7, #14]
 800b20c:	e095      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fbba 	bl	800b988 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800b214:	4603      	mov	r3, r0
 800b216:	81fb      	strh	r3, [r7, #14]
 800b218:	89fb      	ldrh	r3, [r7, #14]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d037      	beq.n	800b28e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 800b21e:	89fb      	ldrh	r3, [r7, #14]
 800b220:	e08b      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	8a1b      	ldrh	r3, [r3, #16]
 800b22a:	461a      	mov	r2, r3
 800b22c:	2135      	movs	r1, #53	@ 0x35
 800b22e:	f004 ffc7 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b232:	4603      	mov	r3, r0
 800b234:	81fb      	strh	r3, [r7, #14]
 800b236:	89fb      	ldrh	r3, [r7, #14]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 800b23c:	89fb      	ldrh	r3, [r7, #14]
 800b23e:	e07c      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	335e      	adds	r3, #94	@ 0x5e
 800b248:	4619      	mov	r1, r3
 800b24a:	4610      	mov	r0, r2
 800b24c:	f00a fde7 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 800b250:	4603      	mov	r3, r0
 800b252:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800b254:	89fb      	ldrh	r3, [r7, #14]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d015      	beq.n	800b288 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 800b25c:	89fb      	ldrh	r3, [r7, #14]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b12      	cmp	r3, #18
 800b262:	d101      	bne.n	800b268 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 800b264:	89fb      	ldrh	r3, [r7, #14]
 800b266:	e068      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26c:	4618      	mov	r0, r3
 800b26e:	f00a fde5 	bl	8015e3c <phpalI14443p3a_Sw_HaltA>
 800b272:	4603      	mov	r3, r0
 800b274:	81fb      	strh	r3, [r7, #14]
 800b276:	89fb      	ldrh	r3, [r7, #14]
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b12      	cmp	r3, #18
 800b27c:	d101      	bne.n	800b282 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 800b27e:	89fb      	ldrh	r3, [r7, #14]
 800b280:	e05b      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	737b      	strb	r3, [r7, #13]
 800b286:	e002      	b.n	800b28e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 800b288:	7b7b      	ldrb	r3, [r7, #13]
 800b28a:	3301      	adds	r3, #1
 800b28c:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800b28e:	7b7b      	ldrb	r3, [r7, #13]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d9c6      	bls.n	800b222 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 800b294:	e04a      	b.n	800b32c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a2:	2102      	movs	r1, #2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f004 fa0d 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	81fb      	strh	r3, [r7, #14]
 800b2ae:	89fb      	ldrh	r3, [r7, #14]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 800b2b4:	89fb      	ldrh	r3, [r7, #14]
 800b2b6:	e040      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fb65 	bl	800b988 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	81fb      	strh	r3, [r7, #14]
 800b2c2:	89fb      	ldrh	r3, [r7, #14]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d02e      	beq.n	800b326 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 800b2c8:	89fb      	ldrh	r3, [r7, #14]
 800b2ca:	e036      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8a5b      	ldrh	r3, [r3, #18]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	2135      	movs	r1, #53	@ 0x35
 800b2d8:	f004 ff72 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	81fb      	strh	r3, [r7, #14]
 800b2e0:	89fb      	ldrh	r3, [r7, #14]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 800b2e6:	89fb      	ldrh	r3, [r7, #14]
 800b2e8:	e027      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	33cd      	adds	r3, #205	@ 0xcd
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	32da      	adds	r2, #218	@ 0xda
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2100      	movs	r1, #0
 800b300:	f00b fc1f 	bl	8016b42 <phpalI14443p3b_Sw_WakeUpB>
 800b304:	4603      	mov	r3, r0
 800b306:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800b308:	89fb      	ldrh	r3, [r7, #14]
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d007      	beq.n	800b320 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 800b314:	89fb      	ldrh	r3, [r7, #14]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b12      	cmp	r3, #18
 800b31a:	d104      	bne.n	800b326 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 800b31c:	89fb      	ldrh	r3, [r7, #14]
 800b31e:	e00c      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 800b320:	7b7b      	ldrb	r3, [r7, #13]
 800b322:	3301      	adds	r3, #1
 800b324:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800b326:	7b7b      	ldrb	r3, [r7, #13]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d9cf      	bls.n	800b2cc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800b32c:	89fb      	ldrh	r3, [r7, #14]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b01      	cmp	r3, #1
 800b332:	d001      	beq.n	800b338 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	e000      	b.n	800b33a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 800b338:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
	...

0800b344 <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	607b      	str	r3, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	72fb      	strb	r3, [r7, #11]
 800b352:	4613      	mov	r3, r2
 800b354:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800b356:	2384      	movs	r3, #132	@ 0x84
 800b358:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 800b35e:	2300      	movs	r3, #0
 800b360:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7ff fb90 	bl	800aa98 <phacDiscLoop_Sw_Int_Apply_PTGT>
 800b378:	4603      	mov	r3, r0
 800b37a:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 800b37c:	8afb      	ldrh	r3, [r7, #22]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 800b382:	8afb      	ldrh	r3, [r7, #22]
 800b384:	e109      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800b386:	2300      	movs	r3, #0
 800b388:	757b      	strb	r3, [r7, #21]
 800b38a:	e0e6      	b.n	800b55a <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b392:	2b02      	cmp	r3, #2
 800b394:	d106      	bne.n	800b3a4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 800b396:	7d3b      	ldrb	r3, [r7, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 800b39c:	7d7b      	ldrb	r3, [r7, #21]
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	f000 80e0 	beq.w	800b564 <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b3a8:	7d7b      	ldrb	r3, [r7, #21]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 800b3b0:	7cbb      	ldrb	r3, [r7, #18]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d002      	beq.n	800b3bc <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 800b3b6:	7cbb      	ldrb	r3, [r7, #18]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d103      	bne.n	800b3c4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 800b3bc:	7cfb      	ldrb	r3, [r7, #19]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	f000 80c7 	beq.w	800b552 <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 800b3c4:	7aba      	ldrb	r2, [r7, #10]
 800b3c6:	7cbb      	ldrb	r3, [r7, #18]
 800b3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 80bf 	beq.w	800b554 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	f107 0210 	add.w	r2, r7, #16
 800b3de:	215f      	movs	r1, #95	@ 0x5f
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f006 fb3b 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 800b3ea:	8afb      	ldrh	r3, [r7, #22]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 800b3f0:	8afb      	ldrh	r3, [r7, #22]
 800b3f2:	e0d2      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 800b3f4:	8a3b      	ldrh	r3, [r7, #16]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d123      	bne.n	800b442 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 800b3fa:	7cbb      	ldrb	r3, [r7, #18]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d002      	beq.n	800b406 <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 800b400:	7cbb      	ldrb	r3, [r7, #18]
 800b402:	2b03      	cmp	r3, #3
 800b404:	d10b      	bne.n	800b41e <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800b406:	7cbb      	ldrb	r3, [r7, #18]
 800b408:	4619      	mov	r1, r3
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f002 f8f0 	bl	800d5f0 <phacDiscLoop_Sw_Int_Config_GTF>
 800b410:	4603      	mov	r3, r0
 800b412:	82fb      	strh	r3, [r7, #22]
 800b414:	8afb      	ldrh	r3, [r7, #22]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d013      	beq.n	800b442 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 800b41a:	8afb      	ldrh	r3, [r7, #22]
 800b41c:	e0bd      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b422:	7cba      	ldrb	r2, [r7, #18]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3208      	adds	r2, #8
 800b428:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b42c:	461a      	mov	r2, r3
 800b42e:	2135      	movs	r1, #53	@ 0x35
 800b430:	f004 fec6 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b434:	4603      	mov	r3, r0
 800b436:	82fb      	strh	r3, [r7, #22]
 800b438:	8afb      	ldrh	r3, [r7, #22]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 800b43e:	8afb      	ldrh	r3, [r7, #22]
 800b440:	e0ab      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b446:	7cbb      	ldrb	r3, [r7, #18]
 800b448:	4956      	ldr	r1, [pc, #344]	@ (800b5a4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 800b44a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	f004 f936 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b458:	4603      	mov	r3, r0
 800b45a:	82fb      	strh	r3, [r7, #22]
 800b45c:	8afb      	ldrh	r3, [r7, #22]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 800b462:	8afb      	ldrh	r3, [r7, #22]
 800b464:	e099      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 fab8 	bl	800b9dc <phacDiscLoop_Sw_Int_FieldOn>
 800b46c:	4603      	mov	r3, r0
 800b46e:	82fb      	strh	r3, [r7, #22]
 800b470:	8afb      	ldrh	r3, [r7, #22]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 800b476:	8afb      	ldrh	r3, [r7, #22]
 800b478:	e08f      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 800b47a:	8a3b      	ldrh	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d123      	bne.n	800b4c8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 800b480:	7cbb      	ldrb	r3, [r7, #18]
 800b482:	2b02      	cmp	r3, #2
 800b484:	d002      	beq.n	800b48c <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 800b486:	7cbb      	ldrb	r3, [r7, #18]
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d10b      	bne.n	800b4a4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800b48c:	7cbb      	ldrb	r3, [r7, #18]
 800b48e:	4619      	mov	r1, r3
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f002 f8ad 	bl	800d5f0 <phacDiscLoop_Sw_Int_Config_GTF>
 800b496:	4603      	mov	r3, r0
 800b498:	82fb      	strh	r3, [r7, #22]
 800b49a:	8afb      	ldrh	r3, [r7, #22]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d013      	beq.n	800b4c8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 800b4a0:	8afb      	ldrh	r3, [r7, #22]
 800b4a2:	e07a      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b4a8:	7cba      	ldrb	r2, [r7, #18]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3208      	adds	r2, #8
 800b4ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	2135      	movs	r1, #53	@ 0x35
 800b4b6:	f004 fe83 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	82fb      	strh	r3, [r7, #22]
 800b4be:	8afb      	ldrh	r3, [r7, #22]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 800b4c4:	8afb      	ldrh	r3, [r7, #22]
 800b4c6:	e068      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 800b4c8:	7cbb      	ldrb	r3, [r7, #18]
 800b4ca:	4a37      	ldr	r2, [pc, #220]	@ (800b5a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 800b4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	4798      	blx	r3
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800b4d8:	8afb      	ldrh	r3, [r7, #22]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b87      	cmp	r3, #135	@ 0x87
 800b4de:	d123      	bne.n	800b528 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800b4e6:	7cbb      	ldrb	r3, [r7, #18]
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 800b4fa:	7d3b      	ldrb	r3, [r7, #20]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b506:	f003 0304 	and.w	r3, r3, #4
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b514:	f003 0308 	and.w	r3, r3, #8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	7d3a      	ldrb	r2, [r7, #20]
 800b520:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 800b522:	2301      	movs	r3, #1
 800b524:	74fb      	strb	r3, [r7, #19]
 800b526:	e005      	b.n	800b534 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 800b528:	8afb      	ldrh	r3, [r7, #22]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b12      	cmp	r3, #18
 800b52e:	d101      	bne.n	800b534 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 800b530:	8afb      	ldrh	r3, [r7, #22]
 800b532:	e032      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 800b534:	7afa      	ldrb	r2, [r7, #11]
 800b536:	7cbb      	ldrb	r3, [r7, #18]
 800b538:	fa22 f303 	lsr.w	r3, r2, r3
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d007      	beq.n	800b554 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 800b544:	7d3b      	ldrb	r3, [r7, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d004      	beq.n	800b554 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	7d3a      	ldrb	r2, [r7, #20]
 800b54e:	701a      	strb	r2, [r3, #0]
                break;
 800b550:	e009      	b.n	800b566 <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 800b552:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800b554:	7d7b      	ldrb	r3, [r7, #21]
 800b556:	3301      	adds	r3, #1
 800b558:	757b      	strb	r3, [r7, #21]
 800b55a:	7d7b      	ldrb	r3, [r7, #21]
 800b55c:	2b05      	cmp	r3, #5
 800b55e:	f67f af15 	bls.w	800b38c <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 800b562:	e000      	b.n	800b566 <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 800b564:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 800b566:	7d3b      	ldrb	r3, [r7, #20]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d105      	bne.n	800b578 <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7d3a      	ldrb	r2, [r7, #20]
 800b570:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b572:	f244 0387 	movw	r3, #16519	@ 0x4087
 800b576:	e010      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 800b578:	7d3b      	ldrb	r3, [r7, #20]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d905      	bls.n	800b58a <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7d3a      	ldrb	r2, [r7, #20]
 800b582:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b584:	f244 0388 	movw	r3, #16520	@ 0x4088
 800b588:	e007      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 800b58a:	8afb      	ldrh	r3, [r7, #22]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d102      	bne.n	800b598 <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b592:	f244 0384 	movw	r3, #16516	@ 0x4084
 800b596:	e000      	b.n	800b59a <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 800b598:	8afb      	ldrh	r3, [r7, #22]
    }
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3718      	adds	r7, #24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08026b9c 	.word	0x08026b9c
 800b5a8:	08026bcc 	.word	0x08026bcc

0800b5ac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800b5ba:	2384      	movs	r3, #132	@ 0x84
 800b5bc:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d002      	beq.n	800b5fe <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 800b5f8:	f244 0325 	movw	r3, #16421	@ 0x4025
 800b5fc:	e142      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b602:	f107 0212 	add.w	r2, r7, #18
 800b606:	215f      	movs	r1, #95	@ 0x5f
 800b608:	4618      	mov	r0, r3
 800b60a:	f006 fa27 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 800b60e:	4603      	mov	r3, r0
 800b610:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 800b612:	8bfb      	ldrh	r3, [r7, #30]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 800b618:	8bfb      	ldrh	r3, [r7, #30]
 800b61a:	e133      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 800b61c:	8a7b      	ldrh	r3, [r7, #18]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f040 8104 	bne.w	800b82c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b628:	2201      	movs	r2, #1
 800b62a:	b2d2      	uxtb	r2, r2
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f004 f848 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b634:	4603      	mov	r3, r0
 800b636:	83fb      	strh	r3, [r7, #30]
 800b638:	8bfb      	ldrh	r3, [r7, #30]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 800b63e:	8bfb      	ldrh	r3, [r7, #30]
 800b640:	e120      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 f9a0 	bl	800b988 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800b648:	4603      	mov	r3, r0
 800b64a:	83fb      	strh	r3, [r7, #30]
 800b64c:	8bfb      	ldrh	r3, [r7, #30]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 800b652:	8bfb      	ldrh	r3, [r7, #30]
 800b654:	e116      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65a:	f107 0212 	add.w	r2, r7, #18
 800b65e:	215f      	movs	r1, #95	@ 0x5f
 800b660:	4618      	mov	r0, r3
 800b662:	f006 f9fb 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 800b666:	4603      	mov	r3, r0
 800b668:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 800b66a:	8bfb      	ldrh	r3, [r7, #30]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 800b670:	8bfb      	ldrh	r3, [r7, #30]
 800b672:	e107      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 800b674:	8a7b      	ldrh	r3, [r7, #18]
 800b676:	2b01      	cmp	r3, #1
 800b678:	f000 80d8 	beq.w	800b82c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 800b67c:	f244 030a 	movw	r3, #16394	@ 0x400a
 800b680:	e100      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800b682:	2300      	movs	r3, #0
 800b684:	773b      	strb	r3, [r7, #28]
 800b686:	e0bf      	b.n	800b808 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b68c:	7f3b      	ldrb	r3, [r7, #28]
 800b68e:	4413      	add	r3, r2
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 800b694:	7d3b      	ldrb	r3, [r7, #20]
 800b696:	2201      	movs	r2, #1
 800b698:	fa02 f303 	lsl.w	r3, r2, r3
 800b69c:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 800b69e:	7afa      	ldrb	r2, [r7, #11]
 800b6a0:	7d7b      	ldrb	r3, [r7, #21]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 80ab 	beq.w	800b802 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 800b6ac:	7e7b      	ldrb	r3, [r7, #25]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f040 80a7 	bne.w	800b802 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800b6ba:	7d7b      	ldrb	r3, [r7, #21]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f040 809c 	bne.w	800b7fe <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 800b6c6:	7d7b      	ldrb	r3, [r7, #21]
 800b6c8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 800b6da:	7d7b      	ldrb	r3, [r7, #21]
 800b6dc:	4013      	ands	r3, r2
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d005      	beq.n	800b6f0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 800b6e4:	7ebb      	ldrb	r3, [r7, #26]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d102      	bne.n	800b6f0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f7ff faa4 	bl	800ac38 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 800b6f0:	7d7b      	ldrb	r3, [r7, #21]
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d12c      	bne.n	800b750 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b6fc:	f003 0301 	and.w	r3, r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	d011      	beq.n	800b728 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 800b704:	7d3a      	ldrb	r2, [r7, #20]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	3208      	adds	r2, #8
 800b70a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 800b70e:	f240 424c 	movw	r2, #1100	@ 0x44c
 800b712:	4293      	cmp	r3, r2
 800b714:	d908      	bls.n	800b728 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 800b716:	7d3a      	ldrb	r2, [r7, #20]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3208      	adds	r2, #8
 800b71c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b720:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800b724:	82fb      	strh	r3, [r7, #22]
 800b726:	e005      	b.n	800b734 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 800b728:	7d3a      	ldrb	r2, [r7, #20]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3208      	adds	r2, #8
 800b72e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b732:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b738:	8afa      	ldrh	r2, [r7, #22]
 800b73a:	2135      	movs	r1, #53	@ 0x35
 800b73c:	4618      	mov	r0, r3
 800b73e:	f004 fd3f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b742:	4603      	mov	r3, r0
 800b744:	83fb      	strh	r3, [r7, #30]
 800b746:	8bfb      	ldrh	r3, [r7, #30]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d013      	beq.n	800b774 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 800b74c:	8bfb      	ldrh	r3, [r7, #30]
 800b74e:	e099      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b754:	7d3a      	ldrb	r2, [r7, #20]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3208      	adds	r2, #8
 800b75a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b75e:	461a      	mov	r2, r3
 800b760:	2135      	movs	r1, #53	@ 0x35
 800b762:	f004 fd2d 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b766:	4603      	mov	r3, r0
 800b768:	83fb      	strh	r3, [r7, #30]
 800b76a:	8bfb      	ldrh	r3, [r7, #30]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 800b770:	8bfb      	ldrh	r3, [r7, #30]
 800b772:	e087      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b778:	7d3b      	ldrb	r3, [r7, #20]
 800b77a:	4944      	ldr	r1, [pc, #272]	@ (800b88c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 800b77c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f003 ff9d 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800b78a:	4603      	mov	r3, r0
 800b78c:	83fb      	strh	r3, [r7, #30]
 800b78e:	8bfb      	ldrh	r3, [r7, #30]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 800b794:	8bfb      	ldrh	r3, [r7, #30]
 800b796:	e075      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 800b798:	7d3b      	ldrb	r3, [r7, #20]
 800b79a:	4a3d      	ldr	r2, [pc, #244]	@ (800b890 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 800b79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	4798      	blx	r3
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800b7a8:	8bfb      	ldrh	r3, [r7, #30]
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b87      	cmp	r3, #135	@ 0x87
 800b7ae:	d10c      	bne.n	800b7ca <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800b7b6:	7d7b      	ldrb	r3, [r7, #21]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 800b7c2:	7f7b      	ldrb	r3, [r7, #29]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	777b      	strb	r3, [r7, #29]
 800b7c8:	e005      	b.n	800b7d6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 800b7ca:	8bfb      	ldrh	r3, [r7, #30]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b12      	cmp	r3, #18
 800b7d0:	d101      	bne.n	800b7d6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 800b7d2:	8bfb      	ldrh	r3, [r7, #30]
 800b7d4:	e056      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 800b7dc:	7d7b      	ldrb	r3, [r7, #21]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d008      	beq.n	800b7f8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 800b7e6:	7ebb      	ldrb	r3, [r7, #26]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d105      	bne.n	800b7f8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff fa23 	bl	800ac38 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	76fb      	strb	r3, [r7, #27]
 800b7f6:	e004      	b.n	800b802 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	76fb      	strb	r3, [r7, #27]
 800b7fc:	e001      	b.n	800b802 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 800b7fe:	2301      	movs	r3, #1
 800b800:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800b802:	7f3b      	ldrb	r3, [r7, #28]
 800b804:	3301      	adds	r3, #1
 800b806:	773b      	strb	r3, [r7, #28]
 800b808:	7f3b      	ldrb	r3, [r7, #28]
 800b80a:	2b05      	cmp	r3, #5
 800b80c:	f67f af3c 	bls.w	800b688 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 800b810:	7f7b      	ldrb	r3, [r7, #29]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 800b816:	2301      	movs	r3, #1
 800b818:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 800b81a:	7ebb      	ldrb	r3, [r7, #26]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d105      	bne.n	800b82c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 800b820:	7efb      	ldrb	r3, [r7, #27]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff fa06 	bl	800ac38 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 800b82c:	7e7b      	ldrb	r3, [r7, #25]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f43f af27 	beq.w	800b682 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 800b834:	7f7b      	ldrb	r3, [r7, #29]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d105      	bne.n	800b846 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	7f7a      	ldrb	r2, [r7, #29]
 800b83e:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 800b840:	2387      	movs	r3, #135	@ 0x87
 800b842:	83fb      	strh	r3, [r7, #30]
 800b844:	e00e      	b.n	800b864 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 800b846:	7f7b      	ldrb	r3, [r7, #29]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d905      	bls.n	800b858 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7f7a      	ldrb	r2, [r7, #29]
 800b850:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 800b852:	2388      	movs	r3, #136	@ 0x88
 800b854:	83fb      	strh	r3, [r7, #30]
 800b856:	e005      	b.n	800b864 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 800b858:	8bfb      	ldrh	r3, [r7, #30]
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800b860:	2384      	movs	r3, #132	@ 0x84
 800b862:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800b864:	8bfb      	ldrh	r3, [r7, #30]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00b      	beq.n	800b882 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 800b86a:	8bfb      	ldrh	r3, [r7, #30]
 800b86c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 800b874:	8bfb      	ldrh	r3, [r7, #30]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	b29b      	uxth	r3, r3
 800b87a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b87e:	b29b      	uxth	r3, r3
 800b880:	e000      	b.n	800b884 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 800b882:	8bfb      	ldrh	r3, [r7, #30]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	08026b9c 	.word	0x08026b9c
 800b890:	08026bcc 	.word	0x08026bcc

0800b894 <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	4a15      	ldr	r2, [pc, #84]	@ (800b908 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 800b8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	4798      	blx	r3
 800b8bc:	4603      	mov	r3, r0
 800b8be:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b8c0:	89fb      	ldrh	r3, [r7, #14]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d112      	bne.n	800b8ee <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d902      	bls.n	800b8e8 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b8e2:	f244 038a 	movw	r3, #16522	@ 0x408a
 800b8e6:	e00a      	b.n	800b8fe <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b8e8:	f244 0389 	movw	r3, #16521	@ 0x4089
 800b8ec:	e007      	b.n	800b8fe <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800b8ee:	89fb      	ldrh	r3, [r7, #14]
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d102      	bne.n	800b8fc <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b8f6:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b8fa:	e000      	b.n	800b8fe <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 800b8fc:	89fb      	ldrh	r3, [r7, #14]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	08026bb4 	.word	0x08026bb4

0800b90c <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
 800b918:	4613      	mov	r3, r2
 800b91a:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	4a17      	ldr	r2, [pc, #92]	@ (800b984 <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 800b928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b92c:	78ba      	ldrb	r2, [r7, #2]
 800b92e:	4611      	mov	r1, r2
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
 800b934:	4603      	mov	r3, r0
 800b936:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b938:	89fb      	ldrh	r3, [r7, #14]
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	2201      	movs	r2, #1
 800b944:	fa02 f303 	lsl.w	r3, r2, r3
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800b950:	f244 038b 	movw	r3, #16523	@ 0x408b
 800b954:	e012      	b.n	800b97c <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 800b956:	89fb      	ldrh	r3, [r7, #14]
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b8e      	cmp	r3, #142	@ 0x8e
 800b95c:	d003      	beq.n	800b966 <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 800b95e:	89fb      	ldrh	r3, [r7, #14]
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b8d      	cmp	r3, #141	@ 0x8d
 800b964:	d109      	bne.n	800b97a <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	2201      	movs	r2, #1
 800b96a:	fa02 f303 	lsl.w	r3, r2, r3
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 800b976:	89fb      	ldrh	r3, [r7, #14]
 800b978:	e000      	b.n	800b97c <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 800b97a:	89fb      	ldrh	r3, [r7, #14]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	08026be4 	.word	0x08026be4

0800b988 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b990:	2300      	movs	r3, #0
 800b992:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b998:	2200      	movs	r2, #0
 800b99a:	2156      	movs	r1, #86	@ 0x56
 800b99c:	4618      	mov	r0, r3
 800b99e:	f004 fc0f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 800b9a6:	89fb      	ldrh	r3, [r7, #14]
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b23      	cmp	r3, #35	@ 0x23
 800b9ac:	d005      	beq.n	800b9ba <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 800b9ae:	89fb      	ldrh	r3, [r7, #14]
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 800b9b6:	89fb      	ldrh	r3, [r7, #14]
 800b9b8:	e00c      	b.n	800b9d4 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f004 fac8 	bl	800ff54 <phhalHw_Pn5180_FieldOn>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	81fb      	strh	r3, [r7, #14]
 800b9c8:	89fb      	ldrh	r3, [r7, #14]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 800b9ce:	89fb      	ldrh	r3, [r7, #14]
 800b9d0:	e000      	b.n	800b9d4 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 800b9d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	2156      	movs	r1, #86	@ 0x56
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f004 fbe5 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 800b9fa:	89fb      	ldrh	r3, [r7, #14]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b23      	cmp	r3, #35	@ 0x23
 800ba00:	d005      	beq.n	800ba0e <phacDiscLoop_Sw_Int_FieldOn+0x32>
 800ba02:	89fb      	ldrh	r3, [r7, #14]
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 800ba0a:	89fb      	ldrh	r3, [r7, #14]
 800ba0c:	e01d      	b.n	800ba4a <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba12:	4618      	mov	r0, r3
 800ba14:	f004 fa9e 	bl	800ff54 <phhalHw_Pn5180_FieldOn>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 800ba1c:	89fb      	ldrh	r3, [r7, #14]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b0a      	cmp	r3, #10
 800ba22:	d102      	bne.n	800ba2a <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 800ba24:	f244 0382 	movw	r3, #16514	@ 0x4082
 800ba28:	e00f      	b.n	800ba4a <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800ba2a:	89fb      	ldrh	r3, [r7, #14]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800ba30:	89fb      	ldrh	r3, [r7, #14]
 800ba32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d106      	bne.n	800ba48 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800ba3a:	89fb      	ldrh	r3, [r7, #14]
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	e000      	b.n	800ba4a <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 800ba48:	89fb      	ldrh	r3, [r7, #14]
    }
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	4603      	mov	r3, r0
 800ba5a:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00f      	beq.n	800ba84 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800ba64:	88fb      	ldrh	r3, [r7, #6]
 800ba66:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d00b      	beq.n	800ba84 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 800ba70:	2b05      	cmp	r3, #5
 800ba72:	d007      	beq.n	800ba84 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800ba74:	88fb      	ldrh	r3, [r7, #6]
 800ba76:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d003      	beq.n	800ba84 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 800ba7c:	88fb      	ldrh	r3, [r7, #6]
 800ba7e:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 800ba80:	2b06      	cmp	r3, #6
 800ba82:	d101      	bne.n	800ba88 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e000      	b.n	800ba8a <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 800ba88:	2300      	movs	r3, #0
    }
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7f9b      	ldrb	r3, [r3, #30]
 800baaa:	f023 0301 	bic.w	r3, r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
 800bab8:	e014      	b.n	800bae4 <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 800baba:	7bfa      	ldrb	r2, [r7, #15]
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	4613      	mov	r3, r2
 800bac0:	011b      	lsls	r3, r3, #4
 800bac2:	1a9b      	subs	r3, r3, r2
 800bac4:	440b      	add	r3, r1
 800bac6:	336c      	adds	r3, #108	@ 0x6c
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 800bacc:	7bfa      	ldrb	r2, [r7, #15]
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	4613      	mov	r3, r2
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	440b      	add	r3, r1
 800bad8:	336a      	adds	r3, #106	@ 0x6a
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	3301      	adds	r3, #1
 800bae2:	73fb      	strb	r3, [r7, #15]
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0e7      	beq.n	800baba <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	335e      	adds	r3, #94	@ 0x5e
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f00a f992 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 800bafa:	4603      	mov	r3, r0
 800bafc:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800bafe:	89bb      	ldrh	r3, [r7, #12]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff ffa6 	bl	800ba52 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d02d      	beq.n	800bb68 <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800bb0c:	89bb      	ldrh	r3, [r7, #12]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d106      	bne.n	800bb22 <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7f9b      	ldrb	r3, [r3, #30]
 800bb18:	f043 0301 	orr.w	r3, r3, #1
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb26:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800bb2a:	2107      	movs	r1, #7
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f004 fb47 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800bb32:	4603      	mov	r3, r0
 800bb34:	81bb      	strh	r3, [r7, #12]
 800bb36:	89bb      	ldrh	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 800bb3c:	89bb      	ldrh	r3, [r7, #12]
 800bb3e:	e014      	b.n	800bb6a <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb44:	4618      	mov	r0, r3
 800bb46:	f00a f979 	bl	8015e3c <phpalI14443p3a_Sw_HaltA>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	81bb      	strh	r3, [r7, #12]
 800bb4e:	89bb      	ldrh	r3, [r7, #12]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b12      	cmp	r3, #18
 800bb54:	d101      	bne.n	800bb5a <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 800bb56:	89bb      	ldrh	r3, [r7, #12]
 800bb58:	e007      	b.n	800bb6a <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800bb62:	f244 0387 	movw	r3, #16519	@ 0x4087
 800bb66:	e000      	b.n	800bb6a <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 800bb68:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b08b      	sub	sp, #44	@ 0x2c
 800bb78:	af02      	add	r7, sp, #8
 800bb7a:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 800bb80:	f107 030c 	add.w	r3, r7, #12
 800bb84:	2200      	movs	r2, #0
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7f9b      	ldrb	r3, [r3, #30]
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00a      	beq.n	800bbbe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7a9b      	ldrb	r3, [r3, #10]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d106      	bne.n	800bbbe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800bbb8:	f244 0385 	movw	r3, #16517	@ 0x4085
 800bbbc:	e2d9      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	8a1b      	ldrh	r3, [r3, #16]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	2135      	movs	r1, #53	@ 0x35
 800bbca:	f004 faf9 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	83fb      	strh	r3, [r7, #30]
 800bbd2:	8bfb      	ldrh	r3, [r7, #30]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 800bbd8:	8bfb      	ldrh	r3, [r7, #30]
 800bbda:	e2ca      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f003 fd6e 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	83fb      	strh	r3, [r7, #30]
 800bbec:	8bfb      	ldrh	r3, [r7, #30]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 800bbf2:	8bfb      	ldrh	r3, [r7, #30]
 800bbf4:	e2bd      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	335e      	adds	r3, #94	@ 0x5e
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f00a f90c 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 800bc06:	4603      	mov	r3, r0
 800bc08:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800bc0a:	8bfb      	ldrh	r3, [r7, #30]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d109      	bne.n	800bc26 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d102      	bne.n	800bc22 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800bc1c:	f244 0381 	movw	r3, #16513	@ 0x4081
 800bc20:	e2a7      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 800bc22:	2301      	movs	r3, #1
 800bc24:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800bc36:	8bfb      	ldrh	r3, [r7, #30]
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d14a      	bne.n	800bcd4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f040 809e 	bne.w	800bd86 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4e:	2201      	movs	r2, #1
 800bc50:	2120      	movs	r1, #32
 800bc52:	4618      	mov	r0, r3
 800bc54:	f004 fab4 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	83fb      	strh	r3, [r7, #30]
 800bc5c:	8bfb      	ldrh	r3, [r7, #30]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 800bc62:	8bfb      	ldrh	r3, [r7, #30]
 800bc64:	e285      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	336a      	adds	r3, #106	@ 0x6a
 800bc6a:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	3360      	adds	r3, #96	@ 0x60
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	4619      	mov	r1, r3
 800bc78:	f003 f896 	bl	800eda8 <phalT1T_Sw_ReadUID>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800bc80:	8bfb      	ldrh	r3, [r7, #30]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d115      	bne.n	800bcb4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7f9b      	ldrb	r3, [r3, #30]
 800bca4:	f023 0301 	bic.w	r3, r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 800bcae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bcb2:	e25e      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800bcb4:	8bfb      	ldrh	r3, [r7, #30]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d109      	bne.n	800bcd0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	7f9b      	ldrb	r3, [r3, #30]
 800bcc0:	f043 0301 	orr.w	r3, r3, #1
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800bcca:	f244 0381 	movw	r3, #16513	@ 0x4081
 800bcce:	e250      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 800bcd0:	8bfb      	ldrh	r3, [r7, #30]
 800bcd2:	e24e      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800bcd4:	8bfb      	ldrh	r3, [r7, #30]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d010      	beq.n	800bcfe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7a9b      	ldrb	r3, [r3, #10]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10c      	bne.n	800bcfe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7f9b      	ldrb	r3, [r3, #30]
 800bcf0:	f043 0301 	orr.w	r3, r3, #1
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	779a      	strb	r2, [r3, #30]
            return status;
 800bcfa:	8bfb      	ldrh	r3, [r7, #30]
 800bcfc:	e239      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d131      	bne.n	800bd6c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800bd0c:	e01b      	b.n	800bd46 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 800bd0e:	7ebb      	ldrb	r3, [r7, #26]
 800bd10:	3301      	adds	r3, #1
 800bd12:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd18:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f004 f992 	bl	8010048 <phhalHw_Pn5180_Wait>
 800bd24:	4603      	mov	r3, r0
 800bd26:	83fb      	strh	r3, [r7, #30]
 800bd28:	8bfb      	ldrh	r3, [r7, #30]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 800bd2e:	8bfb      	ldrh	r3, [r7, #30]
 800bd30:	e21f      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	335e      	adds	r3, #94	@ 0x5e
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f00a f86e 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 800bd42:	4603      	mov	r3, r0
 800bd44:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800bd46:	8bfb      	ldrh	r3, [r7, #30]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d102      	bne.n	800bd54 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 800bd4e:	7ebb      	ldrb	r3, [r7, #26]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d9dc      	bls.n	800bd0e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7f9b      	ldrb	r3, [r3, #30]
 800bd58:	f023 0301 	bic.w	r3, r3, #1
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800bd62:	8bfb      	ldrh	r3, [r7, #30]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00e      	beq.n	800bd86 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 800bd68:	8bfb      	ldrh	r3, [r7, #30]
 800bd6a:	e202      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 800bd6c:	8bfb      	ldrh	r3, [r7, #30]
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d008      	beq.n	800bd86 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7f9b      	ldrb	r3, [r3, #30]
 800bd78:	f023 0301 	bic.w	r3, r3, #1
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	779a      	strb	r2, [r3, #30]
                return status;
 800bd82:	8bfb      	ldrh	r3, [r7, #30]
 800bd84:	e1f5      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f040 81d9 	bne.w	800c144 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7f9b      	ldrb	r3, [r3, #30]
 800bd96:	f043 0301 	orr.w	r3, r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800bda0:	f244 0381 	movw	r3, #16513	@ 0x4081
 800bda4:	e1e5      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	7a9b      	ldrb	r3, [r3, #10]
 800bdaa:	7f3a      	ldrb	r2, [r7, #28]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	f200 81c6 	bhi.w	800c13e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	7f9b      	ldrb	r3, [r3, #30]
 800bdb6:	f023 0301 	bic.w	r3, r3, #1
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	76fb      	strb	r3, [r7, #27]
 800bdc4:	e13f      	b.n	800c046 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 800bdca:	e0a8      	b.n	800bf1e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bdd0:	7efb      	ldrb	r3, [r7, #27]
 800bdd2:	4a9a      	ldr	r2, [pc, #616]	@ (800c03c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800bdd4:	5cd1      	ldrb	r1, [r2, r3]
 800bdd6:	7cfc      	ldrb	r4, [r7, #19]
 800bdd8:	f107 020c 	add.w	r2, r7, #12
 800bddc:	f107 0313 	add.w	r3, r7, #19
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	f107 030c 	add.w	r3, r7, #12
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	4623      	mov	r3, r4
 800bdea:	f00a f87e 	bl	8015eea <phpalI14443p3a_Sw_Anticollision>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d12e      	bne.n	800be5a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800be00:	e024      	b.n	800be4c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 800be02:	7ebb      	ldrb	r3, [r7, #26]
 800be04:	3301      	adds	r3, #1
 800be06:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800be10:	2100      	movs	r1, #0
 800be12:	4618      	mov	r0, r3
 800be14:	f004 f918 	bl	8010048 <phhalHw_Pn5180_Wait>
 800be18:	4603      	mov	r3, r0
 800be1a:	83fb      	strh	r3, [r7, #30]
 800be1c:	8bfb      	ldrh	r3, [r7, #30]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 800be22:	8bfb      	ldrh	r3, [r7, #30]
 800be24:	e1a5      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800be2a:	7efb      	ldrb	r3, [r7, #27]
 800be2c:	4a83      	ldr	r2, [pc, #524]	@ (800c03c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800be2e:	5cd1      	ldrb	r1, [r2, r3]
 800be30:	7cfc      	ldrb	r4, [r7, #19]
 800be32:	f107 020c 	add.w	r2, r7, #12
 800be36:	f107 0313 	add.w	r3, r7, #19
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	f107 030c 	add.w	r3, r7, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4623      	mov	r3, r4
 800be44:	f00a f851 	bl	8015eea <phpalI14443p3a_Sw_Anticollision>
 800be48:	4603      	mov	r3, r0
 800be4a:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800be4c:	8bfb      	ldrh	r3, [r7, #30]
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b01      	cmp	r3, #1
 800be52:	d102      	bne.n	800be5a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 800be54:	7ebb      	ldrb	r3, [r7, #26]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d9d3      	bls.n	800be02 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800be5a:	8bfb      	ldrh	r3, [r7, #30]
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d158      	bne.n	800bf14 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d102      	bne.n	800be72 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800be6c:	f244 0381 	movw	r3, #16513	@ 0x4081
 800be70:	e17f      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	7f9b      	ldrb	r3, [r3, #30]
 800be76:	f043 0301 	orr.w	r3, r3, #1
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	7a9b      	ldrb	r3, [r3, #10]
 800be84:	7f3a      	ldrb	r2, [r7, #28]
 800be86:	429a      	cmp	r2, r3
 800be88:	d301      	bcc.n	800be8e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e171      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 800be8e:	7cfb      	ldrb	r3, [r7, #19]
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	2b06      	cmp	r3, #6
 800be96:	dc1d      	bgt.n	800bed4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 800be98:	7cfb      	ldrb	r3, [r7, #19]
 800be9a:	3301      	adds	r3, #1
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 800bea0:	7cfb      	ldrb	r3, [r7, #19]
 800bea2:	091b      	lsrs	r3, r3, #4
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	3320      	adds	r3, #32
 800bea8:	443b      	add	r3, r7
 800beaa:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800beae:	7cfb      	ldrb	r3, [r7, #19]
 800beb0:	f003 0307 	and.w	r3, r3, #7
 800beb4:	3b01      	subs	r3, #1
 800beb6:	2101      	movs	r1, #1
 800beb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	7cf9      	ldrb	r1, [r7, #19]
 800bec0:	0909      	lsrs	r1, r1, #4
 800bec2:	b2c9      	uxtb	r1, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	f101 0320 	add.w	r3, r1, #32
 800becc:	443b      	add	r3, r7
 800bece:	f803 2c14 	strb.w	r2, [r3, #-20]
 800bed2:	e024      	b.n	800bf1e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 800bed4:	7cfb      	ldrb	r3, [r7, #19]
 800bed6:	091b      	lsrs	r3, r3, #4
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	3301      	adds	r3, #1
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	011b      	lsls	r3, r3, #4
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 800bee4:	7cfb      	ldrb	r3, [r7, #19]
 800bee6:	091b      	lsrs	r3, r3, #4
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	3b01      	subs	r3, #1
 800beec:	b2db      	uxtb	r3, r3
 800beee:	3320      	adds	r3, #32
 800bef0:	443b      	add	r3, r7
 800bef2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800bef6:	7cfa      	ldrb	r2, [r7, #19]
 800bef8:	0912      	lsrs	r2, r2, #4
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	3a01      	subs	r2, #1
 800befe:	b2d2      	uxtb	r2, r2
 800bf00:	4611      	mov	r1, r2
 800bf02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	f101 0320 	add.w	r3, r1, #32
 800bf0c:	443b      	add	r3, r7
 800bf0e:	f803 2c14 	strb.w	r2, [r3, #-20]
 800bf12:	e004      	b.n	800bf1e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 800bf14:	8bfb      	ldrh	r3, [r7, #30]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 800bf1a:	8bfb      	ldrh	r3, [r7, #30]
 800bf1c:	e129      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 800bf1e:	7cfb      	ldrb	r3, [r7, #19]
 800bf20:	2b40      	cmp	r3, #64	@ 0x40
 800bf22:	f47f af53 	bne.w	800bdcc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 800bf26:	7e7b      	ldrb	r3, [r7, #25]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d12d      	bne.n	800bf88 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	7f9b      	ldrb	r3, [r3, #30]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d127      	bne.n	800bf88 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 800bf38:	7f3a      	ldrb	r2, [r7, #28]
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	1a9b      	subs	r3, r3, r2
 800bf42:	440b      	add	r3, r1
 800bf44:	335e      	adds	r3, #94	@ 0x5e
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 800bf50:	7efb      	ldrb	r3, [r7, #27]
 800bf52:	4a3a      	ldr	r2, [pc, #232]	@ (800c03c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800bf54:	5cd3      	ldrb	r3, [r2, r3]
 800bf56:	2b93      	cmp	r3, #147	@ 0x93
 800bf58:	d010      	beq.n	800bf7c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 800bf5a:	7f3a      	ldrb	r2, [r7, #28]
 800bf5c:	6879      	ldr	r1, [r7, #4]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	011b      	lsls	r3, r3, #4
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	440b      	add	r3, r1
 800bf66:	335e      	adds	r3, #94	@ 0x5e
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bf6e:	2b40      	cmp	r3, #64	@ 0x40
 800bf70:	d10a      	bne.n	800bf88 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 800bf72:	7efb      	ldrb	r3, [r7, #27]
 800bf74:	4a31      	ldr	r2, [pc, #196]	@ (800c03c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800bf76:	5cd3      	ldrb	r3, [r2, r3]
 800bf78:	2b95      	cmp	r3, #149	@ 0x95
 800bf7a:	d105      	bne.n	800bf88 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 800bf7c:	7b3b      	ldrb	r3, [r7, #12]
 800bf7e:	2b88      	cmp	r3, #136	@ 0x88
 800bf80:	d102      	bne.n	800bf88 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 800bf82:	f244 0306 	movw	r3, #16390	@ 0x4006
 800bf86:	e0f4      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bf8c:	7efb      	ldrb	r3, [r7, #27]
 800bf8e:	4a2b      	ldr	r2, [pc, #172]	@ (800c03c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800bf90:	5cd1      	ldrb	r1, [r2, r3]
 800bf92:	7f3a      	ldrb	r2, [r7, #28]
 800bf94:	4613      	mov	r3, r2
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	1a9b      	subs	r3, r3, r2
 800bf9a:	3360      	adds	r3, #96	@ 0x60
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	330b      	adds	r3, #11
 800bfa2:	f107 020c 	add.w	r2, r7, #12
 800bfa6:	f00a f9d7 	bl	8016358 <phpalI14443p3a_Sw_Select>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d12e      	bne.n	800c016 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800bfbc:	e024      	b.n	800c008 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 800bfbe:	7ebb      	ldrb	r3, [r7, #26]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800bfcc:	2100      	movs	r1, #0
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f004 f83a 	bl	8010048 <phhalHw_Pn5180_Wait>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	83fb      	strh	r3, [r7, #30]
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 800bfde:	8bfb      	ldrh	r3, [r7, #30]
 800bfe0:	e0c7      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bfe6:	7efb      	ldrb	r3, [r7, #27]
 800bfe8:	4a14      	ldr	r2, [pc, #80]	@ (800c03c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800bfea:	5cd1      	ldrb	r1, [r2, r3]
 800bfec:	7f3a      	ldrb	r2, [r7, #28]
 800bfee:	4613      	mov	r3, r2
 800bff0:	011b      	lsls	r3, r3, #4
 800bff2:	1a9b      	subs	r3, r3, r2
 800bff4:	3360      	adds	r3, #96	@ 0x60
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	4413      	add	r3, r2
 800bffa:	330b      	adds	r3, #11
 800bffc:	f107 020c 	add.w	r2, r7, #12
 800c000:	f00a f9aa 	bl	8016358 <phpalI14443p3a_Sw_Select>
 800c004:	4603      	mov	r3, r0
 800c006:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800c008:	8bfb      	ldrh	r3, [r7, #30]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d102      	bne.n	800c016 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 800c010:	7ebb      	ldrb	r3, [r7, #26]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d9d3      	bls.n	800bfbe <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c016:	8bfb      	ldrh	r3, [r7, #30]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10c      	bne.n	800c038 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 800c01e:	7f3a      	ldrb	r2, [r7, #28]
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	4613      	mov	r3, r2
 800c024:	011b      	lsls	r3, r3, #4
 800c026:	1a9b      	subs	r3, r3, r2
 800c028:	440b      	add	r3, r1
 800c02a:	336b      	adds	r3, #107	@ 0x6b
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 0304 	and.w	r3, r3, #4
 800c032:	2b00      	cmp	r3, #0
 800c034:	d104      	bne.n	800c040 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 800c036:	e00a      	b.n	800c04e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 800c038:	8bfb      	ldrh	r3, [r7, #30]
 800c03a:	e09a      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 800c03c:	08026bfc 	.word	0x08026bfc
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800c040:	7efb      	ldrb	r3, [r7, #27]
 800c042:	3301      	adds	r3, #1
 800c044:	76fb      	strb	r3, [r7, #27]
 800c046:	7efb      	ldrb	r3, [r7, #27]
 800c048:	2b02      	cmp	r3, #2
 800c04a:	f67f aebc 	bls.w	800bdc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 800c04e:	8bfb      	ldrh	r3, [r7, #30]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d174      	bne.n	800c13e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c058:	7f3a      	ldrb	r2, [r7, #28]
 800c05a:	4613      	mov	r3, r2
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	1a9b      	subs	r3, r3, r2
 800c060:	3358      	adds	r3, #88	@ 0x58
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	4413      	add	r3, r2
 800c066:	f103 0108 	add.w	r1, r3, #8
 800c06a:	7f3a      	ldrb	r2, [r7, #28]
 800c06c:	4613      	mov	r3, r2
 800c06e:	011b      	lsls	r3, r3, #4
 800c070:	1a9b      	subs	r3, r3, r2
 800c072:	3360      	adds	r3, #96	@ 0x60
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4413      	add	r3, r2
 800c078:	330a      	adds	r3, #10
 800c07a:	461a      	mov	r2, r3
 800c07c:	f00a fc3d 	bl	80168fa <phpalI14443p3a_Sw_GetSerialNo>
 800c080:	4603      	mov	r3, r0
 800c082:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 800c084:	8bfb      	ldrh	r3, [r7, #30]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 800c08a:	8bfb      	ldrh	r3, [r7, #30]
 800c08c:	e071      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 800c08e:	7f3b      	ldrb	r3, [r7, #28]
 800c090:	3301      	adds	r3, #1
 800c092:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	7f9b      	ldrb	r3, [r3, #30]
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d057      	beq.n	800c150 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	7a9b      	ldrb	r3, [r3, #10]
 800c0a4:	7f3a      	ldrb	r2, [r7, #28]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d252      	bcs.n	800c150 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f009 fec4 	bl	8015e3c <phpalI14443p3a_Sw_HaltA>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 800c0b8:	8bfb      	ldrh	r3, [r7, #30]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 800c0be:	8bfb      	ldrh	r3, [r7, #30]
 800c0c0:	e057      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 800c0c2:	7f3b      	ldrb	r3, [r7, #28]
 800c0c4:	1e5a      	subs	r2, r3, #1
 800c0c6:	6879      	ldr	r1, [r7, #4]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	336c      	adds	r3, #108	@ 0x6c
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c0da:	7f3a      	ldrb	r2, [r7, #28]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	1a9b      	subs	r3, r3, r2
 800c0e2:	3358      	adds	r3, #88	@ 0x58
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	3306      	adds	r3, #6
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	f009 fe88 	bl	8015e00 <phpalI14443p3a_Sw_RequestA>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c0f4:	8bfb      	ldrh	r3, [r7, #30]
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d112      	bne.n	800c122 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 800c0fc:	7f3a      	ldrb	r2, [r7, #28]
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	4613      	mov	r3, r2
 800c102:	011b      	lsls	r3, r3, #4
 800c104:	1a9b      	subs	r3, r3, r2
 800c106:	440b      	add	r3, r1
 800c108:	335e      	adds	r3, #94	@ 0x5e
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d116      	bne.n	800c13e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7f9b      	ldrb	r3, [r3, #30]
 800c114:	f043 0301 	orr.w	r3, r3, #1
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 800c11e:	2300      	movs	r3, #0
 800c120:	e027      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c122:	8bfb      	ldrh	r3, [r7, #30]
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b03      	cmp	r3, #3
 800c128:	d107      	bne.n	800c13a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	7f9b      	ldrb	r3, [r3, #30]
 800c12e:	f043 0301 	orr.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	779a      	strb	r2, [r3, #30]
 800c138:	e001      	b.n	800c13e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 800c13a:	8bfb      	ldrh	r3, [r7, #30]
 800c13c:	e019      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 800c13e:	7f7b      	ldrb	r3, [r7, #29]
 800c140:	3301      	adds	r3, #1
 800c142:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7a9b      	ldrb	r3, [r3, #10]
 800c148:	7f7a      	ldrb	r2, [r7, #29]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	f67f ae2b 	bls.w	800bda6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	7f3a      	ldrb	r2, [r7, #28]
 800c154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7f3a      	ldrb	r2, [r7, #28]
 800c15c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c16a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c16e:	e000      	b.n	800c172 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 800c170:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800c172:	4618      	mov	r0, r3
 800c174:	3724      	adds	r7, #36	@ 0x24
 800c176:	46bd      	mov	sp, r7
 800c178:	bd90      	pop	{r4, r7, pc}
 800c17a:	bf00      	nop

0800c17c <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	b090      	sub	sp, #64	@ 0x40
 800c182:	af06      	add	r7, sp, #24
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	460b      	mov	r3, r1
 800c188:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800c18a:	2300      	movs	r3, #0
 800c18c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d202      	bcs.n	800c1a6 <phacDiscLoop_Sw_Int_ActivateA+0x2a>
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d002      	beq.n	800c1ac <phacDiscLoop_Sw_Int_ActivateA+0x30>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800c1a6:	f244 0321 	movw	r3, #16417	@ 0x4021
 800c1aa:	e206      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d902      	bls.n	800c1bc <phacDiscLoop_Sw_Int_ActivateA+0x40>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800c1b6:	f244 037f 	movw	r3, #16511	@ 0x407f
 800c1ba:	e1fe      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 800c1bc:	78fa      	ldrb	r2, [r7, #3]
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	1a9b      	subs	r3, r3, r2
 800c1c6:	440b      	add	r3, r1
 800c1c8:	336c      	adds	r3, #108	@ 0x6c
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d175      	bne.n	800c2bc <phacDiscLoop_Sw_Int_ActivateA+0x140>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c1d6:	e021      	b.n	800c21c <phacDiscLoop_Sw_Int_ActivateA+0xa0>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 800c1d8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	011b      	lsls	r3, r3, #4
 800c1e2:	1a9b      	subs	r3, r3, r2
 800c1e4:	440b      	add	r3, r1
 800c1e6:	336c      	adds	r3, #108	@ 0x6c
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d111      	bne.n	800c212 <phacDiscLoop_Sw_Int_ActivateA+0x96>
 800c1ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c1f2:	78fb      	ldrb	r3, [r7, #3]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d00c      	beq.n	800c212 <phacDiscLoop_Sw_Int_ActivateA+0x96>
            {
                bActiveDevice = 1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 800c1fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c202:	6879      	ldr	r1, [r7, #4]
 800c204:	4613      	mov	r3, r2
 800c206:	011b      	lsls	r3, r3, #4
 800c208:	1a9b      	subs	r3, r3, r2
 800c20a:	440b      	add	r3, r1
 800c20c:	336c      	adds	r3, #108	@ 0x6c
 800c20e:	2201      	movs	r2, #1
 800c210:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800c212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c216:	3301      	adds	r3, #1
 800c218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c222:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c226:	429a      	cmp	r2, r3
 800c228:	d3d6      	bcc.n	800c1d8 <phacDiscLoop_Sw_Int_ActivateA+0x5c>
            }
        }
        if (bActiveDevice != 0U)
 800c22a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00b      	beq.n	800c24a <phacDiscLoop_Sw_Int_ActivateA+0xce>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c236:	4618      	mov	r0, r3
 800c238:	f009 fe00 	bl	8015e3c <phpalI14443p3a_Sw_HaltA>
 800c23c:	4603      	mov	r3, r0
 800c23e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 800c240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <phacDiscLoop_Sw_Int_ActivateA+0xce>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 800c246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c248:	e1b7      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c24e:	78fa      	ldrb	r2, [r7, #3]
 800c250:	4613      	mov	r3, r2
 800c252:	011b      	lsls	r3, r3, #4
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	3358      	adds	r3, #88	@ 0x58
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	4413      	add	r3, r2
 800c25c:	f103 0408 	add.w	r4, r3, #8
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	4613      	mov	r3, r2
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	440b      	add	r3, r1
 800c26c:	336a      	adds	r3, #106	@ 0x6a
 800c26e:	7819      	ldrb	r1, [r3, #0]
 800c270:	78fa      	ldrb	r2, [r7, #3]
 800c272:	4613      	mov	r3, r2
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	1a9b      	subs	r3, r3, r2
 800c278:	3360      	adds	r3, #96	@ 0x60
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	330b      	adds	r3, #11
 800c280:	f107 0518 	add.w	r5, r7, #24
 800c284:	f107 0216 	add.w	r2, r7, #22
 800c288:	9202      	str	r2, [sp, #8]
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	f107 0317 	add.w	r3, r7, #23
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	462b      	mov	r3, r5
 800c294:	460a      	mov	r2, r1
 800c296:	4621      	mov	r1, r4
 800c298:	f00a f876 	bl	8016388 <phpalI14443p3a_Sw_ActivateCard>
 800c29c:	4603      	mov	r3, r0
 800c29e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c2a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <phacDiscLoop_Sw_Int_ActivateA+0x12e>
 800c2a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2a8:	e187      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	011b      	lsls	r3, r3, #4
 800c2b2:	1a9b      	subs	r3, r3, r2
 800c2b4:	440b      	add	r3, r1
 800c2b6:	336c      	adds	r3, #108	@ 0x6c
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 800c2bc:	78fa      	ldrb	r2, [r7, #3]
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	440b      	add	r3, r1
 800c2c8:	336b      	adds	r3, #107	@ 0x6b
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 800c2d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c2d8:	095b      	lsrs	r3, r3, #5
 800c2da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 800c2de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	f040 80a0 	bne.w	800c428 <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	215e      	movs	r1, #94	@ 0x5e
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f003 ff65 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <phacDiscLoop_Sw_Int_ActivateA+0x188>
 800c300:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c302:	e15a      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800c326:	9201      	str	r2, [sp, #4]
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	462b      	mov	r3, r5
 800c32c:	4622      	mov	r2, r4
 800c32e:	f00d f877 	bl	8019420 <phpalI14443p4a_Sw_ActivateCard>
 800c332:	4603      	mov	r3, r0
 800c334:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c336:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <phacDiscLoop_Sw_Int_ActivateA+0x1c4>
 800c33c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c33e:	e13c      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c346:	2b01      	cmp	r3, #1
 800c348:	d027      	beq.n	800c39a <phacDiscLoop_Sw_Int_ActivateA+0x21e>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34e:	f107 020e 	add.w	r2, r7, #14
 800c352:	2103      	movs	r1, #3
 800c354:	4618      	mov	r0, r3
 800c356:	f00c fc83 	bl	8018c60 <phpalI14443p4a_Sw_GetConfig>
 800c35a:	4603      	mov	r3, r0
 800c35c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c35e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c360:	2b00      	cmp	r3, #0
 800c362:	d001      	beq.n	800c368 <phacDiscLoop_Sw_Int_ActivateA+0x1ec>
 800c364:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c366:	e128      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 800c368:	89fb      	ldrh	r3, [r7, #14]
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c376:	f107 020e 	add.w	r2, r7, #14
 800c37a:	2104      	movs	r1, #4
 800c37c:	4618      	mov	r0, r3
 800c37e:	f00c fc6f 	bl	8018c60 <phpalI14443p4a_Sw_GetConfig>
 800c382:	4603      	mov	r3, r0
 800c384:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <phacDiscLoop_Sw_Int_ActivateA+0x214>
 800c38c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c38e:	e114      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 800c390:	89fb      	ldrh	r3, [r7, #14]
 800c392:	b2da      	uxtb	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c39e:	f107 0413 	add.w	r4, r7, #19
 800c3a2:	f107 0214 	add.w	r2, r7, #20
 800c3a6:	f107 0115 	add.w	r1, r7, #21
 800c3aa:	f107 0310 	add.w	r3, r7, #16
 800c3ae:	9302      	str	r3, [sp, #8]
 800c3b0:	f107 0311 	add.w	r3, r7, #17
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	f107 0312 	add.w	r3, r7, #18
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	4623      	mov	r3, r4
 800c3be:	f00d f8e7 	bl	8019590 <phpalI14443p4a_Sw_GetProtocolParams>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c3c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <phacDiscLoop_Sw_Int_ActivateA+0x254>
 800c3cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3ce:	e0f4      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d109      	bne.n	800c3ee <phacDiscLoop_Sw_Int_ActivateA+0x272>
        {
            if (bFsci > pDataParams->bFsciMax)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800c3e0:	7c3b      	ldrb	r3, [r7, #16]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d203      	bcs.n	800c3ee <phacDiscLoop_Sw_Int_ActivateA+0x272>
            {
                bFsci = pDataParams->bFsciMax;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c3ec:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800c3f2:	7d7d      	ldrb	r5, [r7, #21]
 800c3f4:	7d3e      	ldrb	r6, [r7, #20]
 800c3f6:	f897 c013 	ldrb.w	ip, [r7, #19]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800c400:	7cba      	ldrb	r2, [r7, #18]
 800c402:	7c79      	ldrb	r1, [r7, #17]
 800c404:	7c38      	ldrb	r0, [r7, #16]
 800c406:	9003      	str	r0, [sp, #12]
 800c408:	9102      	str	r1, [sp, #8]
 800c40a:	9201      	str	r2, [sp, #4]
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	4663      	mov	r3, ip
 800c410:	4632      	mov	r2, r6
 800c412:	4629      	mov	r1, r5
 800c414:	4620      	mov	r0, r4
 800c416:	f00b f92c 	bl	8017672 <phpalI14443p4_Sw_SetProtocol>
 800c41a:	4603      	mov	r3, r0
 800c41c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c41e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
 800c424:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c426:	e0c8      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 800c428:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d13d      	bne.n	800c4ac <phacDiscLoop_Sw_Int_ActivateA+0x330>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c436:	2b01      	cmp	r3, #1
 800c438:	d102      	bne.n	800c440 <phacDiscLoop_Sw_Int_ActivateA+0x2c4>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c43a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c43e:	e0bc      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS
        /* Send ATR_REQ and PSL_REQ */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800c444:	78fa      	ldrb	r2, [r7, #3]
 800c446:	4613      	mov	r3, r2
 800c448:	011b      	lsls	r3, r3, #4
 800c44a:	1a9b      	subs	r3, r3, r2
 800c44c:	3358      	adds	r3, #88	@ 0x58
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	4413      	add	r3, r2
 800c452:	f103 0c08 	add.w	ip, r3, #8
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800c46e:	6879      	ldr	r1, [r7, #4]
 800c470:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 800c478:	687c      	ldr	r4, [r7, #4]
 800c47a:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800c47c:	687d      	ldr	r5, [r7, #4]
 800c47e:	3580      	adds	r5, #128	@ 0x80
 800c480:	9505      	str	r5, [sp, #20]
 800c482:	9404      	str	r4, [sp, #16]
 800c484:	9003      	str	r0, [sp, #12]
 800c486:	9102      	str	r1, [sp, #8]
 800c488:	9201      	str	r2, [sp, #4]
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	4643      	mov	r3, r8
 800c48e:	4672      	mov	r2, lr
 800c490:	4661      	mov	r1, ip
 800c492:	4630      	mov	r0, r6
 800c494:	f00d fb98 	bl	8019bc8 <phpalI18092mPI_Sw_Atr>
 800c498:	4603      	mov	r3, r0
 800c49a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c49c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <phacDiscLoop_Sw_Int_ActivateA+0x32a>
 800c4a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4a4:	e089      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pGi,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800c4a6:	f244 038d 	movw	r3, #16525	@ 0x408d
 800c4aa:	e086      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 800c4ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d175      	bne.n	800c5a0 <phacDiscLoop_Sw_Int_ActivateA+0x424>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d16d      	bne.n	800c59a <phacDiscLoop_Sw_Int_ActivateA+0x41e>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	215e      	movs	r1, #94	@ 0x5e
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f003 fe7a 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c4d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <phacDiscLoop_Sw_Int_ActivateA+0x35e>
 800c4d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4d8:	e06f      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800c4fc:	9201      	str	r2, [sp, #4]
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	462b      	mov	r3, r5
 800c502:	4622      	mov	r2, r4
 800c504:	f00c ff8c 	bl	8019420 <phpalI14443p4a_Sw_ActivateCard>
 800c508:	4603      	mov	r3, r0
 800c50a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c50c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <phacDiscLoop_Sw_Int_ActivateA+0x39a>
 800c512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c514:	e051      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c51a:	f107 0413 	add.w	r4, r7, #19
 800c51e:	f107 0214 	add.w	r2, r7, #20
 800c522:	f107 0115 	add.w	r1, r7, #21
 800c526:	f107 0310 	add.w	r3, r7, #16
 800c52a:	9302      	str	r3, [sp, #8]
 800c52c:	f107 0311 	add.w	r3, r7, #17
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	f107 0312 	add.w	r3, r7, #18
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	4623      	mov	r3, r4
 800c53a:	f00d f829 	bl	8019590 <phpalI14443p4a_Sw_GetProtocolParams>
 800c53e:	4603      	mov	r3, r0
 800c540:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c544:	2b00      	cmp	r3, #0
 800c546:	d001      	beq.n	800c54c <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 800c548:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c54a:	e036      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800c552:	7c3b      	ldrb	r3, [r7, #16]
 800c554:	429a      	cmp	r2, r3
 800c556:	d203      	bcs.n	800c560 <phacDiscLoop_Sw_Int_ActivateA+0x3e4>
            {
                bFsci = pDataParams->bFsciMax;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c55e:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800c564:	7d7d      	ldrb	r5, [r7, #21]
 800c566:	7d3e      	ldrb	r6, [r7, #20]
 800c568:	f897 c013 	ldrb.w	ip, [r7, #19]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800c572:	7cba      	ldrb	r2, [r7, #18]
 800c574:	7c79      	ldrb	r1, [r7, #17]
 800c576:	7c38      	ldrb	r0, [r7, #16]
 800c578:	9003      	str	r0, [sp, #12]
 800c57a:	9102      	str	r1, [sp, #8]
 800c57c:	9201      	str	r2, [sp, #4]
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	4663      	mov	r3, ip
 800c582:	4632      	mov	r2, r6
 800c584:	4629      	mov	r1, r5
 800c586:	4620      	mov	r0, r4
 800c588:	f00b f873 	bl	8017672 <phpalI14443p4_Sw_SetProtocol>
 800c58c:	4603      	mov	r3, r0
 800c58e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c590:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c592:	2b00      	cmp	r3, #0
 800c594:	d004      	beq.n	800c5a0 <phacDiscLoop_Sw_Int_ActivateA+0x424>
 800c596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c598:	e00f      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 800c59a:	f244 038e 	movw	r3, #16526	@ 0x408e
 800c59e:	e00c      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 800c5a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d107      	bne.n	800c5b8 <phacDiscLoop_Sw_Int_ActivateA+0x43c>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d102      	bne.n	800c5b8 <phacDiscLoop_Sw_Int_ActivateA+0x43c>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c5b2:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c5b6:	e000      	b.n	800c5ba <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    return PH_ERR_SUCCESS;
 800c5b8:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3728      	adds	r7, #40	@ 0x28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5c4 <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800c5c4:	b590      	push	{r4, r7, lr}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af02      	add	r7, sp, #8
 800c5ca:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	7f9b      	ldrb	r3, [r3, #30]
 800c5e0:	f023 0302 	bic.w	r3, r3, #2
 800c5e4:	b2da      	uxtb	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	73fb      	strb	r3, [r7, #15]
 800c5ee:	e00c      	b.n	800c60a <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 800c5f0:	7bfa      	ldrb	r2, [r7, #15]
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	440b      	add	r3, r1
 800c5fe:	33dc      	adds	r3, #220	@ 0xdc
 800c600:	2200      	movs	r2, #0
 800c602:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	3301      	adds	r3, #1
 800c608:	73fb      	strb	r3, [r7, #15]
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0ef      	beq.n	800c5f0 <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 10c1 	ldrb.w	r1, [r3, #193]	@ 0xc1
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 40c2 	ldrb.w	r4, [r3, #194]	@ 0xc2
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	33cd      	adds	r3, #205	@ 0xcd
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	32da      	adds	r2, #218	@ 0xda
 800c628:	9201      	str	r2, [sp, #4]
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	4623      	mov	r3, r4
 800c62e:	460a      	mov	r2, r1
 800c630:	2100      	movs	r1, #0
 800c632:	f00a fa86 	bl	8016b42 <phpalI14443p3b_Sw_WakeUpB>
 800c636:	4603      	mov	r3, r0
 800c638:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800c63a:	89bb      	ldrh	r3, [r7, #12]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7ff fa08 	bl	800ba52 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d015      	beq.n	800c674 <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800c648:	89bb      	ldrh	r3, [r7, #12]
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	7f9b      	ldrb	r3, [r3, #30]
 800c654:	f043 0302 	orr.w	r3, r3, #2
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c664:	3301      	adds	r3, #1
 800c666:	b2da      	uxtb	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800c66e:	f244 0387 	movw	r3, #16519	@ 0x4087
 800c672:	e000      	b.n	800c676 <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 800c674:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800c676:	4618      	mov	r0, r3
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd90      	pop	{r4, r7, pc}

0800c67e <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800c67e:	b5b0      	push	{r4, r5, r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af02      	add	r7, sp, #8
 800c684:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800c686:	2300      	movs	r3, #0
 800c688:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7f9b      	ldrb	r3, [r3, #30]
 800c68e:	f003 0302 	and.w	r3, r3, #2
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7adb      	ldrb	r3, [r3, #11]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c6a6:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c6aa:	e1e1      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    bRetryCount = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8a5b      	ldrh	r3, [r3, #18]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	2135      	movs	r1, #53	@ 0x35
 800c6c0:	f003 fd7e 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	81fb      	strh	r3, [r7, #14]
 800c6c8:	89fb      	ldrh	r3, [r7, #14]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 800c6ce:	89fb      	ldrh	r3, [r7, #14]
 800c6d0:	e1ce      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6d6:	2102      	movs	r1, #2
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f002 fff3 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	81fb      	strh	r3, [r7, #14]
 800c6e2:	89fb      	ldrh	r3, [r7, #14]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 800c6e8:	89fb      	ldrh	r3, [r7, #14]
 800c6ea:	e1c1      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	33cd      	adds	r3, #205	@ 0xcd
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	32da      	adds	r2, #218	@ 0xda
 800c704:	7ab9      	ldrb	r1, [r7, #10]
 800c706:	9201      	str	r2, [sp, #4]
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	462b      	mov	r3, r5
 800c70c:	4622      	mov	r2, r4
 800c70e:	f00a fa18 	bl	8016b42 <phpalI14443p3b_Sw_WakeUpB>
 800c712:	4603      	mov	r3, r0
 800c714:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 800c716:	89fb      	ldrh	r3, [r7, #14]
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 8195 	beq.w	800ca4a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c726:	2b01      	cmp	r3, #1
 800c728:	d148      	bne.n	800c7bc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c72a:	89fb      	ldrh	r3, [r7, #14]
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d130      	bne.n	800c794 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7f9b      	ldrb	r3, [r3, #30]
 800c736:	f023 0302 	bic.w	r3, r3, #2
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800c740:	f244 0381 	movw	r3, #16513	@ 0x4081
 800c744:	e194      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 800c746:	7a7b      	ldrb	r3, [r7, #9]
 800c748:	3301      	adds	r3, #1
 800c74a:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c750:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800c754:	2100      	movs	r1, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f003 fc76 	bl	8010048 <phhalHw_Pn5180_Wait>
 800c75c:	4603      	mov	r3, r0
 800c75e:	81fb      	strh	r3, [r7, #14]
 800c760:	89fb      	ldrh	r3, [r7, #14]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 800c766:	89fb      	ldrh	r3, [r7, #14]
 800c768:	e182      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	33cd      	adds	r3, #205	@ 0xcd
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	32da      	adds	r2, #218	@ 0xda
 800c782:	7ab9      	ldrb	r1, [r7, #10]
 800c784:	9201      	str	r2, [sp, #4]
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	462b      	mov	r3, r5
 800c78a:	4622      	mov	r2, r4
 800c78c:	f00a f9d9 	bl	8016b42 <phpalI14443p3b_Sw_WakeUpB>
 800c790:	4603      	mov	r3, r0
 800c792:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800c794:	89fb      	ldrh	r3, [r7, #14]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d102      	bne.n	800c7a2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 800c79c:	7a7b      	ldrb	r3, [r7, #9]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d9d1      	bls.n	800c746 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7f9b      	ldrb	r3, [r3, #30]
 800c7a6:	f023 0302 	bic.w	r3, r3, #2
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800c7b0:	89fb      	ldrh	r3, [r7, #14]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 8149 	beq.w	800ca4a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
 800c7b8:	89fb      	ldrh	r3, [r7, #14]
 800c7ba:	e159      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800c7bc:	89fb      	ldrh	r3, [r7, #14]
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d101      	bne.n	800c7c8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 800c7c4:	89fb      	ldrh	r3, [r7, #14]
 800c7c6:	e153      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7adb      	ldrb	r3, [r3, #11]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f040 813c 	bne.w	800ca4a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	7f9b      	ldrb	r3, [r3, #30]
 800c7de:	f043 0302 	orr.w	r3, r3, #2
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	779a      	strb	r2, [r3, #30]
                    return status;
 800c7e8:	89fb      	ldrh	r3, [r7, #14]
 800c7ea:	e141      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7f9b      	ldrb	r3, [r3, #30]
 800c804:	f023 0302 	bic.w	r3, r3, #2
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 800c80e:	e118      	b.n	800ca42 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800c810:	89fb      	ldrh	r3, [r7, #14]
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b01      	cmp	r3, #1
 800c816:	d060      	beq.n	800c8da <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 800c818:	89fb      	ldrh	r3, [r7, #14]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d156      	bne.n	800c8cc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 800c81e:	7b3b      	ldrb	r3, [r7, #12]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d01f      	beq.n	800c864 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c82e:	1e5a      	subs	r2, r3, #1
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	33c8      	adds	r3, #200	@ 0xc8
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	4413      	add	r3, r2
 800c83e:	3301      	adds	r3, #1
 800c840:	4619      	mov	r1, r3
 800c842:	f00a fed9 	bl	80175f8 <phpalI14443p3b_Sw_SetSerialNo>
 800c846:	4603      	mov	r3, r0
 800c848:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c84e:	4618      	mov	r0, r3
 800c850:	f00a f9d6 	bl	8016c00 <phpalI14443p3b_Sw_HaltB>
 800c854:	4603      	mov	r3, r0
 800c856:	81fb      	strh	r3, [r7, #14]
 800c858:	89fb      	ldrh	r3, [r7, #14]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b12      	cmp	r3, #18
 800c85e:	d101      	bne.n	800c864 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 800c860:	89fb      	ldrh	r3, [r7, #14]
 800c862:	e105      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c86a:	461a      	mov	r2, r3
 800c86c:	4613      	mov	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	33c8      	adds	r3, #200	@ 0xc8
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4413      	add	r3, r2
 800c87a:	1c5a      	adds	r2, r3, #1
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c882:	4619      	mov	r1, r3
 800c884:	460b      	mov	r3, r1
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	440b      	add	r3, r1
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	33c9      	adds	r3, #201	@ 0xc9
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	440b      	add	r3, r1
 800c892:	3305      	adds	r3, #5
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c89e:	3301      	adds	r3, #1
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    bCurrentDeviceCount++;
 800c8a8:	7b3b      	ldrb	r3, [r7, #12]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	7adb      	ldrb	r3, [r3, #11]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d30e      	bcc.n	800c8da <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e0d1      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7f9b      	ldrb	r3, [r3, #30]
 800c8d0:	f043 0302 	orr.w	r3, r3, #2
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 800c8da:	7b7b      	ldrb	r3, [r7, #13]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 800c8e0:	7b7a      	ldrb	r2, [r7, #13]
 800c8e2:	7abb      	ldrb	r3, [r7, #10]
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	da28      	bge.n	800c940 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c2>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c8f2:	7b7b      	ldrb	r3, [r7, #13]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	b2d9      	uxtb	r1, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c8fe:	461a      	mov	r2, r3
 800c900:	4613      	mov	r3, r2
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	33c8      	adds	r3, #200	@ 0xc8
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	1d5c      	adds	r4, r3, #5
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c916:	461a      	mov	r2, r3
 800c918:	4613      	mov	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	33d8      	adds	r3, #216	@ 0xd8
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	4413      	add	r3, r2
 800c926:	3302      	adds	r3, #2
 800c928:	4622      	mov	r2, r4
 800c92a:	f00a f929 	bl	8016b80 <phpalI14443p3b_Sw_SlotMarker>
 800c92e:	4603      	mov	r3, r0
 800c930:	81fb      	strh	r3, [r7, #14]
 800c932:	89fb      	ldrh	r3, [r7, #14]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b12      	cmp	r3, #18
 800c938:	f040 8083 	bne.w	800ca42 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800c93c:	89fb      	ldrh	r3, [r7, #14]
 800c93e:	e097      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 800c940:	2301      	movs	r3, #1
 800c942:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	7f9b      	ldrb	r3, [r3, #30]
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d068      	beq.n	800ca22 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a4>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00e      	beq.n	800c978 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fa>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	7adb      	ldrb	r3, [r3, #11]
 800c964:	429a      	cmp	r2, r3
 800c966:	d31d      	bcc.n	800c9a4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x326>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 800c974:	2300      	movs	r3, #0
 800c976:	e07b      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800c978:	7abb      	ldrb	r3, [r7, #10]
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	d10f      	bne.n	800c99e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x320>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d102      	bne.n	800c99a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31c>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c994:	f244 0385 	movw	r3, #16517	@ 0x4085
 800c998:	e06a      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                            }

                            return PH_ERR_SUCCESS;
 800c99a:	2300      	movs	r3, #0
 800c99c:	e068      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 800c99e:	7abb      	ldrb	r3, [r7, #10]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 800c9a4:	7b3b      	ldrb	r3, [r7, #12]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00c      	beq.n	800c9c4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f00a f926 	bl	8016c00 <phpalI14443p3b_Sw_HaltB>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	81fb      	strh	r3, [r7, #14]
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b12      	cmp	r3, #18
 800c9be:	d101      	bne.n	800c9c4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
 800c9c0:	89fb      	ldrh	r3, [r7, #14]
 800c9c2:	e055      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	4613      	mov	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	33c8      	adds	r3, #200	@ 0xc8
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	1d5a      	adds	r2, r3, #5
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	440b      	add	r3, r1
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	33d8      	adds	r3, #216	@ 0xd8
 800c9fe:	6879      	ldr	r1, [r7, #4]
 800ca00:	440b      	add	r3, r1
 800ca02:	3302      	adds	r3, #2
 800ca04:	7ab9      	ldrb	r1, [r7, #10]
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	9200      	str	r2, [sp, #0]
 800ca0a:	462b      	mov	r3, r5
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	f00a f879 	bl	8016b04 <phpalI14443p3b_Sw_RequestB>
 800ca12:	4603      	mov	r3, r0
 800ca14:	81fb      	strh	r3, [r7, #14]
 800ca16:	89fb      	ldrh	r3, [r7, #14]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b12      	cmp	r3, #18
 800ca1c:	d111      	bne.n	800ca42 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800ca1e:	89fb      	ldrh	r3, [r7, #14]
 800ca20:	e026      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c0>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800ca38:	f244 0385 	movw	r3, #16517	@ 0x4085
 800ca3c:	e018      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                    return PH_ERR_SUCCESS;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e016      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        while(0U == bLastSlotReached)
 800ca42:	7afb      	ldrb	r3, [r7, #11]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f43f aee3 	beq.w	800c810 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800ca4a:	7abb      	ldrb	r3, [r7, #10]
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	f67f aecd 	bls.w	800c7ec <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f0>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800ca68:	f244 0385 	movw	r3, #16517	@ 0x4085
 800ca6c:	e000      	b.n	800ca70 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    return PH_ERR_SUCCESS;
 800ca6e:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bdb0      	pop	{r4, r5, r7, pc}

0800ca78 <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	b08f      	sub	sp, #60	@ 0x3c
 800ca7c:	af04      	add	r7, sp, #16
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800ca84:	2300      	movs	r3, #0
 800ca86:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ca8e:	78fa      	ldrb	r2, [r7, #3]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d302      	bcc.n	800ca9a <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800ca94:	f244 0321 	movw	r3, #16417	@ 0x4021
 800ca98:	e1ba      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800ca9a:	78fa      	ldrb	r2, [r7, #3]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800caa2:	3b01      	subs	r3, #1
 800caa4:	429a      	cmp	r2, r3
 800caa6:	db0a      	blt.n	800cabe <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 800caa8:	78fa      	ldrb	r2, [r7, #3]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	440b      	add	r3, r1
 800cab6:	33dc      	adds	r3, #220	@ 0xdc
 800cab8:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d119      	bne.n	800caf2 <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800cace:	f107 0320 	add.w	r3, r7, #32
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	f107 0310 	add.w	r3, r7, #16
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	460b      	mov	r3, r1
 800cadc:	2100      	movs	r1, #0
 800cade:	f00a f830 	bl	8016b42 <phpalI14443p3b_Sw_WakeUpB>
 800cae2:	4603      	mov	r3, r0
 800cae4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cae6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	2b12      	cmp	r3, #18
 800caec:	d101      	bne.n	800caf2 <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 800caee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800caf0:	e18e      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf6:	2201      	movs	r2, #1
 800caf8:	215e      	movs	r1, #94	@ 0x5e
 800cafa:	4618      	mov	r0, r3
 800cafc:	f003 fb60 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800cb00:	4603      	mov	r3, r0
 800cb02:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cb04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <phacDiscLoop_Sw_Int_ActivateB+0x96>
 800cb0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb0c:	e180      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 800cb0e:	78fa      	ldrb	r2, [r7, #3]
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	440b      	add	r3, r1
 800cb1c:	33db      	adds	r3, #219	@ 0xdb
 800cb1e:	2200      	movs	r2, #0
 800cb20:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 800cb22:	78fa      	ldrb	r2, [r7, #3]
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	440b      	add	r3, r1
 800cb30:	33d7      	adds	r3, #215	@ 0xd7
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d009      	beq.n	800cb50 <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	440b      	add	r3, r1
 800cb4a:	33db      	adds	r3, #219	@ 0xdb
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d004      	beq.n	800cb64 <phacDiscLoop_Sw_Int_ActivateB+0xec>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d10c      	bne.n	800cb7e <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 800cb64:	78fa      	ldrb	r2, [r7, #3]
 800cb66:	6879      	ldr	r1, [r7, #4]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	440b      	add	r3, r1
 800cb72:	33db      	adds	r3, #219	@ 0xdb
 800cb74:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e148      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 800cb7e:	78fa      	ldrb	r2, [r7, #3]
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4613      	mov	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	440b      	add	r3, r1
 800cb8c:	33d6      	adds	r3, #214	@ 0xd6
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800cb9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800cba4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800cba8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <phacDiscLoop_Sw_Int_ActivateB+0x142>
 800cbb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 8081 	beq.w	800ccbc <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 800cbba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cbbe:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d17a      	bne.n	800ccbc <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 800cbc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 800cbd2:	2303      	movs	r3, #3
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbd8:	e016      	b.n	800cc08 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 800cbda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cbec:	e00c      	b.n	800cc08 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 800cbee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cbf2:	f003 0310 	and.w	r3, r3, #16
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc00:	e002      	b.n	800cc08 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 800cc02:	2300      	movs	r3, #0
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 800cc08:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d003      	beq.n	800cc1c <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 800cc14:	2303      	movs	r3, #3
 800cc16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cc1a:	e016      	b.n	800cc4a <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 800cc1c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cc20:	f003 0302 	and.w	r3, r3, #2
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 800cc28:	2302      	movs	r3, #2
 800cc2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cc2e:	e00c      	b.n	800cc4a <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 800cc30:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cc42:	e002      	b.n	800cc4a <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 800cc44:	2300      	movs	r3, #0
 800cc46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 800cc4a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800cc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d009      	beq.n	800cc6a <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 800cc56:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800cc5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d903      	bls.n	800cc6a <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 800cc62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 800cc6a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800cc6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d009      	beq.n	800cc8a <phacDiscLoop_Sw_Int_ActivateB+0x212>
 800cc76:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800cc7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d903      	bls.n	800cc8a <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 800cc82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc86:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 800cc8a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	da14      	bge.n	800ccbc <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 800cc92:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800cc96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d00e      	beq.n	800ccbc <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 800cc9e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800cca2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d204      	bcs.n	800ccb4 <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 800ccaa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ccae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800ccb2:	e003      	b.n	800ccbc <phacDiscLoop_Sw_Int_ActivateB+0x244>
 800ccb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ccb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ccc0:	78fa      	ldrb	r2, [r7, #3]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	33c8      	adds	r3, #200	@ 0xc8
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	4413      	add	r3, r2
 800ccd0:	1d5c      	adds	r4, r3, #5
 800ccd2:	78fa      	ldrb	r2, [r7, #3]
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	440b      	add	r3, r1
 800cce0:	33da      	adds	r3, #218	@ 0xda
 800cce2:	7819      	ldrb	r1, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 50c4 	ldrb.w	r5, [r3, #196]	@ 0xc4
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	32dd      	adds	r2, #221	@ 0xdd
 800ccf4:	9203      	str	r2, [sp, #12]
 800ccf6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ccfa:	9202      	str	r2, [sp, #8]
 800ccfc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800cd00:	9201      	str	r2, [sp, #4]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	462b      	mov	r3, r5
 800cd06:	460a      	mov	r2, r1
 800cd08:	4621      	mov	r1, r4
 800cd0a:	f009 ffc1 	bl	8016c90 <phpalI14443p3b_Sw_Attrib>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cd12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <phacDiscLoop_Sw_Int_ActivateB+0x2a4>
 800cd18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd1a:	e079      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d027      	beq.n	800cd76 <phacDiscLoop_Sw_Int_ActivateB+0x2fe>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd2a:	f107 0208 	add.w	r2, r7, #8
 800cd2e:	2104      	movs	r1, #4
 800cd30:	4618      	mov	r0, r3
 800cd32:	f009 fea9 	bl	8016a88 <phpalI14443p3b_Sw_GetConfig>
 800cd36:	4603      	mov	r3, r0
 800cd38:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cd3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <phacDiscLoop_Sw_Int_ActivateB+0x2cc>
 800cd40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd42:	e065      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 800cd44:	893b      	ldrh	r3, [r7, #8]
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd52:	f107 0208 	add.w	r2, r7, #8
 800cd56:	2105      	movs	r1, #5
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f009 fe95 	bl	8016a88 <phpalI14443p3b_Sw_GetConfig>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cd62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <phacDiscLoop_Sw_Int_ActivateB+0x2f4>
 800cd68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd6a:	e051      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 800cd6c:	893b      	ldrh	r3, [r7, #8]
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800cd7a:	f107 040d 	add.w	r4, r7, #13
 800cd7e:	f107 020e 	add.w	r2, r7, #14
 800cd82:	f107 010f 	add.w	r1, r7, #15
 800cd86:	f107 030a 	add.w	r3, r7, #10
 800cd8a:	9302      	str	r3, [sp, #8]
 800cd8c:	f107 030b 	add.w	r3, r7, #11
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	f107 030c 	add.w	r3, r7, #12
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	4623      	mov	r3, r4
 800cd9a:	f00a fa37 	bl	801720c <phpalI14443p3b_Sw_GetProtocolParams>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cda2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <phacDiscLoop_Sw_Int_ActivateB+0x334>
 800cda8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cdaa:	e031      	b.n	800ce10 <phacDiscLoop_Sw_Int_ActivateB+0x398>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d109      	bne.n	800cdca <phacDiscLoop_Sw_Int_ActivateB+0x352>
    {
        if (bFsci > pDataParams->bFsciMax)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cdbc:	7abb      	ldrb	r3, [r7, #10]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d203      	bcs.n	800cdca <phacDiscLoop_Sw_Int_ActivateB+0x352>
        {
            bFsci = pDataParams->bFsciMax;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800cdc8:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800cdce:	7bfd      	ldrb	r5, [r7, #15]
 800cdd0:	7bbe      	ldrb	r6, [r7, #14]
 800cdd2:	f897 c00d 	ldrb.w	ip, [r7, #13]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 800cddc:	7b3a      	ldrb	r2, [r7, #12]
 800cdde:	7af9      	ldrb	r1, [r7, #11]
 800cde0:	7ab8      	ldrb	r0, [r7, #10]
 800cde2:	9003      	str	r0, [sp, #12]
 800cde4:	9102      	str	r1, [sp, #8]
 800cde6:	9201      	str	r2, [sp, #4]
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	4663      	mov	r3, ip
 800cdec:	4632      	mov	r2, r6
 800cdee:	4629      	mov	r1, r5
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f00a fc3e 	bl	8017672 <phpalI14443p4_Sw_SetProtocol>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 800cdfa:	78fa      	ldrb	r2, [r7, #3]
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	440b      	add	r3, r1
 800ce08:	33dc      	adds	r3, #220	@ 0xdc
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
    return status;
 800ce0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	372c      	adds	r7, #44	@ 0x2c
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce18 <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 800ce24:	2300      	movs	r3, #0
 800ce26:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800ce2e:	2300      	movs	r3, #0
 800ce30:	75fb      	strb	r3, [r7, #23]
 800ce32:	e019      	b.n	800ce68 <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 800ce34:	7dfa      	ldrb	r2, [r7, #23]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	00da      	lsls	r2, r3, #3
 800ce3e:	1ad2      	subs	r2, r2, r3
 800ce40:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4413      	add	r3, r2
 800ce48:	3304      	adds	r3, #4
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	68b8      	ldr	r0, [r7, #8]
 800ce50:	f015 fa24 	bl	802229c <memcmp>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d103      	bne.n	800ce62 <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 800ce60:	e008      	b.n	800ce74 <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	3301      	adds	r3, #1
 800ce66:	75fb      	strb	r3, [r7, #23]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ce6e:	7dfa      	ldrb	r2, [r7, #23]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d3df      	bcc.n	800ce34 <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b086      	sub	sp, #24
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	60f8      	str	r0, [r7, #12]
 800ce86:	60b9      	str	r1, [r7, #8]
 800ce88:	4611      	mov	r1, r2
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	71fb      	strb	r3, [r7, #7]
 800ce90:	4613      	mov	r3, r2
 800ce92:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 800ce94:	2300      	movs	r3, #0
 800ce96:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 800ce9c:	f107 0313 	add.w	r3, r7, #19
 800cea0:	461a      	mov	r2, r3
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff ffb7 	bl	800ce18 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	82bb      	strh	r3, [r7, #20]
 800ceae:	8abb      	ldrh	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 800ceb4:	8abb      	ldrh	r3, [r7, #20]
 800ceb6:	e086      	b.n	800cfc6 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 800ceb8:	7cfb      	ldrb	r3, [r7, #19]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d179      	bne.n	800cfb2 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec2:	f107 0210 	add.w	r2, r7, #16
 800cec6:	2100      	movs	r1, #0
 800cec8:	4618      	mov	r0, r3
 800ceca:	f008 fef8 	bl	8015cbe <phpalFelica_Sw_GetConfig>
 800cece:	4603      	mov	r3, r0
 800ced0:	82bb      	strh	r3, [r7, #20]
 800ced2:	8abb      	ldrh	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 800ced8:	8abb      	ldrh	r3, [r7, #20]
 800ceda:	e074      	b.n	800cfc6 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cee2:	461a      	mov	r2, r3
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
 800cee6:	441a      	add	r2, r3
 800cee8:	68f9      	ldr	r1, [r7, #12]
 800ceea:	4613      	mov	r3, r2
 800ceec:	005b      	lsls	r3, r3, #1
 800ceee:	4413      	add	r3, r2
 800cef0:	00da      	lsls	r2, r3, #3
 800cef2:	1ad2      	subs	r2, r2, r3
 800cef4:	188b      	adds	r3, r1, r2
 800cef6:	33a8      	adds	r3, #168	@ 0xa8
 800cef8:	79fa      	ldrb	r2, [r7, #7]
 800cefa:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 800cefc:	8a3b      	ldrh	r3, [r7, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d018      	beq.n	800cf34 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 800cf02:	79fb      	ldrb	r3, [r7, #7]
 800cf04:	2b10      	cmp	r3, #16
 800cf06:	d915      	bls.n	800cf34 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cf0e:	461a      	mov	r2, r3
 800cf10:	7dfb      	ldrb	r3, [r7, #23]
 800cf12:	441a      	add	r2, r3
 800cf14:	4613      	mov	r3, r2
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	4413      	add	r3, r2
 800cf1a:	00da      	lsls	r2, r3, #3
 800cf1c:	1ad2      	subs	r2, r2, r3
 800cf1e:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	4413      	add	r3, r2
 800cf26:	3304      	adds	r3, #4
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	3210      	adds	r2, #16
 800cf2c:	8812      	ldrh	r2, [r2, #0]
 800cf2e:	b292      	uxth	r2, r2
 800cf30:	801a      	strh	r2, [r3, #0]
 800cf32:	e014      	b.n	800cf5e <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	441a      	add	r2, r3
 800cf40:	4613      	mov	r3, r2
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	4413      	add	r3, r2
 800cf46:	00da      	lsls	r2, r3, #3
 800cf48:	1ad2      	subs	r2, r2, r3
 800cf4a:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	4413      	add	r3, r2
 800cf52:	3304      	adds	r3, #4
 800cf54:	2202      	movs	r2, #2
 800cf56:	2100      	movs	r1, #0
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f015 f9af 	bl	80222bc <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cf64:	461a      	mov	r2, r3
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
 800cf68:	441a      	add	r2, r3
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	4413      	add	r3, r2
 800cf70:	00da      	lsls	r2, r3, #3
 800cf72:	1ad2      	subs	r2, r2, r3
 800cf74:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	2210      	movs	r2, #16
 800cf80:	68b9      	ldr	r1, [r7, #8]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f015 fa19 	bl	80223ba <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800cf8e:	461a      	mov	r2, r3
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	441a      	add	r2, r3
 800cf94:	88bb      	ldrh	r3, [r7, #4]
 800cf96:	b2d8      	uxtb	r0, r3
 800cf98:	68f9      	ldr	r1, [r7, #12]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00da      	lsls	r2, r3, #3
 800cfa2:	1ad2      	subs	r2, r2, r3
 800cfa4:	188b      	adds	r3, r1, r2
 800cfa6:	33a6      	adds	r3, #166	@ 0xa6
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	4413      	add	r3, r2
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return PH_ERR_SUCCESS;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800cfce:	b590      	push	{r4, r7, lr}
 800cfd0:	b08b      	sub	sp, #44	@ 0x2c
 800cfd2:	af02      	add	r7, sp, #8
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800cfde:	237f      	movs	r3, #127	@ 0x7f
 800cfe0:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800cfe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cfe6:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800cfec:	2300      	movs	r3, #0
 800cfee:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cff8:	f107 0410 	add.w	r4, r7, #16
 800cffc:	78fa      	ldrb	r2, [r7, #3]
 800cffe:	f107 011c 	add.w	r1, r7, #28
 800d002:	f107 031a 	add.w	r3, r7, #26
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	4623      	mov	r3, r4
 800d00a:	f008 fc6d 	bl	80158e8 <phpalFelica_Sw_ReqC>
 800d00e:	4603      	mov	r3, r0
 800d010:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800d012:	8bfb      	ldrh	r3, [r7, #30]
 800d014:	b2db      	uxtb	r3, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	d164      	bne.n	800d0e4 <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 800d01a:	78fb      	ldrb	r3, [r7, #3]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d048      	beq.n	800d0b2 <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d024:	f107 021a 	add.w	r2, r7, #26
 800d028:	2101      	movs	r1, #1
 800d02a:	4618      	mov	r0, r3
 800d02c:	f008 fe47 	bl	8015cbe <phpalFelica_Sw_GetConfig>
 800d030:	4603      	mov	r3, r0
 800d032:	83fb      	strh	r3, [r7, #30]
 800d034:	8bfb      	ldrh	r3, [r7, #30]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d037      	beq.n	800d0aa <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 800d03a:	8bfb      	ldrh	r3, [r7, #30]
 800d03c:	e053      	b.n	800d0e6 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 800d03e:	2300      	movs	r3, #0
 800d040:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 800d042:	2300      	movs	r3, #0
 800d044:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d04a:	8b7b      	ldrh	r3, [r7, #26]
 800d04c:	b2d9      	uxtb	r1, r3
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	f107 040c 	add.w	r4, r7, #12
 800d054:	f107 030f 	add.w	r3, r7, #15
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	f107 0314 	add.w	r3, r7, #20
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	4623      	mov	r3, r4
 800d062:	f008 fd57 	bl	8015b14 <phpalFelica_Sw_GetFrameInfo>
 800d066:	4603      	mov	r3, r0
 800d068:	83fb      	strh	r3, [r7, #30]
 800d06a:	8bfb      	ldrh	r3, [r7, #30]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 800d070:	8bfb      	ldrh	r3, [r7, #30]
 800d072:	e038      	b.n	800d0e6 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 800d074:	89bb      	ldrh	r3, [r7, #12]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10c      	bne.n	800d094 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 800d07a:	6979      	ldr	r1, [r7, #20]
 800d07c:	7bfa      	ldrb	r2, [r7, #15]
 800d07e:	883b      	ldrh	r3, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff fefc 	bl	800ce7e <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800d086:	4603      	mov	r3, r0
 800d088:	83fb      	strh	r3, [r7, #30]
 800d08a:	8bfb      	ldrh	r3, [r7, #30]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 800d090:	8bfb      	ldrh	r3, [r7, #30]
 800d092:	e028      	b.n	800d0e6 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 800d094:	8b7b      	ldrh	r3, [r7, #26]
 800d096:	3b01      	subs	r3, #1
 800d098:	b29b      	uxth	r3, r3
 800d09a:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7b1b      	ldrb	r3, [r3, #12]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d211      	bcs.n	800d0ce <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 800d0aa:	8b7b      	ldrh	r3, [r7, #26]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d1c6      	bne.n	800d03e <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 800d0b0:	e00e      	b.n	800d0d0 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 800d0b2:	6939      	ldr	r1, [r7, #16]
 800d0b4:	8b7b      	ldrh	r3, [r7, #26]
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	883b      	ldrh	r3, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fedf 	bl	800ce7e <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	83fb      	strh	r3, [r7, #30]
 800d0c4:	8bfb      	ldrh	r3, [r7, #30]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 800d0ca:	8bfb      	ldrh	r3, [r7, #30]
 800d0cc:	e00b      	b.n	800d0e6 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 800d0ce:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d102      	bne.n	800d0e0 <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800d0da:	f244 037f 	movw	r3, #16511	@ 0x407f
 800d0de:	e002      	b.n	800d0e6 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	e000      	b.n	800d0e6 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 800d0e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3724      	adds	r7, #36	@ 0x24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd90      	pop	{r4, r7, pc}

0800d0ee <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b084      	sub	sp, #16
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800d0f6:	237f      	movs	r3, #127	@ 0x7f
 800d0f8:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0fe:	2200      	movs	r2, #0
 800d100:	2100      	movs	r1, #0
 800d102:	4618      	mov	r0, r3
 800d104:	f008 fda3 	bl	8015c4e <phpalFelica_Sw_SetConfig>
 800d108:	4603      	mov	r3, r0
 800d10a:	81fb      	strh	r3, [r7, #14]
 800d10c:	89fb      	ldrh	r3, [r7, #14]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <phacDiscLoop_Sw_DetTechTypeF+0x28>
 800d112:	89fb      	ldrh	r3, [r7, #14]
 800d114:	e042      	b.n	800d19c <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	461a      	mov	r2, r3
 800d11c:	2157      	movs	r1, #87	@ 0x57
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7fd f9ea 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 800d124:	4603      	mov	r3, r0
 800d126:	81fb      	strh	r3, [r7, #14]
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <phacDiscLoop_Sw_DetTechTypeF+0x44>
 800d12e:	89fb      	ldrh	r3, [r7, #14]
 800d130:	e034      	b.n	800d19c <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d138:	f003 030c 	and.w	r3, r3, #12
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d103      	bne.n	800d148 <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7f9a      	ldrb	r2, [r3, #30]
 800d14c:	89bb      	ldrh	r3, [r7, #12]
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	43db      	mvns	r3, r3
 800d152:	b2db      	uxtb	r3, r3
 800d154:	4013      	ands	r3, r2
 800d156:	b2da      	uxtb	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 800d15c:	89bb      	ldrh	r3, [r7, #12]
 800d15e:	461a      	mov	r2, r3
 800d160:	2103      	movs	r1, #3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff ff33 	bl	800cfce <phacDiscLoop_Sw_Int_SendSensFReq>
 800d168:	4603      	mov	r3, r0
 800d16a:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800d16c:	89fb      	ldrh	r3, [r7, #14]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fe fc6f 	bl	800ba52 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00c      	beq.n	800d194 <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800d17a:	89fb      	ldrh	r3, [r7, #14]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d10a      	bne.n	800d198 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7f9a      	ldrb	r2, [r3, #30]
 800d186:	89bb      	ldrh	r3, [r7, #12]
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	4313      	orrs	r3, r2
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	779a      	strb	r2, [r3, #30]
 800d192:	e001      	b.n	800d198 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 800d194:	89fb      	ldrh	r3, [r7, #14]
 800d196:	e001      	b.n	800d19c <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800d198:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800d1b0:	f107 030a 	add.w	r3, r7, #10
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2157      	movs	r1, #87	@ 0x57
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7fd f99d 	bl	800a4f8 <phacDiscLoop_Sw_GetConfig>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	81bb      	strh	r3, [r7, #12]
 800d1c2:	89bb      	ldrh	r3, [r7, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d001      	beq.n	800d1cc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 800d1c8:	89bb      	ldrh	r3, [r7, #12]
 800d1ca:	e0e3      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7f9b      	ldrb	r3, [r3, #30]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	897b      	ldrh	r3, [r7, #10]
 800d1d4:	4013      	ands	r3, r2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00a      	beq.n	800d1f0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	7b1b      	ldrb	r3, [r3, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800d1ea:	f244 0385 	movw	r3, #16517	@ 0x4085
 800d1ee:	e0d1      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73bb      	strb	r3, [r7, #14]
 800d1f4:	e00d      	b.n	800d212 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 800d1f6:	7bba      	ldrb	r2, [r7, #14]
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	4413      	add	r3, r2
 800d200:	00da      	lsls	r2, r3, #3
 800d202:	1ad2      	subs	r2, r2, r3
 800d204:	188b      	adds	r3, r1, r2
 800d206:	33a7      	adds	r3, #167	@ 0xa7
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
 800d20e:	3301      	adds	r3, #1
 800d210:	73bb      	strb	r3, [r7, #14]
 800d212:	7bbb      	ldrb	r3, [r7, #14]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d0ee      	beq.n	800d1f6 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7b1b      	ldrb	r3, [r3, #12]
 800d222:	429a      	cmp	r2, r3
 800d224:	d324      	bcc.n	800d270 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800d226:	897b      	ldrh	r3, [r7, #10]
 800d228:	2b04      	cmp	r3, #4
 800d22a:	d10c      	bne.n	800d246 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d230:	2103      	movs	r1, #3
 800d232:	4618      	mov	r0, r3
 800d234:	f002 fa46 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800d238:	4603      	mov	r3, r0
 800d23a:	81bb      	strh	r3, [r7, #12]
 800d23c:	89bb      	ldrh	r3, [r7, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00e      	beq.n	800d260 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800d242:	89bb      	ldrh	r3, [r7, #12]
 800d244:	e0a6      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24a:	210a      	movs	r1, #10
 800d24c:	4618      	mov	r0, r3
 800d24e:	f002 fa39 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800d252:	4603      	mov	r3, r0
 800d254:	81bb      	strh	r3, [r7, #12]
 800d256:	89bb      	ldrh	r3, [r7, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800d25c:	89bb      	ldrh	r3, [r7, #12]
 800d25e:	e099      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 800d26c:	2300      	movs	r3, #0
 800d26e:	e091      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7f9a      	ldrb	r2, [r3, #30]
 800d274:	897b      	ldrh	r3, [r7, #10]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	43db      	mvns	r3, r3
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	4013      	ands	r3, r2
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d288:	2200      	movs	r2, #0
 800d28a:	2100      	movs	r1, #0
 800d28c:	4618      	mov	r0, r3
 800d28e:	f008 fcde 	bl	8015c4e <phpalFelica_Sw_SetConfig>
 800d292:	4603      	mov	r3, r0
 800d294:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800d296:	89bb      	ldrh	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 800d29c:	89bb      	ldrh	r3, [r7, #12]
 800d29e:	e079      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	8a9b      	ldrh	r3, [r3, #20]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	2135      	movs	r1, #53	@ 0x35
 800d2ac:	f002 ff88 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	81bb      	strh	r3, [r7, #12]
 800d2b4:	89bb      	ldrh	r3, [r7, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 800d2ba:	89bb      	ldrh	r3, [r7, #12]
 800d2bc:	e06a      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800d2be:	897b      	ldrh	r3, [r7, #10]
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	d10c      	bne.n	800d2de <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2c8:	2103      	movs	r1, #3
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f002 f9fa 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	81bb      	strh	r3, [r7, #12]
 800d2d4:	89bb      	ldrh	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00e      	beq.n	800d2f8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800d2da:	89bb      	ldrh	r3, [r7, #12]
 800d2dc:	e05a      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e2:	210a      	movs	r1, #10
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f002 f9ed 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	81bb      	strh	r3, [r7, #12]
 800d2ee:	89bb      	ldrh	r3, [r7, #12]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800d2f4:	89bb      	ldrh	r3, [r7, #12]
 800d2f6:	e04d      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800d2f8:	897b      	ldrh	r3, [r7, #10]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	210f      	movs	r1, #15
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff fe65 	bl	800cfce <phacDiscLoop_Sw_Int_SendSensFReq>
 800d304:	4603      	mov	r3, r0
 800d306:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800d308:	89bb      	ldrh	r3, [r7, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 800d30e:	89bb      	ldrh	r3, [r7, #12]
 800d310:	e040      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800d316:	e030      	b.n	800d37a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800d318:	7bfa      	ldrb	r2, [r7, #15]
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	4413      	add	r3, r2
 800d322:	00da      	lsls	r2, r3, #3
 800d324:	1ad2      	subs	r2, r2, r3
 800d326:	188b      	adds	r3, r1, r2
 800d328:	3394      	adds	r3, #148	@ 0x94
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d121      	bne.n	800d374 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 800d330:	7bfa      	ldrb	r2, [r7, #15]
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	4613      	mov	r3, r2
 800d336:	005b      	lsls	r3, r3, #1
 800d338:	4413      	add	r3, r2
 800d33a:	00da      	lsls	r2, r3, #3
 800d33c:	1ad2      	subs	r2, r2, r3
 800d33e:	188b      	adds	r3, r1, r2
 800d340:	3395      	adds	r3, #149	@ 0x95
 800d342:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800d344:	2bfe      	cmp	r3, #254	@ 0xfe
 800d346:	d115      	bne.n	800d374 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d34c:	2201      	movs	r2, #1
 800d34e:	2100      	movs	r1, #0
 800d350:	4618      	mov	r0, r3
 800d352:	f008 fc7c 	bl	8015c4e <phpalFelica_Sw_SetConfig>
 800d356:	4603      	mov	r3, r0
 800d358:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 800d35a:	89bb      	ldrh	r3, [r7, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 800d360:	89bb      	ldrh	r3, [r7, #12]
 800d362:	e017      	b.n	800d394 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800d364:	897b      	ldrh	r3, [r7, #10]
 800d366:	461a      	mov	r2, r3
 800d368:	210f      	movs	r1, #15
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff fe2f 	bl	800cfce <phacDiscLoop_Sw_Int_SendSensFReq>
 800d370:	4603      	mov	r3, r0
 800d372:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 800d374:	7bfb      	ldrb	r3, [r7, #15]
 800d376:	3301      	adds	r3, #1
 800d378:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800d380:	7bfa      	ldrb	r2, [r7, #15]
 800d382:	429a      	cmp	r2, r3
 800d384:	d3c8      	bcc.n	800d318 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 800d392:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 800d39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a0:	b092      	sub	sp, #72	@ 0x48
 800d3a2:	af06      	add	r7, sp, #24
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800d3b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3b8:	853b      	strh	r3, [r7, #40]	@ 0x28
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	623b      	str	r3, [r7, #32]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d202      	bcs.n	800d3d4 <phacDiscLoop_Sw_Int_ActivateF+0x38>
 800d3ce:	78fb      	ldrb	r3, [r7, #3]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <phacDiscLoop_Sw_Int_ActivateF+0x3e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800d3d4:	f244 0321 	movw	r3, #16417	@ 0x4021
 800d3d8:	e105      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d3de:	78fa      	ldrb	r2, [r7, #3]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	4413      	add	r3, r2
 800d3e6:	00da      	lsls	r2, r3, #3
 800d3e8:	1ad2      	subs	r2, r2, r3
 800d3ea:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	f008 fc16 	bl	8015c26 <phpalFelica_Sw_SetSerialNo>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d3fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <phacDiscLoop_Sw_Int_ActivateF+0x6c>
 800d404:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d406:	e0ee      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800d408:	78fa      	ldrb	r2, [r7, #3]
 800d40a:	6879      	ldr	r1, [r7, #4]
 800d40c:	4613      	mov	r3, r2
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	4413      	add	r3, r2
 800d412:	00da      	lsls	r2, r3, #3
 800d414:	1ad2      	subs	r2, r2, r3
 800d416:	188b      	adds	r3, r1, r2
 800d418:	3394      	adds	r3, #148	@ 0x94
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	f040 80d6 	bne.w	800d5ce <phacDiscLoop_Sw_Int_ActivateF+0x232>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800d422:	78fa      	ldrb	r2, [r7, #3]
 800d424:	6879      	ldr	r1, [r7, #4]
 800d426:	4613      	mov	r3, r2
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	4413      	add	r3, r2
 800d42c:	00da      	lsls	r2, r3, #3
 800d42e:	1ad2      	subs	r2, r2, r3
 800d430:	188b      	adds	r3, r1, r2
 800d432:	3395      	adds	r3, #149	@ 0x95
 800d434:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800d436:	2bfe      	cmp	r3, #254	@ 0xfe
 800d438:	f040 80c9 	bne.w	800d5ce <phacDiscLoop_Sw_Int_ActivateF+0x232>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800d43c:	78fa      	ldrb	r2, [r7, #3]
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	4613      	mov	r3, r2
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	4413      	add	r3, r2
 800d446:	00da      	lsls	r2, r3, #3
 800d448:	1ad2      	subs	r2, r2, r3
 800d44a:	188b      	adds	r3, r1, r2
 800d44c:	33a7      	adds	r3, #167	@ 0xa7
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d076      	beq.n	800d542 <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d458:	2200      	movs	r2, #0
 800d45a:	2100      	movs	r1, #0
 800d45c:	4618      	mov	r0, r3
 800d45e:	f008 fbf6 	bl	8015c4e <phpalFelica_Sw_SetConfig>
 800d462:	4603      	mov	r3, r0
 800d464:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800d466:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <phacDiscLoop_Sw_Int_ActivateF+0xd4>
 800d46c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d46e:	e0ba      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d474:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d478:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d47c:	f107 031e 	add.w	r3, r7, #30
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	4613      	mov	r3, r2
 800d484:	2203      	movs	r2, #3
 800d486:	f008 fa2f 	bl	80158e8 <phpalFelica_Sw_ReqC>
 800d48a:	4603      	mov	r3, r0
 800d48c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800d48e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <phacDiscLoop_Sw_Int_ActivateF+0xfc>
 800d494:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d496:	e0a6      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800d498:	78fa      	ldrb	r2, [r7, #3]
 800d49a:	6879      	ldr	r1, [r7, #4]
 800d49c:	4613      	mov	r3, r2
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	4413      	add	r3, r2
 800d4a2:	00da      	lsls	r2, r3, #3
 800d4a4:	1ad2      	subs	r2, r2, r3
 800d4a6:	188b      	adds	r3, r1, r2
 800d4a8:	33a7      	adds	r3, #167	@ 0xa7
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4b2:	f107 021c 	add.w	r2, r7, #28
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f008 fc00 	bl	8015cbe <phpalFelica_Sw_GetConfig>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d4c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d02e      	beq.n	800d526 <phacDiscLoop_Sw_Int_ActivateF+0x18a>
 800d4c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d4ca:	e08c      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	76fb      	strb	r3, [r7, #27]
                    wFrameStatus = 0x00;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	833b      	strh	r3, [r7, #24]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d4d8:	8bbb      	ldrh	r3, [r7, #28]
 800d4da:	b2d9      	uxtb	r1, r3
 800d4dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4de:	f107 0418 	add.w	r4, r7, #24
 800d4e2:	f107 031b 	add.w	r3, r7, #27
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	f107 0320 	add.w	r3, r7, #32
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	4623      	mov	r3, r4
 800d4f0:	f008 fb10 	bl	8015b14 <phpalFelica_Sw_GetFrameInfo>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d4f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <phacDiscLoop_Sw_Int_ActivateF+0x166>
 800d4fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d500:	e071      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	f107 022d 	add.w	r2, r7, #45	@ 0x2d
 800d508:	4619      	mov	r1, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff fc84 	bl	800ce18 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800d510:	4603      	mov	r3, r0
 800d512:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d514:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <phacDiscLoop_Sw_Int_ActivateF+0x182>
 800d51a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d51c:	e063      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800d51e:	8bbb      	ldrh	r3, [r7, #28]
 800d520:	3b01      	subs	r3, #1
 800d522:	b29b      	uxth	r3, r3
 800d524:	83bb      	strh	r3, [r7, #28]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800d526:	8bbb      	ldrh	r3, [r7, #28]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <phacDiscLoop_Sw_Int_ActivateF+0x198>
 800d52c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d530:	2b00      	cmp	r3, #0
 800d532:	d0cb      	beq.n	800d4cc <phacDiscLoop_Sw_Int_ActivateF+0x130>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800d534:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d102      	bne.n	800d542 <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800d53c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800d540:	e051      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            }
        }
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
        /* Symbol 4 */
        (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800d542:	78fa      	ldrb	r2, [r7, #3]
 800d544:	4613      	mov	r3, r2
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	4413      	add	r3, r2
 800d54a:	00da      	lsls	r2, r3, #3
 800d54c:	1ad2      	subs	r2, r2, r3
 800d54e:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	4413      	add	r3, r2
 800d556:	1d19      	adds	r1, r3, #4
 800d558:	f107 030c 	add.w	r3, r7, #12
 800d55c:	2208      	movs	r2, #8
 800d55e:	4618      	mov	r0, r3
 800d560:	f014 ff2b 	bl	80223ba <memcpy>

        aNfcId3[8] = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	753b      	strb	r3, [r7, #20]
        aNfcId3[9] = 0;
 800d568:	2300      	movs	r3, #0
 800d56a:	757b      	strb	r3, [r7, #21]

        /* Activate the P2P capable FeliCa card */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 800d588:	6879      	ldr	r1, [r7, #4]
 800d58a:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800d594:	687c      	ldr	r4, [r7, #4]
 800d596:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 800d59a:	687d      	ldr	r5, [r7, #4]
 800d59c:	35bc      	adds	r5, #188	@ 0xbc
 800d59e:	f107 0c0c 	add.w	ip, r7, #12
 800d5a2:	9505      	str	r5, [sp, #20]
 800d5a4:	9404      	str	r4, [sp, #16]
 800d5a6:	9003      	str	r0, [sp, #12]
 800d5a8:	9102      	str	r1, [sp, #8]
 800d5aa:	9201      	str	r2, [sp, #4]
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	4643      	mov	r3, r8
 800d5b0:	4672      	mov	r2, lr
 800d5b2:	4661      	mov	r1, ip
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f00c fb07 	bl	8019bc8 <phpalI18092mPI_Sw_Atr>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d5be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <phacDiscLoop_Sw_Int_ActivateF+0x22c>
 800d5c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d5c6:	e00e      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pGi,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pAtrRes,
            &(pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800d5c8:	f244 038d 	movw	r3, #16525	@ 0x408d
 800d5cc:	e00b      	b.n	800d5e6 <phacDiscLoop_Sw_Int_ActivateF+0x24a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800d5ce:	78fa      	ldrb	r2, [r7, #3]
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	4413      	add	r3, r2
 800d5d8:	00da      	lsls	r2, r3, #3
 800d5da:	1ad2      	subs	r2, r2, r3
 800d5dc:	188b      	adds	r3, r1, r2
 800d5de:	33a7      	adds	r3, #167	@ 0xa7
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	701a      	strb	r2, [r3, #0]
    }
    return PH_ERR_SUCCESS;
 800d5e4:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3730      	adds	r7, #48	@ 0x30
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5f0 <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800d5fc:	237f      	movs	r3, #127	@ 0x7f
 800d5fe:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	789b      	ldrb	r3, [r3, #2]
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d01e      	beq.n	800d64a <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800d612:	2b04      	cmp	r3, #4
 800d614:	d00a      	beq.n	800d62c <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800d61c:	2b08      	cmp	r3, #8
 800d61e:	d114      	bne.n	800d64a <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	789b      	ldrb	r3, [r3, #2]
 800d624:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10e      	bne.n	800d64a <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	8adb      	ldrh	r3, [r3, #22]
 800d634:	461a      	mov	r2, r3
 800d636:	2135      	movs	r1, #53	@ 0x35
 800d638:	f002 fdc2 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800d63c:	4603      	mov	r3, r0
 800d63e:	81fb      	strh	r3, [r7, #14]
 800d640:	89fb      	ldrh	r3, [r7, #14]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d010      	beq.n	800d668 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800d646:	89fb      	ldrh	r3, [r7, #14]
 800d648:	e02a      	b.n	800d6a0 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	8a9b      	ldrh	r3, [r3, #20]
 800d652:	461a      	mov	r2, r3
 800d654:	2135      	movs	r1, #53	@ 0x35
 800d656:	f002 fdb3 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800d65a:	4603      	mov	r3, r0
 800d65c:	81fb      	strh	r3, [r7, #14]
 800d65e:	89fb      	ldrh	r3, [r7, #14]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800d664:	89fb      	ldrh	r3, [r7, #14]
 800d666:	e01b      	b.n	800d6a0 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800d668:	78fb      	ldrb	r3, [r7, #3]
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d10b      	bne.n	800d686 <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800d66e:	2208      	movs	r2, #8
 800d670:	2157      	movs	r1, #87	@ 0x57
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7fc fac2 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800d678:	4603      	mov	r3, r0
 800d67a:	81fb      	strh	r3, [r7, #14]
 800d67c:	89fb      	ldrh	r3, [r7, #14]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00d      	beq.n	800d69e <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800d682:	89fb      	ldrh	r3, [r7, #14]
 800d684:	e00c      	b.n	800d6a0 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800d686:	2204      	movs	r2, #4
 800d688:	2157      	movs	r1, #87	@ 0x57
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7fc fab6 	bl	8009bfc <phacDiscLoop_Sw_SetConfig>
 800d690:	4603      	mov	r3, r0
 800d692:	81fb      	strh	r3, [r7, #14]
 800d694:	89fb      	ldrh	r3, [r7, #14]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800d69a:	89fb      	ldrh	r3, [r7, #14]
 800d69c:	e000      	b.n	800d6a0 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b09b      	sub	sp, #108	@ 0x6c
 800d6ac:	af08      	add	r7, sp, #32
 800d6ae:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800d6b0:	f107 031c 	add.w	r3, r7, #28
 800d6b4:	2227      	movs	r2, #39	@ 0x27
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f014 fdff 	bl	80222bc <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800d6be:	f107 0314 	add.w	r3, r7, #20
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	460a      	mov	r2, r1
 800d6c6:	801a      	strh	r2, [r3, #0]
 800d6c8:	460a      	mov	r2, r1
 800d6ca:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d6dc:	f107 031a 	add.w	r3, r7, #26
 800d6e0:	9307      	str	r3, [sp, #28]
 800d6e2:	f107 031b 	add.w	r3, r7, #27
 800d6e6:	9306      	str	r3, [sp, #24]
 800d6e8:	f107 031c 	add.w	r3, r7, #28
 800d6ec:	9305      	str	r3, [sp, #20]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9304      	str	r3, [sp, #16]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	9302      	str	r3, [sp, #8]
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	f107 0313 	add.w	r3, r7, #19
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	2301      	movs	r3, #1
 800d706:	2200      	movs	r2, #0
 800d708:	2100      	movs	r1, #0
 800d70a:	f00c f839 	bl	8019780 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800d70e:	4603      	mov	r3, r0
 800d710:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800d71c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d720:	e043      	b.n	800d7aa <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800d732:	f107 0314 	add.w	r3, r7, #20
 800d736:	9304      	str	r3, [sp, #16]
 800d738:	2300      	movs	r3, #0
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	2300      	movs	r3, #0
 800d73e:	9302      	str	r3, [sp, #8]
 800d740:	2300      	movs	r3, #0
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	2300      	movs	r3, #0
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	2300      	movs	r3, #0
 800d74a:	f00c f932 	bl	80199b2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800d74e:	4603      	mov	r3, r0
 800d750:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d754:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800d75c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d760:	e023      	b.n	800d7aa <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d766:	7efa      	ldrb	r2, [r7, #27]
 800d768:	7ebc      	ldrb	r4, [r7, #26]
 800d76a:	f107 011c 	add.w	r1, r7, #28
 800d76e:	f107 030a 	add.w	r3, r7, #10
 800d772:	9303      	str	r3, [sp, #12]
 800d774:	f107 030c 	add.w	r3, r7, #12
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	2301      	movs	r3, #1
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	f107 0314 	add.w	r3, r7, #20
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	4623      	mov	r3, r4
 800d786:	f005 f8bf 	bl	8012908 <phhalHw_Pn5180_I18000p3m3Inventory>
 800d78a:	4603      	mov	r3, r0
 800d78c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800d790:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe f95c 	bl	800ba52 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800d7a0:	f244 0387 	movw	r3, #16519	@ 0x4087
 800d7a4:	e001      	b.n	800d7aa <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800d7a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	374c      	adds	r7, #76	@ 0x4c
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd90      	pop	{r4, r7, pc}

0800d7b2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800d7b2:	b590      	push	{r4, r7, lr}
 800d7b4:	b09b      	sub	sp, #108	@ 0x6c
 800d7b6:	af08      	add	r7, sp, #32
 800d7b8:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800d7ba:	2304      	movs	r3, #4
 800d7bc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800d7c0:	f107 0318 	add.w	r3, r7, #24
 800d7c4:	2227      	movs	r2, #39	@ 0x27
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f014 fd77 	bl	80222bc <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800d7ce:	f107 0310 	add.w	r3, r7, #16
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	460a      	mov	r2, r1
 800d7d6:	801a      	strh	r2, [r3, #0]
 800d7d8:	460a      	mov	r2, r1
 800d7da:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	7f9b      	ldrb	r3, [r3, #30]
 800d7f0:	f023 0320 	bic.w	r3, r3, #32
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800d80a:	2300      	movs	r3, #0
 800d80c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	8b5b      	ldrh	r3, [r3, #26]
 800d818:	461a      	mov	r2, r3
 800d81a:	2135      	movs	r1, #53	@ 0x35
 800d81c:	f002 fcd0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800d820:	4603      	mov	r3, r0
 800d822:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d826:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800d82e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d832:	e1c5      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d838:	2106      	movs	r1, #6
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 ff42 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800d840:	4603      	mov	r3, r0
 800d842:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d846:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d002      	beq.n	800d854 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800d84e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d852:	e1b5      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d868:	f107 0316 	add.w	r3, r7, #22
 800d86c:	9307      	str	r3, [sp, #28]
 800d86e:	f107 0317 	add.w	r3, r7, #23
 800d872:	9306      	str	r3, [sp, #24]
 800d874:	f107 0318 	add.w	r3, r7, #24
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	2300      	movs	r3, #0
 800d87c:	9304      	str	r3, [sp, #16]
 800d87e:	2300      	movs	r3, #0
 800d880:	9303      	str	r3, [sp, #12]
 800d882:	2300      	movs	r3, #0
 800d884:	9302      	str	r3, [sp, #8]
 800d886:	2300      	movs	r3, #0
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	f107 0309 	add.w	r3, r7, #9
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	2301      	movs	r3, #1
 800d892:	2200      	movs	r2, #0
 800d894:	2100      	movs	r1, #0
 800d896:	f00b ff73 	bl	8019780 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d8a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800d8a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8ac:	e188      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800d8ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b71      	cmp	r3, #113	@ 0x71
 800d8b6:	d113      	bne.n	800d8e0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8bc:	f107 020a 	add.w	r2, r7, #10
 800d8c0:	f107 010c 	add.w	r1, r7, #12
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f005 f9b7 	bl	8012c38 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800d8d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b12      	cmp	r3, #18
 800d8d8:	d150      	bne.n	800d97c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800d8da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8de:	e16f      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 40ed 	ldrb.w	r4, [r3, #237]	@ 0xed
 800d8f0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800d8f4:	1c5a      	adds	r2, r3, #1
 800d8f6:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800d8fa:	f107 0210 	add.w	r2, r7, #16
 800d8fe:	9204      	str	r2, [sp, #16]
 800d900:	9303      	str	r3, [sp, #12]
 800d902:	2300      	movs	r3, #0
 800d904:	9302      	str	r3, [sp, #8]
 800d906:	2300      	movs	r3, #0
 800d908:	9301      	str	r3, [sp, #4]
 800d90a:	2300      	movs	r3, #0
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	2300      	movs	r3, #0
 800d910:	4622      	mov	r2, r4
 800d912:	f00c f84e 	bl	80199b2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800d916:	4603      	mov	r3, r0
 800d918:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d91c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800d924:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d928:	e14a      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d92e:	7dfa      	ldrb	r2, [r7, #23]
 800d930:	7dbc      	ldrb	r4, [r7, #22]
 800d932:	f107 0118 	add.w	r1, r7, #24
 800d936:	f107 030a 	add.w	r3, r7, #10
 800d93a:	9303      	str	r3, [sp, #12]
 800d93c:	f107 030c 	add.w	r3, r7, #12
 800d940:	9302      	str	r3, [sp, #8]
 800d942:	2300      	movs	r3, #0
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	f107 0310 	add.w	r3, r7, #16
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	4623      	mov	r3, r4
 800d94e:	f004 ffdb 	bl	8012908 <phhalHw_Pn5180_I18000p3m3Inventory>
 800d952:	4603      	mov	r3, r0
 800d954:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800d958:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b12      	cmp	r3, #18
 800d960:	d102      	bne.n	800d968 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800d962:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d966:	e12b      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	7f9b      	ldrb	r3, [r3, #30]
 800d972:	f023 0320 	bic.w	r3, r3, #32
 800d976:	b2da      	uxtb	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800d982:	e0ff      	b.n	800db84 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
        {
            if(pRxBuffer[wIndex] == 0U)
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d98a:	4413      	add	r3, r2
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f040 80cb 	bne.w	800db2a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x378>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d99a:	3302      	adds	r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800d9a4:	f244 037f 	movw	r3, #16511	@ 0x407f
 800d9a8:	e10a      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800d9aa:	2302      	movs	r3, #2
 800d9ac:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d9bc:	3303      	adds	r3, #3
 800d9be:	4413      	add	r3, r2
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	f003 0302 	and.w	r3, r3, #2
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d015      	beq.n	800d9f6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800d9ca:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800d9ce:	3302      	adds	r3, #2
 800d9d0:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d9e0:	3305      	adds	r3, #5
 800d9e2:	4413      	add	r3, r2
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	b25b      	sxtb	r3, r3
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	da04      	bge.n	800d9f6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800d9ec:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	4619      	mov	r1, r3
 800da04:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800da08:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800da0c:	4413      	add	r3, r2
 800da0e:	4299      	cmp	r1, r3
 800da10:	dd55      	ble.n	800dabe <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x30c>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800da18:	3301      	adds	r3, #1
 800da1a:	4413      	add	r3, r2
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	4619      	mov	r1, r3
 800da20:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800da24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800da28:	4413      	add	r3, r2
 800da2a:	1acb      	subs	r3, r1, r3
 800da2c:	2b3a      	cmp	r3, #58	@ 0x3a
 800da2e:	dc43      	bgt.n	800dab8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x306>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800da36:	461a      	mov	r2, r3
 800da38:	4613      	mov	r3, r2
 800da3a:	011b      	lsls	r3, r3, #4
 800da3c:	1a9b      	subs	r3, r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	33e8      	adds	r3, #232	@ 0xe8
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	4413      	add	r3, r2
 800da46:	f103 0008 	add.w	r0, r3, #8
                        (void)memcpy(
 800da4a:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800da4c:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800da50:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800da54:	440b      	add	r3, r1
 800da56:	3303      	adds	r3, #3
 800da58:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800da60:	3301      	adds	r3, #1
 800da62:	4413      	add	r3, r2
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	461c      	mov	r4, r3
 800da68:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800da6c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800da70:	4413      	add	r3, r2
                        (void)memcpy(
 800da72:	1ae3      	subs	r3, r4, r3
 800da74:	461a      	mov	r2, r3
 800da76:	f014 fca0 	bl	80223ba <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800da80:	3301      	adds	r3, #1
 800da82:	4413      	add	r3, r2
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	4619      	mov	r1, r3
 800da88:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800da8c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800da90:	4413      	add	r3, r2
 800da92:	1acb      	subs	r3, r1, r3
 800da94:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800da9c:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800da9e:	00db      	lsls	r3, r3, #3
 800daa0:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	011b      	lsls	r3, r3, #4
 800daa8:	1a5b      	subs	r3, r3, r1
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800dab2:	4602      	mov	r2, r0
 800dab4:	801a      	strh	r2, [r3, #0]
 800dab6:	e010      	b.n	800dada <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x328>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800dab8:	f244 037f 	movw	r3, #16511	@ 0x407f
 800dabc:	e080      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800dac4:	4619      	mov	r1, r3
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	011b      	lsls	r3, r3, #4
 800dacc:	1a5b      	subs	r3, r3, r1
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800dad6:	2200      	movs	r2, #0
 800dad8:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dae0:	3301      	adds	r3, #1
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                pDataParams->bNumOfCards++;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800daf0:	3301      	adds	r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 20ec 	ldrb.w	r2, [r3, #236]	@ 0xec
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800db04:	429a      	cmp	r2, r3
 800db06:	d301      	bcc.n	800db0c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x35a>
                {
                    return PH_ERR_SUCCESS;
 800db08:	2300      	movs	r3, #0
 800db0a:	e059      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db12:	3301      	adds	r3, #1
 800db14:	4413      	add	r3, r2
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	461a      	mov	r2, r3
 800db1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db1e:	4413      	add	r3, r2
 800db20:	b29b      	uxth	r3, r3
 800db22:	3303      	adds	r3, #3
 800db24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800db28:	e02c      	b.n	800db84 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db30:	4413      	add	r3, r2
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d102      	bne.n	800db3e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x38c>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800db38:	f244 037f 	movw	r3, #16511	@ 0x407f
 800db3c:	e040      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db44:	4413      	add	r3, r2
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d105      	bne.n	800db58 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a6>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800db4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db50:	3303      	adds	r3, #3
 800db52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800db56:	e015      	b.n	800db84 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800db58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db5c:	3303      	adds	r3, #3
 800db5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800db62:	2301      	movs	r3, #1
 800db64:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7f9b      	ldrb	r3, [r3, #30]
 800db6c:	f043 0320 	orr.w	r3, r3, #32
 800db70:	b2da      	uxtb	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	7bdb      	ldrb	r3, [r3, #15]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d102      	bne.n	800db84 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800db7e:	f244 0381 	movw	r3, #16513	@ 0x4081
 800db82:	e01d      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        while(wIndex < wRxBufferLen)
 800db84:	897b      	ldrh	r3, [r7, #10]
 800db86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db8a:	429a      	cmp	r2, r3
 800db8c:	f4ff aefa 	bcc.w	800d984 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800db90:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800db94:	2b00      	cmp	r3, #0
 800db96:	d004      	beq.n	800dba2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3f0>
 800db98:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800db9c:	2b0f      	cmp	r3, #15
 800db9e:	f67f ae86 	bls.w	800d8ae <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800dba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2b71      	cmp	r3, #113	@ 0x71
 800dbaa:	f43f ae80 	beq.w	800d8ae <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40a>
    {
        return PH_ERR_SUCCESS;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e001      	b.n	800dbc0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800dbbc:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	374c      	adds	r7, #76	@ 0x4c
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd90      	pop	{r4, r7, pc}

0800dbc8 <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b09b      	sub	sp, #108	@ 0x6c
 800dbcc:	af08      	add	r7, sp, #32
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800dbd4:	f107 031c 	add.w	r3, r7, #28
 800dbd8:	2227      	movs	r2, #39	@ 0x27
 800dbda:	2100      	movs	r1, #0
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f014 fb6d 	bl	80222bc <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800dbe2:	f107 0314 	add.w	r3, r7, #20
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	460a      	mov	r2, r1
 800dbea:	801a      	strh	r2, [r3, #0]
 800dbec:	460a      	mov	r2, r1
 800dbee:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800dbf8:	2320      	movs	r3, #32
 800dbfa:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dc02:	78fa      	ldrb	r2, [r7, #3]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d202      	bcs.n	800dc0e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800dc08:	78fb      	ldrb	r3, [r7, #3]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800dc0e:	f244 0321 	movw	r3, #16417	@ 0x4021
 800dc12:	e09b      	b.n	800dd4c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800dc14:	78fa      	ldrb	r2, [r7, #3]
 800dc16:	6879      	ldr	r1, [r7, #4]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	011b      	lsls	r3, r3, #4
 800dc1c:	1a9b      	subs	r3, r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	440b      	add	r3, r1
 800dc22:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	2bff      	cmp	r3, #255	@ 0xff
 800dc2a:	d903      	bls.n	800dc34 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6c>
    {
        bMaskLength = 255;
 800dc2c:	23ff      	movs	r3, #255	@ 0xff
 800dc2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dc32:	e00b      	b.n	800dc4c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x84>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800dc34:	78fa      	ldrb	r2, [r7, #3]
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	1a9b      	subs	r3, r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	440b      	add	r3, r1
 800dc42:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800dc46:	881b      	ldrh	r3, [r3, #0]
 800dc48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800dc50:	78fa      	ldrb	r2, [r7, #3]
 800dc52:	4613      	mov	r3, r2
 800dc54:	011b      	lsls	r3, r3, #4
 800dc56:	1a9b      	subs	r3, r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	33e8      	adds	r3, #232	@ 0xe8
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	4413      	add	r3, r2
 800dc60:	3308      	adds	r3, #8
 800dc62:	f107 021a 	add.w	r2, r7, #26
 800dc66:	9207      	str	r2, [sp, #28]
 800dc68:	f107 021b 	add.w	r2, r7, #27
 800dc6c:	9206      	str	r2, [sp, #24]
 800dc6e:	f107 021c 	add.w	r2, r7, #28
 800dc72:	9205      	str	r2, [sp, #20]
 800dc74:	2200      	movs	r2, #0
 800dc76:	9204      	str	r2, [sp, #16]
 800dc78:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800dc7c:	9203      	str	r2, [sp, #12]
 800dc7e:	9302      	str	r3, [sp, #8]
 800dc80:	2300      	movs	r3, #0
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	f107 030d 	add.w	r3, r7, #13
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2100      	movs	r1, #0
 800dc90:	f00b fd76 	bl	8019780 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800dc94:	4603      	mov	r3, r0
 800dc96:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800dc9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xe0>
 800dca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dca6:	e051      	b.n	800dd4c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800dcb8:	f107 0314 	add.w	r3, r7, #20
 800dcbc:	9304      	str	r3, [sp, #16]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9302      	str	r3, [sp, #8]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	2300      	movs	r3, #0
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f00b fe6f 	bl	80199b2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800dcda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x120>
 800dce2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dce6:	e031      	b.n	800dd4c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800dcec:	7efa      	ldrb	r2, [r7, #27]
 800dcee:	7ebc      	ldrb	r4, [r7, #26]
 800dcf0:	f107 011c 	add.w	r1, r7, #28
 800dcf4:	f107 030e 	add.w	r3, r7, #14
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	f107 0310 	add.w	r3, r7, #16
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	2302      	movs	r3, #2
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	f107 0314 	add.w	r3, r7, #20
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	4623      	mov	r3, r4
 800dd0c:	f004 fdfc 	bl	8012908 <phhalHw_Pn5180_I18000p3m3Inventory>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800dd16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d002      	beq.n	800dd24 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x15c>
 800dd1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dd22:	e013      	b.n	800dd4c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800dd28:	693a      	ldr	r2, [r7, #16]
 800dd2a:	89fb      	ldrh	r3, [r7, #14]
 800dd2c:	3b02      	subs	r3, #2
 800dd2e:	4413      	add	r3, r2
 800dd30:	4619      	mov	r1, r3
 800dd32:	f000 fbd7 	bl	800e4e4 <phalI18000p3m3_Sw_SetHandle>
 800dd36:	4603      	mov	r3, r0
 800dd38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800dd3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x182>
 800dd44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dd48:	e000      	b.n	800dd4c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800dd4a:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	374c      	adds	r7, #76	@ 0x4c
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd90      	pop	{r4, r7, pc}

0800dd54 <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b088      	sub	sp, #32
 800dd58:	af04      	add	r7, sp, #16
 800dd5a:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800dd5c:	237f      	movs	r3, #127	@ 0x7f
 800dd5e:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800dd6a:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800dd6e:	b2d9      	uxtb	r1, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	33e2      	adds	r3, #226	@ 0xe2
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	32e3      	adds	r2, #227	@ 0xe3
 800dd78:	9202      	str	r2, [sp, #8]
 800dd7a:	9301      	str	r3, [sp, #4]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	2300      	movs	r3, #0
 800dd82:	2200      	movs	r2, #0
 800dd84:	f00c fd5a 	bl	801a83c <phpalSli15693_Sw_Inventory>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800dd8c:	89fb      	ldrh	r3, [r7, #14]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fd fe5f 	bl	800ba52 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800dd9a:	f244 0387 	movw	r3, #16519	@ 0x4087
 800dd9e:	e000      	b.n	800dda2 <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800dda0:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800ddaa:	b590      	push	{r4, r7, lr}
 800ddac:	b09b      	sub	sp, #108	@ 0x6c
 800ddae:	af04      	add	r7, sp, #16
 800ddb0:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800ddb2:	237f      	movs	r3, #127	@ 0x7f
 800ddb4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800dddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dde0:	2200      	movs	r2, #0
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	605a      	str	r2, [r3, #4]
 800dde6:	609a      	str	r2, [r3, #8]
 800dde8:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800ddea:	f107 030c 	add.w	r3, r7, #12
 800ddee:	2220      	movs	r2, #32
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f014 fa62 	bl	80222bc <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7f9b      	ldrb	r3, [r3, #30]
 800de04:	f023 0310 	bic.w	r3, r3, #16
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	8b1b      	ldrh	r3, [r3, #24]
 800de16:	461a      	mov	r2, r3
 800de18:	2135      	movs	r1, #53	@ 0x35
 800de1a:	f002 f9d1 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800de1e:	4603      	mov	r3, r0
 800de20:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800de24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800de2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de30:	e2bf      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de36:	2104      	movs	r1, #4
 800de38:	4618      	mov	r0, r3
 800de3a:	f001 fc43 	bl	800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>
 800de3e:	4603      	mov	r3, r0
 800de40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800de44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800de4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de50:	e2af      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800de5c:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800de60:	b2d9      	uxtb	r1, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	33e2      	adds	r3, #226	@ 0xe2
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	32e3      	adds	r2, #227	@ 0xe3
 800de6a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800de6e:	9202      	str	r2, [sp, #8]
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	4623      	mov	r3, r4
 800de7a:	2200      	movs	r2, #0
 800de7c:	f00c fcde 	bl	801a83c <phpalSli15693_Sw_Inventory>
 800de80:	4603      	mov	r3, r0
 800de82:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800de86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d102      	bne.n	800de96 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800de90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de94:	e28d      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800de96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d111      	bne.n	800dec4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800dea6:	3301      	adds	r3, #1
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
            pDataParams->bNumOfCards++;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800deb6:	3301      	adds	r3, #1
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800dec0:	2300      	movs	r3, #0
 800dec2:	e276      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800dec4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b03      	cmp	r3, #3
 800decc:	d005      	beq.n	800deda <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800dece:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	f040 8260 	bne.w	800e39a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f0>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7f9b      	ldrb	r3, [r3, #30]
 800dede:	f043 0310 	orr.w	r3, r3, #16
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	7b9b      	ldrb	r3, [r3, #14]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8245 	bne.w	800e37c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800def2:	f244 0381 	movw	r3, #16513	@ 0x4081
 800def6:	e25c      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	7f9b      	ldrb	r3, [r3, #30]
 800df02:	f023 0310 	bic.w	r3, r3, #16
 800df06:	b2da      	uxtb	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800df16:	f043 0304 	orr.w	r3, r3, #4
 800df1a:	b2dc      	uxtb	r4, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800df22:	461a      	mov	r2, r3
 800df24:	4613      	mov	r3, r2
 800df26:	00db      	lsls	r3, r3, #3
 800df28:	4413      	add	r3, r2
 800df2a:	33d8      	adds	r3, #216	@ 0xd8
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	4413      	add	r3, r2
 800df30:	f103 020a 	add.w	r2, r3, #10
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800df3a:	4619      	mov	r1, r3
 800df3c:	460b      	mov	r3, r1
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	440b      	add	r3, r1
 800df42:	33d8      	adds	r3, #216	@ 0xd8
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	440b      	add	r3, r1
 800df48:	330b      	adds	r3, #11
 800df4a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800df4e:	9302      	str	r3, [sp, #8]
 800df50:	9201      	str	r2, [sp, #4]
 800df52:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	460b      	mov	r3, r1
 800df5a:	2200      	movs	r2, #0
 800df5c:	4621      	mov	r1, r4
 800df5e:	f00c fc6d 	bl	801a83c <phpalSli15693_Sw_Inventory>
 800df62:	4603      	mov	r3, r0
 800df64:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800df68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d04f      	beq.n	800e012 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800df72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b06      	cmp	r3, #6
 800df7a:	d04a      	beq.n	800e012 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800df7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b03      	cmp	r3, #3
 800df84:	d004      	beq.n	800df90 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e6>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800df86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d11f      	bne.n	800dfd0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x226>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7f9b      	ldrb	r3, [r3, #30]
 800df94:	f043 0310 	orr.w	r3, r3, #16
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800df9e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	3358      	adds	r3, #88	@ 0x58
 800dfa6:	443b      	add	r3, r7
 800dfa8:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800dfac:	b21a      	sxth	r2, r3
 800dfae:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	fa01 f303 	lsl.w	r3, r1, r3
 800dfb8:	b21b      	sxth	r3, r3
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	b21a      	sxth	r2, r3
 800dfbe:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800dfc2:	b292      	uxth	r2, r2
 800dfc4:	005b      	lsls	r3, r3, #1
 800dfc6:	3358      	adds	r3, #88	@ 0x58
 800dfc8:	443b      	add	r3, r7
 800dfca:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800dfce:	e020      	b.n	800e012 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800dfd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d118      	bne.n	800e00c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x262>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
                            pDataParams->bNumOfCards++;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800dff0:	3301      	adds	r3, #1
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	7b9b      	ldrb	r3, [r3, #14]
 800e004:	429a      	cmp	r2, r3
 800e006:	d304      	bcc.n	800e012 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            {
                                return PH_ERR_SUCCESS;
 800e008:	2300      	movs	r3, #0
 800e00a:	e1d2      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800e00c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e010:	e1cf      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800e012:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800e016:	3301      	adds	r3, #1
 800e018:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800e01c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800e020:	2b10      	cmp	r3, #16
 800e022:	d102      	bne.n	800e02a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x280>
                        {
                            bNextSlot = 0;
 800e024:	2300      	movs	r3, #0
 800e026:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800e02a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d032      	beq.n	800e098 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800e03c:	461a      	mov	r2, r3
 800e03e:	4613      	mov	r3, r2
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	4413      	add	r3, r2
 800e044:	33d8      	adds	r3, #216	@ 0xd8
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	4413      	add	r3, r2
 800e04a:	f103 010a 	add.w	r1, r3, #10
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800e054:	461a      	mov	r2, r3
 800e056:	4613      	mov	r3, r2
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	4413      	add	r3, r2
 800e05c:	33d8      	adds	r3, #216	@ 0xd8
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	4413      	add	r3, r2
 800e062:	f103 020b 	add.w	r2, r3, #11
 800e066:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800e06a:	9302      	str	r3, [sp, #8]
 800e06c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	4613      	mov	r3, r2
 800e07a:	460a      	mov	r2, r1
 800e07c:	2100      	movs	r1, #0
 800e07e:	f00c fc07 	bl	801a890 <phpalSli15693_Sw_SendEof>
 800e082:	4603      	mov	r3, r0
 800e084:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800e088:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b12      	cmp	r3, #18
 800e090:	d102      	bne.n	800e098 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
 800e092:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e096:	e18c      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }
                    }
                    while(0U != bNextSlot);
 800e098:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f47f af63 	bne.w	800df68 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1be>
                    bNextSlot = 1;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800e0ae:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e0b2:	005b      	lsls	r3, r3, #1
 800e0b4:	3358      	adds	r3, #88	@ 0x58
 800e0b6:	443b      	add	r3, r7
 800e0b8:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 8120 	beq.w	800e302 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x558>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800e0c2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e0c6:	3358      	adds	r3, #88	@ 0x58
 800e0c8:	443b      	add	r3, r7
 800e0ca:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e0ce:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800e0d2:	e110      	b.n	800e2f6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x54c>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800e0d4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	3358      	adds	r3, #88	@ 0x58
 800e0dc:	443b      	add	r3, r7
 800e0de:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e0e8:	fa42 f303 	asr.w	r3, r2, r3
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 80c8 	beq.w	800e286 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4dc>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800e0f6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e0fa:	f003 0307 	and.w	r3, r3, #7
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800e104:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10a      	bne.n	800e122 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x378>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800e10c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e110:	08db      	lsrs	r3, r3, #3
 800e112:	b2db      	uxtb	r3, r3
 800e114:	3358      	adds	r3, #88	@ 0x58
 800e116:	443b      	add	r3, r7
 800e118:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800e11c:	f803 2c14 	strb.w	r2, [r3, #-20]
 800e120:	e047      	b.n	800e1b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800e122:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e126:	08db      	lsrs	r3, r3, #3
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	3358      	adds	r3, #88	@ 0x58
 800e12c:	443b      	add	r3, r7
 800e12e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800e132:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e136:	f1c3 0308 	rsb	r3, r3, #8
 800e13a:	21ff      	movs	r1, #255	@ 0xff
 800e13c:	fa41 f303 	asr.w	r3, r1, r3
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800e146:	08c9      	lsrs	r1, r1, #3
 800e148:	b2c9      	uxtb	r1, r1
 800e14a:	4013      	ands	r3, r2
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800e152:	443b      	add	r3, r7
 800e154:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800e158:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e15c:	08db      	lsrs	r3, r3, #3
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	3358      	adds	r3, #88	@ 0x58
 800e162:	443b      	add	r3, r7
 800e164:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800e168:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e16c:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800e170:	408b      	lsls	r3, r1
 800e172:	b2db      	uxtb	r3, r3
 800e174:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800e178:	08c9      	lsrs	r1, r1, #3
 800e17a:	b2c9      	uxtb	r1, r1
 800e17c:	4313      	orrs	r3, r2
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800e184:	443b      	add	r3, r7
 800e186:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800e18a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e18e:	2b04      	cmp	r3, #4
 800e190:	d90f      	bls.n	800e1b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800e192:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e196:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800e19a:	fa43 f202 	asr.w	r2, r3, r2
 800e19e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e1a2:	08db      	lsrs	r3, r3, #3
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	b2d2      	uxtb	r2, r2
 800e1aa:	3358      	adds	r3, #88	@ 0x58
 800e1ac:	443b      	add	r3, r7
 800e1ae:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800e1b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7f9b      	ldrb	r3, [r3, #30]
 800e1c0:	f043 0310 	orr.w	r3, r3, #16
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800e1ca:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	3358      	adds	r3, #88	@ 0x58
 800e1d2:	443b      	add	r3, r7
 800e1d4:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800e1d8:	b21a      	sxth	r2, r3
 800e1da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e1de:	2101      	movs	r1, #1
 800e1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e1e4:	b21b      	sxth	r3, r3
 800e1e6:	43db      	mvns	r3, r3
 800e1e8:	b21b      	sxth	r3, r3
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	b21a      	sxth	r2, r3
 800e1ee:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e1f2:	b292      	uxth	r2, r2
 800e1f4:	005b      	lsls	r3, r3, #1
 800e1f6:	3358      	adds	r3, #88	@ 0x58
 800e1f8:	443b      	add	r3, r7
 800e1fa:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800e1fe:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e202:	2b0f      	cmp	r3, #15
 800e204:	d124      	bne.n	800e250 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a6>
                                    {
                                        bCount[bLevel] = 0U;
 800e206:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e20a:	3358      	adds	r3, #88	@ 0x58
 800e20c:	443b      	add	r3, r7
 800e20e:	2200      	movs	r2, #0
 800e210:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800e214:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e218:	005b      	lsls	r3, r3, #1
 800e21a:	3358      	adds	r3, #88	@ 0x58
 800e21c:	443b      	add	r3, r7
 800e21e:	2200      	movs	r2, #0
 800e220:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800e224:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d103      	bne.n	800e234 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x48a>
                                        {
                                            bEnd = 1;
 800e22c:	2301      	movs	r3, #1
 800e22e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800e232:	e098      	b.n	800e366 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                            bCount[bLevel] = bSlotCount;
 800e234:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e238:	3358      	adds	r3, #88	@ 0x58
 800e23a:	443b      	add	r3, r7
 800e23c:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800e240:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800e244:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e248:	3301      	adds	r3, #1
 800e24a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800e24e:	e08a      	b.n	800e366 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                        bCount[bLevel] = bSlotCount;
 800e250:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e254:	3358      	adds	r3, #88	@ 0x58
 800e256:	443b      	add	r3, r7
 800e258:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800e25c:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800e260:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e264:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800e268:	443a      	add	r2, r7
 800e26a:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800e26e:	3201      	adds	r2, #1
 800e270:	b2d2      	uxtb	r2, r2
 800e272:	3358      	adds	r3, #88	@ 0x58
 800e274:	443b      	add	r3, r7
 800e276:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800e27a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e27e:	3301      	adds	r3, #1
 800e280:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800e284:	e06f      	b.n	800e366 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800e286:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e28a:	2b0f      	cmp	r3, #15
 800e28c:	d12e      	bne.n	800e2ec <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                    {
                                        if(bLevel == 0U)
 800e28e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10a      	bne.n	800e2ac <phacDiscLoop_Sw_Int_CollisionResolutionV+0x502>
                                        {
                                            bEnd = 1;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	7f9b      	ldrb	r3, [r3, #30]
 800e2a0:	f023 0310 	bic.w	r3, r3, #16
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	779a      	strb	r2, [r3, #30]
 800e2aa:	e01f      	b.n	800e2ec <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	7f9b      	ldrb	r3, [r3, #30]
 800e2b0:	f023 0310 	bic.w	r3, r3, #16
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800e2ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e2be:	3b04      	subs	r3, #4
 800e2c0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800e2c4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	3358      	adds	r3, #88	@ 0x58
 800e2cc:	443b      	add	r3, r7
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800e2d4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e2d8:	3358      	adds	r3, #88	@ 0x58
 800e2da:	443b      	add	r3, r7
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800e2e2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800e2ec:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800e2f6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e2fa:	2b0f      	cmp	r3, #15
 800e2fc:	f67f aeea 	bls.w	800e0d4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x32a>
 800e300:	e031      	b.n	800e366 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800e302:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10a      	bne.n	800e320 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x576>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	7f9b      	ldrb	r3, [r3, #30]
 800e30e:	f023 0310 	bic.w	r3, r3, #16
 800e312:	b2da      	uxtb	r2, r3
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800e318:	2301      	movs	r3, #1
 800e31a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800e31e:	e022      	b.n	800e366 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7f9b      	ldrb	r3, [r3, #30]
 800e324:	f023 0310 	bic.w	r3, r3, #16
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800e32e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800e332:	3b04      	subs	r3, #4
 800e334:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800e338:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	3358      	adds	r3, #88	@ 0x58
 800e340:	443b      	add	r3, r7
 800e342:	2200      	movs	r2, #0
 800e344:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800e348:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e34c:	3358      	adds	r3, #88	@ 0x58
 800e34e:	443b      	add	r3, r7
 800e350:	2200      	movs	r2, #0
 800e352:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800e356:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800e35a:	3b01      	subs	r3, #1
 800e35c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800e360:	2301      	movs	r3, #1
 800e362:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800e366:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f47f ae9c 	bne.w	800e0a8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fe>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	7f9b      	ldrb	r3, [r3, #30]
 800e374:	f003 0310 	and.w	r3, r3, #16
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d008      	beq.n	800e38e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e4>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	7b9b      	ldrb	r3, [r3, #14]
 800e386:	429a      	cmp	r2, r3
 800e388:	f4ff adb6 	bcc.w	800def8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800e38c:	e000      	b.n	800e390 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e6>
                    {
                        break;
 800e38e:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800e390:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800e394:	2b00      	cmp	r3, #0
 800e396:	d0f1      	beq.n	800e37c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800e398:	e002      	b.n	800e3a0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f6>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800e39a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e39e:	e008      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    {
        return PH_ERR_SUCCESS;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	e001      	b.n	800e3b2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800e3ae:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	375c      	adds	r7, #92	@ 0x5c
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd90      	pop	{r4, r7, pc}

0800e3ba <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800e3c6:	237f      	movs	r3, #127	@ 0x7f
 800e3c8:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800e3d0:	78fa      	ldrb	r2, [r7, #3]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d202      	bcs.n	800e3dc <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800e3d6:	78fb      	ldrb	r3, [r7, #3]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800e3dc:	f244 0321 	movw	r3, #16417	@ 0x4021
 800e3e0:	e026      	b.n	800e430 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800e3e6:	78fa      	ldrb	r2, [r7, #3]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	4413      	add	r3, r2
 800e3ee:	33d8      	adds	r3, #216	@ 0xd8
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	330b      	adds	r3, #11
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	f00c fd89 	bl	801af10 <phpalSli15693_Sw_SetSerialNo>
 800e3fe:	4603      	mov	r3, r0
 800e400:	81fb      	strh	r3, [r7, #14]
 800e402:	89fb      	ldrh	r3, [r7, #14]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d001      	beq.n	800e40c <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800e408:	89fb      	ldrh	r3, [r7, #14]
 800e40a:	e011      	b.n	800e430 <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800e412:	2b10      	cmp	r3, #16
 800e414:	d10b      	bne.n	800e42e <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e41a:	4618      	mov	r0, r3
 800e41c:	f00c fc10 	bl	801ac40 <phpalSli15693_Sw_Select>
 800e420:	4603      	mov	r3, r0
 800e422:	81fb      	strh	r3, [r7, #14]
 800e424:	89fb      	ldrh	r3, [r7, #14]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800e42a:	89fb      	ldrh	r3, [r7, #14]
 800e42c:	e000      	b.n	800e430 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800e42e:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	460b      	mov	r3, r1
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800e446:	897b      	ldrh	r3, [r7, #10]
 800e448:	2b0c      	cmp	r3, #12
 800e44a:	d002      	beq.n	800e452 <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800e44c:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800e450:	e014      	b.n	800e47c <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <phalFelica_Sw_Init+0x24>
 800e458:	2321      	movs	r3, #33	@ 0x21
 800e45a:	e00f      	b.n	800e47c <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <phalFelica_Sw_Init+0x2e>
 800e462:	2321      	movs	r3, #33	@ 0x21
 800e464:	e00a      	b.n	800e47c <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f241 4201 	movw	r2, #5121	@ 0x1401
 800e46c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2200      	movs	r2, #0
 800e478:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	460b      	mov	r3, r1
 800e492:	607a      	str	r2, [r7, #4]
 800e494:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800e496:	897b      	ldrh	r3, [r7, #10]
 800e498:	2b0c      	cmp	r3, #12
 800e49a:	d002      	beq.n	800e4a2 <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800e49c:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800e4a0:	e01a      	b.n	800e4d8 <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d101      	bne.n	800e4ac <phalI18000p3m3_Sw_Init+0x24>
 800e4a8:	2321      	movs	r3, #33	@ 0x21
 800e4aa:	e015      	b.n	800e4d8 <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <phalI18000p3m3_Sw_Init+0x2e>
 800e4b2:	2321      	movs	r3, #33	@ 0x21
 800e4b4:	e010      	b.n	800e4d8 <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f641 0201 	movw	r2, #6145	@ 0x1801
 800e4bc:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	8812      	ldrh	r2, [r2, #0]
 800e4f6:	b292      	uxth	r2, r2
 800e4f8:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b084      	sub	sp, #16
 800e512:	af00      	add	r7, sp, #0
 800e514:	60f8      	str	r0, [r7, #12]
 800e516:	607a      	str	r2, [r7, #4]
 800e518:	603b      	str	r3, [r7, #0]
 800e51a:	460b      	mov	r3, r1
 800e51c:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d102      	bne.n	800e52a <phalICode_Sw_Init+0x1c>
 800e524:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800e528:	e026      	b.n	800e578 <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d102      	bne.n	800e536 <phalICode_Sw_Init+0x28>
 800e530:	f241 5321 	movw	r3, #5409	@ 0x1521
 800e534:	e020      	b.n	800e578 <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800e536:	897b      	ldrh	r3, [r7, #10]
 800e538:	2b20      	cmp	r3, #32
 800e53a:	d002      	beq.n	800e542 <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800e53c:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800e540:	e01a      	b.n	800e578 <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f241 5201 	movw	r2, #5377	@ 0x1501
 800e548:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	69ba      	ldr	r2, [r7, #24]
 800e55a:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	69fa      	ldr	r2, [r7, #28]
 800e560:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2201      	movs	r2, #1
 800e566:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3314      	adds	r3, #20
 800e56c:	220a      	movs	r2, #10
 800e56e:	2100      	movs	r1, #0
 800e570:	4618      	mov	r0, r3
 800e572:	f013 fea3 	bl	80222bc <memset>

    return PH_ERR_SUCCESS;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3710      	adds	r7, #16
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	607a      	str	r2, [r7, #4]
 800e58a:	603b      	str	r3, [r7, #0]
 800e58c:	460b      	mov	r3, r1
 800e58e:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800e590:	897b      	ldrh	r3, [r7, #10]
 800e592:	2ba8      	cmp	r3, #168	@ 0xa8
 800e594:	d002      	beq.n	800e59c <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800e596:	f242 6320 	movw	r3, #9760	@ 0x2620
 800e59a:	e0a1      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d102      	bne.n	800e5a8 <phalMfNtag42XDna_Sw_Init+0x28>
 800e5a2:	f242 6320 	movw	r3, #9760	@ 0x2620
 800e5a6:	e09b      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d102      	bne.n	800e5b4 <phalMfNtag42XDna_Sw_Init+0x34>
 800e5ae:	f242 6321 	movw	r3, #9761	@ 0x2621
 800e5b2:	e095      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d102      	bne.n	800e5c0 <phalMfNtag42XDna_Sw_Init+0x40>
 800e5ba:	f242 6321 	movw	r3, #9761	@ 0x2621
 800e5be:	e08f      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d102      	bne.n	800e5cc <phalMfNtag42XDna_Sw_Init+0x4c>
 800e5c6:	f242 6321 	movw	r3, #9761	@ 0x2621
 800e5ca:	e089      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <phalMfNtag42XDna_Sw_Init+0x58>
 800e5d2:	f242 6321 	movw	r3, #9761	@ 0x2621
 800e5d6:	e083      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d102      	bne.n	800e5e4 <phalMfNtag42XDna_Sw_Init+0x64>
 800e5de:	f242 6321 	movw	r3, #9761	@ 0x2621
 800e5e2:	e07d      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d102      	bne.n	800e5f0 <phalMfNtag42XDna_Sw_Init+0x70>
 800e5ea:	f242 6321 	movw	r3, #9761	@ 0x2621
 800e5ee:	e077      	b.n	800e6e0 <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f242 6201 	movw	r2, #9729	@ 0x2601
 800e5f6:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	69ba      	ldr	r2, [r7, #24]
 800e608:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6a3a      	ldr	r2, [r7, #32]
 800e614:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e61a:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f246 3263 	movw	r2, #25443	@ 0x6363
 800e622:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f04f 32ff 	mov.w	r2, #4294967295
 800e62c:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	331c      	adds	r3, #28
 800e632:	2218      	movs	r2, #24
 800e634:	2100      	movs	r1, #0
 800e636:	4618      	mov	r0, r3
 800e638:	f013 fe40 	bl	80222bc <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	22ff      	movs	r2, #255	@ 0xff
 800e640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3335      	adds	r3, #53	@ 0x35
 800e648:	2210      	movs	r2, #16
 800e64a:	2100      	movs	r1, #0
 800e64c:	4618      	mov	r0, r3
 800e64e:	f013 fe35 	bl	80222bc <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3346      	adds	r3, #70	@ 0x46
 800e656:	2203      	movs	r2, #3
 800e658:	2100      	movs	r1, #0
 800e65a:	4618      	mov	r0, r3
 800e65c:	f013 fe2e 	bl	80222bc <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	22ff      	movs	r2, #255	@ 0xff
 800e664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	22ff      	movs	r2, #255	@ 0xff
 800e674:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2200      	movs	r2, #0
 800e68c:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	335e      	adds	r3, #94	@ 0x5e
 800e69a:	2204      	movs	r2, #4
 800e69c:	2100      	movs	r1, #0
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f013 fe0c 	bl	80222bc <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3362      	adds	r3, #98	@ 0x62
 800e6a8:	2210      	movs	r2, #16
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f013 fe05 	bl	80222bc <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3382      	adds	r3, #130	@ 0x82
 800e6b6:	2210      	movs	r2, #16
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f013 fdfe 	bl	80222bc <memset>
    pDataParams->bNoUnprocBytes = 0;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	3393      	adds	r3, #147	@ 0x93
 800e6cc:	2210      	movs	r2, #16
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f013 fdf3 	bl	80222bc <memset>
    pDataParams->bLastBlockIndex = 0;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	607a      	str	r2, [r7, #4]
 800e6f2:	603b      	str	r3, [r7, #0]
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800e6f8:	897b      	ldrh	r3, [r7, #10]
 800e6fa:	2b0c      	cmp	r3, #12
 800e6fc:	d002      	beq.n	800e704 <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800e6fe:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800e702:	e014      	b.n	800e72e <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <phalMfc_Sw_Init+0x26>
 800e70a:	2321      	movs	r3, #33	@ 0x21
 800e70c:	e00f      	b.n	800e72e <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <phalMfc_Sw_Init+0x30>
 800e714:	2321      	movs	r3, #33	@ 0x21
 800e716:	e00a      	b.n	800e72e <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f241 0201 	movw	r2, #4097	@ 0x1001
 800e71e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	683a      	ldr	r2, [r7, #0]
 800e72a:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b084      	sub	sp, #16
 800e73e:	af00      	add	r7, sp, #0
 800e740:	60f8      	str	r0, [r7, #12]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
 800e746:	460b      	mov	r3, r1
 800e748:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800e74a:	897b      	ldrh	r3, [r7, #10]
 800e74c:	2b68      	cmp	r3, #104	@ 0x68
 800e74e:	d002      	beq.n	800e756 <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800e750:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800e754:	e057      	b.n	800e806 <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d101      	bne.n	800e760 <phalMfdf_Sw_Init+0x26>
 800e75c:	2321      	movs	r3, #33	@ 0x21
 800e75e:	e052      	b.n	800e806 <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d101      	bne.n	800e76a <phalMfdf_Sw_Init+0x30>
 800e766:	2321      	movs	r3, #33	@ 0x21
 800e768:	e04d      	b.n	800e806 <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f641 1201 	movw	r2, #6401	@ 0x1901
 800e770:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	69fa      	ldr	r2, [r7, #28]
 800e788:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6a3a      	ldr	r2, [r7, #32]
 800e796:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f246 3263 	movw	r2, #25443	@ 0x6363
 800e79e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a8:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3318      	adds	r3, #24
 800e7ae:	2218      	movs	r2, #24
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f013 fd82 	bl	80222bc <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	22ff      	movs	r2, #255	@ 0xff
 800e7bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	3331      	adds	r3, #49	@ 0x31
 800e7c4:	2210      	movs	r2, #16
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f013 fd77 	bl	80222bc <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3342      	adds	r3, #66	@ 0x42
 800e7d2:	2203      	movs	r2, #3
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f013 fd70 	bl	80222bc <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	22ff      	movs	r2, #255	@ 0xff
 800e7e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	22ff      	movs	r2, #255	@ 0xff
 800e7f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
 800e81a:	460b      	mov	r3, r1
 800e81c:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800e81e:	897b      	ldrh	r3, [r7, #10]
 800e820:	2bb4      	cmp	r3, #180	@ 0xb4
 800e822:	d002      	beq.n	800e82a <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800e824:	f242 0320 	movw	r3, #8224	@ 0x2020
 800e828:	e09f      	b.n	800e96a <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <phalMfdfEVx_Sw_Init+0x28>
 800e830:	f242 0320 	movw	r3, #8224	@ 0x2020
 800e834:	e099      	b.n	800e96a <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d102      	bne.n	800e842 <phalMfdfEVx_Sw_Init+0x34>
 800e83c:	f242 0321 	movw	r3, #8225	@ 0x2021
 800e840:	e093      	b.n	800e96a <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800e842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e844:	2b00      	cmp	r3, #0
 800e846:	d102      	bne.n	800e84e <phalMfdfEVx_Sw_Init+0x40>
 800e848:	f242 0321 	movw	r3, #8225	@ 0x2021
 800e84c:	e08d      	b.n	800e96a <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e850:	2b00      	cmp	r3, #0
 800e852:	d102      	bne.n	800e85a <phalMfdfEVx_Sw_Init+0x4c>
 800e854:	f242 0321 	movw	r3, #8225	@ 0x2021
 800e858:	e087      	b.n	800e96a <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f242 0201 	movw	r2, #8193	@ 0x2001
 800e860:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	69ba      	ldr	r2, [r7, #24]
 800e872:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	69fa      	ldr	r2, [r7, #28]
 800e878:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6a3a      	ldr	r2, [r7, #32]
 800e87e:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e884:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e88c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e894:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f246 3263 	movw	r2, #25443	@ 0x6363
 800e89c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a6:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	331c      	adds	r3, #28
 800e8ac:	2218      	movs	r2, #24
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f013 fd03 	bl	80222bc <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	22ff      	movs	r2, #255	@ 0xff
 800e8ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3335      	adds	r3, #53	@ 0x35
 800e8c2:	2210      	movs	r2, #16
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f013 fcf8 	bl	80222bc <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3347      	adds	r3, #71	@ 0x47
 800e8d0:	2203      	movs	r2, #3
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f013 fcf1 	bl	80222bc <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	22ff      	movs	r2, #255	@ 0xff
 800e8de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	22ff      	movs	r2, #255	@ 0xff
 800e8ee:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	335e      	adds	r3, #94	@ 0x5e
 800e914:	2204      	movs	r2, #4
 800e916:	2100      	movs	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f013 fccf 	bl	80222bc <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3362      	adds	r3, #98	@ 0x62
 800e922:	2210      	movs	r2, #16
 800e924:	2100      	movs	r1, #0
 800e926:	4618      	mov	r0, r3
 800e928:	f013 fcc8 	bl	80222bc <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	3372      	adds	r3, #114	@ 0x72
 800e930:	2210      	movs	r2, #16
 800e932:	2100      	movs	r1, #0
 800e934:	4618      	mov	r0, r3
 800e936:	f013 fcc1 	bl	80222bc <memset>
    pDataParams->bNoUnprocBytes = 0;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3383      	adds	r3, #131	@ 0x83
 800e946:	2210      	movs	r2, #16
 800e948:	2100      	movs	r1, #0
 800e94a:	4618      	mov	r0, r3
 800e94c:	f013 fcb6 	bl	80222bc <memset>
    pDataParams->bLastBlockIndex = 0;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	22ff      	movs	r2, #255	@ 0xff
 800e95c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}

0800e972 <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	60f8      	str	r0, [r7, #12]
 800e97a:	607a      	str	r2, [r7, #4]
 800e97c:	603b      	str	r3, [r7, #0]
 800e97e:	460b      	mov	r3, r1
 800e980:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800e982:	897b      	ldrh	r3, [r7, #10]
 800e984:	2bac      	cmp	r3, #172	@ 0xac
 800e986:	d002      	beq.n	800e98e <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800e988:	f242 3320 	movw	r3, #8992	@ 0x2320
 800e98c:	e0ab      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <phalMfdfLight_Sw_Init+0x28>
 800e994:	f242 3320 	movw	r3, #8992	@ 0x2320
 800e998:	e0a5      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d102      	bne.n	800e9a6 <phalMfdfLight_Sw_Init+0x34>
 800e9a0:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9a4:	e09f      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d102      	bne.n	800e9b2 <phalMfdfLight_Sw_Init+0x40>
 800e9ac:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9b0:	e099      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <phalMfdfLight_Sw_Init+0x4c>
 800e9b8:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9bc:	e093      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d102      	bne.n	800e9ca <phalMfdfLight_Sw_Init+0x58>
 800e9c4:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9c8:	e08d      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <phalMfdfLight_Sw_Init+0x64>
 800e9d0:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9d4:	e087      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d102      	bne.n	800e9e2 <phalMfdfLight_Sw_Init+0x70>
 800e9dc:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9e0:	e081      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800e9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d102      	bne.n	800e9ee <phalMfdfLight_Sw_Init+0x7c>
 800e9e8:	f242 3321 	movw	r3, #8993	@ 0x2321
 800e9ec:	e07b      	b.n	800eae6 <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f242 3201 	movw	r2, #8961	@ 0x2301
 800e9f4:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	69fa      	ldr	r2, [r7, #28]
 800ea0c:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6a3a      	ldr	r2, [r7, #32]
 800ea12:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea20:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f246 3263 	movw	r2, #25443	@ 0x6363
 800ea28:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea32:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	331c      	adds	r3, #28
 800ea38:	2218      	movs	r2, #24
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f013 fc3d 	bl	80222bc <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	22ff      	movs	r2, #255	@ 0xff
 800ea46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3335      	adds	r3, #53	@ 0x35
 800ea4e:	2210      	movs	r2, #16
 800ea50:	2100      	movs	r1, #0
 800ea52:	4618      	mov	r0, r3
 800ea54:	f013 fc32 	bl	80222bc <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3346      	adds	r3, #70	@ 0x46
 800ea5c:	2203      	movs	r2, #3
 800ea5e:	2100      	movs	r1, #0
 800ea60:	4618      	mov	r0, r3
 800ea62:	f013 fc2b 	bl	80222bc <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	22ff      	movs	r2, #255	@ 0xff
 800ea6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	22ff      	movs	r2, #255	@ 0xff
 800ea7a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	335e      	adds	r3, #94	@ 0x5e
 800eaa0:	2204      	movs	r2, #4
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f013 fc09 	bl	80222bc <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	3362      	adds	r3, #98	@ 0x62
 800eaae:	2210      	movs	r2, #16
 800eab0:	2100      	movs	r1, #0
 800eab2:	4618      	mov	r0, r3
 800eab4:	f013 fc02 	bl	80222bc <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3382      	adds	r3, #130	@ 0x82
 800eabc:	2210      	movs	r2, #16
 800eabe:	2100      	movs	r1, #0
 800eac0:	4618      	mov	r0, r3
 800eac2:	f013 fbfb 	bl	80222bc <memset>
    pDataParams->bNoUnprocBytes = 0;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3393      	adds	r3, #147	@ 0x93
 800ead2:	2210      	movs	r2, #16
 800ead4:	2100      	movs	r1, #0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f013 fbf0 	bl	80222bc <memset>
    pDataParams->bLastBlockIndex = 0;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800eae4:	2300      	movs	r3, #0
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b086      	sub	sp, #24
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	607a      	str	r2, [r7, #4]
 800eaf8:	603b      	str	r3, [r7, #0]
 800eafa:	460b      	mov	r3, r1
 800eafc:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800eb02:	897b      	ldrh	r3, [r7, #10]
 800eb04:	2b84      	cmp	r3, #132	@ 0x84
 800eb06:	d002      	beq.n	800eb0e <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800eb08:	f242 1320 	movw	r3, #8480	@ 0x2120
 800eb0c:	e063      	b.n	800ebd6 <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <phalMfpEVx_Sw_Init+0x2c>
 800eb14:	f242 1320 	movw	r3, #8480	@ 0x2120
 800eb18:	e05d      	b.n	800ebd6 <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d102      	bne.n	800eb26 <phalMfpEVx_Sw_Init+0x38>
 800eb20:	f242 1321 	movw	r3, #8481	@ 0x2121
 800eb24:	e057      	b.n	800ebd6 <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800eb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d102      	bne.n	800eb32 <phalMfpEVx_Sw_Init+0x44>
 800eb2c:	f242 1321 	movw	r3, #8481	@ 0x2121
 800eb30:	e051      	b.n	800ebd6 <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800eb32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <phalMfpEVx_Sw_Init+0x50>
 800eb38:	f242 1321 	movw	r3, #8481	@ 0x2121
 800eb3c:	e04b      	b.n	800ebd6 <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f242 1201 	movw	r2, #8449	@ 0x2101
 800eb44:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6a3a      	ldr	r2, [r7, #32]
 800eb56:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb5c:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb62:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb68:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb6e:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb84:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3360      	adds	r3, #96	@ 0x60
 800eb9a:	2210      	movs	r2, #16
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f013 fb8c 	bl	80222bc <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3370      	adds	r3, #112	@ 0x70
 800eba8:	2210      	movs	r2, #16
 800ebaa:	2100      	movs	r1, #0
 800ebac:	4618      	mov	r0, r3
 800ebae:	f013 fb85 	bl	80222bc <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	3350      	adds	r3, #80	@ 0x50
 800ebb6:	2210      	movs	r2, #16
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f013 fb7e 	bl	80222bc <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f000 f80c 	bl	800ebde <phalMfpEVx_Sw_ResetSecMsgState>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	82fb      	strh	r3, [r7, #22]
 800ebca:	8afb      	ldrh	r3, [r7, #22]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <phalMfpEVx_Sw_Init+0xe6>
 800ebd0:	8afb      	ldrh	r3, [r7, #22]
 800ebd2:	e000      	b.n	800ebd6 <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b084      	sub	sp, #16
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2201      	movs	r2, #1
 800ec02:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d009      	beq.n	800ec2c <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d004      	beq.n	800ec2c <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800ec28:	2b05      	cmp	r3, #5
 800ec2a:	d104      	bne.n	800ec36 <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2205      	movs	r2, #5
 800ec30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800ec34:	e012      	b.n	800ec5c <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ec3c:	2b04      	cmp	r3, #4
 800ec3e:	d004      	beq.n	800ec4a <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d104      	bne.n	800ec54 <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2204      	movs	r2, #4
 800ec4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800ec52:	e003      	b.n	800ec5c <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3350      	adds	r3, #80	@ 0x50
 800ec60:	2210      	movs	r2, #16
 800ec62:	2100      	movs	r1, #0
 800ec64:	4618      	mov	r0, r3
 800ec66:	f013 fb29 	bl	80222bc <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	3360      	adds	r3, #96	@ 0x60
 800ec6e:	2210      	movs	r2, #16
 800ec70:	2100      	movs	r1, #0
 800ec72:	4618      	mov	r0, r3
 800ec74:	f013 fb22 	bl	80222bc <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	3370      	adds	r3, #112	@ 0x70
 800ec7c:	2210      	movs	r2, #16
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4618      	mov	r0, r3
 800ec82:	f013 fb1b 	bl	80222bc <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	332a      	adds	r3, #42	@ 0x2a
 800ec8a:	2204      	movs	r2, #4
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f013 fb14 	bl	80222bc <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	2104      	movs	r1, #4
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fa fb48 	bl	8009330 <phTMIUtils_ActivateTMICollection>
 800eca0:	4603      	mov	r3, r0
 800eca2:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a1b      	ldr	r3, [r3, #32]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d009      	beq.n	800ecc0 <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a18      	ldr	r0, [r3, #32]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3370      	adds	r3, #112	@ 0x70
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	f000 fa8b 	bl	800f1d2 <phalVca_SetSessionKeyUtility>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800ecc0:	89fb      	ldrh	r3, [r7, #14]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00b      	beq.n	800ecde <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800ecc6:	89fb      	ldrh	r3, [r7, #14]
 800ecc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d106      	bne.n	800ecde <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800ecd0:	89fb      	ldrh	r3, [r7, #14]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	e000      	b.n	800ece0 <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800ecde:	89fb      	ldrh	r3, [r7, #14]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	607a      	str	r2, [r7, #4]
 800ecf2:	603b      	str	r3, [r7, #0]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800ecf8:	897b      	ldrh	r3, [r7, #10]
 800ecfa:	2b1c      	cmp	r3, #28
 800ecfc:	d002      	beq.n	800ed04 <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800ecfe:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800ed02:	e026      	b.n	800ed52 <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <phalMful_Sw_Init+0x26>
 800ed0a:	2321      	movs	r3, #33	@ 0x21
 800ed0c:	e021      	b.n	800ed52 <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d101      	bne.n	800ed18 <phalMful_Sw_Init+0x30>
 800ed14:	2321      	movs	r3, #33	@ 0x21
 800ed16:	e01c      	b.n	800ed52 <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f241 1201 	movw	r2, #4353	@ 0x1101
 800ed1e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	683a      	ldr	r2, [r7, #0]
 800ed2a:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	69fa      	ldr	r2, [r7, #28]
 800ed36:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	22ff      	movs	r2, #255	@ 0xff
 800ed3c:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2200      	movs	r2, #0
 800ed42:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2200      	movs	r2, #0
 800ed48:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b085      	sub	sp, #20
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	460b      	mov	r3, r1
 800ed68:	607a      	str	r2, [r7, #4]
 800ed6a:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800ed6c:	897b      	ldrh	r3, [r7, #10]
 800ed6e:	2b10      	cmp	r3, #16
 800ed70:	d002      	beq.n	800ed78 <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800ed72:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800ed76:	e011      	b.n	800ed9c <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d101      	bne.n	800ed82 <phalT1T_Sw_Init+0x24>
 800ed7e:	2321      	movs	r3, #33	@ 0x21
 800ed80:	e00c      	b.n	800ed9c <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d101      	bne.n	800ed8c <phalT1T_Sw_Init+0x2e>
 800ed88:	2321      	movs	r3, #33	@ 0x21
 800ed8a:	e007      	b.n	800ed9c <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800ed92:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08c      	sub	sp, #48	@ 0x30
 800edac:	af02      	add	r7, sp, #8
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800edb4:	2300      	movs	r3, #0
 800edb6:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800edb8:	2307      	movs	r3, #7
 800edba:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800edbc:	2304      	movs	r3, #4
 800edbe:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800edc0:	2378      	movs	r3, #120	@ 0x78
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	f107 0318 	add.w	r3, r7, #24
 800edc8:	2100      	movs	r1, #0
 800edca:	460a      	mov	r2, r1
 800edcc:	801a      	strh	r2, [r3, #0]
 800edce:	460a      	mov	r2, r1
 800edd0:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	f240 1223 	movw	r2, #291	@ 0x123
 800edda:	2103      	movs	r1, #3
 800eddc:	4618      	mov	r0, r3
 800edde:	f006 ffdc 	bl	8015d9a <phpalI14443p3a_Sw_SetConfig>
 800ede2:	4603      	mov	r3, r0
 800ede4:	843b      	strh	r3, [r7, #32]
 800ede6:	8c3b      	ldrh	r3, [r7, #32]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <phalT1T_Sw_ReadUID+0x48>
 800edec:	8c3b      	ldrh	r3, [r7, #32]
 800edee:	e05c      	b.n	800eeaa <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6858      	ldr	r0, [r3, #4]
 800edf4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800edf6:	f107 0214 	add.w	r2, r7, #20
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	9301      	str	r3, [sp, #4]
 800edfe:	f107 031c 	add.w	r3, r7, #28
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	460b      	mov	r3, r1
 800ee06:	2100      	movs	r1, #0
 800ee08:	f007 fc72 	bl	80166f0 <phpalI14443p3a_Sw_Exchange>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	843b      	strh	r3, [r7, #32]
 800ee10:	8c3b      	ldrh	r3, [r7, #32]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d001      	beq.n	800ee1a <phalT1T_Sw_ReadUID+0x72>
 800ee16:	8c3b      	ldrh	r3, [r7, #32]
 800ee18:	e047      	b.n	800eeaa <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d10c      	bne.n	800ee3e <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	2b06      	cmp	r3, #6
 800ee2a:	d105      	bne.n	800ee38 <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d109      	bne.n	800ee4c <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800ee38:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800ee3c:	e035      	b.n	800eeaa <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	2b06      	cmp	r3, #6
 800ee44:	d002      	beq.n	800ee4c <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800ee46:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800ee4a:	e02e      	b.n	800eeaa <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	781a      	ldrb	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	785a      	ldrb	r2, [r3, #1]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee62:	e01a      	b.n	800ee9a <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800ee64:	69fa      	ldr	r2, [r7, #28]
 800ee66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	441a      	add	r2, r3
 800ee6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee72:	7811      	ldrb	r1, [r2, #0]
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	4413      	add	r3, r2
 800ee78:	460a      	mov	r2, r1
 800ee7a:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800ee7c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ee80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee84:	68b9      	ldr	r1, [r7, #8]
 800ee86:	440b      	add	r3, r1
 800ee88:	68f9      	ldr	r1, [r7, #12]
 800ee8a:	440a      	add	r2, r1
 800ee8c:	7a92      	ldrb	r2, [r2, #10]
 800ee8e:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800ee90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee94:	3301      	adds	r3, #1
 800ee96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ee9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	d9e0      	bls.n	800ee64 <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eea6:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3728      	adds	r7, #40	@ 0x28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b084      	sub	sp, #16
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	60f8      	str	r0, [r7, #12]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	603b      	str	r3, [r7, #0]
 800eebe:	460b      	mov	r3, r1
 800eec0:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800eec2:	897b      	ldrh	r3, [r7, #10]
 800eec4:	2b80      	cmp	r3, #128	@ 0x80
 800eec6:	d002      	beq.n	800eece <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800eec8:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800eecc:	e01e      	b.n	800ef0c <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <phalTop_Sw_Init+0x26>
 800eed4:	2321      	movs	r3, #33	@ 0x21
 800eed6:	e019      	b.n	800ef0c <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800eede:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	683a      	ldr	r2, [r7, #0]
 800eeea:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	69ba      	ldr	r2, [r7, #24]
 800eef0:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	69fa      	ldr	r2, [r7, #28]
 800eef6:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6a3a      	ldr	r2, [r7, #32]
 800eefc:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef02:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f000 f805 	bl	800ef14 <phalTop_Sw_Reset>
 800ef0a:	4603      	mov	r3, r0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2200      	movs	r2, #0
 800ef26:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	3328      	adds	r3, #40	@ 0x28
 800ef3e:	2258      	movs	r2, #88	@ 0x58
 800ef40:	2100      	movs	r1, #0
 800ef42:	4618      	mov	r0, r3
 800ef44:	f013 f9ba 	bl	80222bc <memset>

    return PH_ERR_SUCCESS;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b085      	sub	sp, #20
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	60f8      	str	r0, [r7, #12]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800ef62:	897b      	ldrh	r3, [r7, #10]
 800ef64:	2b54      	cmp	r3, #84	@ 0x54
 800ef66:	d002      	beq.n	800ef6e <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800ef68:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800ef6c:	e06d      	b.n	800f04a <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <phalVca_Sw_Init+0x28>
 800ef74:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800ef78:	e067      	b.n	800f04a <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <phalVca_Sw_Init+0x34>
 800ef80:	f241 3321 	movw	r3, #4897	@ 0x1321
 800ef84:	e061      	b.n	800f04a <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d102      	bne.n	800ef92 <phalVca_Sw_Init+0x40>
 800ef8c:	f241 3321 	movw	r3, #4897	@ 0x1321
 800ef90:	e05b      	b.n	800f04a <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d102      	bne.n	800ef9e <phalVca_Sw_Init+0x4c>
 800ef98:	f241 3321 	movw	r3, #4897	@ 0x1321
 800ef9c:	e055      	b.n	800f04a <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d102      	bne.n	800efaa <phalVca_Sw_Init+0x58>
 800efa4:	f241 3321 	movw	r3, #4897	@ 0x1321
 800efa8:	e04f      	b.n	800f04a <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800efaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efac:	2b00      	cmp	r3, #0
 800efae:	d005      	beq.n	800efbc <phalVca_Sw_Init+0x6a>
 800efb0:	6a3b      	ldr	r3, [r7, #32]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d102      	bne.n	800efbc <phalVca_Sw_Init+0x6a>
 800efb6:	f241 3321 	movw	r3, #4897	@ 0x1321
 800efba:	e046      	b.n	800f04a <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800efbc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d005      	beq.n	800efce <phalVca_Sw_Init+0x7c>
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <phalVca_Sw_Init+0x7c>
 800efc8:	f241 3321 	movw	r3, #4897	@ 0x1321
 800efcc:	e03d      	b.n	800f04a <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f241 3201 	movw	r2, #4865	@ 0x1301
 800efd4:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	69ba      	ldr	r2, [r7, #24]
 800efe6:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2200      	movs	r2, #0
 800efec:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eff2:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800eff8:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a3a      	ldr	r2, [r7, #32]
 800effe:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f00a:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	69fa      	ldr	r2, [r7, #28]
 800f010:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2200      	movs	r2, #0
 800f044:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
	...

0800f058 <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	4613      	mov	r3, r2
 800f064:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	2bff      	cmp	r3, #255	@ 0xff
 800f06a:	d07d      	beq.n	800f168 <phalVca_Sw_SetSessionKeyUtility+0x110>
 800f06c:	2bff      	cmp	r3, #255	@ 0xff
 800f06e:	f300 808c 	bgt.w	800f18a <phalVca_Sw_SetSessionKeyUtility+0x132>
 800f072:	2baa      	cmp	r3, #170	@ 0xaa
 800f074:	d04f      	beq.n	800f116 <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800f076:	2baa      	cmp	r3, #170	@ 0xaa
 800f078:	f300 8087 	bgt.w	800f18a <phalVca_Sw_SetSessionKeyUtility+0x132>
 800f07c:	2b1a      	cmp	r3, #26
 800f07e:	dc3d      	bgt.n	800f0fc <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800f080:	2b00      	cmp	r3, #0
 800f082:	f2c0 8082 	blt.w	800f18a <phalVca_Sw_SetSessionKeyUtility+0x132>
 800f086:	2b1a      	cmp	r3, #26
 800f088:	d87f      	bhi.n	800f18a <phalVca_Sw_SetSessionKeyUtility+0x132>
 800f08a:	a201      	add	r2, pc, #4	@ (adr r2, 800f090 <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800f08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f090:	0800f15f 	.word	0x0800f15f
 800f094:	0800f18b 	.word	0x0800f18b
 800f098:	0800f12f 	.word	0x0800f12f
 800f09c:	0800f147 	.word	0x0800f147
 800f0a0:	0800f15f 	.word	0x0800f15f
 800f0a4:	0800f15f 	.word	0x0800f15f
 800f0a8:	0800f18b 	.word	0x0800f18b
 800f0ac:	0800f18b 	.word	0x0800f18b
 800f0b0:	0800f18b 	.word	0x0800f18b
 800f0b4:	0800f18b 	.word	0x0800f18b
 800f0b8:	0800f103 	.word	0x0800f103
 800f0bc:	0800f18b 	.word	0x0800f18b
 800f0c0:	0800f18b 	.word	0x0800f18b
 800f0c4:	0800f18b 	.word	0x0800f18b
 800f0c8:	0800f18b 	.word	0x0800f18b
 800f0cc:	0800f18b 	.word	0x0800f18b
 800f0d0:	0800f18b 	.word	0x0800f18b
 800f0d4:	0800f18b 	.word	0x0800f18b
 800f0d8:	0800f18b 	.word	0x0800f18b
 800f0dc:	0800f18b 	.word	0x0800f18b
 800f0e0:	0800f18b 	.word	0x0800f18b
 800f0e4:	0800f18b 	.word	0x0800f18b
 800f0e8:	0800f18b 	.word	0x0800f18b
 800f0ec:	0800f18b 	.word	0x0800f18b
 800f0f0:	0800f18b 	.word	0x0800f18b
 800f0f4:	0800f18b 	.word	0x0800f18b
 800f0f8:	0800f10d 	.word	0x0800f10d
 800f0fc:	2b71      	cmp	r3, #113	@ 0x71
 800f0fe:	d038      	beq.n	800f172 <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800f100:	e043      	b.n	800f18a <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2204      	movs	r2, #4
 800f106:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800f10a:	e043      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2205      	movs	r2, #5
 800f110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800f114:	e03e      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2207      	movs	r2, #7
 800f11a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3328      	adds	r3, #40	@ 0x28
 800f122:	2220      	movs	r2, #32
 800f124:	68b9      	ldr	r1, [r7, #8]
 800f126:	4618      	mov	r0, r3
 800f128:	f013 f947 	bl	80223ba <memcpy>
        break;
 800f12c:	e032      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2208      	movs	r2, #8
 800f132:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	3328      	adds	r3, #40	@ 0x28
 800f13a:	2220      	movs	r2, #32
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	4618      	mov	r0, r3
 800f140:	f013 f93b 	bl	80223ba <memcpy>
        break;
 800f144:	e026      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2209      	movs	r2, #9
 800f14a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	3328      	adds	r3, #40	@ 0x28
 800f152:	2220      	movs	r2, #32
 800f154:	68b9      	ldr	r1, [r7, #8]
 800f156:	4618      	mov	r0, r3
 800f158:	f013 f92f 	bl	80223ba <memcpy>
        break;
 800f15c:	e01a      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2203      	movs	r2, #3
 800f162:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800f166:	e015      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2203      	movs	r2, #3
 800f16c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800f170:	e010      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2206      	movs	r2, #6
 800f176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	3328      	adds	r3, #40	@ 0x28
 800f17e:	2220      	movs	r2, #32
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	4618      	mov	r0, r3
 800f184:	f013 f919 	bl	80223ba <memcpy>
        break;
 800f188:	e004      	b.n	800f194 <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800f192:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop

0800f1a0 <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d101      	bne.n	800f1b4 <phalVca_Sw_SetApplicationType+0x14>
 800f1b0:	2321      	movs	r3, #33	@ 0x21
 800f1b2:	e008      	b.n	800f1c6 <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <phalVca_Sw_SetApplicationType+0x1e>
 800f1ba:	2321      	movs	r3, #33	@ 0x21
 800f1bc:	e003      	b.n	800f1c6 <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b086      	sub	sp, #24
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	60f8      	str	r0, [r7, #12]
 800f1da:	60b9      	str	r1, [r7, #8]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d102      	bne.n	800f1ec <phalVca_SetSessionKeyUtility+0x1a>
 800f1e6:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800f1ea:	e024      	b.n	800f236 <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d102      	bne.n	800f1f8 <phalVca_SetSessionKeyUtility+0x26>
 800f1f2:	f241 3321 	movw	r3, #4897	@ 0x1321
 800f1f6:	e01e      	b.n	800f236 <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	881b      	ldrh	r3, [r3, #0]
 800f1fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f200:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800f204:	d004      	beq.n	800f210 <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800f206:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800f20a:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800f20c:	8afb      	ldrh	r3, [r7, #22]
 800f20e:	e012      	b.n	800f236 <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b01      	cmp	r3, #1
 800f218:	d108      	bne.n	800f22c <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800f21a:	79fb      	ldrb	r3, [r7, #7]
 800f21c:	461a      	mov	r2, r3
 800f21e:	68b9      	ldr	r1, [r7, #8]
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff ff19 	bl	800f058 <phalVca_Sw_SetSessionKeyUtility>
 800f226:	4603      	mov	r3, r0
 800f228:	82fb      	strh	r3, [r7, #22]
            break;
 800f22a:	e003      	b.n	800f234 <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800f22c:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800f230:	82fb      	strh	r3, [r7, #22]
            break;
 800f232:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800f234:	8afb      	ldrh	r3, [r7, #22]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b084      	sub	sp, #16
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d102      	bne.n	800f254 <phalVca_SetApplicationType+0x16>
 800f24e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800f252:	e022      	b.n	800f29a <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d102      	bne.n	800f260 <phalVca_SetApplicationType+0x22>
 800f25a:	f241 3321 	movw	r3, #4897	@ 0x1321
 800f25e:	e01c      	b.n	800f29a <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	881b      	ldrh	r3, [r3, #0]
 800f264:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f268:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800f26c:	d004      	beq.n	800f278 <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800f26e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800f272:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800f274:	89fb      	ldrh	r3, [r7, #14]
 800f276:	e010      	b.n	800f29a <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	881b      	ldrh	r3, [r3, #0]
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d106      	bne.n	800f290 <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff ff8b 	bl	800f1a0 <phalVca_Sw_SetApplicationType>
 800f28a:	4603      	mov	r3, r0
 800f28c:	81fb      	strh	r3, [r7, #14]
            break;
 800f28e:	e003      	b.n	800f298 <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800f290:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800f294:	81fb      	strh	r3, [r7, #14]
            break;
 800f296:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800f298:	89fb      	ldrh	r3, [r7, #14]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b084      	sub	sp, #16
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	2108      	movs	r1, #8
 800f2be:	f00c ff51 	bl	801c164 <phOsal_EventPost>
}
 800f2c2:	bf00      	nop
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800f2d0:	4807      	ldr	r0, [pc, #28]	@ (800f2f0 <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800f2d2:	f012 ff03 	bl	80220dc <puts>
    if(xEventHandle != NULL)
 800f2d6:	4b07      	ldr	r3, [pc, #28]	@ (800f2f4 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d005      	beq.n	800f2ea <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800f2de:	2300      	movs	r3, #0
 800f2e0:	2202      	movs	r2, #2
 800f2e2:	2108      	movs	r1, #8
 800f2e4:	4803      	ldr	r0, [pc, #12]	@ (800f2f4 <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800f2e6:	f00c ff3d 	bl	801c164 <phOsal_EventPost>
    }
}
 800f2ea:	bf00      	nop
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	08026344 	.word	0x08026344
 800f2f4:	20001be0 	.word	0x20001be0

0800f2f8 <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b088      	sub	sp, #32
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	607a      	str	r2, [r7, #4]
 800f302:	603b      	str	r3, [r7, #0]
 800f304:	460b      	mov	r3, r1
 800f306:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bFirmwareVer[2];
//    uint8_t    PH_MEMLOC_REM bPowerStatus[16];
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
    uint8_t    InitGearSize = 0x01;  // 1
 800f308:	2301      	movs	r3, #1
 800f30a:	76bb      	strb	r3, [r7, #26]
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800f30c:	897b      	ldrh	r3, [r7, #10]
 800f30e:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800f312:	d002      	beq.n	800f31a <phhalHw_Pn5180_Init+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800f314:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800f318:	e1a2      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800f31a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <phhalHw_Pn5180_Init+0x2e>
 800f320:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <phhalHw_Pn5180_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f326:	f240 2321 	movw	r3, #545	@ 0x221
 800f32a:	e199      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d101      	bne.n	800f336 <phhalHw_Pn5180_Init+0x3e>
 800f332:	2321      	movs	r3, #33	@ 0x21
 800f334:	e194      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pBalDataParams);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d101      	bne.n	800f340 <phhalHw_Pn5180_Init+0x48>
 800f33c:	2321      	movs	r3, #33	@ 0x21
 800f33e:	e18f      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pTxBuffer);
 800f340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f342:	2b00      	cmp	r3, #0
 800f344:	d101      	bne.n	800f34a <phhalHw_Pn5180_Init+0x52>
 800f346:	2321      	movs	r3, #33	@ 0x21
 800f348:	e18a      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    PH_ASSERT_NULL(pRxBuffer);
 800f34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d101      	bne.n	800f354 <phhalHw_Pn5180_Init+0x5c>
 800f350:	2321      	movs	r3, #33	@ 0x21
 800f352:	e185      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800f354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f356:	1c5a      	adds	r2, r3, #1
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800f35c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f35e:	3b01      	subs	r3, #1
 800f360:	b29a      	uxth	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800f366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f368:	1c9a      	adds	r2, r3, #2
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800f36e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f370:	3b02      	subs	r3, #2
 800f372:	b29a      	uxth	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f240 220e 	movw	r2, #526	@ 0x20e
 800f37e:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	683a      	ldr	r2, [r7, #0]
 800f38a:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2200      	movs	r2, #0
 800f396:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2200      	movs	r2, #0
 800f39c:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2205      	movs	r2, #5
 800f3cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2205      	movs	r2, #5
 800f3d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2202      	movs	r2, #2
 800f3f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2200      	movs	r2, #0
 800f414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2203      	movs	r2, #3
 800f424:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2201      	movs	r2, #1
 800f42a:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2200      	movs	r2, #0
 800f430:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2200      	movs	r2, #0
 800f436:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2200      	movs	r2, #0
 800f454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2201      	movs	r2, #1
 800f45c:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	4a81      	ldr	r2, [pc, #516]	@ (800f668 <phhalHw_Pn5180_Init+0x370>)
 800f462:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	4a81      	ldr	r2, [pc, #516]	@ (800f66c <phhalHw_Pn5180_Init+0x374>)
 800f468:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
    }
#endif
    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800f47a:	f003 fc9b 	bl	8012db4 <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	789b      	ldrb	r3, [r3, #2]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d11a      	bne.n	800f4bc <phhalHw_Pn5180_Init+0x1c4>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800f486:	2100      	movs	r1, #0
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f003 fcbb 	bl	8012e04 <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800f48e:	2200      	movs	r2, #0
 800f490:	2102      	movs	r1, #2
 800f492:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f496:	f00c fc77 	bl	801bd88 <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800f49a:	2201      	movs	r2, #1
 800f49c:	2102      	movs	r1, #2
 800f49e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f4a2:	f00c fc4d 	bl	801bd40 <phDriver_PinRead>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d103      	bne.n	800f4b4 <phhalHw_Pn5180_Init+0x1bc>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f003 fca4 	bl	8012e04 <phhalHw_Pn5180_WriteSSEL>
    }

#endif
    HAL_Delay(1000);
 800f4bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f4c0:	f00c ff70 	bl	801c3a4 <HAL_Delay>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800f4c4:	f107 021c 	add.w	r2, r7, #28
 800f4c8:	2302      	movs	r3, #2
 800f4ca:	2112      	movs	r1, #18
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f004 f879 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	83fb      	strh	r3, [r7, #30]
 800f4d6:	8bfb      	ldrh	r3, [r7, #30]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <phhalHw_Pn5180_Init+0x1e8>
 800f4dc:	8bfb      	ldrh	r3, [r7, #30]
 800f4de:	e0bf      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    printf("PN-Firmware = %02X %02X\n", bFirmwareVer[1], bFirmwareVer[0]);	// PN-Firmware = 04 00
 800f4e0:	7f7b      	ldrb	r3, [r7, #29]
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	7f3b      	ldrb	r3, [r7, #28]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	4861      	ldr	r0, [pc, #388]	@ (800f670 <phhalHw_Pn5180_Init+0x378>)
 800f4ea:	f012 fd87 	bl	8021ffc <iprintf>
    HAL_Delay(1000);
 800f4ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f4f2:	f00c ff57 	bl	801c3a4 <HAL_Delay>
    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800f4f6:	7f3b      	ldrb	r3, [r7, #28]
 800f4f8:	2bff      	cmp	r3, #255	@ 0xff
 800f4fa:	d105      	bne.n	800f508 <phhalHw_Pn5180_Init+0x210>
 800f4fc:	7f7b      	ldrb	r3, [r7, #29]
 800f4fe:	2bff      	cmp	r3, #255	@ 0xff
 800f500:	d102      	bne.n	800f508 <phhalHw_Pn5180_Init+0x210>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800f502:	f240 1301 	movw	r3, #257	@ 0x101
 800f506:	e0ab      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800f50e:	2301      	movs	r3, #1
 800f510:	2117      	movs	r1, #23
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f004 f856 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f518:	4603      	mov	r3, r0
 800f51a:	83fb      	strh	r3, [r7, #30]
 800f51c:	8bfb      	ldrh	r3, [r7, #30]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <phhalHw_Pn5180_Init+0x22e>
 800f522:	8bfb      	ldrh	r3, [r7, #30]
 800f524:	e09c      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f52c:	b25b      	sxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	da04      	bge.n	800f53c <phhalHw_Pn5180_Init+0x244>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2201      	movs	r2, #1
 800f536:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800f53a:	e003      	b.n	800f544 <phhalHw_Pn5180_Init+0x24c>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* add func ：Set Power Gear Size*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, 0x81, &InitGearSize, 1U));
 800f544:	f107 021a 	add.w	r2, r7, #26
 800f548:	2301      	movs	r3, #1
 800f54a:	2181      	movs	r1, #129	@ 0x81
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f003 ffc1 	bl	80134d4 <phhalHw_Pn5180_Instr_WriteE2Prom>
 800f552:	4603      	mov	r3, r0
 800f554:	83fb      	strh	r3, [r7, #30]
 800f556:	8bfb      	ldrh	r3, [r7, #30]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d001      	beq.n	800f560 <phhalHw_Pn5180_Init+0x268>
 800f55c:	8bfb      	ldrh	r3, [r7, #30]
 800f55e:	e07f      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800f560:	f06f 0204 	mvn.w	r2, #4
 800f564:	2101      	movs	r1, #1
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f003 fd84 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f56c:	4603      	mov	r3, r0
 800f56e:	83fb      	strh	r3, [r7, #30]
 800f570:	8bfb      	ldrh	r3, [r7, #30]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <phhalHw_Pn5180_Init+0x282>
 800f576:	8bfb      	ldrh	r3, [r7, #30]
 800f578:	e072      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800f57a:	4a3e      	ldr	r2, [pc, #248]	@ (800f674 <phhalHw_Pn5180_Init+0x37c>)
 800f57c:	2103      	movs	r1, #3
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	f003 fc8c 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 800f584:	4603      	mov	r3, r0
 800f586:	83fb      	strh	r3, [r7, #30]
 800f588:	8bfb      	ldrh	r3, [r7, #30]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <phhalHw_Pn5180_Init+0x29a>
 800f58e:	8bfb      	ldrh	r3, [r7, #30]
 800f590:	e066      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>

    /* Create the event. */
//    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;  // 1
    pDataParams->HwEventObj.intialValue = 0U;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f00c fd45 	bl	801c038 <phOsal_EventCreate>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	83fb      	strh	r3, [r7, #30]
 800f5b2:	8bfb      	ldrh	r3, [r7, #30]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d001      	beq.n	800f5bc <phhalHw_Pn5180_Init+0x2c4>
 800f5b8:	8bfb      	ldrh	r3, [r7, #30]
 800f5ba:	e051      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	f00c fe04 	bl	801c1d4 <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800f5d2:	4a29      	ldr	r2, [pc, #164]	@ (800f678 <phhalHw_Pn5180_Init+0x380>)
 800f5d4:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800f5d6:	7f7b      	ldrb	r3, [r7, #29]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800f5e6:	b21b      	sxth	r3, r3
 800f5e8:	021b      	lsls	r3, r3, #8
 800f5ea:	b21a      	sxth	r2, r3
 800f5ec:	7f3b      	ldrb	r3, [r7, #28]
 800f5ee:	b21b      	sxth	r3, r3
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	b21b      	sxth	r3, r3
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800f602:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800f606:	d202      	bcs.n	800f60e <phhalHw_Pn5180_Init+0x316>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800f608:	f240 230b 	movw	r3, #523	@ 0x20b
 800f60c:	e028      	b.n	800f660 <phhalHw_Pn5180_Init+0x368>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800f614:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800f618:	d321      	bcc.n	800f65e <phhalHw_Pn5180_Init+0x366>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800f61a:	f107 021b 	add.w	r2, r7, #27
 800f61e:	2301      	movs	r3, #1
 800f620:	21e8      	movs	r1, #232	@ 0xe8
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f003 ffce 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800f628:	7efb      	ldrb	r3, [r7, #27]
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d004      	beq.n	800f63c <phhalHw_Pn5180_Init+0x344>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800f632:	7efb      	ldrb	r3, [r7, #27]
 800f634:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800f638:	2b02      	cmp	r3, #2
 800f63a:	d010      	beq.n	800f65e <phhalHw_Pn5180_Init+0x366>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800f63c:	7efb      	ldrb	r3, [r7, #27]
 800f63e:	f023 0306 	bic.w	r3, r3, #6
 800f642:	b2db      	uxtb	r3, r3
 800f644:	76fb      	strb	r3, [r7, #27]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800f646:	7efb      	ldrb	r3, [r7, #27]
 800f648:	f043 0303 	orr.w	r3, r3, #3
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	76fb      	strb	r3, [r7, #27]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800f650:	f107 021b 	add.w	r2, r7, #27
 800f654:	2301      	movs	r3, #1
 800f656:	21e8      	movs	r1, #232	@ 0xe8
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f003 ff3b 	bl	80134d4 <phhalHw_Pn5180_Instr_WriteE2Prom>
                    &bDigitalDelayCfg,
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }
    return PH_ERR_SUCCESS;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3720      	adds	r7, #32
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	0800f2a3 	.word	0x0800f2a3
 800f66c:	0800f2cd 	.word	0x0800f2cd
 800f670:	08026354 	.word	0x08026354
 800f674:	000fffff 	.word	0x000fffff
 800f678:	20001be0 	.word	0x20001be0

0800f67c <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	460b      	mov	r3, r1
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800f68a:	7afb      	ldrb	r3, [r7, #11]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	4619      	mov	r1, r3
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f003 fc03 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 800f696:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	607a      	str	r2, [r7, #4]
 800f6ac:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800f6ae:	7afb      	ldrb	r3, [r7, #11]
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f003 fe05 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 800f6ba:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3710      	adds	r7, #16
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b088      	sub	sp, #32
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	215e      	movs	r1, #94	@ 0x5e
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 fd73 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	823b      	strh	r3, [r7, #16]
 800f6de:	8a3b      	ldrh	r3, [r7, #16]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d001      	beq.n	800f6e8 <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800f6e4:	8a3b      	ldrh	r3, [r7, #16]
 800f6e6:	e1af      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800f6e8:	78fb      	ldrb	r3, [r7, #3]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00a      	beq.n	800f704 <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	78fa      	ldrb	r2, [r7, #3]
 800f6f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800f6fe:	2301      	movs	r3, #1
 800f700:	767b      	strb	r3, [r7, #25]
 800f702:	e001      	b.n	800f708 <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800f704:	2300      	movs	r3, #0
 800f706:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2200      	movs	r2, #0
 800f714:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2200      	movs	r2, #0
 800f72a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f734:	3b01      	subs	r3, #1
 800f736:	2b09      	cmp	r3, #9
 800f738:	f200 8104 	bhi.w	800f944 <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800f73c:	a201      	add	r2, pc, #4	@ (adr r2, 800f744 <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800f73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f742:	bf00      	nop
 800f744:	0800f76d 	.word	0x0800f76d
 800f748:	0800f797 	.word	0x0800f797
 800f74c:	0800f7c1 	.word	0x0800f7c1
 800f750:	0800f8db 	.word	0x0800f8db
 800f754:	0800f945 	.word	0x0800f945
 800f758:	0800f905 	.word	0x0800f905
 800f75c:	0800f83d 	.word	0x0800f83d
 800f760:	0800f877 	.word	0x0800f877
 800f764:	0800f8a9 	.word	0x0800f8a9
 800f768:	0800f7ff 	.word	0x0800f7ff
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800f76c:	2280      	movs	r2, #128	@ 0x80
 800f76e:	2100      	movs	r1, #0
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f004 fa8d 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f776:	4603      	mov	r3, r0
 800f778:	823b      	strh	r3, [r7, #16]
 800f77a:	8a3b      	ldrh	r3, [r7, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800f780:	8a3b      	ldrh	r3, [r7, #16]
 800f782:	e161      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800f784:	4b99      	ldr	r3, [pc, #612]	@ (800f9ec <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800f786:	61fb      	str	r3, [r7, #28]
 800f788:	230a      	movs	r3, #10
 800f78a:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800f78c:	2300      	movs	r3, #0
 800f78e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800f790:	2300      	movs	r3, #0
 800f792:	827b      	strh	r3, [r7, #18]
        break;
 800f794:	e0de      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800f796:	2284      	movs	r2, #132	@ 0x84
 800f798:	2104      	movs	r1, #4
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f004 fa78 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	823b      	strh	r3, [r7, #16]
 800f7a4:	8a3b      	ldrh	r3, [r7, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d001      	beq.n	800f7ae <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800f7aa:	8a3b      	ldrh	r3, [r7, #16]
 800f7ac:	e14c      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800f7ae:	4b90      	ldr	r3, [pc, #576]	@ (800f9f0 <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800f7b0:	61fb      	str	r3, [r7, #28]
 800f7b2:	230b      	movs	r3, #11
 800f7b4:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	827b      	strh	r3, [r7, #18]
        break;
 800f7be:	e0c9      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800f7c0:	2288      	movs	r2, #136	@ 0x88
 800f7c2:	2108      	movs	r1, #8
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f004 fa63 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	823b      	strh	r3, [r7, #16]
 800f7ce:	8a3b      	ldrh	r3, [r7, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800f7d4:	8a3b      	ldrh	r3, [r7, #16]
 800f7d6:	e137      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800f7d8:	4b86      	ldr	r3, [pc, #536]	@ (800f9f4 <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800f7da:	61fb      	str	r3, [r7, #28]
 800f7dc:	230b      	movs	r3, #11
 800f7de:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f004 fef3 	bl	80145d4 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	823b      	strh	r3, [r7, #16]
 800f7f2:	8a3b      	ldrh	r3, [r7, #16]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 80a8 	beq.w	800f94a <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800f7fa:	8a3b      	ldrh	r3, [r7, #16]
 800f7fc:	e124      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800f7fe:	2289      	movs	r2, #137	@ 0x89
 800f800:	2109      	movs	r1, #9
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f004 fa44 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f808:	4603      	mov	r3, r0
 800f80a:	823b      	strh	r3, [r7, #16]
 800f80c:	8a3b      	ldrh	r3, [r7, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800f812:	8a3b      	ldrh	r3, [r7, #16]
 800f814:	e118      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800f816:	4b78      	ldr	r3, [pc, #480]	@ (800f9f8 <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800f818:	61fb      	str	r3, [r7, #28]
 800f81a:	230b      	movs	r3, #11
 800f81c:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800f81e:	2302      	movs	r3, #2
 800f820:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800f822:	2302      	movs	r3, #2
 800f824:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f004 fed4 	bl	80145d4 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800f82c:	4603      	mov	r3, r0
 800f82e:	823b      	strh	r3, [r7, #16]
 800f830:	8a3b      	ldrh	r3, [r7, #16]
 800f832:	2b00      	cmp	r3, #0
 800f834:	f000 808b 	beq.w	800f94e <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800f838:	8a3b      	ldrh	r3, [r7, #16]
 800f83a:	e105      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800f83c:	228a      	movs	r2, #138	@ 0x8a
 800f83e:	210a      	movs	r1, #10
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f004 fa25 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f846:	4603      	mov	r3, r0
 800f848:	823b      	strh	r3, [r7, #16]
 800f84a:	8a3b      	ldrh	r3, [r7, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800f850:	8a3b      	ldrh	r3, [r7, #16]
 800f852:	e0f9      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800f854:	4b69      	ldr	r3, [pc, #420]	@ (800f9fc <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800f856:	61fb      	str	r3, [r7, #28]
 800f858:	230b      	movs	r3, #11
 800f85a:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800f85c:	2300      	movs	r3, #0
 800f85e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800f860:	2300      	movs	r3, #0
 800f862:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800f874:	e06e      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800f876:	228b      	movs	r2, #139	@ 0x8b
 800f878:	210b      	movs	r1, #11
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f004 fa08 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f880:	4603      	mov	r3, r0
 800f882:	823b      	strh	r3, [r7, #16]
 800f884:	8a3b      	ldrh	r3, [r7, #16]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800f88a:	8a3b      	ldrh	r3, [r7, #16]
 800f88c:	e0dc      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800f88e:	4b5c      	ldr	r3, [pc, #368]	@ (800fa00 <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800f890:	61fb      	str	r3, [r7, #28]
 800f892:	230b      	movs	r3, #11
 800f894:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800f896:	2301      	movs	r3, #1
 800f898:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800f89a:	2301      	movs	r3, #1
 800f89c:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800f8a6:	e055      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800f8a8:	228c      	movs	r2, #140	@ 0x8c
 800f8aa:	210c      	movs	r1, #12
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f004 f9ef 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	823b      	strh	r3, [r7, #16]
 800f8b6:	8a3b      	ldrh	r3, [r7, #16]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d001      	beq.n	800f8c0 <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800f8bc:	8a3b      	ldrh	r3, [r7, #16]
 800f8be:	e0c3      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800f8c0:	4b50      	ldr	r3, [pc, #320]	@ (800fa04 <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800f8c2:	61fb      	str	r3, [r7, #28]
 800f8c4:	230b      	movs	r3, #11
 800f8c6:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800f8cc:	2302      	movs	r3, #2
 800f8ce:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800f8d8:	e03c      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800f8da:	228d      	movs	r2, #141	@ 0x8d
 800f8dc:	210d      	movs	r1, #13
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f004 f9d6 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	823b      	strh	r3, [r7, #16]
 800f8e8:	8a3b      	ldrh	r3, [r7, #16]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800f8ee:	8a3b      	ldrh	r3, [r7, #16]
 800f8f0:	e0aa      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800f8f2:	4b45      	ldr	r3, [pc, #276]	@ (800fa08 <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800f8f4:	61fb      	str	r3, [r7, #28]
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800f8fa:	230b      	movs	r3, #11
 800f8fc:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800f8fe:	230d      	movs	r3, #13
 800f900:	827b      	strh	r3, [r7, #18]

        break;
 800f902:	e027      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800f904:	2290      	movs	r2, #144	@ 0x90
 800f906:	2110      	movs	r1, #16
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f004 f9c1 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800f90e:	4603      	mov	r3, r0
 800f910:	823b      	strh	r3, [r7, #16]
 800f912:	8a3b      	ldrh	r3, [r7, #16]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800f918:	8a3b      	ldrh	r3, [r7, #16]
 800f91a:	e095      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800f91c:	4b3b      	ldr	r3, [pc, #236]	@ (800fa0c <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800f91e:	61fb      	str	r3, [r7, #28]
 800f920:	230c      	movs	r3, #12
 800f922:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800f924:	2311      	movs	r3, #17
 800f926:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800f928:	2313      	movs	r3, #19
 800f92a:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800f92c:	2205      	movs	r2, #5
 800f92e:	210e      	movs	r1, #14
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 fc45 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800f936:	4603      	mov	r3, r0
 800f938:	823b      	strh	r3, [r7, #16]
 800f93a:	8a3b      	ldrh	r3, [r7, #16]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d008      	beq.n	800f952 <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800f940:	8a3b      	ldrh	r3, [r7, #16]
 800f942:	e081      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f944:	f240 2321 	movw	r3, #545	@ 0x221
 800f948:	e07e      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800f94a:	bf00      	nop
 800f94c:	e002      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800f94e:	bf00      	nop
 800f950:	e000      	b.n	800f954 <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800f952:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800f954:	7e7b      	ldrb	r3, [r7, #25]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d069      	beq.n	800fa2e <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d102      	bne.n	800f966 <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800f960:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800f964:	e070      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3358      	adds	r3, #88	@ 0x58
 800f96a:	2220      	movs	r2, #32
 800f96c:	2100      	movs	r1, #0
 800f96e:	4618      	mov	r0, r3
 800f970:	f012 fca4 	bl	80222bc <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800f974:	2300      	movs	r3, #0
 800f976:	82fb      	strh	r3, [r7, #22]
 800f978:	e04d      	b.n	800fa16 <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800f97a:	8afb      	ldrh	r3, [r7, #22]
 800f97c:	009b      	lsls	r3, r3, #2
 800f97e:	69fa      	ldr	r2, [r7, #28]
 800f980:	4413      	add	r3, r2
 800f982:	881b      	ldrh	r3, [r3, #0]
 800f984:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800f986:	8afb      	ldrh	r3, [r7, #22]
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	3302      	adds	r3, #2
 800f98c:	69fa      	ldr	r2, [r7, #28]
 800f98e:	4413      	add	r3, r2
 800f990:	89fa      	ldrh	r2, [r7, #14]
 800f992:	8819      	ldrh	r1, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	322c      	adds	r2, #44	@ 0x2c
 800f998:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800f99c:	89fb      	ldrh	r3, [r7, #14]
 800f99e:	2b07      	cmp	r3, #7
 800f9a0:	d136      	bne.n	800fa10 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d109      	bne.n	800f9c0 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d004      	beq.n	800f9c0 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9bc:	2b0a      	cmp	r3, #10
 800f9be:	d127      	bne.n	800fa10 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d123      	bne.n	800fa10 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800f9c8:	89fa      	ldrh	r2, [r7, #14]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	322c      	adds	r2, #44	@ 0x2c
 800f9ce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f9d2:	89fb      	ldrh	r3, [r7, #14]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fbf2 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	823b      	strh	r3, [r7, #16]
 800f9e0:	8a3b      	ldrh	r3, [r7, #16]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d014      	beq.n	800fa10 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800f9e6:	8a3b      	ldrh	r3, [r7, #16]
 800f9e8:	e02e      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800f9ea:	bf00      	nop
 800f9ec:	08026c00 	.word	0x08026c00
 800f9f0:	08026c28 	.word	0x08026c28
 800f9f4:	08026c54 	.word	0x08026c54
 800f9f8:	08026c80 	.word	0x08026c80
 800f9fc:	08026d0c 	.word	0x08026d0c
 800fa00:	08026d38 	.word	0x08026d38
 800fa04:	08026d64 	.word	0x08026d64
 800fa08:	08026cac 	.word	0x08026cac
 800fa0c:	08026cdc 	.word	0x08026cdc
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800fa10:	8afb      	ldrh	r3, [r7, #22]
 800fa12:	3301      	adds	r3, #1
 800fa14:	82fb      	strh	r3, [r7, #22]
 800fa16:	8afa      	ldrh	r2, [r7, #22]
 800fa18:	8b7b      	ldrh	r3, [r7, #26]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d3ad      	bcc.n	800f97a <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	8aba      	ldrh	r2, [r7, #20]
 800fa22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	8a7a      	ldrh	r2, [r7, #18]
 800fa2a:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800fa2e:	2201      	movs	r2, #1
 800fa30:	212e      	movs	r1, #46	@ 0x2e
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 fbc4 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	823b      	strh	r3, [r7, #16]
 800fa3c:	8a3b      	ldrh	r3, [r7, #16]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800fa42:	8a3b      	ldrh	r3, [r7, #16]
 800fa44:	e000      	b.n	800fa48 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3720      	adds	r7, #32
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b090      	sub	sp, #64	@ 0x40
 800fa54:	af02      	add	r7, sp, #8
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	607a      	str	r2, [r7, #4]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	817b      	strh	r3, [r7, #10]
 800fa60:	4613      	mov	r3, r2
 800fa62:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800fa64:	2300      	movs	r3, #0
 800fa66:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800fa70:	2300      	movs	r3, #0
 800fa72:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800fa74:	2300      	movs	r3, #0
 800fa76:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800fa78:	2300      	movs	r3, #0
 800fa7a:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800fa80:	893b      	ldrh	r3, [r7, #8]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d005      	beq.n	800fa92 <phhalHw_Pn5180_Exchange+0x42>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d102      	bne.n	800fa92 <phhalHw_Pn5180_Exchange+0x42>
 800fa8c:	f240 2321 	movw	r3, #545	@ 0x221
 800fa90:	e253      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2200      	movs	r2, #0
 800fa96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800faa2:	f240 2325 	movw	r3, #549	@ 0x225
 800faa6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800faa8:	e1cf      	b.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800faaa:	897b      	ldrh	r3, [r7, #10]
 800faac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fab4:	f240 2321 	movw	r3, #545	@ 0x221
 800fab8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800faba:	e1c6      	b.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800fabc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d002      	beq.n	800fac8 <phhalHw_Pn5180_Exchange+0x78>
 800fac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d107      	bne.n	800fad8 <phhalHw_Pn5180_Exchange+0x88>
 800fac8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800facc:	2b00      	cmp	r3, #0
 800face:	db03      	blt.n	800fad8 <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fad0:	f240 2321 	movw	r3, #545	@ 0x221
 800fad4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800fad6:	e1b8      	b.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d115      	bne.n	800fb0e <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800fae2:	f107 0310 	add.w	r3, r7, #16
 800fae6:	461a      	mov	r2, r3
 800fae8:	211d      	movs	r1, #29
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f003 fbea 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 800faf0:	4603      	mov	r3, r0
 800faf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800faf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d001      	beq.n	800fafe <phhalHw_Pn5180_Exchange+0xae>
 800fafa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fafc:	e21d      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d102      	bne.n	800fb0e <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800fb08:	f240 230a 	movw	r3, #522	@ 0x20a
 800fb0c:	e215      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800fb0e:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800fb12:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800fb16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	2101      	movs	r1, #1
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f004 f98c 	bl	8013e3e <phhalHw_Pn5180_GetTxBuffer>
 800fb26:	4603      	mov	r3, r0
 800fb28:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fb2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f040 818c 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800fb32:	897b      	ldrh	r3, [r7, #10]
 800fb34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d105      	bne.n	800fb48 <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2200      	movs	r2, #0
 800fb46:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800fb48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d002      	beq.n	800fb54 <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800fb4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb50:	2200      	movs	r2, #0
 800fb52:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d150      	bne.n	800fc00 <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800fb62:	893b      	ldrh	r3, [r7, #8]
 800fb64:	f107 0218 	add.w	r2, r7, #24
 800fb68:	4619      	mov	r1, r3
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7f9 fda3 	bl	80096b6 <phTools_ComputeCrc_B>
 800fb70:	4603      	mov	r3, r0
 800fb72:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fb74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f040 8167 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	2100      	movs	r1, #0
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f000 fb1d 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800fb86:	4603      	mov	r3, r0
 800fb88:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fb8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f040 815c 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800fb92:	2200      	movs	r2, #0
 800fb94:	2101      	movs	r1, #1
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f000 fb12 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fba0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f040 8151 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2102      	movs	r1, #2
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f000 fb07 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fbb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f040 8146 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800fbbe:	2207      	movs	r2, #7
 800fbc0:	2103      	movs	r1, #3
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f000 fafc 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fbcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f040 813b 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800fbd4:	2204      	movs	r2, #4
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f003 f9d5 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fbe2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f040 8130 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800fbea:	221d      	movs	r2, #29
 800fbec:	2107      	movs	r1, #7
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f000 fae6 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fbf8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f040 8125 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	8b9b      	ldrh	r3, [r3, #28]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d122      	bne.n	800fc4e <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800fc08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	8b9b      	ldrh	r3, [r3, #28]
 800fc0e:	1c59      	adds	r1, r3, #1
 800fc10:	b288      	uxth	r0, r1
 800fc12:	68f9      	ldr	r1, [r7, #12]
 800fc14:	8388      	strh	r0, [r1, #28]
 800fc16:	4413      	add	r3, r2
 800fc18:	2209      	movs	r2, #9
 800fc1a:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800fc1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	8b9b      	ldrh	r3, [r3, #28]
 800fc22:	1c59      	adds	r1, r3, #1
 800fc24:	b288      	uxth	r0, r1
 800fc26:	68f9      	ldr	r1, [r7, #12]
 800fc28:	8388      	strh	r0, [r1, #28]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d109      	bne.n	800fc4e <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800fc3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	8b9b      	ldrh	r3, [r3, #28]
 800fc40:	1c59      	adds	r1, r3, #1
 800fc42:	b288      	uxth	r0, r1
 800fc44:	68f9      	ldr	r1, [r7, #12]
 800fc46:	8388      	strh	r0, [r1, #28]
 800fc48:	4413      	add	r3, r2
 800fc4a:	22f0      	movs	r2, #240	@ 0xf0
 800fc4c:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800fc4e:	893b      	ldrh	r3, [r7, #8]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d03d      	beq.n	800fcd0 <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800fc54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc56:	4619      	mov	r1, r3
 800fc58:	893b      	ldrh	r3, [r7, #8]
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	8a52      	ldrh	r2, [r2, #18]
 800fc5e:	4413      	add	r3, r2
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	8b92      	ldrh	r2, [r2, #28]
 800fc64:	4413      	add	r3, r2
 800fc66:	4299      	cmp	r1, r3
 800fc68:	da09      	bge.n	800fc7e <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800fc76:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800fc7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800fc7c:	e0e5      	b.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800fc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	8b92      	ldrh	r2, [r2, #28]
 800fc84:	4611      	mov	r1, r2
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	8a52      	ldrh	r2, [r2, #18]
 800fc8a:	440a      	add	r2, r1
 800fc8c:	4413      	add	r3, r2
 800fc8e:	893a      	ldrh	r2, [r7, #8]
 800fc90:	6879      	ldr	r1, [r7, #4]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f012 fb91 	bl	80223ba <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	8a5a      	ldrh	r2, [r3, #18]
 800fc9c:	893b      	ldrh	r3, [r7, #8]
 800fc9e:	4413      	add	r3, r2
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d10f      	bne.n	800fcd0 <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800fcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	8b92      	ldrh	r2, [r2, #28]
 800fcb6:	4611      	mov	r1, r2
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	8a52      	ldrh	r2, [r2, #18]
 800fcbc:	440a      	add	r2, r1
 800fcbe:	4413      	add	r3, r2
 800fcc0:	8b3a      	ldrh	r2, [r7, #24]
 800fcc2:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	8a5b      	ldrh	r3, [r3, #18]
 800fcc8:	3302      	adds	r3, #2
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800fcd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	da01      	bge.n	800fce0 <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	e12c      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	8a5a      	ldrh	r2, [r3, #18]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	8b9b      	ldrh	r3, [r3, #28]
 800fce8:	4413      	add	r3, r2
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8a5b      	ldrh	r3, [r3, #18]
 800fcf4:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800fcf8:	d903      	bls.n	800fd02 <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800fcfa:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800fcfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800fd00:	e0a3      	b.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800fd02:	2103      	movs	r1, #3
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f005 fccf 	bl	80156a8 <phhalHw_Pn5180_Int_LoadCommand>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fd0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f040 809a 	bne.w	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d103      	bne.n	800fd28 <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800fd20:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800fd24:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd26:	e001      	b.n	800fd2c <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800fd28:	4b86      	ldr	r3, [pc, #536]	@ (800ff44 <phhalHw_Pn5180_Exchange+0x4f4>)
 800fd2a:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d103      	bne.n	800fd3e <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800fd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd38:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800fd3c:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800fd3e:	4a82      	ldr	r2, [pc, #520]	@ (800ff48 <phhalHw_Pn5180_Exchange+0x4f8>)
 800fd40:	2103      	movs	r1, #3
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f003 f8aa 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fd4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d17b      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fd58:	2300      	movs	r3, #0
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	f00c fa39 	bl	801c1d4 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fd62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd64:	2101      	movs	r1, #1
 800fd66:	68f8      	ldr	r0, [r7, #12]
 800fd68:	f003 f898 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fd70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d169      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d116      	bne.n	800fdae <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800fd80:	f640 0301 	movw	r3, #2049	@ 0x801
 800fd84:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d103      	bne.n	800fd98 <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800fd90:	6a3b      	ldr	r3, [r7, #32]
 800fd92:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800fd96:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	210f      	movs	r1, #15
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f003 f87c 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 800fda4:	4603      	mov	r3, r0
 800fda6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fda8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d14d      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d01a      	beq.n	800fdee <phhalHw_Pn5180_Exchange+0x39e>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d115      	bne.n	800fdee <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800fdc2:	4b62      	ldr	r3, [pc, #392]	@ (800ff4c <phhalHw_Pn5180_Exchange+0x4fc>)
 800fdc4:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d103      	bne.n	800fdd8 <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800fdd0:	6a3b      	ldr	r3, [r7, #32]
 800fdd2:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800fdd6:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800fdd8:	6a3b      	ldr	r3, [r7, #32]
 800fdda:	461a      	mov	r2, r3
 800fddc:	210f      	movs	r1, #15
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f003 f85c 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 800fde4:	4603      	mov	r3, r0
 800fde6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fde8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d12d      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800fdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	b2d2      	uxtb	r2, r2
 800fdfa:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d01f      	beq.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800fe0a:	f107 0320 	add.w	r3, r7, #32
 800fe0e:	461a      	mov	r2, r3
 800fe10:	211d      	movs	r1, #29
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f003 fa56 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fe1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d113      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800fe22:	6a3b      	ldr	r3, [r7, #32]
 800fe24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10e      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f000 f8e7 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 800fe32:	4603      	mov	r3, r0
 800fe34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fe36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d106      	bne.n	800fe4a <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f000 f889 	bl	800ff54 <phhalHw_Pn5180_FieldOn>
 800fe42:	4603      	mov	r3, r0
 800fe44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fe46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe48:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d120      	bne.n	800fe96 <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800fe5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d110      	bne.n	800fe84 <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800fe62:	f107 0314 	add.w	r3, r7, #20
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	2322      	movs	r3, #34	@ 0x22
 800fe6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe6e:	2105      	movs	r1, #5
 800fe70:	4837      	ldr	r0, [pc, #220]	@ (800ff50 <phhalHw_Pn5180_Exchange+0x500>)
 800fe72:	f00c f92d 	bl	801c0d0 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	f003 0320 	and.w	r3, r3, #32
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800fe80:	2312      	movs	r3, #18
 800fe82:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800fe84:	f00b ffca 	bl	801be1c <phDriver_TimerStop>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fe8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <phhalHw_Pn5180_Exchange+0x446>
 800fe92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fe94:	e051      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800fe96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d001      	beq.n	800fea0 <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800fe9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe9e:	e04c      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800fea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8a5a      	ldrh	r2, [r3, #18]
 800fea6:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800fea8:	f107 031a 	add.w	r3, r7, #26
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	f107 031c 	add.w	r3, r7, #28
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	4603      	mov	r3, r0
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f002 f8d2 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 800febc:	4603      	mov	r3, r0
 800febe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fec0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d001      	beq.n	800feca <phhalHw_Pn5180_Exchange+0x47a>
 800fec6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fec8:	e037      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2200      	movs	r2, #0
 800fece:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2200      	movs	r2, #0
 800fed4:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00b      	beq.n	800fef8 <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800fee0:	2200      	movs	r2, #0
 800fee2:	2103      	movs	r1, #3
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f96b 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 800feea:	4603      	mov	r3, r0
 800feec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800feee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <phhalHw_Pn5180_Exchange+0x4a8>
 800fef4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fef6:	e020      	b.n	800ff3a <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800fef8:	2301      	movs	r3, #1
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fefe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f005 f94e 	bl	80151a4 <phhalHw_Pn5180_Receive_Int>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800ff0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d004      	beq.n	800ff1e <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f005 fba5 	bl	8015664 <phhalHw_Pn5180_Int_IdleCommand>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d007      	beq.n	800ff38 <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800ff28:	f06f 0201 	mvn.w	r2, #1
 800ff2c:	210f      	movs	r1, #15
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	f003 f8a0 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800ff34:	4603      	mov	r3, r0
 800ff36:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800ff38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3738      	adds	r7, #56	@ 0x38
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	00021001 	.word	0x00021001
 800ff48:	000fffff 	.word	0x000fffff
 800ff4c:	00100801 	.word	0x00100801
 800ff50:	20001be0 	.word	0x20001be0

0800ff54 <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	78db      	ldrb	r3, [r3, #3]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d103      	bne.n	800ff70 <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	f043 0301 	orr.w	r3, r3, #1
 800ff6e:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d103      	bne.n	800ff82 <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800ff7a:	7bfb      	ldrb	r3, [r7, #15]
 800ff7c:	f043 0302 	orr.w	r3, r3, #2
 800ff80:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800ff82:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800ff86:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	2103      	movs	r1, #3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f002 fffa 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800ff94:	4603      	mov	r3, r0
 800ff96:	81bb      	strh	r3, [r7, #12]
 800ff98:	89bb      	ldrh	r3, [r7, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d001      	beq.n	800ffa2 <phhalHw_Pn5180_FieldOn+0x4e>
 800ff9e:	89bb      	ldrh	r3, [r7, #12]
 800ffa0:	e02a      	b.n	800fff8 <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800ffa2:	7bfb      	ldrb	r3, [r7, #15]
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f003 fed0 	bl	8013d4c <phhalHw_Pn5180_Instr_RfOn>
 800ffac:	4603      	mov	r3, r0
 800ffae:	81bb      	strh	r3, [r7, #12]
 800ffb0:	89bb      	ldrh	r3, [r7, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d001      	beq.n	800ffba <phhalHw_Pn5180_FieldOn+0x66>
 800ffb6:	89bb      	ldrh	r3, [r7, #12]
 800ffb8:	e01e      	b.n	800fff8 <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800ffba:	f107 0308 	add.w	r3, r7, #8
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	211d      	movs	r1, #29
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f003 f97e 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	81bb      	strh	r3, [r7, #12]
 800ffcc:	89bb      	ldrh	r3, [r7, #12]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <phhalHw_Pn5180_FieldOn+0x82>
 800ffd2:	89bb      	ldrh	r3, [r7, #12]
 800ffd4:	e010      	b.n	800fff8 <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10a      	bne.n	800fff6 <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d002      	beq.n	800fff0 <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800ffea:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800ffee:	e003      	b.n	800fff8 <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800fff0:	f240 230a 	movw	r3, #522	@ 0x20a
 800fff4:	e000      	b.n	800fff8 <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8010010:	2200      	movs	r2, #0
 8010012:	215e      	movs	r1, #94	@ 0x5e
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 f8d3 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801001a:	4603      	mov	r3, r0
 801001c:	81fb      	strh	r3, [r7, #14]
 801001e:	89fb      	ldrh	r3, [r7, #14]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <phhalHw_Pn5180_FieldOff+0x28>
 8010024:	89fb      	ldrh	r3, [r7, #14]
 8010026:	e00a      	b.n	801003e <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f003 fece 	bl	8013dca <phhalHw_Pn5180_Instr_RfOff>
 801002e:	4603      	mov	r3, r0
 8010030:	81fb      	strh	r3, [r7, #14]
 8010032:	89fb      	ldrh	r3, [r7, #14]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <phhalHw_Pn5180_FieldOff+0x3c>
 8010038:	89fb      	ldrh	r3, [r7, #14]
 801003a:	e000      	b.n	801003e <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
	...

08010048 <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	460b      	mov	r3, r1
 8010052:	70fb      	strb	r3, [r7, #3]
 8010054:	4613      	mov	r3, r2
 8010056:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwLoadValue;	// 定时器加载值
    uint32_t    PH_MEMLOC_REM wPrescaler;	// 预分频值
    uint32_t    PH_MEMLOC_REM wFreq;		// 频率值

    /* Parameter check: only ms or us is accepted */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8010058:	78fb      	ldrb	r3, [r7, #3]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d005      	beq.n	801006a <phhalHw_Pn5180_Wait+0x22>
 801005e:	78fb      	ldrb	r3, [r7, #3]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d002      	beq.n	801006a <phhalHw_Pn5180_Wait+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010064:	f240 2321 	movw	r3, #545	@ 0x221
 8010068:	e062      	b.n	8010130 <phhalHw_Pn5180_Wait+0xe8>
    }

    /* When time-out value is zero, there is no wait needed */
    if (wTimeout == 0U)
 801006a:	883b      	ldrh	r3, [r7, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d101      	bne.n	8010074 <phhalHw_Pn5180_Wait+0x2c>
    {
        return PH_ERR_SUCCESS;
 8010070:	2300      	movs	r3, #0
 8010072:	e05d      	b.n	8010130 <phhalHw_Pn5180_Wait+0xe8>
    }

    /* Setting the Prescaler frequency according to wTimeout */
    if (bUnit == PHHAL_HW_TIME_MILLISECONDS)
 8010074:	78fb      	ldrb	r3, [r7, #3]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d13a      	bne.n	80100f0 <phhalHw_Pn5180_Wait+0xa8>
    {
        wFreq = PHHAL_HW_PN5180_MIN_FREQ;			// 最小频率：53000U
 801007a:	f64c 7308 	movw	r3, #53000	@ 0xcf08
 801007e:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x3CU;							// 设置预分频器为60
 8010080:	233c      	movs	r3, #60	@ 0x3c
 8010082:	613b      	str	r3, [r7, #16]

        /* 处理长时间等待 - 如果超过最大延时，分段执行 */
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 8010084:	e01a      	b.n	80100bc <phhalHw_Pn5180_Wait+0x74>
        {
            wTimeout -= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS;
 8010086:	883b      	ldrh	r3, [r7, #0]
 8010088:	f5a3 439a 	sub.w	r3, r3, #19712	@ 0x4d00
 801008c:	3b48      	subs	r3, #72	@ 0x48
 801008e:	803b      	strh	r3, [r7, #0]
            /* Calculating the load value */
            dwLoadValue =(uint32_t) (  PHHAL_HW_PN5180_MAX_TIME_DELAY_MS * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	4a29      	ldr	r2, [pc, #164]	@ (8010138 <phhalHw_Pn5180_Wait+0xf0>)
 8010094:	fba2 2303 	umull	r2, r3, r2, r3
 8010098:	099b      	lsrs	r3, r3, #6
 801009a:	f644 5248 	movw	r2, #19784	@ 0x4d48
 801009e:	fb02 f303 	mul.w	r3, r2, r3
 80100a2:	60fb      	str	r3, [r7, #12]
            /* 执行内部等待函数 */
            PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 80100a4:	693a      	ldr	r2, [r7, #16]
 80100a6:	68f9      	ldr	r1, [r7, #12]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f004 feaf 	bl	8014e0c <phhalHw_Pn5180_Int_Wait>
 80100ae:	4603      	mov	r3, r0
 80100b0:	817b      	strh	r3, [r7, #10]
 80100b2:	897b      	ldrh	r3, [r7, #10]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d001      	beq.n	80100bc <phhalHw_Pn5180_Wait+0x74>
 80100b8:	897b      	ldrh	r3, [r7, #10]
 80100ba:	e039      	b.n	8010130 <phhalHw_Pn5180_Wait+0xe8>
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 80100bc:	883b      	ldrh	r3, [r7, #0]
 80100be:	f644 5248 	movw	r2, #19784	@ 0x4d48
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d8df      	bhi.n	8010086 <phhalHw_Pn5180_Wait+0x3e>
        }

        dwLoadValue =(uint32_t) (  wTimeout * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 80100c6:	883b      	ldrh	r3, [r7, #0]
 80100c8:	697a      	ldr	r2, [r7, #20]
 80100ca:	491b      	ldr	r1, [pc, #108]	@ (8010138 <phhalHw_Pn5180_Wait+0xf0>)
 80100cc:	fba1 1202 	umull	r1, r2, r1, r2
 80100d0:	0992      	lsrs	r2, r2, #6
 80100d2:	fb02 f303 	mul.w	r3, r2, r3
 80100d6:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 80100d8:	693a      	ldr	r2, [r7, #16]
 80100da:	68f9      	ldr	r1, [r7, #12]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f004 fe95 	bl	8014e0c <phhalHw_Pn5180_Int_Wait>
 80100e2:	4603      	mov	r3, r0
 80100e4:	817b      	strh	r3, [r7, #10]
 80100e6:	897b      	ldrh	r3, [r7, #10]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d020      	beq.n	801012e <phhalHw_Pn5180_Wait+0xe6>
 80100ec:	897b      	ldrh	r3, [r7, #10]
 80100ee:	e01f      	b.n	8010130 <phhalHw_Pn5180_Wait+0xe8>
    }
    else
    {
        /* here wTimeout will be in uS and not be Zero */
        wFreq = PHHAL_HW_PN5180_MAX_FREQ;
 80100f0:	4b12      	ldr	r3, [pc, #72]	@ (801013c <phhalHw_Pn5180_Wait+0xf4>)
 80100f2:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x00U;
 80100f4:	2300      	movs	r3, #0
 80100f6:	613b      	str	r3, [r7, #16]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( wFreq / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	4a11      	ldr	r2, [pc, #68]	@ (8010140 <phhalHw_Pn5180_Wait+0xf8>)
 80100fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010100:	0b5b      	lsrs	r3, r3, #13
 8010102:	60fb      	str	r3, [r7, #12]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) ((wTimeout * dwLoadValue)/100);
 8010104:	883b      	ldrh	r3, [r7, #0]
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	fb02 f303 	mul.w	r3, r2, r3
 801010c:	4a0d      	ldr	r2, [pc, #52]	@ (8010144 <phhalHw_Pn5180_Wait+0xfc>)
 801010e:	fba2 2303 	umull	r2, r3, r2, r3
 8010112:	095b      	lsrs	r3, r3, #5
 8010114:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	68f9      	ldr	r1, [r7, #12]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f004 fe76 	bl	8014e0c <phhalHw_Pn5180_Int_Wait>
 8010120:	4603      	mov	r3, r0
 8010122:	817b      	strh	r3, [r7, #10]
 8010124:	897b      	ldrh	r3, [r7, #10]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <phhalHw_Pn5180_Wait+0xe6>
 801012a:	897b      	ldrh	r3, [r7, #10]
 801012c:	e000      	b.n	8010130 <phhalHw_Pn5180_Wait+0xe8>
    }

    return PH_ERR_SUCCESS;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3718      	adds	r7, #24
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	10624dd3 	.word	0x10624dd3
 801013c:	00cee8c0 	.word	0x00cee8c0
 8010140:	d1b71759 	.word	0xd1b71759
 8010144:	51eb851f 	.word	0x51eb851f

08010148 <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7ff ff55 	bl	8010000 <phhalHw_Pn5180_FieldOff>
 8010156:	4603      	mov	r3, r0
 8010158:	81fb      	strh	r3, [r7, #14]
 801015a:	89fb      	ldrh	r3, [r7, #14]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d001      	beq.n	8010164 <phhalHw_Pn5180_FieldReset+0x1c>
 8010160:	89fb      	ldrh	r3, [r7, #14]
 8010162:	e026      	b.n	80101b2 <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010168:	461a      	mov	r2, r3
 801016a:	2101      	movs	r1, #1
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ff6b 	bl	8010048 <phhalHw_Pn5180_Wait>
 8010172:	4603      	mov	r3, r0
 8010174:	81fb      	strh	r3, [r7, #14]
 8010176:	89fb      	ldrh	r3, [r7, #14]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d001      	beq.n	8010180 <phhalHw_Pn5180_FieldReset+0x38>
 801017c:	89fb      	ldrh	r3, [r7, #14]
 801017e:	e018      	b.n	80101b2 <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7ff fee7 	bl	800ff54 <phhalHw_Pn5180_FieldOn>
 8010186:	4603      	mov	r3, r0
 8010188:	81fb      	strh	r3, [r7, #14]
 801018a:	89fb      	ldrh	r3, [r7, #14]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <phhalHw_Pn5180_FieldReset+0x4c>
 8010190:	89fb      	ldrh	r3, [r7, #14]
 8010192:	e00e      	b.n	80101b2 <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010198:	461a      	mov	r2, r3
 801019a:	2101      	movs	r1, #1
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff ff53 	bl	8010048 <phhalHw_Pn5180_Wait>
 80101a2:	4603      	mov	r3, r0
 80101a4:	81fb      	strh	r3, [r7, #14]
 80101a6:	89fb      	ldrh	r3, [r7, #14]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d001      	beq.n	80101b0 <phhalHw_Pn5180_FieldReset+0x68>
 80101ac:	89fb      	ldrh	r3, [r7, #14]
 80101ae:	e000      	b.n	80101b2 <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	0000      	movs	r0, r0
 80101bc:	0000      	movs	r0, r0
	...

080101c0 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 80101c0:	b5b0      	push	{r4, r5, r7, lr}
 80101c2:	b090      	sub	sp, #64	@ 0x40
 80101c4:	af02      	add	r7, sp, #8
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	460b      	mov	r3, r1
 80101ca:	807b      	strh	r3, [r7, #2]
 80101cc:	4613      	mov	r3, r2
 80101ce:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 80101d0:	2300      	movs	r3, #0
 80101d2:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 80101d4:	2300      	movs	r3, #0
 80101d6:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 80101d8:	f04f 0300 	mov.w	r3, #0
 80101dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 80101de:	23ff      	movs	r3, #255	@ 0xff
 80101e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 80101e2:	887b      	ldrh	r3, [r7, #2]
 80101e4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80101e8:	3b25      	subs	r3, #37	@ 0x25
 80101ea:	2b07      	cmp	r3, #7
 80101ec:	d809      	bhi.n	8010202 <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80101f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101f8:	d805      	bhi.n	8010206 <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 80101fa:	f240 2325 	movw	r3, #549	@ 0x225
 80101fe:	f001 bc22 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 8010202:	bf00      	nop
 8010204:	e000      	b.n	8010208 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 8010206:	bf00      	nop
    }

    switch(wConfig)
 8010208:	887b      	ldrh	r3, [r7, #2]
 801020a:	2b5e      	cmp	r3, #94	@ 0x5e
 801020c:	f300 8154 	bgt.w	80104b8 <phhalHw_Pn5180_SetConfig+0x2f8>
 8010210:	2b00      	cmp	r3, #0
 8010212:	f280 808d 	bge.w	8010330 <phhalHw_Pn5180_SetConfig+0x170>
 8010216:	f001 bbd3 	b.w	80119c0 <phhalHw_Pn5180_SetConfig+0x1800>
 801021a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801021e:	3b10      	subs	r3, #16
 8010220:	2b40      	cmp	r3, #64	@ 0x40
 8010222:	f201 83cd 	bhi.w	80119c0 <phhalHw_Pn5180_SetConfig+0x1800>
 8010226:	a201      	add	r2, pc, #4	@ (adr r2, 801022c <phhalHw_Pn5180_SetConfig+0x6c>)
 8010228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022c:	080110b1 	.word	0x080110b1
 8010230:	080119c1 	.word	0x080119c1
 8010234:	080119c1 	.word	0x080119c1
 8010238:	080119c1 	.word	0x080119c1
 801023c:	080119c1 	.word	0x080119c1
 8010240:	080119c1 	.word	0x080119c1
 8010244:	080119c1 	.word	0x080119c1
 8010248:	080119c1 	.word	0x080119c1
 801024c:	080119c1 	.word	0x080119c1
 8010250:	080119c1 	.word	0x080119c1
 8010254:	080119c1 	.word	0x080119c1
 8010258:	080119c1 	.word	0x080119c1
 801025c:	080119c1 	.word	0x080119c1
 8010260:	080119c1 	.word	0x080119c1
 8010264:	080119c1 	.word	0x080119c1
 8010268:	080119c1 	.word	0x080119c1
 801026c:	080119c1 	.word	0x080119c1
 8010270:	080119c1 	.word	0x080119c1
 8010274:	080119c1 	.word	0x080119c1
 8010278:	080119c1 	.word	0x080119c1
 801027c:	080119c1 	.word	0x080119c1
 8010280:	080118d1 	.word	0x080118d1
 8010284:	08011903 	.word	0x08011903
 8010288:	0801191f 	.word	0x0801191f
 801028c:	08011939 	.word	0x08011939
 8010290:	08011953 	.word	0x08011953
 8010294:	0801196d 	.word	0x0801196d
 8010298:	08011989 	.word	0x08011989
 801029c:	080119a5 	.word	0x080119a5
 80102a0:	080119c1 	.word	0x080119c1
 80102a4:	080119c1 	.word	0x080119c1
 80102a8:	080119c1 	.word	0x080119c1
 80102ac:	080119c1 	.word	0x080119c1
 80102b0:	080119c1 	.word	0x080119c1
 80102b4:	080119c1 	.word	0x080119c1
 80102b8:	080119c1 	.word	0x080119c1
 80102bc:	080119c1 	.word	0x080119c1
 80102c0:	080119c1 	.word	0x080119c1
 80102c4:	080119c1 	.word	0x080119c1
 80102c8:	080119c1 	.word	0x080119c1
 80102cc:	080119c1 	.word	0x080119c1
 80102d0:	080119c1 	.word	0x080119c1
 80102d4:	080119c1 	.word	0x080119c1
 80102d8:	080119c1 	.word	0x080119c1
 80102dc:	080119c1 	.word	0x080119c1
 80102e0:	080119c1 	.word	0x080119c1
 80102e4:	080119c1 	.word	0x080119c1
 80102e8:	080119c1 	.word	0x080119c1
 80102ec:	080119c1 	.word	0x080119c1
 80102f0:	080119c1 	.word	0x080119c1
 80102f4:	080119c1 	.word	0x080119c1
 80102f8:	080119c1 	.word	0x080119c1
 80102fc:	080119c1 	.word	0x080119c1
 8010300:	080119c1 	.word	0x080119c1
 8010304:	080119c1 	.word	0x080119c1
 8010308:	080119c1 	.word	0x080119c1
 801030c:	080119c1 	.word	0x080119c1
 8010310:	080119c1 	.word	0x080119c1
 8010314:	080119c1 	.word	0x080119c1
 8010318:	080119c1 	.word	0x080119c1
 801031c:	080119c1 	.word	0x080119c1
 8010320:	080119c1 	.word	0x080119c1
 8010324:	080119c1 	.word	0x080119c1
 8010328:	080119c1 	.word	0x080119c1
 801032c:	08011153 	.word	0x08011153
 8010330:	2b5e      	cmp	r3, #94	@ 0x5e
 8010332:	f201 8345 	bhi.w	80119c0 <phhalHw_Pn5180_SetConfig+0x1800>
 8010336:	a201      	add	r2, pc, #4	@ (adr r2, 801033c <phhalHw_Pn5180_SetConfig+0x17c>)
 8010338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033c:	080104d1 	.word	0x080104d1
 8010340:	08010549 	.word	0x08010549
 8010344:	08010549 	.word	0x08010549
 8010348:	0801050f 	.word	0x0801050f
 801034c:	080119c1 	.word	0x080119c1
 8010350:	08010591 	.word	0x08010591
 8010354:	08010811 	.word	0x08010811
 8010358:	080108eb 	.word	0x080108eb
 801035c:	080106d9 	.word	0x080106d9
 8010360:	08010c4b 	.word	0x08010c4b
 8010364:	08010e2b 	.word	0x08010e2b
 8010368:	080109cb 	.word	0x080109cb
 801036c:	080104d1 	.word	0x080104d1
 8010370:	08010f7d 	.word	0x08010f7d
 8010374:	08010fd7 	.word	0x08010fd7
 8010378:	08011031 	.word	0x08011031
 801037c:	080119c1 	.word	0x080119c1
 8010380:	080119c1 	.word	0x080119c1
 8010384:	080119c1 	.word	0x080119c1
 8010388:	08011101 	.word	0x08011101
 801038c:	08011119 	.word	0x08011119
 8010390:	08011343 	.word	0x08011343
 8010394:	08011555 	.word	0x08011555
 8010398:	0801168d 	.word	0x0801168d
 801039c:	08010739 	.word	0x08010739
 80103a0:	080119c1 	.word	0x080119c1
 80103a4:	080119c1 	.word	0x080119c1
 80103a8:	080119c1 	.word	0x080119c1
 80103ac:	080119c1 	.word	0x080119c1
 80103b0:	080119c1 	.word	0x080119c1
 80103b4:	080119c1 	.word	0x080119c1
 80103b8:	080119c1 	.word	0x080119c1
 80103bc:	08011123 	.word	0x08011123
 80103c0:	080119c1 	.word	0x080119c1
 80103c4:	080119c1 	.word	0x080119c1
 80103c8:	080119c1 	.word	0x080119c1
 80103cc:	080119c1 	.word	0x080119c1
 80103d0:	080119c1 	.word	0x080119c1
 80103d4:	080119c1 	.word	0x080119c1
 80103d8:	080119c1 	.word	0x080119c1
 80103dc:	080119c1 	.word	0x080119c1
 80103e0:	080119c1 	.word	0x080119c1
 80103e4:	080119c1 	.word	0x080119c1
 80103e8:	080119c1 	.word	0x080119c1
 80103ec:	080119c1 	.word	0x080119c1
 80103f0:	080119c1 	.word	0x080119c1
 80103f4:	08010b13 	.word	0x08010b13
 80103f8:	08010b4f 	.word	0x08010b4f
 80103fc:	08010b75 	.word	0x08010b75
 8010400:	080119c1 	.word	0x080119c1
 8010404:	080119c1 	.word	0x080119c1
 8010408:	08010bb9 	.word	0x08010bb9
 801040c:	08010bfd 	.word	0x08010bfd
 8010410:	08011897 	.word	0x08011897
 8010414:	080119c1 	.word	0x080119c1
 8010418:	080119c1 	.word	0x080119c1
 801041c:	080119c1 	.word	0x080119c1
 8010420:	080119c1 	.word	0x080119c1
 8010424:	080119c1 	.word	0x080119c1
 8010428:	080119c1 	.word	0x080119c1
 801042c:	080119c1 	.word	0x080119c1
 8010430:	080119c1 	.word	0x080119c1
 8010434:	080119c1 	.word	0x080119c1
 8010438:	080119c1 	.word	0x080119c1
 801043c:	080119c1 	.word	0x080119c1
 8010440:	080119c1 	.word	0x080119c1
 8010444:	080119c1 	.word	0x080119c1
 8010448:	080119c1 	.word	0x080119c1
 801044c:	080119c1 	.word	0x080119c1
 8010450:	080119c1 	.word	0x080119c1
 8010454:	080119c1 	.word	0x080119c1
 8010458:	080119c1 	.word	0x080119c1
 801045c:	080119c1 	.word	0x080119c1
 8010460:	080119c1 	.word	0x080119c1
 8010464:	080119c1 	.word	0x080119c1
 8010468:	080119c1 	.word	0x080119c1
 801046c:	080119c1 	.word	0x080119c1
 8010470:	080119c1 	.word	0x080119c1
 8010474:	080119c1 	.word	0x080119c1
 8010478:	080119c1 	.word	0x080119c1
 801047c:	080119c1 	.word	0x080119c1
 8010480:	080111f3 	.word	0x080111f3
 8010484:	080119c1 	.word	0x080119c1
 8010488:	0801120f 	.word	0x0801120f
 801048c:	080119c1 	.word	0x080119c1
 8010490:	08011837 	.word	0x08011837
 8010494:	0801125d 	.word	0x0801125d
 8010498:	08011279 	.word	0x08011279
 801049c:	080119c1 	.word	0x080119c1
 80104a0:	080119c1 	.word	0x080119c1
 80104a4:	08011171 	.word	0x08011171
 80104a8:	080119c1 	.word	0x080119c1
 80104ac:	080112d5 	.word	0x080112d5
 80104b0:	080112f3 	.word	0x080112f3
 80104b4:	0801117f 	.word	0x0801117f
 80104b8:	f248 0250 	movw	r2, #32848	@ 0x8050
 80104bc:	4293      	cmp	r3, r2
 80104be:	f301 827f 	bgt.w	80119c0 <phhalHw_Pn5180_SetConfig+0x1800>
 80104c2:	f248 0210 	movw	r2, #32784	@ 0x8010
 80104c6:	4293      	cmp	r3, r2
 80104c8:	f6bf aea7 	bge.w	801021a <phhalHw_Pn5180_SetConfig+0x5a>
 80104cc:	f001 ba78 	b.w	80119c0 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 80104d0:	887a      	ldrh	r2, [r7, #2]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	322c      	adds	r2, #44	@ 0x2c
 80104d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80104da:	883a      	ldrh	r2, [r7, #0]
 80104dc:	429a      	cmp	r2, r3
 80104de:	f001 8272 	beq.w	80119c6 <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 80104e2:	883a      	ldrh	r2, [r7, #0]
 80104e4:	887b      	ldrh	r3, [r7, #2]
 80104e6:	4619      	mov	r1, r3
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f003 feab 	bl	8014244 <phhalHw_Pn5180_SetConfig_Int>
 80104ee:	4603      	mov	r3, r0
 80104f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80104f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <phhalHw_Pn5180_SetConfig+0x33e>
 80104f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80104fa:	f001 baa4 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 80104fe:	887a      	ldrh	r2, [r7, #2]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	322c      	adds	r2, #44	@ 0x2c
 8010504:	8839      	ldrh	r1, [r7, #0]
 8010506:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 801050a:	f001 ba5c 	b.w	80119c6 <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 801050e:	887a      	ldrh	r2, [r7, #2]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	322c      	adds	r2, #44	@ 0x2c
 8010514:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010518:	883a      	ldrh	r2, [r7, #0]
 801051a:	429a      	cmp	r2, r3
 801051c:	d105      	bne.n	801052a <phhalHw_Pn5180_SetConfig+0x36a>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010524:	2b01      	cmp	r3, #1
 8010526:	f001 8250 	beq.w	80119ca <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 801052a:	883b      	ldrh	r3, [r7, #0]
 801052c:	2b07      	cmp	r3, #7
 801052e:	d903      	bls.n	8010538 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010530:	f240 2321 	movw	r3, #545	@ 0x221
 8010534:	f001 ba87 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010538:	887a      	ldrh	r2, [r7, #2]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	322c      	adds	r2, #44	@ 0x2c
 801053e:	8839      	ldrh	r1, [r7, #0]
 8010540:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 8010544:	f001 ba41 	b.w	80119ca <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010548:	887a      	ldrh	r2, [r7, #2]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	322c      	adds	r2, #44	@ 0x2c
 801054e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010552:	883a      	ldrh	r2, [r7, #0]
 8010554:	429a      	cmp	r2, r3
 8010556:	d105      	bne.n	8010564 <phhalHw_Pn5180_SetConfig+0x3a4>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801055e:	2b01      	cmp	r3, #1
 8010560:	f001 8235 	beq.w	80119ce <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 8010564:	883a      	ldrh	r2, [r7, #0]
 8010566:	887b      	ldrh	r3, [r7, #2]
 8010568:	4619      	mov	r1, r3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f003 fe6a 	bl	8014244 <phhalHw_Pn5180_SetConfig_Int>
 8010570:	4603      	mov	r3, r0
 8010572:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010574:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <phhalHw_Pn5180_SetConfig+0x3c0>
 801057a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801057c:	f001 ba63 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010580:	887a      	ldrh	r2, [r7, #2]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	322c      	adds	r2, #44	@ 0x2c
 8010586:	8839      	ldrh	r1, [r7, #0]
 8010588:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 801058c:	f001 ba1f 	b.w	80119ce <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010590:	887a      	ldrh	r2, [r7, #2]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	322c      	adds	r2, #44	@ 0x2c
 8010596:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801059a:	883a      	ldrh	r2, [r7, #0]
 801059c:	429a      	cmp	r2, r3
 801059e:	d105      	bne.n	80105ac <phhalHw_Pn5180_SetConfig+0x3ec>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	f001 8213 	beq.w	80119d2 <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 80105ac:	883b      	ldrh	r3, [r7, #0]
 80105ae:	2b07      	cmp	r3, #7
 80105b0:	d903      	bls.n	80105ba <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80105b2:	f240 2321 	movw	r3, #545	@ 0x221
 80105b6:	f001 ba46 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 80105ba:	2300      	movs	r3, #0
 80105bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 80105be:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 80105c2:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 80105c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105c6:	1c5a      	adds	r2, r3, #1
 80105c8:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80105ca:	3338      	adds	r3, #56	@ 0x38
 80105cc:	443b      	add	r3, r7
 80105ce:	2212      	movs	r2, #18
 80105d0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80105d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105d6:	1c5a      	adds	r2, r3, #1
 80105d8:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80105da:	3338      	adds	r3, #56	@ 0x38
 80105dc:	443b      	add	r3, r7
 80105de:	2203      	movs	r2, #3
 80105e0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105e8:	1c59      	adds	r1, r3, #1
 80105ea:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80105ec:	b2d2      	uxtb	r2, r2
 80105ee:	3338      	adds	r3, #56	@ 0x38
 80105f0:	443b      	add	r3, r7
 80105f2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	0a1a      	lsrs	r2, r3, #8
 80105fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105fc:	1c59      	adds	r1, r3, #1
 80105fe:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010600:	b2d2      	uxtb	r2, r2
 8010602:	3338      	adds	r3, #56	@ 0x38
 8010604:	443b      	add	r3, r7
 8010606:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	0c1a      	lsrs	r2, r3, #16
 801060e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010610:	1c59      	adds	r1, r3, #1
 8010612:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010614:	b2d2      	uxtb	r2, r2
 8010616:	3338      	adds	r3, #56	@ 0x38
 8010618:	443b      	add	r3, r7
 801061a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	0e1a      	lsrs	r2, r3, #24
 8010622:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010624:	1c59      	adds	r1, r3, #1
 8010626:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010628:	b2d2      	uxtb	r2, r2
 801062a:	3338      	adds	r3, #56	@ 0x38
 801062c:	443b      	add	r3, r7
 801062e:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 8010632:	883b      	ldrh	r3, [r7, #0]
 8010634:	019b      	lsls	r3, r3, #6
 8010636:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801063a:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 801063c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801063e:	1c5a      	adds	r2, r3, #1
 8010640:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010642:	3338      	adds	r3, #56	@ 0x38
 8010644:	443b      	add	r3, r7
 8010646:	2212      	movs	r2, #18
 8010648:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 801064c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010652:	3338      	adds	r3, #56	@ 0x38
 8010654:	443b      	add	r3, r7
 8010656:	2202      	movs	r2, #2
 8010658:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010660:	1c59      	adds	r1, r3, #1
 8010662:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010664:	b2d2      	uxtb	r2, r2
 8010666:	3338      	adds	r3, #56	@ 0x38
 8010668:	443b      	add	r3, r7
 801066a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	0a1a      	lsrs	r2, r3, #8
 8010672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010674:	1c59      	adds	r1, r3, #1
 8010676:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010678:	b2d2      	uxtb	r2, r2
 801067a:	3338      	adds	r3, #56	@ 0x38
 801067c:	443b      	add	r3, r7
 801067e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	0c1a      	lsrs	r2, r3, #16
 8010686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010688:	1c59      	adds	r1, r3, #1
 801068a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801068c:	b2d2      	uxtb	r2, r2
 801068e:	3338      	adds	r3, #56	@ 0x38
 8010690:	443b      	add	r3, r7
 8010692:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	0e1a      	lsrs	r2, r3, #24
 801069a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801069c:	1c59      	adds	r1, r3, #1
 801069e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80106a0:	b2d2      	uxtb	r2, r2
 80106a2:	3338      	adds	r3, #56	@ 0x38
 80106a4:	443b      	add	r3, r7
 80106a6:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80106aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106ac:	f107 030c 	add.w	r3, r7, #12
 80106b0:	4619      	mov	r1, r3
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f002 fd54 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80106b8:	4603      	mov	r3, r0
 80106ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80106bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d002      	beq.n	80106c8 <phhalHw_Pn5180_SetConfig+0x508>
 80106c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80106c4:	f001 b9bf 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 80106c8:	887a      	ldrh	r2, [r7, #2]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	322c      	adds	r2, #44	@ 0x2c
 80106ce:	8839      	ldrh	r1, [r7, #0]
 80106d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 80106d4:	f001 b97d 	b.w	80119d2 <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 80106d8:	887a      	ldrh	r2, [r7, #2]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	322c      	adds	r2, #44	@ 0x2c
 80106de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80106e2:	883a      	ldrh	r2, [r7, #0]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	f001 8176 	beq.w	80119d6 <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 80106ea:	883b      	ldrh	r3, [r7, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10d      	bne.n	801070c <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 80106f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106f4:	2112      	movs	r1, #18
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f002 fc46 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80106fc:	4603      	mov	r3, r0
 80106fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010700:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010702:	2b00      	cmp	r3, #0
 8010704:	d010      	beq.n	8010728 <phhalHw_Pn5180_SetConfig+0x568>
 8010706:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010708:	f001 b99d 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 801070c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8010710:	2112      	movs	r1, #18
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f002 fcae 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8010718:	4603      	mov	r3, r0
 801071a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801071c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <phhalHw_Pn5180_SetConfig+0x568>
 8010722:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010724:	f001 b98f 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010728:	887a      	ldrh	r2, [r7, #2]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	322c      	adds	r2, #44	@ 0x2c
 801072e:	8839      	ldrh	r1, [r7, #0]
 8010730:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 8010734:	f001 b94f 	b.w	80119d6 <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 8010738:	883b      	ldrh	r3, [r7, #0]
 801073a:	f240 228a 	movw	r2, #650	@ 0x28a
 801073e:	4293      	cmp	r3, r2
 8010740:	d903      	bls.n	801074a <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010742:	f240 2321 	movw	r3, #545	@ 0x221
 8010746:	f001 b97e 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 801074a:	883a      	ldrh	r2, [r7, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 8010750:	f04f 0300 	mov.w	r3, #0
 8010754:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 8010756:	237f      	movs	r3, #127	@ 0x7f
 8010758:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 801075a:	883b      	ldrh	r3, [r7, #0]
 801075c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010760:	fb02 f303 	mul.w	r3, r2, r3
 8010764:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d043      	beq.n	80107f4 <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	ee07 3a90 	vmov	s15, r3
 8010772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010776:	ee17 0a90 	vmov	r0, s15
 801077a:	f7ef fee5 	bl	8000548 <__aeabi_f2d>
 801077e:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 8010782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010786:	f7ef ff37 	bl	80005f8 <__aeabi_dmul>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	4614      	mov	r4, r2
 8010790:	461d      	mov	r5, r3
 8010792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010794:	ee07 3a90 	vmov	s15, r3
 8010798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801079c:	ee17 0a90 	vmov	r0, s15
 80107a0:	f7ef fed2 	bl	8000548 <__aeabi_f2d>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4620      	mov	r0, r4
 80107aa:	4629      	mov	r1, r5
 80107ac:	f7f0 f84e 	bl	800084c <__aeabi_ddiv>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4610      	mov	r0, r2
 80107b6:	4619      	mov	r1, r3
 80107b8:	f7f0 f9f6 	bl	8000ba8 <__aeabi_d2f>
 80107bc:	4603      	mov	r3, r0
 80107be:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 80107c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80107c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80107c8:	ee17 3a90 	vmov	r3, s15
 80107cc:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	021b      	lsls	r3, r3, #8
 80107d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107d4:	4313      	orrs	r3, r2
 80107d6:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 80107d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107da:	2117      	movs	r1, #23
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7fe ff4d 	bl	800f67c <phhalHw_Pn5180_WriteRegister>
 80107e2:	4603      	mov	r3, r0
 80107e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80107e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f001 80f6 	beq.w	80119da <phhalHw_Pn5180_SetConfig+0x181a>
 80107ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80107f0:	f001 b929 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 80107f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107f6:	2117      	movs	r1, #23
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7fe ff3f 	bl	800f67c <phhalHw_Pn5180_WriteRegister>
 80107fe:	4603      	mov	r3, r0
 8010800:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010804:	2b00      	cmp	r3, #0
 8010806:	f001 80e8 	beq.w	80119da <phhalHw_Pn5180_SetConfig+0x181a>
 801080a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801080c:	f001 b91b 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010810:	887a      	ldrh	r2, [r7, #2]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	322c      	adds	r2, #44	@ 0x2c
 8010816:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801081a:	883a      	ldrh	r2, [r7, #0]
 801081c:	429a      	cmp	r2, r3
 801081e:	d105      	bne.n	801082c <phhalHw_Pn5180_SetConfig+0x66c>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010826:	2b01      	cmp	r3, #1
 8010828:	f001 80d9 	beq.w	80119de <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 801082c:	887a      	ldrh	r2, [r7, #2]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	322c      	adds	r2, #44	@ 0x2c
 8010832:	8839      	ldrh	r1, [r7, #0]
 8010834:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 8010838:	237f      	movs	r3, #127	@ 0x7f
 801083a:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 801083c:	883b      	ldrh	r3, [r7, #0]
 801083e:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d043      	beq.n	80108ce <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	ee07 3a90 	vmov	s15, r3
 801084c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010850:	ee17 0a90 	vmov	r0, s15
 8010854:	f7ef fe78 	bl	8000548 <__aeabi_f2d>
 8010858:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 801085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010860:	f7ef feca 	bl	80005f8 <__aeabi_dmul>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	4614      	mov	r4, r2
 801086a:	461d      	mov	r5, r3
 801086c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801086e:	ee07 3a90 	vmov	s15, r3
 8010872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010876:	ee17 0a90 	vmov	r0, s15
 801087a:	f7ef fe65 	bl	8000548 <__aeabi_f2d>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	f7ef ffe1 	bl	800084c <__aeabi_ddiv>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	4610      	mov	r0, r2
 8010890:	4619      	mov	r1, r3
 8010892:	f7f0 f989 	bl	8000ba8 <__aeabi_d2f>
 8010896:	4603      	mov	r3, r0
 8010898:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 801089a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801089e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108a2:	ee17 3a90 	vmov	r3, s15
 80108a6:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	021b      	lsls	r3, r3, #8
 80108ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ae:	4313      	orrs	r3, r2
 80108b0:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 80108b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108b4:	2111      	movs	r1, #17
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f002 faf0 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80108bc:	4603      	mov	r3, r0
 80108be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80108c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f001 808b 	beq.w	80119de <phhalHw_Pn5180_SetConfig+0x181e>
 80108c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108ca:	f001 b8bc 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 80108ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108d0:	2111      	movs	r1, #17
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f002 fae2 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80108d8:	4603      	mov	r3, r0
 80108da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80108dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f001 807d 	beq.w	80119de <phhalHw_Pn5180_SetConfig+0x181e>
 80108e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108e6:	f001 b8ae 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 80108ea:	887a      	ldrh	r2, [r7, #2]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	322c      	adds	r2, #44	@ 0x2c
 80108f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80108f4:	883a      	ldrh	r2, [r7, #0]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d105      	bne.n	8010906 <phhalHw_Pn5180_SetConfig+0x746>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010900:	2b01      	cmp	r3, #1
 8010902:	f001 806e 	beq.w	80119e2 <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010906:	887a      	ldrh	r2, [r7, #2]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	322c      	adds	r2, #44	@ 0x2c
 801090c:	8839      	ldrh	r1, [r7, #0]
 801090e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 8010912:	f04f 0300 	mov.w	r3, #0
 8010916:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 8010918:	237f      	movs	r3, #127	@ 0x7f
 801091a:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 801091c:	883b      	ldrh	r3, [r7, #0]
 801091e:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d043      	beq.n	80109ae <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	ee07 3a90 	vmov	s15, r3
 801092c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010930:	ee17 0a90 	vmov	r0, s15
 8010934:	f7ef fe08 	bl	8000548 <__aeabi_f2d>
 8010938:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7ef fe5a 	bl	80005f8 <__aeabi_dmul>
 8010944:	4602      	mov	r2, r0
 8010946:	460b      	mov	r3, r1
 8010948:	4614      	mov	r4, r2
 801094a:	461d      	mov	r5, r3
 801094c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094e:	ee07 3a90 	vmov	s15, r3
 8010952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010956:	ee17 0a90 	vmov	r0, s15
 801095a:	f7ef fdf5 	bl	8000548 <__aeabi_f2d>
 801095e:	4602      	mov	r2, r0
 8010960:	460b      	mov	r3, r1
 8010962:	4620      	mov	r0, r4
 8010964:	4629      	mov	r1, r5
 8010966:	f7ef ff71 	bl	800084c <__aeabi_ddiv>
 801096a:	4602      	mov	r2, r0
 801096c:	460b      	mov	r3, r1
 801096e:	4610      	mov	r0, r2
 8010970:	4619      	mov	r1, r3
 8010972:	f7f0 f919 	bl	8000ba8 <__aeabi_d2f>
 8010976:	4603      	mov	r3, r0
 8010978:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 801097a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801097e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010982:	ee17 3a90 	vmov	r3, s15
 8010986:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	021b      	lsls	r3, r3, #8
 801098c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801098e:	4313      	orrs	r3, r2
 8010990:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 8010992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010994:	2117      	movs	r1, #23
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7fe fe70 	bl	800f67c <phhalHw_Pn5180_WriteRegister>
 801099c:	4603      	mov	r3, r0
 801099e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80109a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f001 801d 	beq.w	80119e2 <phhalHw_Pn5180_SetConfig+0x1822>
 80109a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109aa:	f001 b84c 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 80109ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109b0:	2117      	movs	r1, #23
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fe fe62 	bl	800f67c <phhalHw_Pn5180_WriteRegister>
 80109b8:	4603      	mov	r3, r0
 80109ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80109bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f001 800f 	beq.w	80119e2 <phhalHw_Pn5180_SetConfig+0x1822>
 80109c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109c6:	f001 b83e 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 80109ca:	887a      	ldrh	r2, [r7, #2]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	322c      	adds	r2, #44	@ 0x2c
 80109d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80109d4:	883a      	ldrh	r2, [r7, #0]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d105      	bne.n	80109e6 <phhalHw_Pn5180_SetConfig+0x826>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	f001 8000 	beq.w	80119e6 <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 80109e6:	883b      	ldrh	r3, [r7, #0]
 80109e8:	2b1f      	cmp	r3, #31
 80109ea:	d903      	bls.n	80109f4 <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80109ec:	f240 2321 	movw	r3, #545	@ 0x221
 80109f0:	f001 b829 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 80109f4:	2300      	movs	r3, #0
 80109f6:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 80109f8:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 80109fc:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 80109fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010a04:	3338      	adds	r3, #56	@ 0x38
 8010a06:	443b      	add	r3, r7
 8010a08:	2220      	movs	r2, #32
 8010a0a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8010a0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a10:	1c5a      	adds	r2, r3, #1
 8010a12:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010a14:	3338      	adds	r3, #56	@ 0x38
 8010a16:	443b      	add	r3, r7
 8010a18:	2203      	movs	r2, #3
 8010a1a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010a1e:	68ba      	ldr	r2, [r7, #8]
 8010a20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a22:	1c59      	adds	r1, r3, #1
 8010a24:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010a26:	b2d2      	uxtb	r2, r2
 8010a28:	3338      	adds	r3, #56	@ 0x38
 8010a2a:	443b      	add	r3, r7
 8010a2c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	0a1a      	lsrs	r2, r3, #8
 8010a34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a36:	1c59      	adds	r1, r3, #1
 8010a38:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010a3a:	b2d2      	uxtb	r2, r2
 8010a3c:	3338      	adds	r3, #56	@ 0x38
 8010a3e:	443b      	add	r3, r7
 8010a40:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	0c1a      	lsrs	r2, r3, #16
 8010a48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a4a:	1c59      	adds	r1, r3, #1
 8010a4c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010a4e:	b2d2      	uxtb	r2, r2
 8010a50:	3338      	adds	r3, #56	@ 0x38
 8010a52:	443b      	add	r3, r7
 8010a54:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	0e1a      	lsrs	r2, r3, #24
 8010a5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a5e:	1c59      	adds	r1, r3, #1
 8010a60:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010a62:	b2d2      	uxtb	r2, r2
 8010a64:	3338      	adds	r3, #56	@ 0x38
 8010a66:	443b      	add	r3, r7
 8010a68:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 8010a6c:	883b      	ldrh	r3, [r7, #0]
 8010a6e:	035b      	lsls	r3, r3, #13
 8010a70:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 8010a74:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 8010a76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a78:	1c5a      	adds	r2, r3, #1
 8010a7a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010a7c:	3338      	adds	r3, #56	@ 0x38
 8010a7e:	443b      	add	r3, r7
 8010a80:	2220      	movs	r2, #32
 8010a82:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8010a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a88:	1c5a      	adds	r2, r3, #1
 8010a8a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8010a8c:	3338      	adds	r3, #56	@ 0x38
 8010a8e:	443b      	add	r3, r7
 8010a90:	2202      	movs	r2, #2
 8010a92:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a9a:	1c59      	adds	r1, r3, #1
 8010a9c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010a9e:	b2d2      	uxtb	r2, r2
 8010aa0:	3338      	adds	r3, #56	@ 0x38
 8010aa2:	443b      	add	r3, r7
 8010aa4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	0a1a      	lsrs	r2, r3, #8
 8010aac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010aae:	1c59      	adds	r1, r3, #1
 8010ab0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010ab2:	b2d2      	uxtb	r2, r2
 8010ab4:	3338      	adds	r3, #56	@ 0x38
 8010ab6:	443b      	add	r3, r7
 8010ab8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	0c1a      	lsrs	r2, r3, #16
 8010ac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ac2:	1c59      	adds	r1, r3, #1
 8010ac4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010ac6:	b2d2      	uxtb	r2, r2
 8010ac8:	3338      	adds	r3, #56	@ 0x38
 8010aca:	443b      	add	r3, r7
 8010acc:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	0e1a      	lsrs	r2, r3, #24
 8010ad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ad6:	1c59      	adds	r1, r3, #1
 8010ad8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8010ada:	b2d2      	uxtb	r2, r2
 8010adc:	3338      	adds	r3, #56	@ 0x38
 8010ade:	443b      	add	r3, r7
 8010ae0:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8010ae4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010ae6:	f107 030c 	add.w	r3, r7, #12
 8010aea:	4619      	mov	r1, r3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f002 fb37 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8010af2:	4603      	mov	r3, r0
 8010af4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010af6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d002      	beq.n	8010b02 <phhalHw_Pn5180_SetConfig+0x942>
 8010afc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010afe:	f000 bfa2 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010b02:	887a      	ldrh	r2, [r7, #2]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	322c      	adds	r2, #44	@ 0x2c
 8010b08:	8839      	ldrh	r1, [r7, #0]
 8010b0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 8010b0e:	f000 bf6a 	b.w	80119e6 <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 8010b12:	883b      	ldrh	r3, [r7, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 8768 	beq.w	80119ea <phhalHw_Pn5180_SetConfig+0x182a>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	f040 8762 	bne.w	80119ea <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 8010b26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f002 faa1 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8010b32:	4603      	mov	r3, r0
 8010b34:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010b36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d002      	beq.n	8010b42 <phhalHw_Pn5180_SetConfig+0x982>
 8010b3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010b3e:	f000 bf82 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 8010b4a:	f000 bf4e 	b.w	80119ea <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 8010b4e:	883b      	ldrh	r3, [r7, #0]
 8010b50:	3302      	adds	r3, #2
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	f040 8745 	bne.w	80119ee <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8010b68:	3301      	adds	r3, #1
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 8010b70:	f000 bf3d 	b.w	80119ee <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8010b74:	f107 0118 	add.w	r1, r7, #24
 8010b78:	f107 021c 	add.w	r2, r7, #28
 8010b7c:	f107 031a 	add.w	r3, r7, #26
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	460b      	mov	r3, r1
 8010b84:	2101      	movs	r1, #1
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f003 f995 	bl	8013eb6 <phhalHw_Pn5180_GetRxBuffer>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010b90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <phhalHw_Pn5180_SetConfig+0x9dc>
 8010b96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010b98:	f000 bf55 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	8b1b      	ldrh	r3, [r3, #24]
 8010ba0:	883a      	ldrh	r2, [r7, #0]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d303      	bcc.n	8010bae <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010ba6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010baa:	f000 bf4c 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	883a      	ldrh	r2, [r7, #0]
 8010bb2:	83da      	strh	r2, [r3, #30]
        break;
 8010bb4:	f000 bf46 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8010bb8:	f107 0118 	add.w	r1, r7, #24
 8010bbc:	f107 021c 	add.w	r2, r7, #28
 8010bc0:	f107 031a 	add.w	r3, r7, #26
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	2101      	movs	r1, #1
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f003 f937 	bl	8013e3e <phhalHw_Pn5180_GetTxBuffer>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010bd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d002      	beq.n	8010be0 <phhalHw_Pn5180_SetConfig+0xa20>
 8010bda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010bdc:	f000 bf33 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	8a1b      	ldrh	r3, [r3, #16]
 8010be4:	883a      	ldrh	r2, [r7, #0]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d903      	bls.n	8010bf2 <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010bea:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010bee:	f000 bf2a 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	883a      	ldrh	r2, [r7, #0]
 8010bf6:	825a      	strh	r2, [r3, #18]
        break;
 8010bf8:	f000 bf24 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8010bfc:	f107 0118 	add.w	r1, r7, #24
 8010c00:	f107 021c 	add.w	r2, r7, #28
 8010c04:	f107 031a 	add.w	r3, r7, #26
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f003 f915 	bl	8013e3e <phhalHw_Pn5180_GetTxBuffer>
 8010c14:	4603      	mov	r3, r0
 8010c16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010c18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d002      	beq.n	8010c24 <phhalHw_Pn5180_SetConfig+0xa64>
 8010c1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c20:	f000 bf11 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	8a1b      	ldrh	r3, [r3, #16]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d303      	bcc.n	8010c38 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010c30:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010c34:	f000 bf07 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8010c3e:	4413      	add	r3, r2
 8010c40:	883a      	ldrh	r2, [r7, #0]
 8010c42:	b2d2      	uxtb	r2, r2
 8010c44:	701a      	strb	r2, [r3, #0]
        break;
 8010c46:	f000 befd 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010c4a:	887a      	ldrh	r2, [r7, #2]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	322c      	adds	r2, #44	@ 0x2c
 8010c50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010c54:	883a      	ldrh	r2, [r7, #0]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d105      	bne.n	8010c66 <phhalHw_Pn5180_SetConfig+0xaa6>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	f000 86c6 	beq.w	80119f2 <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 8010c66:	883b      	ldrh	r3, [r7, #0]
 8010c68:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010c6c:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 8010c6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c70:	0a1b      	lsrs	r3, r3, #8
 8010c72:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 8010c74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d011      	beq.n	8010c9e <phhalHw_Pn5180_SetConfig+0xade>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c80:	461a      	mov	r2, r3
 8010c82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d00a      	beq.n	8010c9e <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 8010c88:	883b      	ldrh	r3, [r7, #0]
 8010c8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c92:	d004      	beq.n	8010c9e <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 8010c94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 8010c9e:	883b      	ldrh	r3, [r7, #0]
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010caa:	2b04      	cmp	r3, #4
 8010cac:	d104      	bne.n	8010cb8 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 8010cae:	883b      	ldrh	r3, [r7, #0]
 8010cb0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 8010cb2:	230b      	movs	r3, #11
 8010cb4:	803b      	strh	r3, [r7, #0]
 8010cb6:	e00f      	b.n	8010cd8 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010cbe:	8839      	ldrh	r1, [r7, #0]
 8010cc0:	22ff      	movs	r2, #255	@ 0xff
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f003 fd40 	bl	8014748 <phhalHw_Pn5180_SetCardMode>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010ccc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d002      	beq.n	8010cd8 <phhalHw_Pn5180_SetConfig+0xb18>
 8010cd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010cd4:	f000 beb7 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010cd8:	887a      	ldrh	r2, [r7, #2]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	322c      	adds	r2, #44	@ 0x2c
 8010cde:	8839      	ldrh	r1, [r7, #0]
 8010ce0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010cea:	2b04      	cmp	r3, #4
 8010cec:	d11d      	bne.n	8010d2a <phhalHw_Pn5180_SetConfig+0xb6a>
 8010cee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010cf0:	2b0b      	cmp	r3, #11
 8010cf2:	d11a      	bne.n	8010d2a <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 8010cf4:	2204      	movs	r2, #4
 8010cf6:	2142      	movs	r1, #66	@ 0x42
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f002 f8cf 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010d02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <phhalHw_Pn5180_SetConfig+0xb4e>
 8010d08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d0a:	f000 be9c 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 8010d0e:	2243      	movs	r2, #67	@ 0x43
 8010d10:	213b      	movs	r1, #59	@ 0x3b
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f002 f8c2 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010d1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f000 8081 	beq.w	8010e26 <phhalHw_Pn5180_SetConfig+0xc66>
 8010d24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d26:	f000 be8e 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d30:	2b04      	cmp	r3, #4
 8010d32:	d123      	bne.n	8010d7c <phhalHw_Pn5180_SetConfig+0xbbc>
 8010d34:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d36:	2b1b      	cmp	r3, #27
 8010d38:	d120      	bne.n	8010d7c <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 8010d3a:	2205      	movs	r2, #5
 8010d3c:	2142      	movs	r1, #66	@ 0x42
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f002 f8ac 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010d44:	4603      	mov	r3, r0
 8010d46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010d48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d002      	beq.n	8010d54 <phhalHw_Pn5180_SetConfig+0xb94>
 8010d4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d50:	f000 be79 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 8010d54:	2244      	movs	r2, #68	@ 0x44
 8010d56:	213b      	movs	r1, #59	@ 0x3b
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f002 f89f 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010d62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d002      	beq.n	8010d6e <phhalHw_Pn5180_SetConfig+0xbae>
 8010d68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d6a:	f000 be6c 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 8010d6e:	887a      	ldrh	r2, [r7, #2]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	322c      	adds	r2, #44	@ 0x2c
 8010d74:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8010d76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8010d7a:	e054      	b.n	8010e26 <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d82:	2b04      	cmp	r3, #4
 8010d84:	d123      	bne.n	8010dce <phhalHw_Pn5180_SetConfig+0xc0e>
 8010d86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d120      	bne.n	8010dce <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 8010d8c:	2206      	movs	r2, #6
 8010d8e:	2142      	movs	r1, #66	@ 0x42
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f002 f883 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010d96:	4603      	mov	r3, r0
 8010d98:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010d9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <phhalHw_Pn5180_SetConfig+0xbe6>
 8010da0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010da2:	f000 be50 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 8010da6:	2245      	movs	r2, #69	@ 0x45
 8010da8:	213b      	movs	r1, #59	@ 0x3b
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f002 f876 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010db0:	4603      	mov	r3, r0
 8010db2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010db4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <phhalHw_Pn5180_SetConfig+0xc00>
 8010dba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010dbc:	f000 be43 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 8010dc0:	887a      	ldrh	r2, [r7, #2]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	322c      	adds	r2, #44	@ 0x2c
 8010dc6:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8010dc8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8010dcc:	e02b      	b.n	8010e26 <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010dd4:	2b04      	cmp	r3, #4
 8010dd6:	f040 860c 	bne.w	80119f2 <phhalHw_Pn5180_SetConfig+0x1832>
 8010dda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	f040 8608 	bne.w	80119f2 <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 8010de2:	2207      	movs	r2, #7
 8010de4:	2142      	movs	r1, #66	@ 0x42
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f002 f858 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010dec:	4603      	mov	r3, r0
 8010dee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010df0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d002      	beq.n	8010dfc <phhalHw_Pn5180_SetConfig+0xc3c>
 8010df6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010df8:	f000 be25 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 8010dfc:	2246      	movs	r2, #70	@ 0x46
 8010dfe:	213b      	movs	r1, #59	@ 0x3b
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f002 f84b 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010e06:	4603      	mov	r3, r0
 8010e08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010e0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <phhalHw_Pn5180_SetConfig+0xc56>
 8010e10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010e12:	f000 be18 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 8010e16:	887a      	ldrh	r2, [r7, #2]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	322c      	adds	r2, #44	@ 0x2c
 8010e1c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8010e1e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 8010e22:	f000 bde6 	b.w	80119f2 <phhalHw_Pn5180_SetConfig+0x1832>
 8010e26:	f000 bde4 	b.w	80119f2 <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010e2a:	887a      	ldrh	r2, [r7, #2]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	322c      	adds	r2, #44	@ 0x2c
 8010e30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010e34:	883a      	ldrh	r2, [r7, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d105      	bne.n	8010e46 <phhalHw_Pn5180_SetConfig+0xc86>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	f000 85d8 	beq.w	80119f6 <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 8010e46:	883b      	ldrh	r3, [r7, #0]
 8010e48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010e4c:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 8010e4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e50:	0a1b      	lsrs	r3, r3, #8
 8010e52:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 8010e54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d011      	beq.n	8010e7e <phhalHw_Pn5180_SetConfig+0xcbe>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e60:	461a      	mov	r2, r3
 8010e62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d00a      	beq.n	8010e7e <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 8010e68:	883b      	ldrh	r3, [r7, #0]
 8010e6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010e72:	d004      	beq.n	8010e7e <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 8010e74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 8010e7e:	883b      	ldrh	r3, [r7, #0]
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e8a:	2b04      	cmp	r3, #4
 8010e8c:	d106      	bne.n	8010e9c <phhalHw_Pn5180_SetConfig+0xcdc>
 8010e8e:	883b      	ldrh	r3, [r7, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d103      	bne.n	8010e9c <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 8010e94:	883b      	ldrh	r3, [r7, #0]
 8010e96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 8010e98:	230f      	movs	r3, #15
 8010e9a:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010ea2:	883a      	ldrh	r2, [r7, #0]
 8010ea4:	21ff      	movs	r1, #255	@ 0xff
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f003 fc4e 	bl	8014748 <phhalHw_Pn5180_SetCardMode>
 8010eac:	4603      	mov	r3, r0
 8010eae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010eb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d002      	beq.n	8010ebc <phhalHw_Pn5180_SetConfig+0xcfc>
 8010eb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010eb8:	f000 bdc5 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010ebc:	887a      	ldrh	r2, [r7, #2]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	322c      	adds	r2, #44	@ 0x2c
 8010ec2:	8839      	ldrh	r1, [r7, #0]
 8010ec4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ece:	2b04      	cmp	r3, #4
 8010ed0:	f040 8591 	bne.w	80119f6 <phhalHw_Pn5180_SetConfig+0x1836>
 8010ed4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f040 858d 	bne.w	80119f6 <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 8010edc:	f107 0308 	add.w	r3, r7, #8
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	211a      	movs	r1, #26
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f002 f9ed 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 8010eea:	4603      	mov	r3, r0
 8010eec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010eee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <phhalHw_Pn5180_SetConfig+0xd3a>
 8010ef4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ef6:	f000 bda6 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 8010efa:	68ba      	ldr	r2, [r7, #8]
 8010efc:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8010f00:	4013      	ands	r3, r2
 8010f02:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	f043 0304 	orr.w	r3, r3, #4
 8010f0a:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	461a      	mov	r2, r3
 8010f10:	211a      	movs	r1, #26
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f001 ffc2 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010f1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d002      	beq.n	8010f28 <phhalHw_Pn5180_SetConfig+0xd68>
 8010f22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f24:	f000 bd8f 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 8010f28:	f107 0308 	add.w	r3, r7, #8
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	211c      	movs	r1, #28
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f002 f9c7 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 8010f36:	4603      	mov	r3, r0
 8010f38:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010f3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <phhalHw_Pn5180_SetConfig+0xd86>
 8010f40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f42:	f000 bd80 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 8010f4c:	4013      	ands	r3, r2
 8010f4e:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	461a      	mov	r2, r3
 8010f54:	211c      	movs	r1, #28
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f001 ffa0 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010f60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d002      	beq.n	8010f6c <phhalHw_Pn5180_SetConfig+0xdac>
 8010f66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f68:	f000 bd6d 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 8010f6c:	887a      	ldrh	r2, [r7, #2]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	322c      	adds	r2, #44	@ 0x2c
 8010f72:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8010f74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 8010f78:	f000 bd3d 	b.w	80119f6 <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010f7c:	887a      	ldrh	r2, [r7, #2]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	322c      	adds	r2, #44	@ 0x2c
 8010f82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010f86:	883a      	ldrh	r2, [r7, #0]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d10a      	bne.n	8010fa2 <phhalHw_Pn5180_SetConfig+0xde2>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d105      	bne.n	8010fa2 <phhalHw_Pn5180_SetConfig+0xde2>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	f000 852c 	beq.w	80119fa <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8010fa2:	883b      	ldrh	r3, [r7, #0]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f003 fec3 	bl	8014d34 <phhalHw_Pn5180_SetTmo>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010fb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <phhalHw_Pn5180_SetConfig+0xdfe>
 8010fb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fba:	f000 bd44 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8010fbe:	887a      	ldrh	r2, [r7, #2]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	322c      	adds	r2, #44	@ 0x2c
 8010fc4:	8839      	ldrh	r1, [r7, #0]
 8010fc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 8010fd2:	f000 bd12 	b.w	80119fa <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8010fd6:	887a      	ldrh	r2, [r7, #2]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	322c      	adds	r2, #44	@ 0x2c
 8010fdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010fe0:	883a      	ldrh	r2, [r7, #0]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d10a      	bne.n	8010ffc <phhalHw_Pn5180_SetConfig+0xe3c>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d105      	bne.n	8010ffc <phhalHw_Pn5180_SetConfig+0xe3c>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	f000 8501 	beq.w	80119fe <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8010ffc:	883b      	ldrh	r3, [r7, #0]
 8010ffe:	2201      	movs	r2, #1
 8011000:	4619      	mov	r1, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f003 fe96 	bl	8014d34 <phhalHw_Pn5180_SetTmo>
 8011008:	4603      	mov	r3, r0
 801100a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801100c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801100e:	2b00      	cmp	r3, #0
 8011010:	d002      	beq.n	8011018 <phhalHw_Pn5180_SetConfig+0xe58>
 8011012:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011014:	f000 bd17 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 8011018:	887a      	ldrh	r2, [r7, #2]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	322c      	adds	r2, #44	@ 0x2c
 801101e:	8839      	ldrh	r1, [r7, #0]
 8011020:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 801102c:	f000 bce7 	b.w	80119fe <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 8011030:	887a      	ldrh	r2, [r7, #2]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	322c      	adds	r2, #44	@ 0x2c
 8011036:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801103a:	883a      	ldrh	r2, [r7, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	d105      	bne.n	801104c <phhalHw_Pn5180_SetConfig+0xe8c>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011046:	2b01      	cmp	r3, #1
 8011048:	f000 84db 	beq.w	8011a02 <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011052:	2b04      	cmp	r3, #4
 8011054:	d008      	beq.n	8011068 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 801105c:	2b06      	cmp	r3, #6
 801105e:	d003      	beq.n	8011068 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 8011060:	f240 2325 	movw	r3, #549	@ 0x225
 8011064:	f000 bcef 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801106e:	2b04      	cmp	r3, #4
 8011070:	d106      	bne.n	8011080 <phhalHw_Pn5180_SetConfig+0xec0>
 8011072:	883b      	ldrh	r3, [r7, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d003      	beq.n	8011080 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8011078:	f240 2323 	movw	r3, #547	@ 0x223
 801107c:	f000 bce3 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 801108c:	883b      	ldrh	r3, [r7, #0]
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f003 fb5a 	bl	8014748 <phhalHw_Pn5180_SetCardMode>
 8011094:	4603      	mov	r3, r0
 8011096:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011098:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801109a:	2b00      	cmp	r3, #0
 801109c:	d002      	beq.n	80110a4 <phhalHw_Pn5180_SetConfig+0xee4>
 801109e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110a0:	f000 bcd1 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	883a      	ldrh	r2, [r7, #0]
 80110a8:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 80110ac:	f000 bca9 	b.w	8011a02 <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 80110b0:	883b      	ldrh	r3, [r7, #0]
 80110b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d006      	beq.n	80110c8 <phhalHw_Pn5180_SetConfig+0xf08>
 80110ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110be:	d003      	beq.n	80110c8 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80110c0:	f240 2321 	movw	r3, #545	@ 0x221
 80110c4:	f000 bcbf 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 80110c8:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 80110ca:	883b      	ldrh	r3, [r7, #0]
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	dc02      	bgt.n	80110d8 <phhalHw_Pn5180_SetConfig+0xf18>
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	da03      	bge.n	80110de <phhalHw_Pn5180_SetConfig+0xf1e>
 80110d6:	e00f      	b.n	80110f8 <phhalHw_Pn5180_SetConfig+0xf38>
 80110d8:	2b02      	cmp	r3, #2
 80110da:	d009      	beq.n	80110f0 <phhalHw_Pn5180_SetConfig+0xf30>
 80110dc:	e00c      	b.n	80110f8 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	883a      	ldrh	r2, [r7, #0]
 80110e8:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 80110ea:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 80110ec:	f000 bcaa 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80110f0:	f240 2323 	movw	r3, #547	@ 0x223
 80110f4:	f000 bca7 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80110f8:	f240 2321 	movw	r3, #545	@ 0x221
 80110fc:	f000 bca3 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 8011100:	883b      	ldrh	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d103      	bne.n	801110e <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011106:	f240 2321 	movw	r3, #545	@ 0x221
 801110a:	f000 bc9c 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	883a      	ldrh	r2, [r7, #0]
 8011112:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 8011114:	f000 bc96 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	883a      	ldrh	r2, [r7, #0]
 801111c:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 801111e:	f000 bc91 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 8011122:	883b      	ldrh	r3, [r7, #0]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d106      	bne.n	8011136 <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 8011128:	883b      	ldrh	r3, [r7, #0]
 801112a:	b2da      	uxtb	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 8011132:	f000 bc87 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 8011136:	883b      	ldrh	r3, [r7, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 801113c:	883b      	ldrh	r3, [r7, #0]
 801113e:	b2da      	uxtb	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 8011146:	f000 bc7d 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801114a:	f240 2321 	movw	r3, #545	@ 0x221
 801114e:	f000 bc7a 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 8011152:	883b      	ldrh	r3, [r7, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d105      	bne.n	8011164 <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2200      	movs	r2, #0
 801115c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 8011160:	f000 bc70 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2201      	movs	r2, #1
 8011168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 801116c:	f000 bc6a 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 8011170:	883b      	ldrh	r3, [r7, #0]
 8011172:	b2da      	uxtb	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 801117a:	f000 bc63 	b.w	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 801117e:	883b      	ldrh	r3, [r7, #0]
 8011180:	b2da      	uxtb	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 8011188:	883b      	ldrh	r3, [r7, #0]
 801118a:	2b01      	cmp	r3, #1
 801118c:	d122      	bne.n	80111d4 <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011194:	2b03      	cmp	r3, #3
 8011196:	d00e      	beq.n	80111b6 <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 8011198:	f240 1207 	movw	r2, #263	@ 0x107
 801119c:	2128      	movs	r1, #40	@ 0x28
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7fe fa6c 	bl	800f67c <phhalHw_Pn5180_WriteRegister>
 80111a4:	4603      	mov	r3, r0
 80111a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80111a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 842b 	beq.w	8011a06 <phhalHw_Pn5180_SetConfig+0x1846>
 80111b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111b2:	f000 bc48 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 80111b6:	f240 1203 	movw	r2, #259	@ 0x103
 80111ba:	2128      	movs	r1, #40	@ 0x28
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7fe fa5d 	bl	800f67c <phhalHw_Pn5180_WriteRegister>
 80111c2:	4603      	mov	r3, r0
 80111c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80111c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 841c 	beq.w	8011a06 <phhalHw_Pn5180_SetConfig+0x1846>
 80111ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111d0:	f000 bc39 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 80111d4:	f06f 0201 	mvn.w	r2, #1
 80111d8:	2128      	movs	r1, #40	@ 0x28
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f001 ff4a 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80111e0:	4603      	mov	r3, r0
 80111e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80111e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 840d 	beq.w	8011a06 <phhalHw_Pn5180_SetConfig+0x1846>
 80111ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111ee:	f000 bc2a 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 80111f2:	883b      	ldrh	r3, [r7, #0]
 80111f4:	4619      	mov	r1, r3
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 fec6 	bl	8011f88 <phhalHw_Pn5180_SetMinFDT>
 80111fc:	4603      	mov	r3, r0
 80111fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011200:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011202:	2b00      	cmp	r3, #0
 8011204:	f000 8401 	beq.w	8011a0a <phhalHw_Pn5180_SetConfig+0x184a>
 8011208:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801120a:	f000 bc1c 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 801120e:	883b      	ldrh	r3, [r7, #0]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d111      	bne.n	8011238 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2201      	movs	r2, #1
 8011218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 801121c:	2202      	movs	r2, #2
 801121e:	2104      	movs	r1, #4
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f001 feb1 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011226:	4603      	mov	r3, r0
 8011228:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801122a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801122c:	2b00      	cmp	r3, #0
 801122e:	f000 83ee 	beq.w	8011a0e <phhalHw_Pn5180_SetConfig+0x184e>
 8011232:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011234:	f000 bc07 	b.w	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2200      	movs	r2, #0
 801123c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 8011240:	f06f 0202 	mvn.w	r2, #2
 8011244:	2104      	movs	r1, #4
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f001 ff14 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801124c:	4603      	mov	r3, r0
 801124e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011250:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 83db 	beq.w	8011a0e <phhalHw_Pn5180_SetConfig+0x184e>
 8011258:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801125a:	e3f4      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 801125c:	883b      	ldrh	r3, [r7, #0]
 801125e:	2b01      	cmp	r3, #1
 8011260:	d005      	beq.n	801126e <phhalHw_Pn5180_SetConfig+0x10ae>
 8011262:	883b      	ldrh	r3, [r7, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d002      	beq.n	801126e <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011268:	f240 2321 	movw	r3, #545	@ 0x221
 801126c:	e3eb      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 801126e:	883b      	ldrh	r3, [r7, #0]
 8011270:	b2da      	uxtb	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	70da      	strb	r2, [r3, #3]
        break;
 8011276:	e3e5      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 8011278:	883b      	ldrh	r3, [r7, #0]
 801127a:	2b01      	cmp	r3, #1
 801127c:	d00c      	beq.n	8011298 <phhalHw_Pn5180_SetConfig+0x10d8>
 801127e:	883b      	ldrh	r3, [r7, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d009      	beq.n	8011298 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011284:	f240 2321 	movw	r3, #545	@ 0x221
 8011288:	e3dd      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
 801128a:	bf00      	nop
 801128c:	f3af 8000 	nop.w
 8011290:	51eb851f 	.word	0x51eb851f
 8011294:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 8011298:	883b      	ldrh	r3, [r7, #0]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d10c      	bne.n	80112b8 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 801129e:	2280      	movs	r2, #128	@ 0x80
 80112a0:	2101      	movs	r1, #1
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f001 fdfa 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80112a8:	4603      	mov	r3, r0
 80112aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80112ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f000 83af 	beq.w	8011a12 <phhalHw_Pn5180_SetConfig+0x1852>
 80112b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112b6:	e3c6      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 80112b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80112bc:	2101      	movs	r1, #1
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f001 fed8 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80112c4:	4603      	mov	r3, r0
 80112c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80112c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 83a1 	beq.w	8011a12 <phhalHw_Pn5180_SetConfig+0x1852>
 80112d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112d2:	e3b8      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 80112d4:	883b      	ldrh	r3, [r7, #0]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d005      	beq.n	80112e6 <phhalHw_Pn5180_SetConfig+0x1126>
 80112da:	883b      	ldrh	r3, [r7, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80112e0:	f240 2321 	movw	r3, #545	@ 0x221
 80112e4:	e3af      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 80112e6:	883b      	ldrh	r3, [r7, #0]
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 80112f0:	e3a8      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 80112f2:	883b      	ldrh	r3, [r7, #0]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d005      	beq.n	8011304 <phhalHw_Pn5180_SetConfig+0x1144>
 80112f8:	883b      	ldrh	r3, [r7, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d002      	beq.n	8011304 <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80112fe:	f240 2321 	movw	r3, #545	@ 0x221
 8011302:	e3a0      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 8011304:	883b      	ldrh	r3, [r7, #0]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d10d      	bne.n	8011326 <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 801130a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801130e:	2118      	movs	r1, #24
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f001 feaf 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011316:	4603      	mov	r3, r0
 8011318:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801131a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801131c:	2b00      	cmp	r3, #0
 801131e:	f000 837a 	beq.w	8011a16 <phhalHw_Pn5180_SetConfig+0x1856>
 8011322:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011324:	e38f      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 8011326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801132a:	2118      	movs	r1, #24
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f001 fe2b 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011332:	4603      	mov	r3, r0
 8011334:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011336:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011338:	2b00      	cmp	r3, #0
 801133a:	f000 836c 	beq.w	8011a16 <phhalHw_Pn5180_SetConfig+0x1856>
 801133e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011340:	e381      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011348:	2b05      	cmp	r3, #5
 801134a:	d00c      	beq.n	8011366 <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 8011352:	2b04      	cmp	r3, #4
 8011354:	d007      	beq.n	8011366 <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 801135c:	2b06      	cmp	r3, #6
 801135e:	d002      	beq.n	8011366 <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 8011360:	f240 2325 	movw	r3, #549	@ 0x225
 8011364:	e36f      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 8011366:	883b      	ldrh	r3, [r7, #0]
 8011368:	2b07      	cmp	r3, #7
 801136a:	d82b      	bhi.n	80113c4 <phhalHw_Pn5180_SetConfig+0x1204>
 801136c:	a201      	add	r2, pc, #4	@ (adr r2, 8011374 <phhalHw_Pn5180_SetConfig+0x11b4>)
 801136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011372:	bf00      	nop
 8011374:	080113cb 	.word	0x080113cb
 8011378:	08011395 	.word	0x08011395
 801137c:	08011395 	.word	0x08011395
 8011380:	080113c5 	.word	0x080113c5
 8011384:	08011395 	.word	0x08011395
 8011388:	080113a5 	.word	0x080113a5
 801138c:	080113b5 	.word	0x080113b5
 8011390:	080113b5 	.word	0x080113b5
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801139a:	2b05      	cmp	r3, #5
 801139c:	d017      	beq.n	80113ce <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801139e:	f240 2321 	movw	r3, #545	@ 0x221
 80113a2:	e350      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113aa:	2b04      	cmp	r3, #4
 80113ac:	d011      	beq.n	80113d2 <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80113ae:	f240 2321 	movw	r3, #545	@ 0x221
 80113b2:	e348      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113ba:	2b06      	cmp	r3, #6
 80113bc:	d00b      	beq.n	80113d6 <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80113be:	f240 2321 	movw	r3, #545	@ 0x221
 80113c2:	e340      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80113c4:	f240 2323 	movw	r3, #547	@ 0x223
 80113c8:	e33d      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 80113ca:	bf00      	nop
 80113cc:	e004      	b.n	80113d8 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 80113ce:	bf00      	nop
 80113d0:	e002      	b.n	80113d8 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 80113d2:	bf00      	nop
 80113d4:	e000      	b.n	80113d8 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 80113d6:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 80113d8:	2300      	movs	r3, #0
 80113da:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 80113dc:	883b      	ldrh	r3, [r7, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d103      	bne.n	80113ea <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 80113e2:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 80113e6:	60bb      	str	r3, [r7, #8]
 80113e8:	e002      	b.n	80113f0 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 80113ea:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 80113ee:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 80113f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80113f2:	1c5a      	adds	r2, r3, #1
 80113f4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80113f6:	3338      	adds	r3, #56	@ 0x38
 80113f8:	443b      	add	r3, r7
 80113fa:	2218      	movs	r2, #24
 80113fc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8011400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011402:	1c5a      	adds	r2, r3, #1
 8011404:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8011406:	3338      	adds	r3, #56	@ 0x38
 8011408:	443b      	add	r3, r7
 801140a:	2203      	movs	r2, #3
 801140c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011410:	68ba      	ldr	r2, [r7, #8]
 8011412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011414:	1c59      	adds	r1, r3, #1
 8011416:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011418:	b2d2      	uxtb	r2, r2
 801141a:	3338      	adds	r3, #56	@ 0x38
 801141c:	443b      	add	r3, r7
 801141e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	0a1a      	lsrs	r2, r3, #8
 8011426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011428:	1c59      	adds	r1, r3, #1
 801142a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801142c:	b2d2      	uxtb	r2, r2
 801142e:	3338      	adds	r3, #56	@ 0x38
 8011430:	443b      	add	r3, r7
 8011432:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	0c1a      	lsrs	r2, r3, #16
 801143a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801143c:	1c59      	adds	r1, r3, #1
 801143e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011440:	b2d2      	uxtb	r2, r2
 8011442:	3338      	adds	r3, #56	@ 0x38
 8011444:	443b      	add	r3, r7
 8011446:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	0e1a      	lsrs	r2, r3, #24
 801144e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011450:	1c59      	adds	r1, r3, #1
 8011452:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011454:	b2d2      	uxtb	r2, r2
 8011456:	3338      	adds	r3, #56	@ 0x38
 8011458:	443b      	add	r3, r7
 801145a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 801145e:	2300      	movs	r3, #0
 8011460:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 8011462:	883b      	ldrh	r3, [r7, #0]
 8011464:	3b01      	subs	r3, #1
 8011466:	2b06      	cmp	r3, #6
 8011468:	d822      	bhi.n	80114b0 <phhalHw_Pn5180_SetConfig+0x12f0>
 801146a:	a201      	add	r2, pc, #4	@ (adr r2, 8011470 <phhalHw_Pn5180_SetConfig+0x12b0>)
 801146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011470:	0801148d 	.word	0x0801148d
 8011474:	08011493 	.word	0x08011493
 8011478:	080114b1 	.word	0x080114b1
 801147c:	08011499 	.word	0x08011499
 8011480:	0801149f 	.word	0x0801149f
 8011484:	080114a5 	.word	0x080114a5
 8011488:	080114ab 	.word	0x080114ab
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 801148c:	2303      	movs	r3, #3
 801148e:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8011490:	e00f      	b.n	80114b2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 8011492:	2301      	movs	r3, #1
 8011494:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8011496:	e00c      	b.n	80114b2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 8011498:	2302      	movs	r3, #2
 801149a:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 801149c:	e009      	b.n	80114b2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 801149e:	2303      	movs	r3, #3
 80114a0:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 80114a2:	e006      	b.n	80114b2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 80114a4:	2301      	movs	r3, #1
 80114a6:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 80114a8:	e003      	b.n	80114b2 <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 80114aa:	2302      	movs	r3, #2
 80114ac:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 80114ae:	e000      	b.n	80114b2 <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 80114b0:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 80114b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114b4:	019b      	lsls	r3, r3, #6
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 80114ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114bc:	029b      	lsls	r3, r3, #10
 80114be:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	4313      	orrs	r3, r2
 80114c6:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 80114c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114ca:	1c5a      	adds	r2, r3, #1
 80114cc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80114ce:	3338      	adds	r3, #56	@ 0x38
 80114d0:	443b      	add	r3, r7
 80114d2:	2218      	movs	r2, #24
 80114d4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80114d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114da:	1c5a      	adds	r2, r3, #1
 80114dc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80114de:	3338      	adds	r3, #56	@ 0x38
 80114e0:	443b      	add	r3, r7
 80114e2:	2202      	movs	r2, #2
 80114e4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114ec:	1c59      	adds	r1, r3, #1
 80114ee:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80114f0:	b2d2      	uxtb	r2, r2
 80114f2:	3338      	adds	r3, #56	@ 0x38
 80114f4:	443b      	add	r3, r7
 80114f6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	0a1a      	lsrs	r2, r3, #8
 80114fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011500:	1c59      	adds	r1, r3, #1
 8011502:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011504:	b2d2      	uxtb	r2, r2
 8011506:	3338      	adds	r3, #56	@ 0x38
 8011508:	443b      	add	r3, r7
 801150a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	0c1a      	lsrs	r2, r3, #16
 8011512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011514:	1c59      	adds	r1, r3, #1
 8011516:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011518:	b2d2      	uxtb	r2, r2
 801151a:	3338      	adds	r3, #56	@ 0x38
 801151c:	443b      	add	r3, r7
 801151e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	0e1a      	lsrs	r2, r3, #24
 8011526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011528:	1c59      	adds	r1, r3, #1
 801152a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801152c:	b2d2      	uxtb	r2, r2
 801152e:	3338      	adds	r3, #56	@ 0x38
 8011530:	443b      	add	r3, r7
 8011532:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8011536:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011538:	f107 030c 	add.w	r3, r7, #12
 801153c:	4619      	mov	r1, r3
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f001 fe0e 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8011544:	4603      	mov	r3, r0
 8011546:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011548:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801154a:	2b00      	cmp	r3, #0
 801154c:	f000 8265 	beq.w	8011a1a <phhalHw_Pn5180_SetConfig+0x185a>
 8011550:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011552:	e278      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801155a:	2b05      	cmp	r3, #5
 801155c:	d002      	beq.n	8011564 <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 801155e:	f240 2325 	movw	r3, #549	@ 0x225
 8011562:	e270      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 8011564:	883b      	ldrh	r3, [r7, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d004      	beq.n	8011574 <phhalHw_Pn5180_SetConfig+0x13b4>
 801156a:	2b03      	cmp	r3, #3
 801156c:	d002      	beq.n	8011574 <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801156e:	f240 2321 	movw	r3, #545	@ 0x221
 8011572:	e268      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 8011574:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 8011576:	883b      	ldrh	r3, [r7, #0]
 8011578:	2b03      	cmp	r3, #3
 801157a:	f040 8083 	bne.w	8011684 <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 801157e:	2300      	movs	r3, #0
 8011580:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 8011582:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 8011586:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 8011588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801158a:	1c5a      	adds	r2, r3, #1
 801158c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 801158e:	3338      	adds	r3, #56	@ 0x38
 8011590:	443b      	add	r3, r7
 8011592:	2218      	movs	r2, #24
 8011594:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8011598:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801159a:	1c5a      	adds	r2, r3, #1
 801159c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 801159e:	3338      	adds	r3, #56	@ 0x38
 80115a0:	443b      	add	r3, r7
 80115a2:	2203      	movs	r2, #3
 80115a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80115a8:	68ba      	ldr	r2, [r7, #8]
 80115aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80115ac:	1c59      	adds	r1, r3, #1
 80115ae:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80115b0:	b2d2      	uxtb	r2, r2
 80115b2:	3338      	adds	r3, #56	@ 0x38
 80115b4:	443b      	add	r3, r7
 80115b6:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	0a1a      	lsrs	r2, r3, #8
 80115be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80115c0:	1c59      	adds	r1, r3, #1
 80115c2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80115c4:	b2d2      	uxtb	r2, r2
 80115c6:	3338      	adds	r3, #56	@ 0x38
 80115c8:	443b      	add	r3, r7
 80115ca:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	0c1a      	lsrs	r2, r3, #16
 80115d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80115d4:	1c59      	adds	r1, r3, #1
 80115d6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80115d8:	b2d2      	uxtb	r2, r2
 80115da:	3338      	adds	r3, #56	@ 0x38
 80115dc:	443b      	add	r3, r7
 80115de:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	0e1a      	lsrs	r2, r3, #24
 80115e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80115e8:	1c59      	adds	r1, r3, #1
 80115ea:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80115ec:	b2d2      	uxtb	r2, r2
 80115ee:	3338      	adds	r3, #56	@ 0x38
 80115f0:	443b      	add	r3, r7
 80115f2:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 80115f6:	2300      	movs	r3, #0
 80115f8:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 80115fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80115fc:	1c5a      	adds	r2, r3, #1
 80115fe:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8011600:	3338      	adds	r3, #56	@ 0x38
 8011602:	443b      	add	r3, r7
 8011604:	2218      	movs	r2, #24
 8011606:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 801160a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8011610:	3338      	adds	r3, #56	@ 0x38
 8011612:	443b      	add	r3, r7
 8011614:	2202      	movs	r2, #2
 8011616:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801161a:	68ba      	ldr	r2, [r7, #8]
 801161c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801161e:	1c59      	adds	r1, r3, #1
 8011620:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011622:	b2d2      	uxtb	r2, r2
 8011624:	3338      	adds	r3, #56	@ 0x38
 8011626:	443b      	add	r3, r7
 8011628:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	0a1a      	lsrs	r2, r3, #8
 8011630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011632:	1c59      	adds	r1, r3, #1
 8011634:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011636:	b2d2      	uxtb	r2, r2
 8011638:	3338      	adds	r3, #56	@ 0x38
 801163a:	443b      	add	r3, r7
 801163c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	0c1a      	lsrs	r2, r3, #16
 8011644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011646:	1c59      	adds	r1, r3, #1
 8011648:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801164a:	b2d2      	uxtb	r2, r2
 801164c:	3338      	adds	r3, #56	@ 0x38
 801164e:	443b      	add	r3, r7
 8011650:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	0e1a      	lsrs	r2, r3, #24
 8011658:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801165a:	1c59      	adds	r1, r3, #1
 801165c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801165e:	b2d2      	uxtb	r2, r2
 8011660:	3338      	adds	r3, #56	@ 0x38
 8011662:	443b      	add	r3, r7
 8011664:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8011668:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801166a:	f107 030c 	add.w	r3, r7, #12
 801166e:	4619      	mov	r1, r3
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f001 fd75 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8011676:	4603      	mov	r3, r0
 8011678:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801167a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801167c:	2b00      	cmp	r3, #0
 801167e:	d003      	beq.n	8011688 <phhalHw_Pn5180_SetConfig+0x14c8>
 8011680:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011682:	e1e0      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 8011684:	bf00      	nop
 8011686:	e1dd      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 8011688:	bf00      	nop
        }

        break;
 801168a:	e1db      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 801168c:	883a      	ldrh	r2, [r7, #0]
 801168e:	f240 1303 	movw	r3, #259	@ 0x103
 8011692:	4013      	ands	r3, r2
 8011694:	2b00      	cmp	r3, #0
 8011696:	d102      	bne.n	801169e <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011698:	f240 2321 	movw	r3, #545	@ 0x221
 801169c:	e1d3      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 801169e:	2300      	movs	r3, #0
 80116a0:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 80116a2:	2300      	movs	r3, #0
 80116a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 80116a6:	883b      	ldrh	r3, [r7, #0]
 80116a8:	f003 0301 	and.w	r3, r3, #1
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d015      	beq.n	80116dc <phhalHw_Pn5180_SetConfig+0x151c>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116b6:	2b06      	cmp	r3, #6
 80116b8:	d110      	bne.n	80116dc <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 80116ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116bc:	f043 0304 	orr.w	r3, r3, #4
 80116c0:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 80116c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116c4:	f043 0302 	orr.w	r3, r3, #2
 80116c8:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 80116ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116cc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80116d0:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 80116d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116d4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80116d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80116da:	e008      	b.n	80116ee <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 80116dc:	883b      	ldrh	r3, [r7, #0]
 80116de:	f003 0302 	and.w	r3, r3, #2
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d003      	beq.n	80116ee <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 80116e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e8:	f043 0304 	orr.w	r3, r3, #4
 80116ec:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 80116ee:	883b      	ldrh	r3, [r7, #0]
 80116f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d004      	beq.n	8011702 <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 80116f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116fa:	f043 0302 	orr.w	r3, r3, #2
 80116fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011700:	e003      	b.n	801170a <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 8011702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011704:	f043 0302 	orr.w	r3, r3, #2
 8011708:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011710:	2b06      	cmp	r3, #6
 8011712:	d10c      	bne.n	801172e <phhalHw_Pn5180_SetConfig+0x156e>
 8011714:	883b      	ldrh	r3, [r7, #0]
 8011716:	f003 0302 	and.w	r3, r3, #2
 801171a:	2b00      	cmp	r3, #0
 801171c:	d007      	beq.n	801172e <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 801171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011720:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8011724:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 8011726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011728:	f043 0318 	orr.w	r3, r3, #24
 801172c:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 801172e:	2300      	movs	r3, #0
 8011730:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 8011732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011734:	43db      	mvns	r3, r3
 8011736:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8011738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 801173e:	3338      	adds	r3, #56	@ 0x38
 8011740:	443b      	add	r3, r7
 8011742:	2219      	movs	r2, #25
 8011744:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8011748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 801174e:	3338      	adds	r3, #56	@ 0x38
 8011750:	443b      	add	r3, r7
 8011752:	2203      	movs	r2, #3
 8011754:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011758:	68ba      	ldr	r2, [r7, #8]
 801175a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801175c:	1c59      	adds	r1, r3, #1
 801175e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011760:	b2d2      	uxtb	r2, r2
 8011762:	3338      	adds	r3, #56	@ 0x38
 8011764:	443b      	add	r3, r7
 8011766:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	0a1a      	lsrs	r2, r3, #8
 801176e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011770:	1c59      	adds	r1, r3, #1
 8011772:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011774:	b2d2      	uxtb	r2, r2
 8011776:	3338      	adds	r3, #56	@ 0x38
 8011778:	443b      	add	r3, r7
 801177a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	0c1a      	lsrs	r2, r3, #16
 8011782:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011784:	1c59      	adds	r1, r3, #1
 8011786:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011788:	b2d2      	uxtb	r2, r2
 801178a:	3338      	adds	r3, #56	@ 0x38
 801178c:	443b      	add	r3, r7
 801178e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	0e1a      	lsrs	r2, r3, #24
 8011796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011798:	1c59      	adds	r1, r3, #1
 801179a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801179c:	b2d2      	uxtb	r2, r2
 801179e:	3338      	adds	r3, #56	@ 0x38
 80117a0:	443b      	add	r3, r7
 80117a2:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 80117a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a8:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 80117aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117ac:	1c5a      	adds	r2, r3, #1
 80117ae:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80117b0:	3338      	adds	r3, #56	@ 0x38
 80117b2:	443b      	add	r3, r7
 80117b4:	2219      	movs	r2, #25
 80117b6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80117ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117bc:	1c5a      	adds	r2, r3, #1
 80117be:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80117c0:	3338      	adds	r3, #56	@ 0x38
 80117c2:	443b      	add	r3, r7
 80117c4:	2202      	movs	r2, #2
 80117c6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117ce:	1c59      	adds	r1, r3, #1
 80117d0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80117d2:	b2d2      	uxtb	r2, r2
 80117d4:	3338      	adds	r3, #56	@ 0x38
 80117d6:	443b      	add	r3, r7
 80117d8:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	0a1a      	lsrs	r2, r3, #8
 80117e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117e2:	1c59      	adds	r1, r3, #1
 80117e4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80117e6:	b2d2      	uxtb	r2, r2
 80117e8:	3338      	adds	r3, #56	@ 0x38
 80117ea:	443b      	add	r3, r7
 80117ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	0c1a      	lsrs	r2, r3, #16
 80117f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117f6:	1c59      	adds	r1, r3, #1
 80117f8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80117fa:	b2d2      	uxtb	r2, r2
 80117fc:	3338      	adds	r3, #56	@ 0x38
 80117fe:	443b      	add	r3, r7
 8011800:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	0e1a      	lsrs	r2, r3, #24
 8011808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801180a:	1c59      	adds	r1, r3, #1
 801180c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801180e:	b2d2      	uxtb	r2, r2
 8011810:	3338      	adds	r3, #56	@ 0x38
 8011812:	443b      	add	r3, r7
 8011814:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8011818:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801181a:	f107 030c 	add.w	r3, r7, #12
 801181e:	4619      	mov	r1, r3
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f001 fc9d 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8011826:	4603      	mov	r3, r0
 8011828:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801182a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801182c:	2b00      	cmp	r3, #0
 801182e:	f000 80f6 	beq.w	8011a1e <phhalHw_Pn5180_SetConfig+0x185e>
 8011832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011834:	e107      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 8011836:	883b      	ldrh	r3, [r7, #0]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d005      	beq.n	8011848 <phhalHw_Pn5180_SetConfig+0x1688>
 801183c:	883b      	ldrh	r3, [r7, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d002      	beq.n	8011848 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011842:	f240 2321 	movw	r3, #545	@ 0x221
 8011846:	e0fe      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 8011848:	883b      	ldrh	r3, [r7, #0]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d111      	bne.n	8011872 <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 801184e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011852:	2100      	movs	r1, #0
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f001 fb97 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 801185a:	4603      	mov	r3, r0
 801185c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801185e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011860:	2b00      	cmp	r3, #0
 8011862:	d001      	beq.n	8011868 <phhalHw_Pn5180_SetConfig+0x16a8>
 8011864:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011866:	e0ee      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2201      	movs	r2, #1
 801186c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 8011870:	e0e8      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8011872:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8011876:	2100      	movs	r1, #0
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f001 fbfb 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801187e:	4603      	mov	r3, r0
 8011880:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011884:	2b00      	cmp	r3, #0
 8011886:	d001      	beq.n	801188c <phhalHw_Pn5180_SetConfig+0x16cc>
 8011888:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801188a:	e0dc      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 8011894:	e0d6      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 8011896:	883b      	ldrh	r3, [r7, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d101      	bne.n	80118a0 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 801189c:	2300      	movs	r3, #0
 801189e:	e0d2      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2201      	movs	r2, #1
 80118a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 80118a8:	2300      	movs	r3, #0
 80118aa:	2202      	movs	r2, #2
 80118ac:	2100      	movs	r1, #0
 80118ae:	4868      	ldr	r0, [pc, #416]	@ (8011a50 <phhalHw_Pn5180_SetConfig+0x1890>)
 80118b0:	f00a fc90 	bl	801c1d4 <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 80118b4:	883b      	ldrh	r3, [r7, #0]
 80118b6:	4a67      	ldr	r2, [pc, #412]	@ (8011a54 <phhalHw_Pn5180_SetConfig+0x1894>)
 80118b8:	4619      	mov	r1, r3
 80118ba:	4867      	ldr	r0, [pc, #412]	@ (8011a58 <phhalHw_Pn5180_SetConfig+0x1898>)
 80118bc:	f00a fa64 	bl	801bd88 <phDriver_TimerStart>
 80118c0:	4603      	mov	r3, r0
 80118c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80118c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	f000 80ab 	beq.w	8011a22 <phhalHw_Pn5180_SetConfig+0x1862>
 80118cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80118ce:	e0ba      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 80118d0:	883b      	ldrh	r3, [r7, #0]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d107      	bne.n	80118e6 <phhalHw_Pn5180_SetConfig+0x1726>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80118dc:	2b04      	cmp	r3, #4
 80118de:	d002      	beq.n	80118e6 <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 80118e0:	f240 2325 	movw	r3, #549	@ 0x225
 80118e4:	e0af      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80118e6:	883b      	ldrh	r3, [r7, #0]
 80118e8:	2201      	movs	r2, #1
 80118ea:	4619      	mov	r1, r3
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f002 fea1 	bl	8014634 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 80118f2:	4603      	mov	r3, r0
 80118f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80118f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 8094 	beq.w	8011a26 <phhalHw_Pn5180_SetConfig+0x1866>
 80118fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011900:	e0a1      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011902:	883b      	ldrh	r3, [r7, #0]
 8011904:	2202      	movs	r2, #2
 8011906:	4619      	mov	r1, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f002 fe93 	bl	8014634 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 801190e:	4603      	mov	r3, r0
 8011910:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011912:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011914:	2b00      	cmp	r3, #0
 8011916:	f000 8088 	beq.w	8011a2a <phhalHw_Pn5180_SetConfig+0x186a>
 801191a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801191c:	e093      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 801191e:	883b      	ldrh	r3, [r7, #0]
 8011920:	2204      	movs	r2, #4
 8011922:	4619      	mov	r1, r3
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f002 fe85 	bl	8014634 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 801192a:	4603      	mov	r3, r0
 801192c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801192e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011930:	2b00      	cmp	r3, #0
 8011932:	d07c      	beq.n	8011a2e <phhalHw_Pn5180_SetConfig+0x186e>
 8011934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011936:	e086      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011938:	883b      	ldrh	r3, [r7, #0]
 801193a:	2208      	movs	r2, #8
 801193c:	4619      	mov	r1, r3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f002 fe78 	bl	8014634 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 8011944:	4603      	mov	r3, r0
 8011946:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011948:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801194a:	2b00      	cmp	r3, #0
 801194c:	d071      	beq.n	8011a32 <phhalHw_Pn5180_SetConfig+0x1872>
 801194e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011950:	e079      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011952:	883b      	ldrh	r3, [r7, #0]
 8011954:	2210      	movs	r2, #16
 8011956:	4619      	mov	r1, r3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f002 fe6b 	bl	8014634 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 801195e:	4603      	mov	r3, r0
 8011960:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011964:	2b00      	cmp	r3, #0
 8011966:	d066      	beq.n	8011a36 <phhalHw_Pn5180_SetConfig+0x1876>
 8011968:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801196a:	e06c      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 801196c:	8839      	ldrh	r1, [r7, #0]
 801196e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8011972:	2208      	movs	r2, #8
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f002 fea9 	bl	80146cc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 801197a:	4603      	mov	r3, r0
 801197c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801197e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011980:	2b00      	cmp	r3, #0
 8011982:	d05a      	beq.n	8011a3a <phhalHw_Pn5180_SetConfig+0x187a>
 8011984:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011986:	e05e      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011988:	8839      	ldrh	r1, [r7, #0]
 801198a:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 801198e:	2210      	movs	r2, #16
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f002 fe9b 	bl	80146cc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 8011996:	4603      	mov	r3, r0
 8011998:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801199a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801199c:	2b00      	cmp	r3, #0
 801199e:	d04e      	beq.n	8011a3e <phhalHw_Pn5180_SetConfig+0x187e>
 80119a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80119a2:	e050      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80119a4:	8839      	ldrh	r1, [r7, #0]
 80119a6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80119aa:	2218      	movs	r2, #24
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f002 fe8d 	bl	80146cc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 80119b2:	4603      	mov	r3, r0
 80119b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80119b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d042      	beq.n	8011a42 <phhalHw_Pn5180_SetConfig+0x1882>
 80119bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80119be:	e042      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80119c0:	f240 2323 	movw	r3, #547	@ 0x223
 80119c4:	e03f      	b.n	8011a46 <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 80119c6:	bf00      	nop
 80119c8:	e03c      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119ca:	bf00      	nop
 80119cc:	e03a      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119ce:	bf00      	nop
 80119d0:	e038      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119d2:	bf00      	nop
 80119d4:	e036      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119d6:	bf00      	nop
 80119d8:	e034      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119da:	bf00      	nop
 80119dc:	e032      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119de:	bf00      	nop
 80119e0:	e030      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119e2:	bf00      	nop
 80119e4:	e02e      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119e6:	bf00      	nop
 80119e8:	e02c      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119ea:	bf00      	nop
 80119ec:	e02a      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119ee:	bf00      	nop
 80119f0:	e028      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119f2:	bf00      	nop
 80119f4:	e026      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119f6:	bf00      	nop
 80119f8:	e024      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119fa:	bf00      	nop
 80119fc:	e022      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 80119fe:	bf00      	nop
 8011a00:	e020      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a02:	bf00      	nop
 8011a04:	e01e      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a06:	bf00      	nop
 8011a08:	e01c      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a0a:	bf00      	nop
 8011a0c:	e01a      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a0e:	bf00      	nop
 8011a10:	e018      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a12:	bf00      	nop
 8011a14:	e016      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a16:	bf00      	nop
 8011a18:	e014      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a1a:	bf00      	nop
 8011a1c:	e012      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a1e:	bf00      	nop
 8011a20:	e010      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a22:	bf00      	nop
 8011a24:	e00e      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a26:	bf00      	nop
 8011a28:	e00c      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a2a:	bf00      	nop
 8011a2c:	e00a      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a2e:	bf00      	nop
 8011a30:	e008      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a32:	bf00      	nop
 8011a34:	e006      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a36:	bf00      	nop
 8011a38:	e004      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a3a:	bf00      	nop
 8011a3c:	e002      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a3e:	bf00      	nop
 8011a40:	e000      	b.n	8011a44 <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 8011a42:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3738      	adds	r7, #56	@ 0x38
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	20001be0 	.word	0x20001be0
 8011a54:	0800f2cd 	.word	0x0800f2cd
 8011a58:	000f4240 	.word	0x000f4240

08011a5c <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b08a      	sub	sp, #40	@ 0x28
 8011a60:	af02      	add	r7, sp, #8
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	460b      	mov	r3, r1
 8011a66:	607a      	str	r2, [r7, #4]
 8011a68:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d101      	bne.n	8011a7c <phhalHw_Pn5180_GetConfig+0x20>
 8011a78:	2321      	movs	r3, #33	@ 0x21
 8011a7a:	e281      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 8011a7c:	897b      	ldrh	r3, [r7, #10]
 8011a7e:	f248 0250 	movw	r2, #32848	@ 0x8050
 8011a82:	4293      	cmp	r3, r2
 8011a84:	f000 817f 	beq.w	8011d86 <phhalHw_Pn5180_GetConfig+0x32a>
 8011a88:	f248 0250 	movw	r2, #32848	@ 0x8050
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	f300 8273 	bgt.w	8011f78 <phhalHw_Pn5180_GetConfig+0x51c>
 8011a92:	f248 0212 	movw	r2, #32786	@ 0x8012
 8011a96:	4293      	cmp	r3, r2
 8011a98:	f000 814c 	beq.w	8011d34 <phhalHw_Pn5180_GetConfig+0x2d8>
 8011a9c:	f248 0212 	movw	r2, #32786	@ 0x8012
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	f300 8269 	bgt.w	8011f78 <phhalHw_Pn5180_GetConfig+0x51c>
 8011aa6:	f248 0211 	movw	r2, #32785	@ 0x8011
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	f000 8131 	beq.w	8011d12 <phhalHw_Pn5180_GetConfig+0x2b6>
 8011ab0:	f248 0211 	movw	r2, #32785	@ 0x8011
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	f300 825f 	bgt.w	8011f78 <phhalHw_Pn5180_GetConfig+0x51c>
 8011aba:	2b5f      	cmp	r3, #95	@ 0x5f
 8011abc:	f300 80ca 	bgt.w	8011c54 <phhalHw_Pn5180_GetConfig+0x1f8>
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	f2c0 8259 	blt.w	8011f78 <phhalHw_Pn5180_GetConfig+0x51c>
 8011ac6:	2b5f      	cmp	r3, #95	@ 0x5f
 8011ac8:	f200 8256 	bhi.w	8011f78 <phhalHw_Pn5180_GetConfig+0x51c>
 8011acc:	a201      	add	r2, pc, #4	@ (adr r2, 8011ad4 <phhalHw_Pn5180_GetConfig+0x78>)
 8011ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ad2:	bf00      	nop
 8011ad4:	08011c7b 	.word	0x08011c7b
 8011ad8:	08011c7b 	.word	0x08011c7b
 8011adc:	08011c7b 	.word	0x08011c7b
 8011ae0:	08011c7b 	.word	0x08011c7b
 8011ae4:	08011c8b 	.word	0x08011c8b
 8011ae8:	08011f79 	.word	0x08011f79
 8011aec:	08011c7b 	.word	0x08011c7b
 8011af0:	08011c7b 	.word	0x08011c7b
 8011af4:	08011c7b 	.word	0x08011c7b
 8011af8:	08011c7b 	.word	0x08011c7b
 8011afc:	08011c7b 	.word	0x08011c7b
 8011b00:	08011c7b 	.word	0x08011c7b
 8011b04:	08011c7b 	.word	0x08011c7b
 8011b08:	08011c95 	.word	0x08011c95
 8011b0c:	08011cd9 	.word	0x08011cd9
 8011b10:	08011c7b 	.word	0x08011c7b
 8011b14:	08011f79 	.word	0x08011f79
 8011b18:	08011f79 	.word	0x08011f79
 8011b1c:	08011f79 	.word	0x08011f79
 8011b20:	08011d65 	.word	0x08011d65
 8011b24:	08011d6f 	.word	0x08011d6f
 8011b28:	08011f79 	.word	0x08011f79
 8011b2c:	08011f79 	.word	0x08011f79
 8011b30:	08011f79 	.word	0x08011f79
 8011b34:	08011f79 	.word	0x08011f79
 8011b38:	08011f79 	.word	0x08011f79
 8011b3c:	08011f79 	.word	0x08011f79
 8011b40:	08011f79 	.word	0x08011f79
 8011b44:	08011f79 	.word	0x08011f79
 8011b48:	08011f79 	.word	0x08011f79
 8011b4c:	08011f79 	.word	0x08011f79
 8011b50:	08011f79 	.word	0x08011f79
 8011b54:	08011d79 	.word	0x08011d79
 8011b58:	08011f2d 	.word	0x08011f2d
 8011b5c:	08011f79 	.word	0x08011f79
 8011b60:	08011f79 	.word	0x08011f79
 8011b64:	08011f79 	.word	0x08011f79
 8011b68:	08011f79 	.word	0x08011f79
 8011b6c:	08011f79 	.word	0x08011f79
 8011b70:	08011f79 	.word	0x08011f79
 8011b74:	08011f79 	.word	0x08011f79
 8011b78:	08011f79 	.word	0x08011f79
 8011b7c:	08011f79 	.word	0x08011f79
 8011b80:	08011f79 	.word	0x08011f79
 8011b84:	08011f79 	.word	0x08011f79
 8011b88:	08011f79 	.word	0x08011f79
 8011b8c:	08011d95 	.word	0x08011d95
 8011b90:	08011c8b 	.word	0x08011c8b
 8011b94:	08011daf 	.word	0x08011daf
 8011b98:	08011db9 	.word	0x08011db9
 8011b9c:	08011de7 	.word	0x08011de7
 8011ba0:	08011e15 	.word	0x08011e15
 8011ba4:	08011e43 	.word	0x08011e43
 8011ba8:	08011f79 	.word	0x08011f79
 8011bac:	08011f79 	.word	0x08011f79
 8011bb0:	08011f79 	.word	0x08011f79
 8011bb4:	08011f79 	.word	0x08011f79
 8011bb8:	08011f79 	.word	0x08011f79
 8011bbc:	08011f79 	.word	0x08011f79
 8011bc0:	08011f79 	.word	0x08011f79
 8011bc4:	08011f79 	.word	0x08011f79
 8011bc8:	08011f79 	.word	0x08011f79
 8011bcc:	08011f79 	.word	0x08011f79
 8011bd0:	08011f79 	.word	0x08011f79
 8011bd4:	08011f79 	.word	0x08011f79
 8011bd8:	08011f79 	.word	0x08011f79
 8011bdc:	08011f79 	.word	0x08011f79
 8011be0:	08011f79 	.word	0x08011f79
 8011be4:	08011f79 	.word	0x08011f79
 8011be8:	08011f79 	.word	0x08011f79
 8011bec:	08011f79 	.word	0x08011f79
 8011bf0:	08011f79 	.word	0x08011f79
 8011bf4:	08011f79 	.word	0x08011f79
 8011bf8:	08011f79 	.word	0x08011f79
 8011bfc:	08011f79 	.word	0x08011f79
 8011c00:	08011f79 	.word	0x08011f79
 8011c04:	08011f79 	.word	0x08011f79
 8011c08:	08011f79 	.word	0x08011f79
 8011c0c:	08011f79 	.word	0x08011f79
 8011c10:	08011f79 	.word	0x08011f79
 8011c14:	08011f79 	.word	0x08011f79
 8011c18:	08011f79 	.word	0x08011f79
 8011c1c:	08011ec1 	.word	0x08011ec1
 8011c20:	08011e8d 	.word	0x08011e8d
 8011c24:	08011eb3 	.word	0x08011eb3
 8011c28:	08011ef7 	.word	0x08011ef7
 8011c2c:	08011f79 	.word	0x08011f79
 8011c30:	08011f79 	.word	0x08011f79
 8011c34:	08011f79 	.word	0x08011f79
 8011c38:	08011ea9 	.word	0x08011ea9
 8011c3c:	08011c5f 	.word	0x08011c5f
 8011c40:	08011f79 	.word	0x08011f79
 8011c44:	08011e9b 	.word	0x08011e9b
 8011c48:	08011f79 	.word	0x08011f79
 8011c4c:	08011c6d 	.word	0x08011c6d
 8011c50:	08011f3b 	.word	0x08011f3b
 8011c54:	f248 0210 	movw	r2, #32784	@ 0x8010
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d055      	beq.n	8011d08 <phhalHw_Pn5180_GetConfig+0x2ac>
 8011c5c:	e18c      	b.n	8011f78 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011c64:	461a      	mov	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	801a      	strh	r2, [r3, #0]
        break;
 8011c6a:	e188      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011c72:	461a      	mov	r2, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	801a      	strh	r2, [r3, #0]
        break;
 8011c78:	e181      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 8011c7a:	897a      	ldrh	r2, [r7, #10]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	322c      	adds	r2, #44	@ 0x2c
 8011c80:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	801a      	strh	r2, [r3, #0]
        break;
 8011c88:	e179      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	801a      	strh	r2, [r3, #0]
        break;
 8011c92:	e174      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d107      	bne.n	8011cae <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 8011c9e:	897a      	ldrh	r2, [r7, #10]
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	322c      	adds	r2, #44	@ 0x2c
 8011ca4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 8011cac:	e167      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011cb4:	2b41      	cmp	r3, #65	@ 0x41
 8011cb6:	d902      	bls.n	8011cbe <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011cb8:	f240 2322 	movw	r3, #546	@ 0x222
 8011cbc:	e160      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	0152      	lsls	r2, r2, #5
 8011cc8:	1ad2      	subs	r2, r2, r3
 8011cca:	0092      	lsls	r2, r2, #2
 8011ccc:	4413      	add	r3, r2
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	801a      	strh	r2, [r3, #0]
        break;
 8011cd6:	e152      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d107      	bne.n	8011cf2 <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 8011ce2:	897a      	ldrh	r2, [r7, #10]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	322c      	adds	r2, #44	@ 0x2c
 8011ce8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 8011cf0:	e145      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011cf8:	4a9b      	ldr	r2, [pc, #620]	@ (8011f68 <phhalHw_Pn5180_GetConfig+0x50c>)
 8011cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8011cfe:	099b      	lsrs	r3, r3, #6
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	801a      	strh	r2, [r3, #0]
        break;
 8011d06:	e13a      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	801a      	strh	r2, [r3, #0]
        break;
 8011d10:	e135      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6a1b      	ldr	r3, [r3, #32]
 8011d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d1a:	d302      	bcc.n	8011d22 <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011d1c:	f240 2322 	movw	r3, #546	@ 0x222
 8011d20:	e12e      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	6a1b      	ldr	r3, [r3, #32]
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	621a      	str	r2, [r3, #32]
        break;
 8011d32:	e124      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6a1b      	ldr	r3, [r3, #32]
 8011d38:	4a8c      	ldr	r2, [pc, #560]	@ (8011f6c <phhalHw_Pn5180_GetConfig+0x510>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d905      	bls.n	8011d4a <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011d44:	f240 2322 	movw	r3, #546	@ 0x222
 8011d48:	e11a      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	6a1b      	ldr	r3, [r3, #32]
 8011d4e:	4a86      	ldr	r2, [pc, #536]	@ (8011f68 <phhalHw_Pn5180_GetConfig+0x50c>)
 8011d50:	fba2 2303 	umull	r2, r3, r2, r3
 8011d54:	099b      	lsrs	r3, r3, #6
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	621a      	str	r2, [r3, #32]
        break;
 8011d62:	e10c      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	801a      	strh	r2, [r3, #0]
        break;
 8011d6c:	e107      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	801a      	strh	r2, [r3, #0]
        break;
 8011d76:	e102      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011d7e:	461a      	mov	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	801a      	strh	r2, [r3, #0]
        break;
 8011d84:	e0fb      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	801a      	strh	r2, [r3, #0]
        break;
 8011d92:	e0f4      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d103      	bne.n	8011da6 <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 8011da4:	e0eb      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2201      	movs	r2, #1
 8011daa:	801a      	strh	r2, [r3, #0]
        break;
 8011dac:	e0e7      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	8bda      	ldrh	r2, [r3, #30]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	801a      	strh	r2, [r3, #0]
        break;
 8011db6:	e0e2      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011db8:	f107 0116 	add.w	r1, r7, #22
 8011dbc:	f107 0218 	add.w	r2, r7, #24
 8011dc0:	f107 0314 	add.w	r3, r7, #20
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	2101      	movs	r1, #1
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f002 f873 	bl	8013eb6 <phhalHw_Pn5180_GetRxBuffer>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	83fb      	strh	r3, [r7, #30]
 8011dd4:	8bfb      	ldrh	r3, [r7, #30]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d001      	beq.n	8011dde <phhalHw_Pn5180_GetConfig+0x382>
 8011dda:	8bfb      	ldrh	r3, [r7, #30]
 8011ddc:	e0d0      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 8011dde:	8aba      	ldrh	r2, [r7, #20]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	801a      	strh	r2, [r3, #0]
        break;
 8011de4:	e0cb      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011de6:	f107 0116 	add.w	r1, r7, #22
 8011dea:	f107 0218 	add.w	r2, r7, #24
 8011dee:	f107 0314 	add.w	r3, r7, #20
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	460b      	mov	r3, r1
 8011df6:	2101      	movs	r1, #1
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f002 f820 	bl	8013e3e <phhalHw_Pn5180_GetTxBuffer>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	83fb      	strh	r3, [r7, #30]
 8011e02:	8bfb      	ldrh	r3, [r7, #30]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <phhalHw_Pn5180_GetConfig+0x3b0>
 8011e08:	8bfb      	ldrh	r3, [r7, #30]
 8011e0a:	e0b9      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 8011e0c:	8aba      	ldrh	r2, [r7, #20]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	801a      	strh	r2, [r3, #0]
        break;
 8011e12:	e0b4      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011e14:	f107 0116 	add.w	r1, r7, #22
 8011e18:	f107 0218 	add.w	r2, r7, #24
 8011e1c:	f107 0314 	add.w	r3, r7, #20
 8011e20:	9300      	str	r3, [sp, #0]
 8011e22:	460b      	mov	r3, r1
 8011e24:	2101      	movs	r1, #1
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f002 f809 	bl	8013e3e <phhalHw_Pn5180_GetTxBuffer>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	83fb      	strh	r3, [r7, #30]
 8011e30:	8bfb      	ldrh	r3, [r7, #30]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d001      	beq.n	8011e3a <phhalHw_Pn5180_GetConfig+0x3de>
 8011e36:	8bfb      	ldrh	r3, [r7, #30]
 8011e38:	e0a2      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 8011e3a:	8afa      	ldrh	r2, [r7, #22]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	801a      	strh	r2, [r3, #0]
        break;
 8011e40:	e09d      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 8011e42:	f107 0116 	add.w	r1, r7, #22
 8011e46:	f107 0218 	add.w	r2, r7, #24
 8011e4a:	f107 0314 	add.w	r3, r7, #20
 8011e4e:	9300      	str	r3, [sp, #0]
 8011e50:	460b      	mov	r3, r1
 8011e52:	2101      	movs	r1, #1
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f001 fff2 	bl	8013e3e <phhalHw_Pn5180_GetTxBuffer>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	83fb      	strh	r3, [r7, #30]
 8011e5e:	8bfb      	ldrh	r3, [r7, #30]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d001      	beq.n	8011e68 <phhalHw_Pn5180_GetConfig+0x40c>
 8011e64:	8bfb      	ldrh	r3, [r7, #30]
 8011e66:	e08b      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	8a1b      	ldrh	r3, [r3, #16]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d302      	bcc.n	8011e7a <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011e74:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011e78:	e082      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8011e80:	4413      	add	r3, r2
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	461a      	mov	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	801a      	strh	r2, [r3, #0]
        break;
 8011e8a:	e078      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011e92:	461a      	mov	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	801a      	strh	r2, [r3, #0]
        break;
 8011e98:	e071      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	801a      	strh	r2, [r3, #0]
        break;
 8011ea6:	e06a      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	801a      	strh	r2, [r3, #0]
        break;
 8011eb0:	e065      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011eb8:	461a      	mov	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	801a      	strh	r2, [r3, #0]
        break;
 8011ebe:	e05e      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011ec0:	f107 0310 	add.w	r3, r7, #16
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	211d      	movs	r1, #29
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f001 f9fb 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	83fb      	strh	r3, [r7, #30]
 8011ed2:	8bfb      	ldrh	r3, [r7, #30]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d001      	beq.n	8011edc <phhalHw_Pn5180_GetConfig+0x480>
 8011ed8:	8bfb      	ldrh	r3, [r7, #30]
 8011eda:	e051      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d003      	beq.n	8011eee <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 8011eec:	e047      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	801a      	strh	r2, [r3, #0]
        break;
 8011ef4:	e043      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011ef6:	f107 0310 	add.w	r3, r7, #16
 8011efa:	461a      	mov	r2, r3
 8011efc:	2100      	movs	r1, #0
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f001 f9e0 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 8011f04:	4603      	mov	r3, r0
 8011f06:	83fb      	strh	r3, [r7, #30]
 8011f08:	8bfb      	ldrh	r3, [r7, #30]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d001      	beq.n	8011f12 <phhalHw_Pn5180_GetConfig+0x4b6>
 8011f0e:	8bfb      	ldrh	r3, [r7, #30]
 8011f10:	e036      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d003      	beq.n	8011f24 <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2201      	movs	r2, #1
 8011f20:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 8011f22:	e02c      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	801a      	strh	r2, [r3, #0]
        break;
 8011f2a:	e028      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f32:	461a      	mov	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	801a      	strh	r2, [r3, #0]
        break;
 8011f38:	e021      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 8011f3a:	f107 0310 	add.w	r3, r7, #16
 8011f3e:	461a      	mov	r2, r3
 8011f40:	211d      	movs	r1, #29
 8011f42:	68f8      	ldr	r0, [r7, #12]
 8011f44:	f001 f9be 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	83fb      	strh	r3, [r7, #30]
 8011f4c:	8bfb      	ldrh	r3, [r7, #30]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d001      	beq.n	8011f56 <phhalHw_Pn5180_GetConfig+0x4fa>
 8011f52:	8bfb      	ldrh	r3, [r7, #30]
 8011f54:	e014      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d007      	beq.n	8011f70 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2201      	movs	r2, #1
 8011f64:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 8011f66:	e00a      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>
 8011f68:	10624dd3 	.word	0x10624dd3
 8011f6c:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	801a      	strh	r2, [r3, #0]
        break;
 8011f76:	e002      	b.n	8011f7e <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8011f78:	f240 2323 	movw	r3, #547	@ 0x223
 8011f7c:	e000      	b.n	8011f80 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3720      	adds	r7, #32
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	460b      	mov	r3, r1
 8011f92:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 8011f94:	2300      	movs	r3, #0
 8011f96:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 8011fa0:	887b      	ldrh	r3, [r7, #2]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d146      	bne.n	8012034 <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 8011fa6:	f107 030c 	add.w	r3, r7, #12
 8011faa:	461a      	mov	r2, r3
 8011fac:	210e      	movs	r1, #14
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fd54 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	81fb      	strh	r3, [r7, #14]
 8011fb8:	89fb      	ldrh	r3, [r7, #14]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d001      	beq.n	8011fc2 <phhalHw_Pn5180_SetMinFDT+0x3a>
 8011fbe:	89fb      	ldrh	r3, [r7, #14]
 8011fc0:	e04a      	b.n	8012058 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 8011fc2:	89ba      	ldrh	r2, [r7, #12]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 8011fc8:	f107 030a 	add.w	r3, r7, #10
 8011fcc:	461a      	mov	r2, r3
 8011fce:	2109      	movs	r1, #9
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff fd43 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	81fb      	strh	r3, [r7, #14]
 8011fda:	89fb      	ldrh	r3, [r7, #14]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d001      	beq.n	8011fe4 <phhalHw_Pn5180_SetMinFDT+0x5c>
 8011fe0:	89fb      	ldrh	r3, [r7, #14]
 8011fe2:	e039      	b.n	8012058 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 8011fe4:	897b      	ldrh	r3, [r7, #10]
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	d816      	bhi.n	8012018 <phhalHw_Pn5180_SetMinFDT+0x90>
 8011fea:	a201      	add	r2, pc, #4	@ (adr r2, 8011ff0 <phhalHw_Pn5180_SetMinFDT+0x68>)
 8011fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff0:	08012001 	.word	0x08012001
 8011ff4:	08012007 	.word	0x08012007
 8011ff8:	0801200d 	.word	0x0801200d
 8011ffc:	08012013 	.word	0x08012013
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 8012000:	2365      	movs	r3, #101	@ 0x65
 8012002:	81bb      	strh	r3, [r7, #12]
            break;
 8012004:	e009      	b.n	801201a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 8012006:	237f      	movs	r3, #127	@ 0x7f
 8012008:	81bb      	strh	r3, [r7, #12]
            break;
 801200a:	e006      	b.n	801201a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 801200c:	2377      	movs	r3, #119	@ 0x77
 801200e:	81bb      	strh	r3, [r7, #12]
            break;
 8012010:	e003      	b.n	801201a <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 8012012:	2380      	movs	r3, #128	@ 0x80
 8012014:	81bb      	strh	r3, [r7, #12]
            break;
 8012016:	e000      	b.n	801201a <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 8012018:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 801201a:	89bb      	ldrh	r3, [r7, #12]
 801201c:	461a      	mov	r2, r3
 801201e:	210d      	movs	r1, #13
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7fe f8cd 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8012026:	4603      	mov	r3, r0
 8012028:	81fb      	strh	r3, [r7, #14]
 801202a:	89fb      	ldrh	r3, [r7, #14]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d012      	beq.n	8012056 <phhalHw_Pn5180_SetMinFDT+0xce>
 8012030:	89fb      	ldrh	r3, [r7, #14]
 8012032:	e011      	b.n	8012058 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 8012034:	887b      	ldrh	r3, [r7, #2]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10d      	bne.n	8012056 <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801203e:	461a      	mov	r2, r3
 8012040:	210e      	movs	r1, #14
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7fe f8bc 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8012048:	4603      	mov	r3, r0
 801204a:	81fb      	strh	r3, [r7, #14]
 801204c:	89fb      	ldrh	r3, [r7, #14]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d001      	beq.n	8012056 <phhalHw_Pn5180_SetMinFDT+0xce>
 8012052:	89fb      	ldrh	r3, [r7, #14]
 8012054:	e000      	b.n	8012058 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 8012056:	2300      	movs	r3, #0
}
 8012058:	4618      	mov	r0, r3
 801205a:	3710      	adds	r7, #16
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b08a      	sub	sp, #40	@ 0x28
 8012064:	af04      	add	r7, sp, #16
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	4611      	mov	r1, r2
 801206c:	461a      	mov	r2, r3
 801206e:	460b      	mov	r3, r1
 8012070:	80fb      	strh	r3, [r7, #6]
 8012072:	4613      	mov	r3, r2
 8012074:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	789b      	ldrb	r3, [r3, #2]
 801207c:	2b04      	cmp	r3, #4
 801207e:	d10f      	bne.n	80120a0 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6858      	ldr	r0, [r3, #4]
 8012084:	88fa      	ldrh	r2, [r7, #6]
 8012086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012088:	9302      	str	r3, [sp, #8]
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	88bb      	ldrh	r3, [r7, #4]
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	4613      	mov	r3, r2
 8012094:	68ba      	ldr	r2, [r7, #8]
 8012096:	2100      	movs	r1, #0
 8012098:	f009 fee6 	bl	801be68 <phbalReg_Exchange>
 801209c:	4603      	mov	r3, r0
 801209e:	e077      	b.n	8012190 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 80120a0:	bf00      	nop
 80120a2:	2201      	movs	r2, #1
 80120a4:	2102      	movs	r1, #2
 80120a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80120aa:	f009 fe49 	bl	801bd40 <phDriver_PinRead>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d1f6      	bne.n	80120a2 <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	2100      	movs	r1, #0
 80120ba:	4618      	mov	r0, r3
 80120bc:	f000 fea2 	bl	8012e04 <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6858      	ldr	r0, [r3, #4]
 80120c4:	88fa      	ldrh	r2, [r7, #6]
 80120c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c8:	9302      	str	r3, [sp, #8]
 80120ca:	2300      	movs	r3, #0
 80120cc:	9301      	str	r3, [sp, #4]
 80120ce:	88fb      	ldrh	r3, [r7, #6]
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	4613      	mov	r3, r2
 80120d4:	68ba      	ldr	r2, [r7, #8]
 80120d6:	2100      	movs	r1, #0
 80120d8:	f009 fec6 	bl	801be68 <phbalReg_Exchange>
 80120dc:	4603      	mov	r3, r0
 80120de:	82fb      	strh	r3, [r7, #22]
 80120e0:	8afb      	ldrh	r3, [r7, #22]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <phhalHw_Pn5180_BalExchange+0x8a>
 80120e6:	8afb      	ldrh	r3, [r7, #22]
 80120e8:	e052      	b.n	8012190 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d109      	bne.n	8012108 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 80120f4:	bf00      	nop
 80120f6:	2201      	movs	r2, #1
 80120f8:	2102      	movs	r1, #2
 80120fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80120fe:	f009 fe1f 	bl	801bd40 <phDriver_PinRead>
 8012102:	4603      	mov	r3, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d0f6      	beq.n	80120f6 <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	2101      	movs	r1, #1
 801210e:	4618      	mov	r0, r3
 8012110:	f000 fe78 	bl	8012e04 <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 8012114:	88bb      	ldrh	r3, [r7, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d039      	beq.n	801218e <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 801211a:	bf00      	nop
 801211c:	2201      	movs	r2, #1
 801211e:	2102      	movs	r1, #2
 8012120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012124:	f009 fe0c 	bl	801bd40 <phDriver_PinRead>
 8012128:	4603      	mov	r3, r0
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1f6      	bne.n	801211c <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	2100      	movs	r1, #0
 8012134:	4618      	mov	r0, r3
 8012136:	f000 fe65 	bl	8012e04 <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	6858      	ldr	r0, [r3, #4]
 801213e:	88ba      	ldrh	r2, [r7, #4]
 8012140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012142:	9302      	str	r3, [sp, #8]
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	9301      	str	r3, [sp, #4]
 8012148:	88bb      	ldrh	r3, [r7, #4]
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	4613      	mov	r3, r2
 801214e:	2200      	movs	r2, #0
 8012150:	2100      	movs	r1, #0
 8012152:	f009 fe89 	bl	801be68 <phbalReg_Exchange>
 8012156:	4603      	mov	r3, r0
 8012158:	82fb      	strh	r3, [r7, #22]
 801215a:	8afb      	ldrh	r3, [r7, #22]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d001      	beq.n	8012164 <phhalHw_Pn5180_BalExchange+0x104>
 8012160:	8afb      	ldrh	r3, [r7, #22]
 8012162:	e015      	b.n	8012190 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 801216a:	2b01      	cmp	r3, #1
 801216c:	d109      	bne.n	8012182 <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 801216e:	bf00      	nop
 8012170:	2201      	movs	r2, #1
 8012172:	2102      	movs	r1, #2
 8012174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012178:	f009 fde2 	bl	801bd40 <phDriver_PinRead>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d0f6      	beq.n	8012170 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	2101      	movs	r1, #1
 8012188:	4618      	mov	r0, r3
 801218a:	f000 fe3b 	bl	8012e04 <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 801218e:	2300      	movs	r3, #0
}
 8012190:	4618      	mov	r0, r3
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b090      	sub	sp, #64	@ 0x40
 801219c:	af02      	add	r7, sp, #8
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	607a      	str	r2, [r7, #4]
 80121a2:	603b      	str	r3, [r7, #0]
 80121a4:	460b      	mov	r3, r1
 80121a6:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 80121a8:	237f      	movs	r3, #127	@ 0x7f
 80121aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 80121ac:	2300      	movs	r3, #0
 80121ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 80121b0:	2300      	movs	r3, #0
 80121b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 80121b6:	2300      	movs	r3, #0
 80121b8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 80121bc:	2300      	movs	r3, #0
 80121be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 80121c2:	2300      	movs	r3, #0
 80121c4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 80121c8:	2300      	movs	r3, #0
 80121ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 80121ce:	2300      	movs	r3, #0
 80121d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 80121d4:	2300      	movs	r3, #0
 80121d6:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 80121d8:	2200      	movs	r2, #0
 80121da:	215e      	movs	r1, #94	@ 0x5e
 80121dc:	68f8      	ldr	r0, [r7, #12]
 80121de:	f7fd ffef 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80121e2:	4603      	mov	r3, r0
 80121e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80121e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <phhalHw_Pn5180_Autocoll+0x58>
 80121ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80121ee:	e25e      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2200      	movs	r2, #0
 80121f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d008      	beq.n	8012210 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d005      	beq.n	8012210 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d002      	beq.n	8012210 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 801220a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801220c:	2b00      	cmp	r3, #0
 801220e:	d102      	bne.n	8012216 <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012210:	f240 2321 	movw	r3, #545	@ 0x221
 8012214:	e24b      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801221c:	2b01      	cmp	r3, #1
 801221e:	d103      	bne.n	8012228 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 8012220:	2301      	movs	r3, #1
 8012222:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8012226:	e037      	b.n	8012298 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 8012228:	897b      	ldrh	r3, [r7, #10]
 801222a:	f003 0301 	and.w	r3, r3, #1
 801222e:	2b00      	cmp	r3, #0
 8012230:	d005      	beq.n	801223e <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 8012232:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012236:	f043 0301 	orr.w	r3, r3, #1
 801223a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 801223e:	897b      	ldrh	r3, [r7, #10]
 8012240:	f003 0304 	and.w	r3, r3, #4
 8012244:	2b00      	cmp	r3, #0
 8012246:	d005      	beq.n	8012254 <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 8012248:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801224c:	f043 0302 	orr.w	r3, r3, #2
 8012250:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 8012254:	897b      	ldrh	r3, [r7, #10]
 8012256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801225a:	2b00      	cmp	r3, #0
 801225c:	d005      	beq.n	801226a <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 801225e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012262:	f043 0304 	orr.w	r3, r3, #4
 8012266:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 801226a:	897b      	ldrh	r3, [r7, #10]
 801226c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012270:	2b00      	cmp	r3, #0
 8012272:	d005      	beq.n	8012280 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 8012274:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012278:	f043 0308 	orr.w	r3, r3, #8
 801227c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 8012280:	897b      	ldrh	r3, [r7, #10]
 8012282:	f003 0302 	and.w	r3, r3, #2
 8012286:	2b00      	cmp	r3, #0
 8012288:	d104      	bne.n	8012294 <phhalHw_Pn5180_Autocoll+0xfc>
 801228a:	897b      	ldrh	r3, [r7, #10]
 801228c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012290:	2b00      	cmp	r3, #0
 8012292:	d001      	beq.n	8012298 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 8012294:	2300      	movs	r3, #0
 8012296:	e20a      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	2200      	movs	r2, #0
 801229c:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2200      	movs	r2, #0
 80122a2:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2200      	movs	r2, #0
 80122a8:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2200      	movs	r2, #0
 80122b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f003 f9d2 	bl	8015664 <phhalHw_Pn5180_Int_IdleCommand>
 80122c0:	4603      	mov	r3, r0
 80122c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80122c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d001      	beq.n	80122ce <phhalHw_Pn5180_Autocoll+0x136>
 80122ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80122cc:	e1ef      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f001 fd7b 	bl	8013dca <phhalHw_Pn5180_Instr_RfOff>
 80122d4:	4603      	mov	r3, r0
 80122d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80122d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d001      	beq.n	80122e2 <phhalHw_Pn5180_Autocoll+0x14a>
 80122de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80122e0:	e1e5      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 80122e2:	4b9d      	ldr	r3, [pc, #628]	@ (8012558 <phhalHw_Pn5180_Autocoll+0x3c0>)
 80122e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 80122e6:	4a9d      	ldr	r2, [pc, #628]	@ (801255c <phhalHw_Pn5180_Autocoll+0x3c4>)
 80122e8:	2103      	movs	r1, #3
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f000 fdd6 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80122f0:	4603      	mov	r3, r0
 80122f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80122f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d001      	beq.n	80122fe <phhalHw_Pn5180_Autocoll+0x166>
 80122fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80122fc:	e1d7      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012304:	2300      	movs	r3, #0
 8012306:	2201      	movs	r2, #1
 8012308:	2100      	movs	r1, #0
 801230a:	f009 ff63 	bl	801c1d4 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 801230e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012310:	2101      	movs	r1, #1
 8012312:	68f8      	ldr	r0, [r7, #12]
 8012314:	f000 fdc2 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8012318:	4603      	mov	r3, r0
 801231a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801231c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <phhalHw_Pn5180_Autocoll+0x18e>
 8012322:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012324:	e1c3      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 8012326:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 801232a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801232e:	4619      	mov	r1, r3
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f001 fa9f 	bl	8013874 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 8012336:	4603      	mov	r3, r0
 8012338:	853b      	strh	r3, [r7, #40]	@ 0x28
 801233a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801233c:	2b00      	cmp	r3, #0
 801233e:	d001      	beq.n	8012344 <phhalHw_Pn5180_Autocoll+0x1ac>
 8012340:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012342:	e1b4      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 8012344:	f107 0314 	add.w	r3, r7, #20
 8012348:	9300      	str	r3, [sp, #0]
 801234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234c:	2200      	movs	r2, #0
 801234e:	2101      	movs	r1, #1
 8012350:	68f8      	ldr	r0, [r7, #12]
 8012352:	f003 fa39 	bl	80157c8 <phhalHw_Pn5180_WaitIrq>
 8012356:	4603      	mov	r3, r0
 8012358:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 801235a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801235c:	b2db      	uxtb	r3, r3
 801235e:	2b12      	cmp	r3, #18
 8012360:	d10c      	bne.n	801237c <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f001 fadf 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8012368:	4603      	mov	r3, r0
 801236a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801236c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801236e:	2b00      	cmp	r3, #0
 8012370:	d001      	beq.n	8012376 <phhalHw_Pn5180_Autocoll+0x1de>
 8012372:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012374:	e19b      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 8012376:	f240 2312 	movw	r3, #530	@ 0x212
 801237a:	e198      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00c      	beq.n	80123a0 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f001 facd 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 801238c:	4603      	mov	r3, r0
 801238e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012390:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012392:	2b00      	cmp	r3, #0
 8012394:	d001      	beq.n	801239a <phhalHw_Pn5180_Autocoll+0x202>
 8012396:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012398:	e189      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801239a:	f240 237f 	movw	r3, #639	@ 0x27f
 801239e:	e186      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	f003 0301 	and.w	r3, r3, #1
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 815d 	beq.w	8012666 <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 80123ac:	231b      	movs	r3, #27
 80123ae:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 80123b0:	231a      	movs	r3, #26
 80123b2:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 80123b4:	2313      	movs	r3, #19
 80123b6:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 80123b8:	231d      	movs	r3, #29
 80123ba:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 80123bc:	f107 0318 	add.w	r3, r7, #24
 80123c0:	f107 011c 	add.w	r1, r7, #28
 80123c4:	2204      	movs	r2, #4
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f000 ffea 	bl	80133a0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 80123cc:	4603      	mov	r3, r0
 80123ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80123d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d001      	beq.n	80123da <phhalHw_Pn5180_Autocoll+0x242>
 80123d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80123d8:	e169      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	3301      	adds	r3, #1
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	021b      	lsls	r3, r3, #8
 80123e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80123ea:	4313      	orrs	r3, r2
 80123ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	3302      	adds	r3, #2
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	041b      	lsls	r3, r3, #16
 80123f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80123f8:	4313      	orrs	r3, r2
 80123fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	3303      	adds	r3, #3
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	061b      	lsls	r3, r3, #24
 8012404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012406:	4313      	orrs	r3, r2
 8012408:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 801240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801240c:	0f5b      	lsrs	r3, r3, #29
 801240e:	b2db      	uxtb	r3, r3
 8012410:	f003 0303 	and.w	r3, r3, #3
 8012414:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 8012418:	69bb      	ldr	r3, [r7, #24]
 801241a:	3304      	adds	r3, #4
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	3305      	adds	r3, #5
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	021b      	lsls	r3, r3, #8
 8012428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801242a:	4313      	orrs	r3, r2
 801242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	3306      	adds	r3, #6
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	041b      	lsls	r3, r3, #16
 8012436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012438:	4313      	orrs	r3, r2
 801243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	3307      	adds	r3, #7
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	061b      	lsls	r3, r3, #24
 8012444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012446:	4313      	orrs	r3, r2
 8012448:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 801244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801244c:	b2db      	uxtb	r3, r3
 801244e:	f003 0307 	and.w	r3, r3, #7
 8012452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 8012456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801245a:	3b04      	subs	r3, #4
 801245c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	3308      	adds	r3, #8
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	3309      	adds	r3, #9
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	021b      	lsls	r3, r3, #8
 8012470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012472:	4313      	orrs	r3, r2
 8012474:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	330a      	adds	r3, #10
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	041b      	lsls	r3, r3, #16
 801247e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012480:	4313      	orrs	r3, r2
 8012482:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	330b      	adds	r3, #11
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	061b      	lsls	r3, r3, #24
 801248c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801248e:	4313      	orrs	r3, r2
 8012490:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	330c      	adds	r3, #12
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	330d      	adds	r3, #13
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	021b      	lsls	r3, r3, #8
 80124a2:	6a3a      	ldr	r2, [r7, #32]
 80124a4:	4313      	orrs	r3, r2
 80124a6:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	330e      	adds	r3, #14
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	041b      	lsls	r3, r3, #16
 80124b0:	6a3a      	ldr	r2, [r7, #32]
 80124b2:	4313      	orrs	r3, r2
 80124b4:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	330f      	adds	r3, #15
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	061b      	lsls	r3, r3, #24
 80124be:	6a3a      	ldr	r2, [r7, #32]
 80124c0:	4313      	orrs	r3, r2
 80124c2:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 80124c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00c      	beq.n	80124e8 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f001 fa29 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 80124d4:	4603      	mov	r3, r0
 80124d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80124d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <phhalHw_Pn5180_Autocoll+0x34a>
 80124de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124e0:	e0e5      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 80124e2:	f240 2302 	movw	r3, #514	@ 0x202
 80124e6:	e0e2      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 80124e8:	683a      	ldr	r2, [r7, #0]
 80124ea:	6879      	ldr	r1, [r7, #4]
 80124ec:	68f8      	ldr	r0, [r7, #12]
 80124ee:	f001 fd6e 	bl	8013fce <phhalHw_Pn5180_ReadData>
 80124f2:	4603      	mov	r3, r0
 80124f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80124f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <phhalHw_Pn5180_Autocoll+0x368>
 80124fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124fe:	e0d6      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	f003 0310 	and.w	r3, r3, #16
 8012506:	2b00      	cmp	r3, #0
 8012508:	d02a      	beq.n	8012560 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00c      	beq.n	801252e <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f001 fa06 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 801251a:	4603      	mov	r3, r0
 801251c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801251e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012520:	2b00      	cmp	r3, #0
 8012522:	d001      	beq.n	8012528 <phhalHw_Pn5180_Autocoll+0x390>
 8012524:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012526:	e0c2      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 8012528:	f44f 7304 	mov.w	r3, #528	@ 0x210
 801252c:	e0bf      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2200      	movs	r2, #0
 8012532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 8012536:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801253a:	2b00      	cmp	r3, #0
 801253c:	d134      	bne.n	80125a8 <phhalHw_Pn5180_Autocoll+0x410>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	2bf0      	cmp	r3, #240	@ 0xf0
 8012546:	d12f      	bne.n	80125a8 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8012548:	2301      	movs	r3, #1
 801254a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 801254e:	2301      	movs	r3, #1
 8012550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012554:	e028      	b.n	80125a8 <phhalHw_Pn5180_Autocoll+0x410>
 8012556:	bf00      	nop
 8012558:	00020041 	.word	0x00020041
 801255c:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 8012560:	6a3b      	ldr	r3, [r7, #32]
 8012562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012566:	2b00      	cmp	r3, #0
 8012568:	d111      	bne.n	801258e <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2201      	movs	r2, #1
 801256e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 8012572:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012576:	2b00      	cmp	r3, #0
 8012578:	d105      	bne.n	8012586 <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 801257a:	2301      	movs	r3, #1
 801257c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 8012580:	2303      	movs	r3, #3
 8012582:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 8012586:	2301      	movs	r3, #1
 8012588:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 801258c:	e00c      	b.n	80125a8 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801258e:	68f8      	ldr	r0, [r7, #12]
 8012590:	f001 f9c9 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8012594:	4603      	mov	r3, r0
 8012596:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012598:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801259a:	2b00      	cmp	r3, #0
 801259c:	d001      	beq.n	80125a2 <phhalHw_Pn5180_Autocoll+0x40a>
 801259e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80125a0:	e085      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 80125a2:	f240 2306 	movw	r3, #518	@ 0x206
 80125a6:	e082      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d115      	bne.n	80125de <phhalHw_Pn5180_Autocoll+0x446>
 80125b2:	897b      	ldrh	r3, [r7, #10]
 80125b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d110      	bne.n	80125de <phhalHw_Pn5180_Autocoll+0x446>
 80125bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d10c      	bne.n	80125de <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	f001 f9ae 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 80125ca:	4603      	mov	r3, r0
 80125cc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80125ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d001      	beq.n	80125d8 <phhalHw_Pn5180_Autocoll+0x440>
 80125d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80125d6:	e06a      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 80125d8:	f240 2306 	movw	r3, #518	@ 0x206
 80125dc:	e067      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 80125de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d108      	bne.n	80125f8 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 80125e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125f4:	801a      	strh	r2, [r3, #0]
 80125f6:	e01b      	b.n	8012630 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 80125f8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d108      	bne.n	8012612 <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 8012600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012604:	b29b      	uxth	r3, r3
 8012606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801260a:	b29a      	uxth	r2, r3
 801260c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801260e:	801a      	strh	r2, [r3, #0]
 8012610:	e00e      	b.n	8012630 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 8012612:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8012616:	2b02      	cmp	r3, #2
 8012618:	d108      	bne.n	801262c <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 801261a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801261e:	b29b      	uxth	r3, r3
 8012620:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8012624:	b29a      	uxth	r2, r3
 8012626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012628:	801a      	strh	r2, [r3, #0]
 801262a:	e001      	b.n	8012630 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 801262c:	2305      	movs	r3, #5
 801262e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	881a      	ldrh	r2, [r3, #0]
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	695a      	ldr	r2, [r3, #20]
 801263c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012640:	441a      	add	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	8b5a      	ldrh	r2, [r3, #26]
 801264a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801264e:	b29b      	uxth	r3, r3
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	b29a      	uxth	r2, r3
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 8012658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801265a:	881a      	ldrh	r2, [r3, #0]
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 8012660:	2300      	movs	r3, #0
 8012662:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012664:	e006      	b.n	8012674 <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801266c:	2b00      	cmp	r3, #0
 801266e:	d001      	beq.n	8012674 <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 8012670:	2310      	movs	r3, #16
 8012672:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 8012674:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012676:	2b00      	cmp	r3, #0
 8012678:	d009      	beq.n	801268e <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f001 f953 	bl	8013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8012680:	4603      	mov	r3, r0
 8012682:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012684:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012686:	2b00      	cmp	r3, #0
 8012688:	d001      	beq.n	801268e <phhalHw_Pn5180_Autocoll+0x4f6>
 801268a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801268c:	e00f      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 801268e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00b      	beq.n	80126ac <phhalHw_Pn5180_Autocoll+0x514>
 8012694:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012696:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801269a:	2b00      	cmp	r3, #0
 801269c:	d106      	bne.n	80126ac <phhalHw_Pn5180_Autocoll+0x514>
 801269e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	e000      	b.n	80126ae <phhalHw_Pn5180_Autocoll+0x516>
 80126ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3738      	adds	r7, #56	@ 0x38
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop

080126b8 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b090      	sub	sp, #64	@ 0x40
 80126bc:	af02      	add	r7, sp, #8
 80126be:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 80126c0:	2300      	movs	r3, #0
 80126c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 80126c4:	2300      	movs	r3, #0
 80126c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 80126c8:	2300      	movs	r3, #0
 80126ca:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 80126cc:	2300      	movs	r3, #0
 80126ce:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d002      	beq.n	80126e0 <phhalHw_Pn5180_Lpcd+0x28>
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d072      	beq.n	80127c4 <phhalHw_Pn5180_Lpcd+0x10c>
 80126de:	e0c4      	b.n	801286a <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 80126e0:	f107 031c 	add.w	r3, r7, #28
 80126e4:	461a      	mov	r2, r3
 80126e6:	2126      	movs	r1, #38	@ 0x26
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 fdeb 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 80126ee:	4603      	mov	r3, r0
 80126f0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80126f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d001      	beq.n	80126fc <phhalHw_Pn5180_Lpcd+0x44>
 80126f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126fa:	e0c9      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 80126fc:	f107 0210 	add.w	r2, r7, #16
 8012700:	2305      	movs	r3, #5
 8012702:	2134      	movs	r1, #52	@ 0x34
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 ff5d 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 801270a:	4603      	mov	r3, r0
 801270c:	847b      	strh	r3, [r7, #34]	@ 0x22
 801270e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012710:	2b00      	cmp	r3, #0
 8012712:	d001      	beq.n	8012718 <phhalHw_Pn5180_Lpcd+0x60>
 8012714:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012716:	e0bb      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 8012718:	f107 020c 	add.w	r2, r7, #12
 801271c:	2301      	movs	r3, #1
 801271e:	2159      	movs	r1, #89	@ 0x59
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 ff4f 	bl	80135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8012726:	4603      	mov	r3, r0
 8012728:	847b      	strh	r3, [r7, #34]	@ 0x22
 801272a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801272c:	2b00      	cmp	r3, #0
 801272e:	d001      	beq.n	8012734 <phhalHw_Pn5180_Lpcd+0x7c>
 8012730:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012732:	e0ad      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 8012734:	7d3b      	ldrb	r3, [r7, #20]
 8012736:	f003 0303 	and.w	r3, r3, #3
 801273a:	2b00      	cmp	r3, #0
 801273c:	d109      	bne.n	8012752 <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 801273e:	7c3b      	ldrb	r3, [r7, #16]
 8012740:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 8012742:	7c7b      	ldrb	r3, [r7, #17]
 8012744:	021b      	lsls	r3, r3, #8
 8012746:	b29b      	uxth	r3, r3
 8012748:	461a      	mov	r2, r3
 801274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801274c:	4313      	orrs	r3, r2
 801274e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012750:	e002      	b.n	8012758 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012756:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 8012758:	7cfb      	ldrb	r3, [r7, #19]
 801275a:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	b29b      	uxth	r3, r3
 8012760:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012764:	b29a      	uxth	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 801276a:	7b3b      	ldrb	r3, [r7, #12]
 801276c:	f003 0301 	and.w	r3, r3, #1
 8012770:	2b00      	cmp	r3, #0
 8012772:	d009      	beq.n	8012788 <phhalHw_Pn5180_Lpcd+0xd0>
 8012774:	69fa      	ldr	r2, [r7, #28]
 8012776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012778:	4053      	eors	r3, r2
 801277a:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801277e:	2b00      	cmp	r3, #0
 8012780:	d002      	beq.n	8012788 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 8012782:	2300      	movs	r3, #0
 8012784:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 8012786:	e073      	b.n	8012870 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801278e:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8012790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012796:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8012798:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 801279a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801279c:	429a      	cmp	r2, r3
 801279e:	d203      	bcs.n	80127a8 <phhalHw_Pn5180_Lpcd+0xf0>
 80127a0:	69fa      	ldr	r2, [r7, #28]
 80127a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a4:	1ad3      	subs	r3, r2, r3
 80127a6:	e002      	b.n	80127ae <phhalHw_Pn5180_Lpcd+0xf6>
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127ac:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 80127ae:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 80127b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d902      	bls.n	80127be <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 80127b8:	2300      	movs	r3, #0
 80127ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 80127bc:	e058      	b.n	8012870 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 80127be:	2301      	movs	r3, #1
 80127c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 80127c2:	e055      	b.n	8012870 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 80127c4:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 80127c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 80127ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127cc:	2103      	movs	r1, #3
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 fb64 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80127d4:	4603      	mov	r3, r0
 80127d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80127d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d001      	beq.n	80127e2 <phhalHw_Pn5180_Lpcd+0x12a>
 80127de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127e0:	e056      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80127e8:	2300      	movs	r3, #0
 80127ea:	2201      	movs	r2, #1
 80127ec:	2100      	movs	r1, #0
 80127ee:	f009 fcf1 	bl	801c1d4 <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 80127f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127f4:	2101      	movs	r1, #1
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f000 fb50 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80127fc:	4603      	mov	r3, r0
 80127fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012800:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012802:	2b00      	cmp	r3, #0
 8012804:	d001      	beq.n	801280a <phhalHw_Pn5180_Lpcd+0x152>
 8012806:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012808:	e042      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801280e:	4619      	mov	r1, r3
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f000 ffd6 	bl	80137c2 <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 8012816:	4603      	mov	r3, r0
 8012818:	847b      	strh	r3, [r7, #34]	@ 0x22
 801281a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <phhalHw_Pn5180_Lpcd+0x16c>
 8012820:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012822:	e035      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8012824:	f107 0318 	add.w	r3, r7, #24
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801282c:	2200      	movs	r2, #0
 801282e:	2101      	movs	r1, #1
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f002 ffc9 	bl	80157c8 <phhalHw_Pn5180_WaitIrq>
 8012836:	4603      	mov	r3, r0
 8012838:	847b      	strh	r3, [r7, #34]	@ 0x22
 801283a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801283c:	2b00      	cmp	r3, #0
 801283e:	d001      	beq.n	8012844 <phhalHw_Pn5180_Lpcd+0x18c>
 8012840:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012842:	e025      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801284a:	2b00      	cmp	r3, #0
 801284c:	d002      	beq.n	8012854 <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 801284e:	2300      	movs	r3, #0
 8012850:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 8012852:	e00d      	b.n	8012870 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801285a:	2b00      	cmp	r3, #0
 801285c:	d002      	beq.n	8012864 <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 801285e:	2321      	movs	r3, #33	@ 0x21
 8012860:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8012862:	e005      	b.n	8012870 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 8012864:	2301      	movs	r3, #1
 8012866:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8012868:	e002      	b.n	8012870 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801286a:	f240 2321 	movw	r3, #545	@ 0x221
 801286e:	e00f      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012870:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00b      	beq.n	801288e <phhalHw_Pn5180_Lpcd+0x1d6>
 8012876:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012878:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801287c:	2b00      	cmp	r3, #0
 801287e:	d106      	bne.n	801288e <phhalHw_Pn5180_Lpcd+0x1d6>
 8012880:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012882:	b2db      	uxtb	r3, r3
 8012884:	b29b      	uxth	r3, r3
 8012886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801288a:	b29b      	uxth	r3, r3
 801288c:	e000      	b.n	8012890 <phhalHw_Pn5180_Lpcd+0x1d8>
 801288e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8012890:	4618      	mov	r0, r3
 8012892:	3738      	adds	r7, #56	@ 0x38
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <phhalHw_Pn5180_SetListenParameters>:
    uint8_t * pNfcId1,
    uint8_t SelRes,
    uint8_t * pPollingResp,
    uint8_t bNfcId3
    )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b08a      	sub	sp, #40	@ 0x28
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
 80128a4:	70fb      	strb	r3, [r7, #3]
    /* Check all the pointers */
    PH_ASSERT_NULL(pSensRes);
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d101      	bne.n	80128b0 <phhalHw_Pn5180_SetListenParameters+0x18>
 80128ac:	2321      	movs	r3, #33	@ 0x21
 80128ae:	e027      	b.n	8012900 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pNfcId1);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d101      	bne.n	80128ba <phhalHw_Pn5180_SetListenParameters+0x22>
 80128b6:	2321      	movs	r3, #33	@ 0x21
 80128b8:	e022      	b.n	8012900 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pPollingResp);
 80128ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d101      	bne.n	80128c4 <phhalHw_Pn5180_SetListenParameters+0x2c>
 80128c0:	2321      	movs	r3, #33	@ 0x21
 80128c2:	e01d      	b.n	8012900 <phhalHw_Pn5180_SetListenParameters+0x68>
    if(0U != bNfcId3)
    {
        /*Coverity*/;
    }

    (void)memcpy(&aCmd[0], pSensRes, PHHAL_HW_PN5180_SET_LISTEN_SENRES_LEN);
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	881b      	ldrh	r3, [r3, #0]
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	823b      	strh	r3, [r7, #16]
    (void)memcpy(&aCmd[2], pNfcId1, PHHAL_HW_PN5180_SET_LISTEN_NFCID1_LEN);
 80128cc:	f107 0310 	add.w	r3, r7, #16
 80128d0:	3302      	adds	r3, #2
 80128d2:	2203      	movs	r2, #3
 80128d4:	6879      	ldr	r1, [r7, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f00f fd6f 	bl	80223ba <memcpy>
    (void)memcpy(&aCmd[5], &SelRes, PHHAL_HW_PN5180_SET_LISTEN_SELRES_LEN);
 80128dc:	78fb      	ldrb	r3, [r7, #3]
 80128de:	757b      	strb	r3, [r7, #21]
    (void)memcpy(&aCmd[6], pPollingResp, PHHAL_HW_PN5180_SET_LISTEN_POLLRES_LEN);
 80128e0:	f107 0310 	add.w	r3, r7, #16
 80128e4:	3306      	adds	r3, #6
 80128e6:	2212      	movs	r2, #18
 80128e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80128ea:	4618      	mov	r0, r3
 80128ec:	f00f fd65 	bl	80223ba <memcpy>

    return phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR, aCmd, PHHAL_HW_PN5180_SET_LISTEN_LEN);
 80128f0:	f107 0210 	add.w	r2, r7, #16
 80128f4:	2318      	movs	r3, #24
 80128f6:	2140      	movs	r1, #64	@ 0x40
 80128f8:	68f8      	ldr	r0, [r7, #12]
 80128fa:	f000 fdeb 	bl	80134d4 <phhalHw_Pn5180_Instr_WriteE2Prom>
 80128fe:	4603      	mov	r3, r0
}
 8012900:	4618      	mov	r0, r3
 8012902:	3728      	adds	r7, #40	@ 0x28
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b08e      	sub	sp, #56	@ 0x38
 801290c:	af02      	add	r7, sp, #8
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	4611      	mov	r1, r2
 8012914:	461a      	mov	r2, r3
 8012916:	460b      	mov	r3, r1
 8012918:	71fb      	strb	r3, [r7, #7]
 801291a:	4613      	mov	r3, r2
 801291c:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 801291e:	2300      	movs	r3, #0
 8012920:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8012922:	2300      	movs	r3, #0
 8012924:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 8012926:	2300      	movs	r3, #0
 8012928:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 801292c:	2300      	movs	r3, #0
 801292e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 8012932:	2301      	movs	r3, #1
 8012934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 8012938:	2300      	movs	r3, #0
 801293a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 801293c:	2300      	movs	r3, #0
 801293e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d101      	bne.n	801294c <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 8012948:	2321      	movs	r3, #33	@ 0x21
 801294a:	e16b      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 801294c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801294e:	2b00      	cmp	r3, #0
 8012950:	d101      	bne.n	8012956 <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 8012952:	2321      	movs	r3, #33	@ 0x21
 8012954:	e166      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 8012956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012958:	2b00      	cmp	r3, #0
 801295a:	d101      	bne.n	8012960 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 801295c:	2321      	movs	r3, #33	@ 0x21
 801295e:	e161      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 8012960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012962:	2b00      	cmp	r3, #0
 8012964:	d101      	bne.n	801296a <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 8012966:	2321      	movs	r3, #33	@ 0x21
 8012968:	e15c      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 801296a:	79fb      	ldrb	r3, [r7, #7]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d02f      	beq.n	80129d0 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 8012978:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801297c:	085b      	lsrs	r3, r3, #1
 801297e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 8012982:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012986:	f003 0307 	and.w	r3, r3, #7
 801298a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 801298e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012990:	3301      	adds	r3, #1
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	091b      	lsrs	r3, r3, #4
 8012996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 801299a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801299e:	f003 0303 	and.w	r3, r3, #3
 80129a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 80129a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d001      	beq.n	80129b2 <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d109      	bne.n	80129c6 <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 80129b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80129b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d007      	beq.n	80129ce <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 80129be:	f240 2321 	movw	r3, #545	@ 0x221
 80129c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 80129c4:	e003      	b.n	80129ce <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 80129c6:	f240 2321 	movw	r3, #545	@ 0x221
 80129ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80129cc:	e000      	b.n	80129d0 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 80129ce:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d120      	bne.n	8012a1c <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2200      	movs	r2, #0
 80129de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 80129e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d110      	bne.n	8012a0a <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 80129e8:	f107 0314 	add.w	r3, r7, #20
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	2322      	movs	r3, #34	@ 0x22
 80129f0:	f04f 32ff 	mov.w	r2, #4294967295
 80129f4:	2105      	movs	r1, #5
 80129f6:	488d      	ldr	r0, [pc, #564]	@ (8012c2c <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 80129f8:	f009 fb6a 	bl	801c0d0 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	f003 0320 	and.w	r3, r3, #32
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 8012a06:	2312      	movs	r3, #18
 8012a08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 8012a0a:	f009 fa07 	bl	801be1c <phDriver_TimerStop>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012a12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d001      	beq.n	8012a1c <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 8012a18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a1a:	e103      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 8012a1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 8012a22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a24:	e0fe      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8012a26:	4b82      	ldr	r3, [pc, #520]	@ (8012c30 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 8012a28:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 8012a2a:	4a82      	ldr	r2, [pc, #520]	@ (8012c34 <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 8012a2c:	2103      	movs	r1, #3
 8012a2e:	68f8      	ldr	r0, [r7, #12]
 8012a30:	f000 fa34 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8012a34:	4603      	mov	r3, r0
 8012a36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012a38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d001      	beq.n	8012a42 <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 8012a3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a40:	e0f0      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012a48:	2300      	movs	r3, #0
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	f009 fbc1 	bl	801c1d4 <phOsal_EventClear>
 8012a52:	4603      	mov	r3, r0
 8012a54:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012a56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 8012a5c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a5e:	e0e1      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8012a60:	6a3a      	ldr	r2, [r7, #32]
 8012a62:	2101      	movs	r1, #1
 8012a64:	68f8      	ldr	r0, [r7, #12]
 8012a66:	f000 fa8f 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012a6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d001      	beq.n	8012a78 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 8012a74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a76:	e0d5      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 8012a78:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d101      	bne.n	8012a84 <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 8012a80:	2300      	movs	r3, #0
 8012a82:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 8012a84:	79b9      	ldrb	r1, [r7, #6]
 8012a86:	79fa      	ldrb	r2, [r7, #7]
 8012a88:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012a8c:	9301      	str	r3, [sp, #4]
 8012a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	460b      	mov	r3, r1
 8012a94:	68b9      	ldr	r1, [r7, #8]
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f000 ff7a 	bl	8013990 <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012aa0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d001      	beq.n	8012aaa <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 8012aa6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012aa8:	e0bc      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8012aaa:	f107 0318 	add.w	r3, r7, #24
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	6a3b      	ldr	r3, [r7, #32]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	2101      	movs	r1, #1
 8012ab6:	68f8      	ldr	r0, [r7, #12]
 8012ab8:	f002 fe86 	bl	80157c8 <phhalHw_Pn5180_WaitIrq>
 8012abc:	4603      	mov	r3, r0
 8012abe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012ac0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 8012ac6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012ac8:	e0ac      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	f003 0301 	and.w	r3, r3, #1
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 8095 	beq.w	8012c00 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 8012ad6:	f107 031c 	add.w	r3, r7, #28
 8012ada:	4619      	mov	r1, r3
 8012adc:	68f8      	ldr	r0, [r7, #12]
 8012ade:	f000 ffe6 	bl	8013aae <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012ae6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d001      	beq.n	8012af0 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 8012aec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012aee:	e099      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 8012af0:	8bbb      	ldrh	r3, [r7, #28]
 8012af2:	461a      	mov	r2, r3
 8012af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012af6:	68f8      	ldr	r0, [r7, #12]
 8012af8:	f001 f82f 	bl	8013b5a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 8012afc:	4603      	mov	r3, r0
 8012afe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012b00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d001      	beq.n	8012b0a <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 8012b06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012b08:	e08c      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 8012b0a:	8bba      	ldrh	r2, [r7, #28]
 8012b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b0e:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 8012b10:	8bbb      	ldrh	r3, [r7, #28]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d071      	beq.n	8012bfa <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 8012b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b18:	3301      	adds	r3, #1
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	f003 0307 	and.w	r3, r3, #7
 8012b20:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 8012b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b24:	3302      	adds	r3, #2
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b2c:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 8012b2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b32:	005b      	lsls	r3, r3, #1
 8012b34:	b25a      	sxtb	r2, r3
 8012b36:	7fbb      	ldrb	r3, [r7, #30]
 8012b38:	09db      	lsrs	r3, r3, #7
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	b25b      	sxtb	r3, r3
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	b25b      	sxtb	r3, r3
 8012b42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 8012b4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b4e:	2201      	movs	r2, #1
 8012b50:	fa02 f303 	lsl.w	r3, r2, r3
 8012b54:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 8012b58:	e04a      	b.n	8012bf0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 8012b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b60:	4413      	add	r3, r2
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	2b02      	cmp	r3, #2
 8012b66:	d112      	bne.n	8012b8e <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8012b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b6e:	3301      	adds	r3, #1
 8012b70:	4413      	add	r3, r2
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d10a      	bne.n	8012b8e <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 8012b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b7e:	3302      	adds	r3, #2
 8012b80:	4413      	add	r3, r2
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d102      	bne.n	8012b8e <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012b8c:	e028      	b.n	8012be0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 8012b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b94:	4413      	add	r3, r2
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2b03      	cmp	r3, #3
 8012b9a:	d11e      	bne.n	8012bda <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8012b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	4413      	add	r3, r2
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d116      	bne.n	8012bda <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 8012bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012bb2:	3302      	adds	r3, #2
 8012bb4:	4413      	add	r3, r2
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d10e      	bne.n	8012bda <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 8012bbc:	2303      	movs	r3, #3
 8012bbe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 8012bc0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012bc4:	f003 0301 	and.w	r3, r3, #1
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d11b      	bne.n	8012c04 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 8012bcc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012bd0:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d115      	bne.n	8012c04 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 8012bd8:	e002      	b.n	8012be0 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 8012bde:	e011      	b.n	8012c04 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 8012be0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012be2:	3303      	adds	r3, #3
 8012be4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 8012be6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012bea:	3b01      	subs	r3, #1
 8012bec:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 8012bf0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1b0      	bne.n	8012b5a <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 8012bf8:	e004      	b.n	8012c04 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 8012bfa:	237f      	movs	r3, #127	@ 0x7f
 8012bfc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8012bfe:	e001      	b.n	8012c04 <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 8012c00:	2301      	movs	r3, #1
 8012c02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012c04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d00b      	beq.n	8012c22 <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 8012c0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012c0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d106      	bne.n	8012c22 <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 8012c14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	e000      	b.n	8012c24 <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 8012c22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3730      	adds	r7, #48	@ 0x30
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	20001be0 	.word	0x20001be0
 8012c30:	00020001 	.word	0x00020001
 8012c34:	000fffff 	.word	0x000fffff

08012c38 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08a      	sub	sp, #40	@ 0x28
 8012c3c:	af02      	add	r7, sp, #8
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8012c44:	2300      	movs	r3, #0
 8012c46:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d101      	bne.n	8012c52 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 8012c4e:	2321      	movs	r3, #33	@ 0x21
 8012c50:	e07d      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d101      	bne.n	8012c5c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 8012c58:	2321      	movs	r3, #33	@ 0x21
 8012c5a:	e078      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8012c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8012d58 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 8012c5e:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8012c60:	69ba      	ldr	r2, [r7, #24]
 8012c62:	2103      	movs	r1, #3
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	f000 f919 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	82fb      	strh	r3, [r7, #22]
 8012c6e:	8afb      	ldrh	r3, [r7, #22]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d001      	beq.n	8012c78 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 8012c74:	8afb      	ldrh	r3, [r7, #22]
 8012c76:	e06a      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012c7e:	2300      	movs	r3, #0
 8012c80:	2201      	movs	r2, #1
 8012c82:	2100      	movs	r1, #0
 8012c84:	f009 faa6 	bl	801c1d4 <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8012c88:	69ba      	ldr	r2, [r7, #24]
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	f000 f97b 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8012c92:	4603      	mov	r3, r0
 8012c94:	82fb      	strh	r3, [r7, #22]
 8012c96:	8afb      	ldrh	r3, [r7, #22]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 8012c9c:	8afb      	ldrh	r3, [r7, #22]
 8012c9e:	e056      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f000 ffba 	bl	8013c1a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	82fb      	strh	r3, [r7, #22]
 8012caa:	8afb      	ldrh	r3, [r7, #22]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d001      	beq.n	8012cb4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 8012cb0:	8afb      	ldrh	r3, [r7, #22]
 8012cb2:	e04c      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8012cb4:	f107 0310 	add.w	r3, r7, #16
 8012cb8:	9300      	str	r3, [sp, #0]
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f002 fd81 	bl	80157c8 <phhalHw_Pn5180_WaitIrq>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	82fb      	strh	r3, [r7, #22]
 8012cca:	8afb      	ldrh	r3, [r7, #22]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d001      	beq.n	8012cd4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 8012cd0:	8afb      	ldrh	r3, [r7, #22]
 8012cd2:	e03c      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	f003 0301 	and.w	r3, r3, #1
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d025      	beq.n	8012d2a <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 8012cde:	f107 0314 	add.w	r3, r7, #20
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	68f8      	ldr	r0, [r7, #12]
 8012ce6:	f000 fee2 	bl	8013aae <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 8012cea:	4603      	mov	r3, r0
 8012cec:	82fb      	strh	r3, [r7, #22]
 8012cee:	8afb      	ldrh	r3, [r7, #22]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d001      	beq.n	8012cf8 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 8012cf4:	8afb      	ldrh	r3, [r7, #22]
 8012cf6:	e02a      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 8012cf8:	8abb      	ldrh	r3, [r7, #20]
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	68b9      	ldr	r1, [r7, #8]
 8012cfe:	68f8      	ldr	r0, [r7, #12]
 8012d00:	f000 ff2b 	bl	8013b5a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 8012d04:	4603      	mov	r3, r0
 8012d06:	82fb      	strh	r3, [r7, #22]
 8012d08:	8afb      	ldrh	r3, [r7, #22]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d001      	beq.n	8012d12 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 8012d0e:	8afb      	ldrh	r3, [r7, #22]
 8012d10:	e01d      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 8012d12:	8aba      	ldrh	r2, [r7, #20]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 8012d18:	8abb      	ldrh	r3, [r7, #20]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d002      	beq.n	8012d24 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	83fb      	strh	r3, [r7, #30]
 8012d22:	e004      	b.n	8012d2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 8012d24:	237f      	movs	r3, #127	@ 0x7f
 8012d26:	83fb      	strh	r3, [r7, #30]
 8012d28:	e001      	b.n	8012d2e <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012d2e:	8bfb      	ldrh	r3, [r7, #30]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d00b      	beq.n	8012d4c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 8012d34:	8bfb      	ldrh	r3, [r7, #30]
 8012d36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 8012d3e:	8bfb      	ldrh	r3, [r7, #30]
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	e000      	b.n	8012d4e <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 8012d4c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3720      	adds	r7, #32
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	00020001 	.word	0x00020001

08012d5c <phhalHw_Pn5180_EventWait>:

phStatus_t phhalHw_Pn5180_EventWait(phhalHw_Pn5180_DataParams_t * pDataParams, uint32_t dwEventTimeout)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af02      	add	r7, sp, #8
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
	printf("phhalHw_Pn5180_EventWait:\r\n");
 8012d66:	4809      	ldr	r0, [pc, #36]	@ (8012d8c <phhalHw_Pn5180_EventWait+0x30>)
 8012d68:	f00f f9b8 	bl	80220dc <puts>
    return phOsal_EventPend((volatile phOsal_Event_t *)(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, dwEventTimeout,
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012d72:	2300      	movs	r3, #0
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	2321      	movs	r3, #33	@ 0x21
 8012d78:	683a      	ldr	r2, [r7, #0]
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	f009 f9a8 	bl	801c0d0 <phOsal_EventPend>
 8012d80:	4603      	mov	r3, r0
        (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3708      	adds	r7, #8
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}
 8012d8a:	bf00      	nop
 8012d8c:	0802638c 	.word	0x0802638c

08012d90 <phhalHw_Pn5180_EventConsume>:

phStatus_t phhalHw_Pn5180_EventConsume(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
    return phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012d9e:	2300      	movs	r3, #0
 8012da0:	2221      	movs	r2, #33	@ 0x21
 8012da2:	2100      	movs	r1, #0
 8012da4:	f009 fa16 	bl	801c1d4 <phOsal_EventClear>
 8012da8:	4603      	mov	r3, r0
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3708      	adds	r7, #8
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
	...

08012db4 <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 8012db8:	2201      	movs	r2, #1
 8012dba:	2120      	movs	r1, #32
 8012dbc:	4810      	ldr	r0, [pc, #64]	@ (8012e00 <phhalHw_Pn5180_Reset+0x4c>)
 8012dbe:	f008 ffd1 	bl	801bd64 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	2102      	movs	r1, #2
 8012dc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012dca:	f008 ffdd 	bl	801bd88 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 8012dce:	2200      	movs	r2, #0
 8012dd0:	2120      	movs	r1, #32
 8012dd2:	480b      	ldr	r0, [pc, #44]	@ (8012e00 <phhalHw_Pn5180_Reset+0x4c>)
 8012dd4:	f008 ffc6 	bl	801bd64 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 8012dd8:	2200      	movs	r2, #0
 8012dda:	2102      	movs	r1, #2
 8012ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012de0:	f008 ffd2 	bl	801bd88 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 8012de4:	2201      	movs	r2, #1
 8012de6:	2120      	movs	r1, #32
 8012de8:	4805      	ldr	r0, [pc, #20]	@ (8012e00 <phhalHw_Pn5180_Reset+0x4c>)
 8012dea:	f008 ffbb 	bl	801bd64 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 8012dee:	2200      	movs	r2, #0
 8012df0:	2102      	movs	r1, #2
 8012df2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012df6:	f008 ffc7 	bl	801bd88 <phDriver_TimerStart>
#endif /*_WIN32*/
}
 8012dfa:	bf00      	nop
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	48000400 	.word	0x48000400

08012e04 <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	789b      	ldrb	r3, [r3, #2]
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d107      	bne.n	8012e28 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 8012e18:	78fb      	ldrb	r3, [r7, #3]
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012e24:	f008 ff9e 	bl	801bd64 <phDriver_PinWrite>
    }
}
 8012e28:	bf00      	nop
 8012e2a:	3708      	adds	r7, #8
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 8012e30:	b480      	push	{r7}
 8012e32:	b085      	sub	sp, #20
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8012e4c:	801a      	strh	r2, [r3, #0]
}
 8012e4e:	bf00      	nop
 8012e50:	3714      	adds	r7, #20
 8012e52:	46bd      	mov	sp, r7
 8012e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e58:	4770      	bx	lr
	...

08012e5c <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	b085      	sub	sp, #20
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 8012e66:	2300      	movs	r3, #0
 8012e68:	73fb      	strb	r3, [r7, #15]
 8012e6a:	e00b      	b.n	8012e84 <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 8012e6c:	7bfb      	ldrb	r3, [r7, #15]
 8012e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8012e98 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 8012e70:	5cd3      	ldrb	r3, [r2, r3]
 8012e72:	79fa      	ldrb	r2, [r7, #7]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d102      	bne.n	8012e7e <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 8012e78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012e7c:	e006      	b.n	8012e8c <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
 8012e80:	3301      	adds	r3, #1
 8012e82:	73fb      	strb	r3, [r7, #15]
 8012e84:	7bfb      	ldrb	r3, [r7, #15]
 8012e86:	2b06      	cmp	r3, #6
 8012e88:	d9f0      	bls.n	8012e6c <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 8012e8a:	2300      	movs	r3, #0

}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3714      	adds	r7, #20
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr
 8012e98:	08026d90 	.word	0x08026d90

08012e9c <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b08a      	sub	sp, #40	@ 0x28
 8012ea0:	af02      	add	r7, sp, #8
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	607a      	str	r2, [r7, #4]
 8012ea8:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d006      	beq.n	8012ebe <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8012eb0:	7afb      	ldrb	r3, [r7, #11]
 8012eb2:	2b43      	cmp	r3, #67	@ 0x43
 8012eb4:	d906      	bls.n	8012ec4 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8012eb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	db02      	blt.n	8012ec4 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012ebe:	f240 2321 	movw	r3, #545	@ 0x221
 8012ec2:	e05d      	b.n	8012f80 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8012ec4:	7afb      	ldrb	r3, [r7, #11]
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7ff ffc8 	bl	8012e5c <phhalHw_Pn5180_Check_Reg_Readonly>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	83fb      	strh	r3, [r7, #30]
 8012ed0:	8bfb      	ldrh	r3, [r7, #30]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d001      	beq.n	8012eda <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 8012ed6:	8bfb      	ldrh	r3, [r7, #30]
 8012ed8:	e052      	b.n	8012f80 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 8012eda:	2300      	movs	r3, #0
 8012edc:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 8012ede:	7f7b      	ldrb	r3, [r7, #29]
 8012ee0:	1c5a      	adds	r2, r3, #1
 8012ee2:	777a      	strb	r2, [r7, #29]
 8012ee4:	3320      	adds	r3, #32
 8012ee6:	443b      	add	r3, r7
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8012eee:	7f7b      	ldrb	r3, [r7, #29]
 8012ef0:	1c5a      	adds	r2, r3, #1
 8012ef2:	777a      	strb	r2, [r7, #29]
 8012ef4:	3320      	adds	r3, #32
 8012ef6:	443b      	add	r3, r7
 8012ef8:	7afa      	ldrb	r2, [r7, #11]
 8012efa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 8012efe:	7f7b      	ldrb	r3, [r7, #29]
 8012f00:	1c5a      	adds	r2, r3, #1
 8012f02:	777a      	strb	r2, [r7, #29]
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	b2d2      	uxtb	r2, r2
 8012f08:	3320      	adds	r3, #32
 8012f0a:	443b      	add	r3, r7
 8012f0c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	0a1a      	lsrs	r2, r3, #8
 8012f14:	7f7b      	ldrb	r3, [r7, #29]
 8012f16:	1c59      	adds	r1, r3, #1
 8012f18:	7779      	strb	r1, [r7, #29]
 8012f1a:	b2d2      	uxtb	r2, r2
 8012f1c:	3320      	adds	r3, #32
 8012f1e:	443b      	add	r3, r7
 8012f20:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	0c1a      	lsrs	r2, r3, #16
 8012f28:	7f7b      	ldrb	r3, [r7, #29]
 8012f2a:	1c59      	adds	r1, r3, #1
 8012f2c:	7779      	strb	r1, [r7, #29]
 8012f2e:	b2d2      	uxtb	r2, r2
 8012f30:	3320      	adds	r3, #32
 8012f32:	443b      	add	r3, r7
 8012f34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	0e1a      	lsrs	r2, r3, #24
 8012f3c:	7f7b      	ldrb	r3, [r7, #29]
 8012f3e:	1c59      	adds	r1, r3, #1
 8012f40:	7779      	strb	r1, [r7, #29]
 8012f42:	b2d2      	uxtb	r2, r2
 8012f44:	3320      	adds	r3, #32
 8012f46:	443b      	add	r3, r7
 8012f48:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8012f50:	7f7b      	ldrb	r3, [r7, #29]
 8012f52:	b29a      	uxth	r2, r3
 8012f54:	7f3b      	ldrb	r3, [r7, #28]
 8012f56:	b298      	uxth	r0, r3
 8012f58:	f107 0114 	add.w	r1, r7, #20
 8012f5c:	f107 031a 	add.w	r3, r7, #26
 8012f60:	9301      	str	r3, [sp, #4]
 8012f62:	f107 0310 	add.w	r3, r7, #16
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	4603      	mov	r3, r0
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f7ff f878 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8012f70:	4603      	mov	r3, r0
 8012f72:	83fb      	strh	r3, [r7, #30]
 8012f74:	8bfb      	ldrh	r3, [r7, #30]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d001      	beq.n	8012f7e <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 8012f7a:	8bfb      	ldrh	r3, [r7, #30]
 8012f7c:	e000      	b.n	8012f80 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3720      	adds	r7, #32
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b08a      	sub	sp, #40	@ 0x28
 8012f8c:	af02      	add	r7, sp, #8
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	460b      	mov	r3, r1
 8012f92:	607a      	str	r2, [r7, #4]
 8012f94:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d006      	beq.n	8012faa <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8012f9c:	7afb      	ldrb	r3, [r7, #11]
 8012f9e:	2b43      	cmp	r3, #67	@ 0x43
 8012fa0:	d906      	bls.n	8012fb0 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8012fa2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	db02      	blt.n	8012fb0 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012faa:	f240 2321 	movw	r3, #545	@ 0x221
 8012fae:	e05d      	b.n	801306c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 8012fb0:	7afb      	ldrb	r3, [r7, #11]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7ff ff52 	bl	8012e5c <phhalHw_Pn5180_Check_Reg_Readonly>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	83fb      	strh	r3, [r7, #30]
 8012fbc:	8bfb      	ldrh	r3, [r7, #30]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d001      	beq.n	8012fc6 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 8012fc2:	8bfb      	ldrh	r3, [r7, #30]
 8012fc4:	e052      	b.n	801306c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 8012fca:	7f7b      	ldrb	r3, [r7, #29]
 8012fcc:	1c5a      	adds	r2, r3, #1
 8012fce:	777a      	strb	r2, [r7, #29]
 8012fd0:	3320      	adds	r3, #32
 8012fd2:	443b      	add	r3, r7
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8012fda:	7f7b      	ldrb	r3, [r7, #29]
 8012fdc:	1c5a      	adds	r2, r3, #1
 8012fde:	777a      	strb	r2, [r7, #29]
 8012fe0:	3320      	adds	r3, #32
 8012fe2:	443b      	add	r3, r7
 8012fe4:	7afa      	ldrb	r2, [r7, #11]
 8012fe6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 8012fea:	7f7b      	ldrb	r3, [r7, #29]
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	777a      	strb	r2, [r7, #29]
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	b2d2      	uxtb	r2, r2
 8012ff4:	3320      	adds	r3, #32
 8012ff6:	443b      	add	r3, r7
 8012ff8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	0a1a      	lsrs	r2, r3, #8
 8013000:	7f7b      	ldrb	r3, [r7, #29]
 8013002:	1c59      	adds	r1, r3, #1
 8013004:	7779      	strb	r1, [r7, #29]
 8013006:	b2d2      	uxtb	r2, r2
 8013008:	3320      	adds	r3, #32
 801300a:	443b      	add	r3, r7
 801300c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	0c1a      	lsrs	r2, r3, #16
 8013014:	7f7b      	ldrb	r3, [r7, #29]
 8013016:	1c59      	adds	r1, r3, #1
 8013018:	7779      	strb	r1, [r7, #29]
 801301a:	b2d2      	uxtb	r2, r2
 801301c:	3320      	adds	r3, #32
 801301e:	443b      	add	r3, r7
 8013020:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	0e1a      	lsrs	r2, r3, #24
 8013028:	7f7b      	ldrb	r3, [r7, #29]
 801302a:	1c59      	adds	r1, r3, #1
 801302c:	7779      	strb	r1, [r7, #29]
 801302e:	b2d2      	uxtb	r2, r2
 8013030:	3320      	adds	r3, #32
 8013032:	443b      	add	r3, r7
 8013034:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8013038:	2300      	movs	r3, #0
 801303a:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801303c:	7f7b      	ldrb	r3, [r7, #29]
 801303e:	b29a      	uxth	r2, r3
 8013040:	7f3b      	ldrb	r3, [r7, #28]
 8013042:	b298      	uxth	r0, r3
 8013044:	f107 0114 	add.w	r1, r7, #20
 8013048:	f107 031a 	add.w	r3, r7, #26
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	f107 0310 	add.w	r3, r7, #16
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	4603      	mov	r3, r0
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f7ff f802 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 801305c:	4603      	mov	r3, r0
 801305e:	83fb      	strh	r3, [r7, #30]
 8013060:	8bfb      	ldrh	r3, [r7, #30]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d001      	beq.n	801306a <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 8013066:	8bfb      	ldrh	r3, [r7, #30]
 8013068:	e000      	b.n	801306c <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801306a:	2300      	movs	r3, #0
}
 801306c:	4618      	mov	r0, r3
 801306e:	3720      	adds	r7, #32
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b08a      	sub	sp, #40	@ 0x28
 8013078:	af02      	add	r7, sp, #8
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	460b      	mov	r3, r1
 801307e:	607a      	str	r2, [r7, #4]
 8013080:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d006      	beq.n	8013096 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8013088:	7afb      	ldrb	r3, [r7, #11]
 801308a:	2b43      	cmp	r3, #67	@ 0x43
 801308c:	d906      	bls.n	801309c <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801308e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013092:	2b00      	cmp	r3, #0
 8013094:	db02      	blt.n	801309c <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013096:	f240 2321 	movw	r3, #545	@ 0x221
 801309a:	e05d      	b.n	8013158 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 801309c:	7afb      	ldrb	r3, [r7, #11]
 801309e:	4618      	mov	r0, r3
 80130a0:	f7ff fedc 	bl	8012e5c <phhalHw_Pn5180_Check_Reg_Readonly>
 80130a4:	4603      	mov	r3, r0
 80130a6:	83fb      	strh	r3, [r7, #30]
 80130a8:	8bfb      	ldrh	r3, [r7, #30]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 80130ae:	8bfb      	ldrh	r3, [r7, #30]
 80130b0:	e052      	b.n	8013158 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80130b2:	2300      	movs	r3, #0
 80130b4:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 80130b6:	7f7b      	ldrb	r3, [r7, #29]
 80130b8:	1c5a      	adds	r2, r3, #1
 80130ba:	777a      	strb	r2, [r7, #29]
 80130bc:	3320      	adds	r3, #32
 80130be:	443b      	add	r3, r7
 80130c0:	2202      	movs	r2, #2
 80130c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80130c6:	7f7b      	ldrb	r3, [r7, #29]
 80130c8:	1c5a      	adds	r2, r3, #1
 80130ca:	777a      	strb	r2, [r7, #29]
 80130cc:	3320      	adds	r3, #32
 80130ce:	443b      	add	r3, r7
 80130d0:	7afa      	ldrb	r2, [r7, #11]
 80130d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 80130d6:	7f7b      	ldrb	r3, [r7, #29]
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	777a      	strb	r2, [r7, #29]
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	b2d2      	uxtb	r2, r2
 80130e0:	3320      	adds	r3, #32
 80130e2:	443b      	add	r3, r7
 80130e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	0a1a      	lsrs	r2, r3, #8
 80130ec:	7f7b      	ldrb	r3, [r7, #29]
 80130ee:	1c59      	adds	r1, r3, #1
 80130f0:	7779      	strb	r1, [r7, #29]
 80130f2:	b2d2      	uxtb	r2, r2
 80130f4:	3320      	adds	r3, #32
 80130f6:	443b      	add	r3, r7
 80130f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	0c1a      	lsrs	r2, r3, #16
 8013100:	7f7b      	ldrb	r3, [r7, #29]
 8013102:	1c59      	adds	r1, r3, #1
 8013104:	7779      	strb	r1, [r7, #29]
 8013106:	b2d2      	uxtb	r2, r2
 8013108:	3320      	adds	r3, #32
 801310a:	443b      	add	r3, r7
 801310c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	0e1a      	lsrs	r2, r3, #24
 8013114:	7f7b      	ldrb	r3, [r7, #29]
 8013116:	1c59      	adds	r1, r3, #1
 8013118:	7779      	strb	r1, [r7, #29]
 801311a:	b2d2      	uxtb	r2, r2
 801311c:	3320      	adds	r3, #32
 801311e:	443b      	add	r3, r7
 8013120:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8013124:	2300      	movs	r3, #0
 8013126:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013128:	7f7b      	ldrb	r3, [r7, #29]
 801312a:	b29a      	uxth	r2, r3
 801312c:	7f3b      	ldrb	r3, [r7, #28]
 801312e:	b298      	uxth	r0, r3
 8013130:	f107 0114 	add.w	r1, r7, #20
 8013134:	f107 031a 	add.w	r3, r7, #26
 8013138:	9301      	str	r3, [sp, #4]
 801313a:	f107 0310 	add.w	r3, r7, #16
 801313e:	9300      	str	r3, [sp, #0]
 8013140:	4603      	mov	r3, r0
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f7fe ff8c 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013148:	4603      	mov	r3, r0
 801314a:	83fb      	strh	r3, [r7, #30]
 801314c:	8bfb      	ldrh	r3, [r7, #30]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d001      	beq.n	8013156 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 8013152:	8bfb      	ldrh	r3, [r7, #30]
 8013154:	e000      	b.n	8013158 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013156:	2300      	movs	r3, #0
}
 8013158:	4618      	mov	r0, r3
 801315a:	3720      	adds	r7, #32
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b08c      	sub	sp, #48	@ 0x30
 8013164:	af02      	add	r7, sp, #8
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	4613      	mov	r3, r2
 801316c:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d016      	beq.n	80131aa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d013      	beq.n	80131aa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 8013182:	88fb      	ldrh	r3, [r7, #6]
 8013184:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8013188:	d80f      	bhi.n	80131aa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 801318a:	88fb      	ldrh	r3, [r7, #6]
 801318c:	2b05      	cmp	r3, #5
 801318e:	d90c      	bls.n	80131aa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 8013190:	88fa      	ldrh	r2, [r7, #6]
 8013192:	4b4b      	ldr	r3, [pc, #300]	@ (80132c0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 8013194:	fba3 1302 	umull	r1, r3, r3, r2
 8013198:	0899      	lsrs	r1, r3, #2
 801319a:	460b      	mov	r3, r1
 801319c:	005b      	lsls	r3, r3, #1
 801319e:	440b      	add	r3, r1
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d002      	beq.n	80131b0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80131aa:	f240 2321 	movw	r3, #545	@ 0x221
 80131ae:	e082      	b.n	80132b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80131b0:	2300      	movs	r3, #0
 80131b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80131b6:	e038      	b.n	801322a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 80131b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131bc:	68ba      	ldr	r2, [r7, #8]
 80131be:	4413      	add	r3, r2
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7ff fe4a 	bl	8012e5c <phhalHw_Pn5180_Check_Reg_Readonly>
 80131c8:	4603      	mov	r3, r0
 80131ca:	843b      	strh	r3, [r7, #32]
 80131cc:	8c3b      	ldrh	r3, [r7, #32]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 80131d2:	8c3b      	ldrh	r3, [r7, #32]
 80131d4:	e06f      	b.n	80132b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80131d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	4413      	add	r3, r2
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	2b43      	cmp	r3, #67	@ 0x43
 80131e2:	d90a      	bls.n	80131fa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80131e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131e8:	68ba      	ldr	r2, [r7, #8]
 80131ea:	4413      	add	r3, r2
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	b25b      	sxtb	r3, r3
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	db02      	blt.n	80131fa <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80131f4:	f240 2321 	movw	r3, #545	@ 0x221
 80131f8:	e05d      	b.n	80132b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 80131fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131fe:	3301      	adds	r3, #1
 8013200:	68ba      	ldr	r2, [r7, #8]
 8013202:	4413      	add	r3, r2
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d007      	beq.n	801321a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 801320a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801320e:	3301      	adds	r3, #1
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	4413      	add	r3, r2
 8013214:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 8013216:	2b03      	cmp	r3, #3
 8013218:	d902      	bls.n	8013220 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801321a:	f240 2321 	movw	r3, #545	@ 0x221
 801321e:	e04a      	b.n	80132b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 8013220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013224:	3306      	adds	r3, #6
 8013226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801322a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801322e:	b29b      	uxth	r3, r3
 8013230:	88fa      	ldrh	r2, [r7, #6]
 8013232:	429a      	cmp	r2, r3
 8013234:	d8c0      	bhi.n	80131b8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8013236:	f107 0216 	add.w	r2, r7, #22
 801323a:	f107 0318 	add.w	r3, r7, #24
 801323e:	4619      	mov	r1, r3
 8013240:	68f8      	ldr	r0, [r7, #12]
 8013242:	f7ff fdf5 	bl	8012e30 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 8013246:	8afb      	ldrh	r3, [r7, #22]
 8013248:	461a      	mov	r2, r3
 801324a:	88fb      	ldrh	r3, [r7, #6]
 801324c:	3301      	adds	r3, #1
 801324e:	429a      	cmp	r2, r3
 8013250:	d202      	bcs.n	8013258 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8013252:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013256:	e02e      	b.n	80132b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013258:	2300      	movs	r3, #0
 801325a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 801325c:	69ba      	ldr	r2, [r7, #24]
 801325e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013260:	1c59      	adds	r1, r3, #1
 8013262:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8013264:	4413      	add	r3, r2
 8013266:	2203      	movs	r2, #3
 8013268:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 801326a:	69ba      	ldr	r2, [r7, #24]
 801326c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801326e:	4413      	add	r3, r2
 8013270:	88fa      	ldrh	r2, [r7, #6]
 8013272:	68b9      	ldr	r1, [r7, #8]
 8013274:	4618      	mov	r0, r3
 8013276:	f00f f8a0 	bl	80223ba <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 801327a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801327c:	88fb      	ldrh	r3, [r7, #6]
 801327e:	4413      	add	r3, r2
 8013280:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 8013282:	2300      	movs	r3, #0
 8013284:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013288:	69b9      	ldr	r1, [r7, #24]
 801328a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801328e:	b298      	uxth	r0, r3
 8013290:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013292:	f107 031e 	add.w	r3, r7, #30
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	f107 0314 	add.w	r3, r7, #20
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	4603      	mov	r3, r0
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f7fe fedd 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 80132a6:	4603      	mov	r3, r0
 80132a8:	843b      	strh	r3, [r7, #32]
 80132aa:	8c3b      	ldrh	r3, [r7, #32]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d001      	beq.n	80132b4 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 80132b0:	8c3b      	ldrh	r3, [r7, #32]
 80132b2:	e000      	b.n	80132b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80132b4:	2300      	movs	r3, #0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3728      	adds	r7, #40	@ 0x28
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	aaaaaaab 	.word	0xaaaaaaab

080132c4 <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08c      	sub	sp, #48	@ 0x30
 80132c8:	af02      	add	r7, sp, #8
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	460b      	mov	r3, r1
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d009      	beq.n	80132f0 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d006      	beq.n	80132f0 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80132e2:	7afb      	ldrb	r3, [r7, #11]
 80132e4:	2b43      	cmp	r3, #67	@ 0x43
 80132e6:	d906      	bls.n	80132f6 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80132e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	db02      	blt.n	80132f6 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80132f0:	f240 2321 	movw	r3, #545	@ 0x221
 80132f4:	e050      	b.n	8013398 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80132f6:	2300      	movs	r3, #0
 80132f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 80132fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013300:	1c5a      	adds	r2, r3, #1
 8013302:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8013306:	3328      	adds	r3, #40	@ 0x28
 8013308:	443b      	add	r3, r7
 801330a:	2204      	movs	r2, #4
 801330c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8013310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013314:	1c5a      	adds	r2, r3, #1
 8013316:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801331a:	3328      	adds	r3, #40	@ 0x28
 801331c:	443b      	add	r3, r7
 801331e:	7afa      	ldrb	r2, [r7, #11]
 8013320:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 8013324:	2304      	movs	r3, #4
 8013326:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801332c:	b29a      	uxth	r2, r3
 801332e:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8013330:	f107 011c 	add.w	r1, r7, #28
 8013334:	f107 0320 	add.w	r3, r7, #32
 8013338:	9301      	str	r3, [sp, #4]
 801333a:	f107 0314 	add.w	r3, r7, #20
 801333e:	9300      	str	r3, [sp, #0]
 8013340:	4603      	mov	r3, r0
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f7fe fe8c 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013348:	4603      	mov	r3, r0
 801334a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801334c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801334e:	2b00      	cmp	r3, #0
 8013350:	d001      	beq.n	8013356 <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 8013352:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013354:	e020      	b.n	8013398 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 8013356:	8c3b      	ldrh	r3, [r7, #32]
 8013358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801335a:	429a      	cmp	r2, r3
 801335c:	d002      	beq.n	8013364 <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801335e:	f240 237f 	movw	r3, #639	@ 0x27f
 8013362:	e019      	b.n	8013398 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 8013364:	7d3b      	ldrb	r3, [r7, #20]
 8013366:	461a      	mov	r2, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	7d7b      	ldrb	r3, [r7, #21]
 8013372:	021b      	lsls	r3, r3, #8
 8013374:	431a      	orrs	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	7dbb      	ldrb	r3, [r7, #22]
 8013380:	041b      	lsls	r3, r3, #16
 8013382:	431a      	orrs	r2, r3
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	7dfb      	ldrb	r3, [r7, #23]
 801338e:	061b      	lsls	r3, r3, #24
 8013390:	431a      	orrs	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3728      	adds	r7, #40	@ 0x28
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 80133a0:	b590      	push	{r4, r7, lr}
 80133a2:	b091      	sub	sp, #68	@ 0x44
 80133a4:	af02      	add	r7, sp, #8
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	603b      	str	r3, [r7, #0]
 80133ac:	4613      	mov	r3, r2
 80133ae:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d00b      	beq.n	80133d6 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d008      	beq.n	80133d6 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d005      	beq.n	80133d6 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 80133ca:	79fb      	ldrb	r3, [r7, #7]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 80133d0:	79fb      	ldrb	r3, [r7, #7]
 80133d2:	2b12      	cmp	r3, #18
 80133d4:	d902      	bls.n	80133dc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80133d6:	f240 2321 	movw	r3, #545	@ 0x221
 80133da:	e077      	b.n	80134cc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 80133dc:	2300      	movs	r3, #0
 80133de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80133e2:	e016      	b.n	8013412 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80133e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80133e8:	68ba      	ldr	r2, [r7, #8]
 80133ea:	4413      	add	r3, r2
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b43      	cmp	r3, #67	@ 0x43
 80133f0:	d90a      	bls.n	8013408 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80133f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80133f6:	68ba      	ldr	r2, [r7, #8]
 80133f8:	4413      	add	r3, r2
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	b25b      	sxtb	r3, r3
 80133fe:	2b00      	cmp	r3, #0
 8013400:	db02      	blt.n	8013408 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013402:	f240 2321 	movw	r3, #545	@ 0x221
 8013406:	e061      	b.n	80134cc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8013408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801340c:	3301      	adds	r3, #1
 801340e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013412:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013416:	79fb      	ldrb	r3, [r7, #7]
 8013418:	429a      	cmp	r2, r3
 801341a:	d3e3      	bcc.n	80133e4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 801341c:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 8013420:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013424:	4619      	mov	r1, r3
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7ff fd02 	bl	8012e30 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 801342c:	79fb      	ldrb	r3, [r7, #7]
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 8013434:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013438:	b29a      	uxth	r2, r3
 801343a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801343c:	429a      	cmp	r2, r3
 801343e:	d902      	bls.n	8013446 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8013440:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013444:	e042      	b.n	80134cc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 8013446:	2300      	movs	r3, #0
 8013448:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 801344c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8013456:	3338      	adds	r3, #56	@ 0x38
 8013458:	443b      	add	r3, r7
 801345a:	2205      	movs	r2, #5
 801345c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 8013460:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013464:	f107 0214 	add.w	r2, r7, #20
 8013468:	4413      	add	r3, r2
 801346a:	79fa      	ldrb	r2, [r7, #7]
 801346c:	68b9      	ldr	r1, [r7, #8]
 801346e:	4618      	mov	r0, r3
 8013470:	f00e ffa3 	bl	80223ba <memcpy>
    wBufferLength+= bNumOfRegisters;
 8013474:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8013478:	79fb      	ldrb	r3, [r7, #7]
 801347a:	4413      	add	r3, r2
 801347c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013480:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013484:	b298      	uxth	r0, r3
 8013486:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801348a:	b29c      	uxth	r4, r3
 801348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348e:	f107 0114 	add.w	r1, r7, #20
 8013492:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8013496:	9201      	str	r2, [sp, #4]
 8013498:	9300      	str	r3, [sp, #0]
 801349a:	4623      	mov	r3, r4
 801349c:	4602      	mov	r2, r0
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f7fe fdde 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 80134a4:	4603      	mov	r3, r0
 80134a6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80134a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d001      	beq.n	80134b2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 80134ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80134b0:	e00c      	b.n	80134cc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 80134b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d002      	beq.n	80134c4 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80134be:	f240 237f 	movw	r3, #639	@ 0x27f
 80134c2:	e003      	b.n	80134cc <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 80134c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80134ca:	2300      	movs	r3, #0
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	373c      	adds	r7, #60	@ 0x3c
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd90      	pop	{r4, r7, pc}

080134d4 <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b08a      	sub	sp, #40	@ 0x28
 80134d8:	af02      	add	r7, sp, #8
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	607a      	str	r2, [r7, #4]
 80134de:	461a      	mov	r2, r3
 80134e0:	460b      	mov	r3, r1
 80134e2:	72fb      	strb	r3, [r7, #11]
 80134e4:	4613      	mov	r3, r2
 80134e6:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80134e8:	2300      	movs	r3, #0
 80134ea:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80134ec:	2300      	movs	r3, #0
 80134ee:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00b      	beq.n	801350e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d008      	beq.n	801350e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 80134fc:	7afb      	ldrb	r3, [r7, #11]
 80134fe:	2bfd      	cmp	r3, #253	@ 0xfd
 8013500:	d805      	bhi.n	801350e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 8013502:	7afb      	ldrb	r3, [r7, #11]
 8013504:	2b15      	cmp	r3, #21
 8013506:	d902      	bls.n	801350e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 8013508:	7abb      	ldrb	r3, [r7, #10]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d102      	bne.n	8013514 <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801350e:	f240 2321 	movw	r3, #545	@ 0x221
 8013512:	e053      	b.n	80135bc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8013514:	7afb      	ldrb	r3, [r7, #11]
 8013516:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801351a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801351e:	33fe      	adds	r3, #254	@ 0xfe
 8013520:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 8013522:	7ffa      	ldrb	r2, [r7, #31]
 8013524:	7abb      	ldrb	r3, [r7, #10]
 8013526:	429a      	cmp	r2, r3
 8013528:	d202      	bcs.n	8013530 <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801352a:	f240 2322 	movw	r3, #546	@ 0x222
 801352e:	e045      	b.n	80135bc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8013530:	f107 0212 	add.w	r2, r7, #18
 8013534:	f107 0314 	add.w	r3, r7, #20
 8013538:	4619      	mov	r1, r3
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f7ff fc78 	bl	8012e30 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 8013540:	8a7b      	ldrh	r3, [r7, #18]
 8013542:	461a      	mov	r2, r3
 8013544:	7abb      	ldrb	r3, [r7, #10]
 8013546:	3303      	adds	r3, #3
 8013548:	429a      	cmp	r2, r3
 801354a:	d202      	bcs.n	8013552 <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801354c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013550:	e034      	b.n	80135bc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013552:	2300      	movs	r3, #0
 8013554:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	7fbb      	ldrb	r3, [r7, #30]
 801355a:	1c59      	adds	r1, r3, #1
 801355c:	77b9      	strb	r1, [r7, #30]
 801355e:	4413      	add	r3, r2
 8013560:	2206      	movs	r2, #6
 8013562:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 8013564:	697a      	ldr	r2, [r7, #20]
 8013566:	7fbb      	ldrb	r3, [r7, #30]
 8013568:	1c59      	adds	r1, r3, #1
 801356a:	77b9      	strb	r1, [r7, #30]
 801356c:	4413      	add	r3, r2
 801356e:	7afa      	ldrb	r2, [r7, #11]
 8013570:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 8013572:	697a      	ldr	r2, [r7, #20]
 8013574:	7fbb      	ldrb	r3, [r7, #30]
 8013576:	4413      	add	r3, r2
 8013578:	7aba      	ldrb	r2, [r7, #10]
 801357a:	6879      	ldr	r1, [r7, #4]
 801357c:	4618      	mov	r0, r3
 801357e:	f00e ff1c 	bl	80223ba <memcpy>
    wBufferLength += bDataLength;
 8013582:	7fba      	ldrb	r2, [r7, #30]
 8013584:	7abb      	ldrb	r3, [r7, #10]
 8013586:	4413      	add	r3, r2
 8013588:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 801358a:	2300      	movs	r3, #0
 801358c:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801358e:	6979      	ldr	r1, [r7, #20]
 8013590:	7fbb      	ldrb	r3, [r7, #30]
 8013592:	b29a      	uxth	r2, r3
 8013594:	7f7b      	ldrb	r3, [r7, #29]
 8013596:	b298      	uxth	r0, r3
 8013598:	f107 0318 	add.w	r3, r7, #24
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	f107 0310 	add.w	r3, r7, #16
 80135a2:	9300      	str	r3, [sp, #0]
 80135a4:	4603      	mov	r3, r0
 80135a6:	68f8      	ldr	r0, [r7, #12]
 80135a8:	f7fe fd5a 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 80135ac:	4603      	mov	r3, r0
 80135ae:	837b      	strh	r3, [r7, #26]
 80135b0:	8b7b      	ldrh	r3, [r7, #26]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d001      	beq.n	80135ba <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 80135b6:	8b7b      	ldrh	r3, [r7, #26]
 80135b8:	e000      	b.n	80135bc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80135ba:	2300      	movs	r3, #0
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3720      	adds	r7, #32
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08a      	sub	sp, #40	@ 0x28
 80135c8:	af02      	add	r7, sp, #8
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	607a      	str	r2, [r7, #4]
 80135ce:	461a      	mov	r2, r3
 80135d0:	460b      	mov	r3, r1
 80135d2:	72fb      	strb	r3, [r7, #11]
 80135d4:	4613      	mov	r3, r2
 80135d6:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 80135d8:	2300      	movs	r3, #0
 80135da:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d008      	beq.n	80135f4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d005      	beq.n	80135f4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 80135e8:	7afb      	ldrb	r3, [r7, #11]
 80135ea:	2bfd      	cmp	r3, #253	@ 0xfd
 80135ec:	d802      	bhi.n	80135f4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 80135ee:	7abb      	ldrb	r3, [r7, #10]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d11f      	bne.n	8013634 <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 80135fa:	4934      	ldr	r1, [pc, #208]	@ (80136cc <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 80135fc:	e000      	b.n	8013600 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 80135fe:	4934      	ldr	r1, [pc, #208]	@ (80136d0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d101      	bne.n	801360a <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 8013606:	4a33      	ldr	r2, [pc, #204]	@ (80136d4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 8013608:	e000      	b.n	801360c <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 801360a:	4a31      	ldr	r2, [pc, #196]	@ (80136d0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 801360c:	7afb      	ldrb	r3, [r7, #11]
 801360e:	2bfd      	cmp	r3, #253	@ 0xfd
 8013610:	d901      	bls.n	8013616 <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 8013612:	4831      	ldr	r0, [pc, #196]	@ (80136d8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 8013614:	e000      	b.n	8013618 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 8013616:	482e      	ldr	r0, [pc, #184]	@ (80136d0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8013618:	7abb      	ldrb	r3, [r7, #10]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 801361e:	4b2f      	ldr	r3, [pc, #188]	@ (80136dc <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 8013620:	e000      	b.n	8013624 <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 8013622:	4b2b      	ldr	r3, [pc, #172]	@ (80136d0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8013624:	9300      	str	r3, [sp, #0]
 8013626:	4603      	mov	r3, r0
 8013628:	482d      	ldr	r0, [pc, #180]	@ (80136e0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 801362a:	f00e fce7 	bl	8021ffc <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801362e:	f240 2321 	movw	r3, #545	@ 0x221
 8013632:	e046      	b.n	80136c2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8013634:	7afb      	ldrb	r3, [r7, #11]
 8013636:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801363a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801363e:	33fe      	adds	r3, #254	@ 0xfe
 8013640:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 8013642:	7ffa      	ldrb	r2, [r7, #31]
 8013644:	7abb      	ldrb	r3, [r7, #10]
 8013646:	429a      	cmp	r2, r3
 8013648:	d202      	bcs.n	8013650 <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801364a:	f240 2322 	movw	r3, #546	@ 0x222
 801364e:	e038      	b.n	80136c2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013650:	2300      	movs	r3, #0
 8013652:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 8013654:	7fbb      	ldrb	r3, [r7, #30]
 8013656:	1c5a      	adds	r2, r3, #1
 8013658:	77ba      	strb	r2, [r7, #30]
 801365a:	3320      	adds	r3, #32
 801365c:	443b      	add	r3, r7
 801365e:	2207      	movs	r2, #7
 8013660:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 8013664:	7fbb      	ldrb	r3, [r7, #30]
 8013666:	1c5a      	adds	r2, r3, #1
 8013668:	77ba      	strb	r2, [r7, #30]
 801366a:	3320      	adds	r3, #32
 801366c:	443b      	add	r3, r7
 801366e:	7afa      	ldrb	r2, [r7, #11]
 8013670:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 8013674:	7fbb      	ldrb	r3, [r7, #30]
 8013676:	1c5a      	adds	r2, r3, #1
 8013678:	77ba      	strb	r2, [r7, #30]
 801367a:	3320      	adds	r3, #32
 801367c:	443b      	add	r3, r7
 801367e:	7aba      	ldrb	r2, [r7, #10]
 8013680:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013684:	7fbb      	ldrb	r3, [r7, #30]
 8013686:	b29a      	uxth	r2, r3
 8013688:	7abb      	ldrb	r3, [r7, #10]
 801368a:	b298      	uxth	r0, r3
 801368c:	f107 0114 	add.w	r1, r7, #20
 8013690:	f107 031a 	add.w	r3, r7, #26
 8013694:	9301      	str	r3, [sp, #4]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	4603      	mov	r3, r0
 801369c:	68f8      	ldr	r0, [r7, #12]
 801369e:	f7fe fcdf 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 80136a2:	4603      	mov	r3, r0
 80136a4:	83bb      	strh	r3, [r7, #28]
 80136a6:	8bbb      	ldrh	r3, [r7, #28]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d001      	beq.n	80136b0 <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 80136ac:	8bbb      	ldrh	r3, [r7, #28]
 80136ae:	e008      	b.n	80136c2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 80136b0:	7abb      	ldrb	r3, [r7, #10]
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	8b7b      	ldrh	r3, [r7, #26]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d002      	beq.n	80136c0 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80136ba:	f240 237f 	movw	r3, #639	@ 0x27f
 80136be:	e000      	b.n	80136c2 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 80136c0:	2300      	movs	r3, #0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3720      	adds	r7, #32
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	080263a8 	.word	0x080263a8
 80136d0:	080263bc 	.word	0x080263bc
 80136d4:	080263c0 	.word	0x080263c0
 80136d8:	080263d0 	.word	0x080263d0
 80136dc:	080263e0 	.word	0x080263e0
 80136e0:	080263f0 	.word	0x080263f0

080136e4 <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 80136e4:	b590      	push	{r4, r7, lr}
 80136e6:	b08b      	sub	sp, #44	@ 0x2c
 80136e8:	af02      	add	r7, sp, #8
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	4613      	mov	r3, r2
 80136f0:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80136f2:	2300      	movs	r3, #0
 80136f4:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d002      	beq.n	8013706 <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d102      	bne.n	801370c <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013706:	f240 2321 	movw	r3, #545	@ 0x221
 801370a:	e056      	b.n	80137ba <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 801370c:	88fb      	ldrh	r3, [r7, #6]
 801370e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013712:	d802      	bhi.n	801371a <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 8013714:	88fb      	ldrh	r3, [r7, #6]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d102      	bne.n	8013720 <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801371a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 801371e:	e04c      	b.n	80137ba <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8013720:	f107 0116 	add.w	r1, r7, #22
 8013724:	f107 0218 	add.w	r2, r7, #24
 8013728:	f107 0314 	add.w	r3, r7, #20
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	460b      	mov	r3, r1
 8013730:	2101      	movs	r1, #1
 8013732:	68f8      	ldr	r0, [r7, #12]
 8013734:	f000 fbbf 	bl	8013eb6 <phhalHw_Pn5180_GetRxBuffer>
 8013738:	4603      	mov	r3, r0
 801373a:	83fb      	strh	r3, [r7, #30]
 801373c:	8bfb      	ldrh	r3, [r7, #30]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d001      	beq.n	8013746 <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 8013742:	8bfb      	ldrh	r3, [r7, #30]
 8013744:	e039      	b.n	80137ba <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 8013746:	8abb      	ldrh	r3, [r7, #20]
 8013748:	88fa      	ldrh	r2, [r7, #6]
 801374a:	429a      	cmp	r2, r3
 801374c:	d902      	bls.n	8013754 <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801374e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013752:	e032      	b.n	80137ba <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013754:	2300      	movs	r3, #0
 8013756:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 8013758:	7f7b      	ldrb	r3, [r7, #29]
 801375a:	1c5a      	adds	r2, r3, #1
 801375c:	777a      	strb	r2, [r7, #29]
 801375e:	3320      	adds	r3, #32
 8013760:	443b      	add	r3, r7
 8013762:	220a      	movs	r2, #10
 8013764:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 8013768:	7f7b      	ldrb	r3, [r7, #29]
 801376a:	1c5a      	adds	r2, r3, #1
 801376c:	777a      	strb	r2, [r7, #29]
 801376e:	3320      	adds	r3, #32
 8013770:	443b      	add	r3, r7
 8013772:	2200      	movs	r2, #0
 8013774:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013778:	7f7b      	ldrb	r3, [r7, #29]
 801377a:	b298      	uxth	r0, r3
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	88fc      	ldrh	r4, [r7, #6]
 8013780:	f107 0110 	add.w	r1, r7, #16
 8013784:	f107 0212 	add.w	r2, r7, #18
 8013788:	9201      	str	r2, [sp, #4]
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	4623      	mov	r3, r4
 801378e:	4602      	mov	r2, r0
 8013790:	68f8      	ldr	r0, [r7, #12]
 8013792:	f7fe fc65 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013796:	4603      	mov	r3, r0
 8013798:	83fb      	strh	r3, [r7, #30]
 801379a:	8bfb      	ldrh	r3, [r7, #30]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d001      	beq.n	80137a4 <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 80137a0:	8bfb      	ldrh	r3, [r7, #30]
 80137a2:	e00a      	b.n	80137ba <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 80137a4:	8a7b      	ldrh	r3, [r7, #18]
 80137a6:	88fa      	ldrh	r2, [r7, #6]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d002      	beq.n	80137b2 <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80137ac:	f240 237f 	movw	r3, #639	@ 0x27f
 80137b0:	e003      	b.n	80137ba <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 80137b2:	69ba      	ldr	r2, [r7, #24]
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80137b8:	2300      	movs	r3, #0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3724      	adds	r7, #36	@ 0x24
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd90      	pop	{r4, r7, pc}

080137c2 <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b088      	sub	sp, #32
 80137c6:	af02      	add	r7, sp, #8
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	460b      	mov	r3, r1
 80137cc:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80137ce:	2300      	movs	r3, #0
 80137d0:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d007      	beq.n	80137e8 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 80137d8:	887b      	ldrh	r3, [r7, #2]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d004      	beq.n	80137e8 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 80137de:	887b      	ldrh	r3, [r7, #2]
 80137e0:	f640 2282 	movw	r2, #2690	@ 0xa82
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d902      	bls.n	80137ee <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80137e8:	f240 2321 	movw	r3, #545	@ 0x221
 80137ec:	e03e      	b.n	801386c <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80137ee:	2300      	movs	r3, #0
 80137f0:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 80137f2:	7dfb      	ldrb	r3, [r7, #23]
 80137f4:	1c5a      	adds	r2, r3, #1
 80137f6:	75fa      	strb	r2, [r7, #23]
 80137f8:	3318      	adds	r3, #24
 80137fa:	443b      	add	r3, r7
 80137fc:	220b      	movs	r2, #11
 80137fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 8013802:	7dfb      	ldrb	r3, [r7, #23]
 8013804:	1c5a      	adds	r2, r3, #1
 8013806:	75fa      	strb	r2, [r7, #23]
 8013808:	3318      	adds	r3, #24
 801380a:	443b      	add	r3, r7
 801380c:	2201      	movs	r2, #1
 801380e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 8013812:	7dfb      	ldrb	r3, [r7, #23]
 8013814:	1c5a      	adds	r2, r3, #1
 8013816:	75fa      	strb	r2, [r7, #23]
 8013818:	887a      	ldrh	r2, [r7, #2]
 801381a:	b2d2      	uxtb	r2, r2
 801381c:	3318      	adds	r3, #24
 801381e:	443b      	add	r3, r7
 8013820:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 8013824:	887b      	ldrh	r3, [r7, #2]
 8013826:	0a1b      	lsrs	r3, r3, #8
 8013828:	b29a      	uxth	r2, r3
 801382a:	7dfb      	ldrb	r3, [r7, #23]
 801382c:	1c59      	adds	r1, r3, #1
 801382e:	75f9      	strb	r1, [r7, #23]
 8013830:	b2d2      	uxtb	r2, r2
 8013832:	3318      	adds	r3, #24
 8013834:	443b      	add	r3, r7
 8013836:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 801383a:	2300      	movs	r3, #0
 801383c:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801383e:	7dfb      	ldrb	r3, [r7, #23]
 8013840:	b29a      	uxth	r2, r3
 8013842:	8ab8      	ldrh	r0, [r7, #20]
 8013844:	f107 010c 	add.w	r1, r7, #12
 8013848:	f107 0310 	add.w	r3, r7, #16
 801384c:	9301      	str	r3, [sp, #4]
 801384e:	f107 0308 	add.w	r3, r7, #8
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	4603      	mov	r3, r0
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f7fe fc02 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 801385c:	4603      	mov	r3, r0
 801385e:	827b      	strh	r3, [r7, #18]
 8013860:	8a7b      	ldrh	r3, [r7, #18]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d001      	beq.n	801386a <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 8013866:	8a7b      	ldrh	r3, [r7, #18]
 8013868:	e000      	b.n	801386c <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	3718      	adds	r7, #24
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b088      	sub	sp, #32
 8013878:	af02      	add	r7, sp, #8
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	460b      	mov	r3, r1
 801387e:	70fb      	strb	r3, [r7, #3]
 8013880:	4613      	mov	r3, r2
 8013882:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8013884:	2300      	movs	r3, #0
 8013886:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 8013888:	78fb      	ldrb	r3, [r7, #3]
 801388a:	f003 030f 	and.w	r3, r3, #15
 801388e:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d005      	beq.n	80138a2 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 8013896:	78fb      	ldrb	r3, [r7, #3]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d002      	beq.n	80138a2 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 801389c:	78bb      	ldrb	r3, [r7, #2]
 801389e:	2b02      	cmp	r3, #2
 80138a0:	d902      	bls.n	80138a8 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80138a2:	f240 2321 	movw	r3, #545	@ 0x221
 80138a6:	e03a      	b.n	801391e <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80138a8:	2300      	movs	r3, #0
 80138aa:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 80138ac:	7dfb      	ldrb	r3, [r7, #23]
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	75fa      	strb	r2, [r7, #23]
 80138b2:	3318      	adds	r3, #24
 80138b4:	443b      	add	r3, r7
 80138b6:	220b      	movs	r2, #11
 80138b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 80138bc:	7dfb      	ldrb	r3, [r7, #23]
 80138be:	1c5a      	adds	r2, r3, #1
 80138c0:	75fa      	strb	r2, [r7, #23]
 80138c2:	3318      	adds	r3, #24
 80138c4:	443b      	add	r3, r7
 80138c6:	2202      	movs	r2, #2
 80138c8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 80138cc:	7dfb      	ldrb	r3, [r7, #23]
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	75fa      	strb	r2, [r7, #23]
 80138d2:	3318      	adds	r3, #24
 80138d4:	443b      	add	r3, r7
 80138d6:	78fa      	ldrb	r2, [r7, #3]
 80138d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 80138dc:	7dfb      	ldrb	r3, [r7, #23]
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	75fa      	strb	r2, [r7, #23]
 80138e2:	3318      	adds	r3, #24
 80138e4:	443b      	add	r3, r7
 80138e6:	78ba      	ldrb	r2, [r7, #2]
 80138e8:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 80138ec:	2300      	movs	r3, #0
 80138ee:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80138f0:	7dfb      	ldrb	r3, [r7, #23]
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	8ab8      	ldrh	r0, [r7, #20]
 80138f6:	f107 010c 	add.w	r1, r7, #12
 80138fa:	f107 0310 	add.w	r3, r7, #16
 80138fe:	9301      	str	r3, [sp, #4]
 8013900:	f107 0308 	add.w	r3, r7, #8
 8013904:	9300      	str	r3, [sp, #0]
 8013906:	4603      	mov	r3, r0
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f7fe fba9 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 801390e:	4603      	mov	r3, r0
 8013910:	827b      	strh	r3, [r7, #18]
 8013912:	8a7b      	ldrh	r3, [r7, #18]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 8013918:	8a7b      	ldrh	r3, [r7, #18]
 801391a:	e000      	b.n	801391e <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3718      	adds	r7, #24
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b088      	sub	sp, #32
 801392a:	af02      	add	r7, sp, #8
 801392c:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801392e:	2300      	movs	r3, #0
 8013930:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 8013932:	2300      	movs	r3, #0
 8013934:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8013936:	7dfb      	ldrb	r3, [r7, #23]
 8013938:	1c5a      	adds	r2, r3, #1
 801393a:	75fa      	strb	r2, [r7, #23]
 801393c:	3318      	adds	r3, #24
 801393e:	443b      	add	r3, r7
 8013940:	220b      	movs	r2, #11
 8013942:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 8013946:	7dfb      	ldrb	r3, [r7, #23]
 8013948:	1c5a      	adds	r2, r3, #1
 801394a:	75fa      	strb	r2, [r7, #23]
 801394c:	3318      	adds	r3, #24
 801394e:	443b      	add	r3, r7
 8013950:	2203      	movs	r2, #3
 8013952:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8013956:	2300      	movs	r3, #0
 8013958:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801395a:	7dfb      	ldrb	r3, [r7, #23]
 801395c:	b29a      	uxth	r2, r3
 801395e:	8ab8      	ldrh	r0, [r7, #20]
 8013960:	f107 0110 	add.w	r1, r7, #16
 8013964:	f107 030a 	add.w	r3, r7, #10
 8013968:	9301      	str	r3, [sp, #4]
 801396a:	f107 030c 	add.w	r3, r7, #12
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	4603      	mov	r3, r0
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7fe fb74 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013978:	4603      	mov	r3, r0
 801397a:	827b      	strh	r3, [r7, #18]
 801397c:	8a7b      	ldrh	r3, [r7, #18]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d001      	beq.n	8013986 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 8013982:	8a7b      	ldrh	r3, [r7, #18]
 8013984:	e000      	b.n	8013988 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8013986:	2300      	movs	r3, #0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3718      	adds	r7, #24
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b08a      	sub	sp, #40	@ 0x28
 8013994:	af02      	add	r7, sp, #8
 8013996:	60f8      	str	r0, [r7, #12]
 8013998:	60b9      	str	r1, [r7, #8]
 801399a:	4611      	mov	r1, r2
 801399c:	461a      	mov	r2, r3
 801399e:	460b      	mov	r3, r1
 80139a0:	71fb      	strb	r3, [r7, #7]
 80139a2:	4613      	mov	r3, r2
 80139a4:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 80139a6:	2300      	movs	r3, #0
 80139a8:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80139aa:	2300      	movs	r3, #0
 80139ac:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d006      	beq.n	80139c2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 80139b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d003      	beq.n	80139c2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 80139ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80139be:	2b02      	cmp	r3, #2
 80139c0:	d902      	bls.n	80139c8 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80139c2:	f240 2321 	movw	r3, #545	@ 0x221
 80139c6:	e06e      	b.n	8013aa6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 80139c8:	79fb      	ldrb	r3, [r7, #7]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00b      	beq.n	80139e6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d005      	beq.n	80139e0 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 80139d4:	79fb      	ldrb	r3, [r7, #7]
 80139d6:	2b27      	cmp	r3, #39	@ 0x27
 80139d8:	d802      	bhi.n	80139e0 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 80139da:	79bb      	ldrb	r3, [r7, #6]
 80139dc:	2b07      	cmp	r3, #7
 80139de:	d902      	bls.n	80139e6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80139e0:	f240 2321 	movw	r3, #545	@ 0x221
 80139e4:	e05f      	b.n	8013aa6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 80139e6:	f107 0212 	add.w	r2, r7, #18
 80139ea:	f107 0314 	add.w	r3, r7, #20
 80139ee:	4619      	mov	r1, r3
 80139f0:	68f8      	ldr	r0, [r7, #12]
 80139f2:	f7ff fa1d 	bl	8012e30 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 80139f6:	8a7b      	ldrh	r3, [r7, #18]
 80139f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80139fa:	d802      	bhi.n	8013a02 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 80139fc:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013a00:	e051      	b.n	8013aa6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013a02:	2300      	movs	r3, #0
 8013a04:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8013a06:	697a      	ldr	r2, [r7, #20]
 8013a08:	8bfb      	ldrh	r3, [r7, #30]
 8013a0a:	1c59      	adds	r1, r3, #1
 8013a0c:	83f9      	strh	r1, [r7, #30]
 8013a0e:	4413      	add	r3, r2
 8013a10:	220d      	movs	r2, #13
 8013a12:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8013a14:	697a      	ldr	r2, [r7, #20]
 8013a16:	8bfb      	ldrh	r3, [r7, #30]
 8013a18:	1c59      	adds	r1, r3, #1
 8013a1a:	83f9      	strh	r1, [r7, #30]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	79fa      	ldrb	r2, [r7, #7]
 8013a20:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8013a22:	79fb      	ldrb	r3, [r7, #7]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d013      	beq.n	8013a50 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8013a28:	697a      	ldr	r2, [r7, #20]
 8013a2a:	8bfb      	ldrh	r3, [r7, #30]
 8013a2c:	1c59      	adds	r1, r3, #1
 8013a2e:	83f9      	strh	r1, [r7, #30]
 8013a30:	4413      	add	r3, r2
 8013a32:	79ba      	ldrb	r2, [r7, #6]
 8013a34:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 8013a36:	697a      	ldr	r2, [r7, #20]
 8013a38:	8bfb      	ldrh	r3, [r7, #30]
 8013a3a:	4413      	add	r3, r2
 8013a3c:	79fa      	ldrb	r2, [r7, #7]
 8013a3e:	68b9      	ldr	r1, [r7, #8]
 8013a40:	4618      	mov	r0, r3
 8013a42:	f00e fcba 	bl	80223ba <memcpy>
        wBufferLength+= bSelectCommandLength;
 8013a46:	79fb      	ldrb	r3, [r7, #7]
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	8bfb      	ldrh	r3, [r7, #30]
 8013a4c:	4413      	add	r3, r2
 8013a4e:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8013a50:	697a      	ldr	r2, [r7, #20]
 8013a52:	8bfb      	ldrh	r3, [r7, #30]
 8013a54:	4413      	add	r3, r2
 8013a56:	2203      	movs	r2, #3
 8013a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f00e fcad 	bl	80223ba <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8013a60:	8bfb      	ldrh	r3, [r7, #30]
 8013a62:	3303      	adds	r3, #3
 8013a64:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 8013a66:	697a      	ldr	r2, [r7, #20]
 8013a68:	8bfb      	ldrh	r3, [r7, #30]
 8013a6a:	1c59      	adds	r1, r3, #1
 8013a6c:	83f9      	strh	r1, [r7, #30]
 8013a6e:	4413      	add	r3, r2
 8013a70:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013a74:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 8013a76:	2300      	movs	r3, #0
 8013a78:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013a7a:	6979      	ldr	r1, [r7, #20]
 8013a7c:	7f7b      	ldrb	r3, [r7, #29]
 8013a7e:	b298      	uxth	r0, r3
 8013a80:	8bfa      	ldrh	r2, [r7, #30]
 8013a82:	f107 0318 	add.w	r3, r7, #24
 8013a86:	9301      	str	r3, [sp, #4]
 8013a88:	f107 0310 	add.w	r3, r7, #16
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	4603      	mov	r3, r0
 8013a90:	68f8      	ldr	r0, [r7, #12]
 8013a92:	f7fe fae5 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013a96:	4603      	mov	r3, r0
 8013a98:	837b      	strh	r3, [r7, #26]
 8013a9a:	8b7b      	ldrh	r3, [r7, #26]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d001      	beq.n	8013aa4 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 8013aa0:	8b7b      	ldrh	r3, [r7, #26]
 8013aa2:	e000      	b.n	8013aa6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013aa4:	2300      	movs	r3, #0
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3720      	adds	r7, #32
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}

08013aae <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 8013aae:	b580      	push	{r7, lr}
 8013ab0:	b088      	sub	sp, #32
 8013ab2:	af02      	add	r7, sp, #8
 8013ab4:	6078      	str	r0, [r7, #4]
 8013ab6:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d002      	beq.n	8013ac8 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d102      	bne.n	8013ace <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013ac8:	f240 2321 	movw	r3, #545	@ 0x221
 8013acc:	e041      	b.n	8013b52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 8013ad2:	7dfb      	ldrb	r3, [r7, #23]
 8013ad4:	1c5a      	adds	r2, r3, #1
 8013ad6:	75fa      	strb	r2, [r7, #23]
 8013ad8:	3318      	adds	r3, #24
 8013ada:	443b      	add	r3, r7
 8013adc:	220f      	movs	r2, #15
 8013ade:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8013ae2:	7dfb      	ldrb	r3, [r7, #23]
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	75fa      	strb	r2, [r7, #23]
 8013ae8:	3318      	adds	r3, #24
 8013aea:	443b      	add	r3, r7
 8013aec:	2200      	movs	r2, #0
 8013aee:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 8013af2:	2302      	movs	r3, #2
 8013af4:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013af6:	7dfb      	ldrb	r3, [r7, #23]
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	8ab8      	ldrh	r0, [r7, #20]
 8013afc:	f107 010c 	add.w	r1, r7, #12
 8013b00:	f107 0310 	add.w	r3, r7, #16
 8013b04:	9301      	str	r3, [sp, #4]
 8013b06:	f107 0308 	add.w	r3, r7, #8
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7fe faa6 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013b14:	4603      	mov	r3, r0
 8013b16:	827b      	strh	r3, [r7, #18]
 8013b18:	8a7b      	ldrh	r3, [r7, #18]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d001      	beq.n	8013b22 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 8013b1e:	8a7b      	ldrh	r3, [r7, #18]
 8013b20:	e017      	b.n	8013b52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 8013b22:	8a3b      	ldrh	r3, [r7, #16]
 8013b24:	8aba      	ldrh	r2, [r7, #20]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d002      	beq.n	8013b30 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013b2a:	f240 237f 	movw	r3, #639	@ 0x27f
 8013b2e:	e010      	b.n	8013b52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8013b30:	7a3b      	ldrb	r3, [r7, #8]
 8013b32:	461a      	mov	r2, r3
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	881b      	ldrh	r3, [r3, #0]
 8013b3c:	b21a      	sxth	r2, r3
 8013b3e:	7a7b      	ldrb	r3, [r7, #9]
 8013b40:	b21b      	sxth	r3, r3
 8013b42:	021b      	lsls	r3, r3, #8
 8013b44:	b21b      	sxth	r3, r3
 8013b46:	4313      	orrs	r3, r2
 8013b48:	b21b      	sxth	r3, r3
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3718      	adds	r7, #24
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 8013b5a:	b590      	push	{r4, r7, lr}
 8013b5c:	b08b      	sub	sp, #44	@ 0x2c
 8013b5e:	af02      	add	r7, sp, #8
 8013b60:	60f8      	str	r0, [r7, #12]
 8013b62:	60b9      	str	r1, [r7, #8]
 8013b64:	4613      	mov	r3, r2
 8013b66:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d102      	bne.n	8013b82 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013b7c:	f240 2321 	movw	r3, #545	@ 0x221
 8013b80:	e047      	b.n	8013c12 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 8013b82:	88fb      	ldrh	r3, [r7, #6]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d102      	bne.n	8013b8e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013b88:	f240 2321 	movw	r3, #545	@ 0x221
 8013b8c:	e041      	b.n	8013c12 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 8013b92:	7ffb      	ldrb	r3, [r7, #31]
 8013b94:	1c5a      	adds	r2, r3, #1
 8013b96:	77fa      	strb	r2, [r7, #31]
 8013b98:	3320      	adds	r3, #32
 8013b9a:	443b      	add	r3, r7
 8013b9c:	2210      	movs	r2, #16
 8013b9e:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8013ba2:	7ffb      	ldrb	r3, [r7, #31]
 8013ba4:	1c5a      	adds	r2, r3, #1
 8013ba6:	77fa      	strb	r2, [r7, #31]
 8013ba8:	3320      	adds	r3, #32
 8013baa:	443b      	add	r3, r7
 8013bac:	2200      	movs	r2, #0
 8013bae:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8013bb2:	f107 0216 	add.w	r2, r7, #22
 8013bb6:	f107 0318 	add.w	r3, r7, #24
 8013bba:	4619      	mov	r1, r3
 8013bbc:	68f8      	ldr	r0, [r7, #12]
 8013bbe:	f7ff f937 	bl	8012e30 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 8013bc2:	8afb      	ldrh	r3, [r7, #22]
 8013bc4:	88fa      	ldrh	r2, [r7, #6]
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d902      	bls.n	8013bd0 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8013bca:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8013bce:	e020      	b.n	8013c12 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013bd0:	7ffb      	ldrb	r3, [r7, #31]
 8013bd2:	b298      	uxth	r0, r3
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	88fc      	ldrh	r4, [r7, #6]
 8013bd8:	f107 0110 	add.w	r1, r7, #16
 8013bdc:	f107 0214 	add.w	r2, r7, #20
 8013be0:	9201      	str	r2, [sp, #4]
 8013be2:	9300      	str	r3, [sp, #0]
 8013be4:	4623      	mov	r3, r4
 8013be6:	4602      	mov	r2, r0
 8013be8:	68f8      	ldr	r0, [r7, #12]
 8013bea:	f7fe fa39 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	83bb      	strh	r3, [r7, #28]
 8013bf2:	8bbb      	ldrh	r3, [r7, #28]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d001      	beq.n	8013bfc <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 8013bf8:	8bbb      	ldrh	r3, [r7, #28]
 8013bfa:	e00a      	b.n	8013c12 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 8013bfc:	8abb      	ldrh	r3, [r7, #20]
 8013bfe:	88fa      	ldrh	r2, [r7, #6]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d002      	beq.n	8013c0a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013c04:	f240 237f 	movw	r3, #639	@ 0x27f
 8013c08:	e003      	b.n	8013c12 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 8013c0a:	69ba      	ldr	r2, [r7, #24]
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013c10:	2300      	movs	r3, #0

}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3724      	adds	r7, #36	@ 0x24
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd90      	pop	{r4, r7, pc}

08013c1a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b088      	sub	sp, #32
 8013c1e:	af02      	add	r7, sp, #8
 8013c20:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8013c22:	2300      	movs	r3, #0
 8013c24:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d102      	bne.n	8013c32 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013c2c:	f240 2321 	movw	r3, #545	@ 0x221
 8013c30:	e02a      	b.n	8013c88 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013c32:	2300      	movs	r3, #0
 8013c34:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 8013c36:	7dfb      	ldrb	r3, [r7, #23]
 8013c38:	1c5a      	adds	r2, r3, #1
 8013c3a:	75fa      	strb	r2, [r7, #23]
 8013c3c:	3318      	adds	r3, #24
 8013c3e:	443b      	add	r3, r7
 8013c40:	220e      	movs	r2, #14
 8013c42:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8013c46:	7dfb      	ldrb	r3, [r7, #23]
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	75fa      	strb	r2, [r7, #23]
 8013c4c:	3318      	adds	r3, #24
 8013c4e:	443b      	add	r3, r7
 8013c50:	2200      	movs	r2, #0
 8013c52:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8013c56:	2300      	movs	r3, #0
 8013c58:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8013c5a:	7dfb      	ldrb	r3, [r7, #23]
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	8ab8      	ldrh	r0, [r7, #20]
 8013c60:	f107 010c 	add.w	r1, r7, #12
 8013c64:	f107 0310 	add.w	r3, r7, #16
 8013c68:	9301      	str	r3, [sp, #4]
 8013c6a:	f107 0308 	add.w	r3, r7, #8
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	4603      	mov	r3, r0
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7fe f9f4 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	827b      	strh	r3, [r7, #18]
 8013c7c:	8a7b      	ldrh	r3, [r7, #18]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d001      	beq.n	8013c86 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 8013c82:	8a7b      	ldrh	r3, [r7, #18]
 8013c84:	e000      	b.n	8013c88 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3718      	adds	r7, #24
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b088      	sub	sp, #32
 8013c94:	af02      	add	r7, sp, #8
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	460b      	mov	r3, r1
 8013c9a:	70fb      	strb	r3, [r7, #3]
 8013c9c:	4613      	mov	r3, r2
 8013c9e:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d00f      	beq.n	8013cc6 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 8013ca6:	78fb      	ldrb	r3, [r7, #3]
 8013ca8:	2b1c      	cmp	r3, #28
 8013caa:	d902      	bls.n	8013cb2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8013cac:	78fb      	ldrb	r3, [r7, #3]
 8013cae:	2bff      	cmp	r3, #255	@ 0xff
 8013cb0:	d109      	bne.n	8013cc6 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 8013cb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	da05      	bge.n	8013cc6 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 8013cba:	78bb      	ldrb	r3, [r7, #2]
 8013cbc:	2b9d      	cmp	r3, #157	@ 0x9d
 8013cbe:	d905      	bls.n	8013ccc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8013cc0:	78bb      	ldrb	r3, [r7, #2]
 8013cc2:	2bff      	cmp	r3, #255	@ 0xff
 8013cc4:	d002      	beq.n	8013ccc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013cc6:	f240 2321 	movw	r3, #545	@ 0x221
 8013cca:	e03b      	b.n	8013d44 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8013ccc:	78fa      	ldrb	r2, [r7, #3]
 8013cce:	78bb      	ldrb	r3, [r7, #2]
 8013cd0:	4013      	ands	r3, r2
 8013cd2:	b2db      	uxtb	r3, r3
 8013cd4:	2bff      	cmp	r3, #255	@ 0xff
 8013cd6:	d101      	bne.n	8013cdc <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e033      	b.n	8013d44 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 8013ce0:	7dfb      	ldrb	r3, [r7, #23]
 8013ce2:	1c5a      	adds	r2, r3, #1
 8013ce4:	75fa      	strb	r2, [r7, #23]
 8013ce6:	3318      	adds	r3, #24
 8013ce8:	443b      	add	r3, r7
 8013cea:	2211      	movs	r2, #17
 8013cec:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 8013cf0:	7dfb      	ldrb	r3, [r7, #23]
 8013cf2:	1c5a      	adds	r2, r3, #1
 8013cf4:	75fa      	strb	r2, [r7, #23]
 8013cf6:	3318      	adds	r3, #24
 8013cf8:	443b      	add	r3, r7
 8013cfa:	78fa      	ldrb	r2, [r7, #3]
 8013cfc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 8013d00:	7dfb      	ldrb	r3, [r7, #23]
 8013d02:	1c5a      	adds	r2, r3, #1
 8013d04:	75fa      	strb	r2, [r7, #23]
 8013d06:	3318      	adds	r3, #24
 8013d08:	443b      	add	r3, r7
 8013d0a:	78ba      	ldrb	r2, [r7, #2]
 8013d0c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8013d10:	2300      	movs	r3, #0
 8013d12:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8013d14:	7dfb      	ldrb	r3, [r7, #23]
 8013d16:	b29a      	uxth	r2, r3
 8013d18:	7dbb      	ldrb	r3, [r7, #22]
 8013d1a:	b298      	uxth	r0, r3
 8013d1c:	f107 010c 	add.w	r1, r7, #12
 8013d20:	f107 0312 	add.w	r3, r7, #18
 8013d24:	9301      	str	r3, [sp, #4]
 8013d26:	f107 0308 	add.w	r3, r7, #8
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7fe f996 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013d34:	4603      	mov	r3, r0
 8013d36:	82bb      	strh	r3, [r7, #20]
 8013d38:	8abb      	ldrh	r3, [r7, #20]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d001      	beq.n	8013d42 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 8013d3e:	8abb      	ldrh	r3, [r7, #20]
 8013d40:	e000      	b.n	8013d44 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3718      	adds	r7, #24
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b088      	sub	sp, #32
 8013d50:	af02      	add	r7, sp, #8
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	460b      	mov	r3, r1
 8013d56:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d002      	beq.n	8013d64 <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 8013d5e:	78fb      	ldrb	r3, [r7, #3]
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d902      	bls.n	8013d6a <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013d64:	f240 2321 	movw	r3, #545	@ 0x221
 8013d68:	e02b      	b.n	8013dc2 <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 8013d6e:	7dfb      	ldrb	r3, [r7, #23]
 8013d70:	1c5a      	adds	r2, r3, #1
 8013d72:	75fa      	strb	r2, [r7, #23]
 8013d74:	3318      	adds	r3, #24
 8013d76:	443b      	add	r3, r7
 8013d78:	2216      	movs	r2, #22
 8013d7a:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 8013d7e:	7dfb      	ldrb	r3, [r7, #23]
 8013d80:	1c5a      	adds	r2, r3, #1
 8013d82:	75fa      	strb	r2, [r7, #23]
 8013d84:	3318      	adds	r3, #24
 8013d86:	443b      	add	r3, r7
 8013d88:	78fa      	ldrb	r2, [r7, #3]
 8013d8a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8013d92:	7dfb      	ldrb	r3, [r7, #23]
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	7dbb      	ldrb	r3, [r7, #22]
 8013d98:	b298      	uxth	r0, r3
 8013d9a:	f107 0110 	add.w	r1, r7, #16
 8013d9e:	f107 0312 	add.w	r3, r7, #18
 8013da2:	9301      	str	r3, [sp, #4]
 8013da4:	f107 030c 	add.w	r3, r7, #12
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	4603      	mov	r3, r0
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f7fe f957 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013db2:	4603      	mov	r3, r0
 8013db4:	82bb      	strh	r3, [r7, #20]
 8013db6:	8abb      	ldrh	r3, [r7, #20]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d001      	beq.n	8013dc0 <phhalHw_Pn5180_Instr_RfOn+0x74>
 8013dbc:	8abb      	ldrh	r3, [r7, #20]
 8013dbe:	e000      	b.n	8013dc2 <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013dc0:	2300      	movs	r3, #0

}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3718      	adds	r7, #24
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b088      	sub	sp, #32
 8013dce:	af02      	add	r7, sp, #8
 8013dd0:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d102      	bne.n	8013dde <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013dd8:	f240 2321 	movw	r3, #545	@ 0x221
 8013ddc:	e02b      	b.n	8013e36 <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8013dde:	2300      	movs	r3, #0
 8013de0:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 8013de2:	7dfb      	ldrb	r3, [r7, #23]
 8013de4:	1c5a      	adds	r2, r3, #1
 8013de6:	75fa      	strb	r2, [r7, #23]
 8013de8:	3318      	adds	r3, #24
 8013dea:	443b      	add	r3, r7
 8013dec:	2217      	movs	r2, #23
 8013dee:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 8013df2:	7dfb      	ldrb	r3, [r7, #23]
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	75fa      	strb	r2, [r7, #23]
 8013df8:	3318      	adds	r3, #24
 8013dfa:	443b      	add	r3, r7
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8013e02:	2300      	movs	r3, #0
 8013e04:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8013e06:	7dfb      	ldrb	r3, [r7, #23]
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	7dbb      	ldrb	r3, [r7, #22]
 8013e0c:	b298      	uxth	r0, r3
 8013e0e:	f107 0110 	add.w	r1, r7, #16
 8013e12:	f107 0312 	add.w	r3, r7, #18
 8013e16:	9301      	str	r3, [sp, #4]
 8013e18:	f107 030c 	add.w	r3, r7, #12
 8013e1c:	9300      	str	r3, [sp, #0]
 8013e1e:	4603      	mov	r3, r0
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7fe f91d 	bl	8012060 <phhalHw_Pn5180_BalExchange>
 8013e26:	4603      	mov	r3, r0
 8013e28:	82bb      	strh	r3, [r7, #20]
 8013e2a:	8abb      	ldrh	r3, [r7, #20]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d001      	beq.n	8013e34 <phhalHw_Pn5180_Instr_RfOff+0x6a>
 8013e30:	8abb      	ldrh	r3, [r7, #20]
 8013e32:	e000      	b.n	8013e36 <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8013e34:	2300      	movs	r3, #0

}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3718      	adds	r7, #24
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}

08013e3e <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 8013e3e:	b580      	push	{r7, lr}
 8013e40:	b086      	sub	sp, #24
 8013e42:	af02      	add	r7, sp, #8
 8013e44:	60f8      	str	r0, [r7, #12]
 8013e46:	607a      	str	r2, [r7, #4]
 8013e48:	603b      	str	r3, [r7, #0]
 8013e4a:	460b      	mov	r3, r1
 8013e4c:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8013e4e:	7afb      	ldrb	r3, [r7, #11]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d023      	beq.n	8013e9c <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	68da      	ldr	r2, [r3, #12]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	695b      	ldr	r3, [r3, #20]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d10f      	bne.n	8013e80 <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	8bd2      	ldrh	r2, [r2, #30]
 8013e68:	441a      	add	r2, r3
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	8a1a      	ldrh	r2, [r3, #16]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	8bdb      	ldrh	r3, [r3, #30]
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	801a      	strh	r2, [r3, #0]
 8013e7e:	e007      	b.n	8013e90 <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	68da      	ldr	r2, [r3, #12]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	8a1a      	ldrh	r2, [r3, #16]
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	8a5a      	ldrh	r2, [r3, #18]
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	e008      	b.n	8013eae <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 8013e9c:	7af9      	ldrb	r1, [r7, #11]
 8013e9e:	69bb      	ldr	r3, [r7, #24]
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	68f8      	ldr	r0, [r7, #12]
 8013ea8:	f000 f805 	bl	8013eb6 <phhalHw_Pn5180_GetRxBuffer>
 8013eac:	4603      	mov	r3, r0
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3710      	adds	r7, #16
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 8013eb6:	b480      	push	{r7}
 8013eb8:	b087      	sub	sp, #28
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	60f8      	str	r0, [r7, #12]
 8013ebe:	607a      	str	r2, [r7, #4]
 8013ec0:	603b      	str	r3, [r7, #0]
 8013ec2:	460b      	mov	r3, r1
 8013ec4:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8013eca:	7afb      	ldrb	r3, [r7, #11]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d021      	beq.n	8013f14 <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013ed6:	2b01      	cmp	r3, #1
 8013ed8:	d101      	bne.n	8013ede <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 8013eda:	2301      	movs	r3, #1
 8013edc:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	695b      	ldr	r3, [r3, #20]
 8013ee2:	68fa      	ldr	r2, [r7, #12]
 8013ee4:	8bd2      	ldrh	r2, [r2, #30]
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	7dfa      	ldrb	r2, [r7, #23]
 8013eea:	1a8a      	subs	r2, r1, r2
 8013eec:	441a      	add	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	8b1a      	ldrh	r2, [r3, #24]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	8bdb      	ldrh	r3, [r3, #30]
 8013efa:	1ad3      	subs	r3, r2, r3
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	7dfb      	ldrb	r3, [r7, #23]
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	1ad3      	subs	r3, r2, r3
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	6a3b      	ldr	r3, [r7, #32]
 8013f08:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	8b5a      	ldrh	r2, [r3, #26]
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	801a      	strh	r2, [r3, #0]
 8013f12:	e055      	b.n	8013fc0 <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	2200      	movs	r2, #0
 8013f18:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	68da      	ldr	r2, [r3, #12]
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	695b      	ldr	r3, [r3, #20]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d11f      	bne.n	8013f66 <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d103      	bne.n	8013f36 <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	8bdb      	ldrh	r3, [r3, #30]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d017      	beq.n	8013f66 <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	68db      	ldr	r3, [r3, #12]
 8013f3a:	68fa      	ldr	r2, [r7, #12]
 8013f3c:	8bd2      	ldrh	r2, [r2, #30]
 8013f3e:	4611      	mov	r1, r2
 8013f40:	68fa      	ldr	r2, [r7, #12]
 8013f42:	8a52      	ldrh	r2, [r2, #18]
 8013f44:	440a      	add	r2, r1
 8013f46:	441a      	add	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	8a1a      	ldrh	r2, [r3, #16]
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	8bd9      	ldrh	r1, [r3, #30]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	8a5b      	ldrh	r3, [r3, #18]
 8013f58:	440b      	add	r3, r1
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	1ad3      	subs	r3, r2, r3
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	6a3b      	ldr	r3, [r7, #32]
 8013f62:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 8013f64:	e02c      	b.n	8013fc0 <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	8a1b      	ldrh	r3, [r3, #16]
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	8a5b      	ldrh	r3, [r3, #18]
 8013f70:	1ad2      	subs	r2, r2, r3
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	8b1b      	ldrh	r3, [r3, #24]
 8013f76:	4619      	mov	r1, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	8bdb      	ldrh	r3, [r3, #30]
 8013f7c:	1acb      	subs	r3, r1, r3
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	db0f      	blt.n	8013fa2 <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	68db      	ldr	r3, [r3, #12]
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	8a52      	ldrh	r2, [r2, #18]
 8013f8a:	441a      	add	r2, r3
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	8a1a      	ldrh	r2, [r3, #16]
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	8a5b      	ldrh	r3, [r3, #18]
 8013f98:	1ad3      	subs	r3, r2, r3
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	6a3b      	ldr	r3, [r7, #32]
 8013f9e:	801a      	strh	r2, [r3, #0]
 8013fa0:	e00e      	b.n	8013fc0 <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	695b      	ldr	r3, [r3, #20]
 8013fa6:	68fa      	ldr	r2, [r7, #12]
 8013fa8:	8bd2      	ldrh	r2, [r2, #30]
 8013faa:	441a      	add	r2, r3
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	8b1a      	ldrh	r2, [r3, #24]
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	8bdb      	ldrh	r3, [r3, #30]
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	b29a      	uxth	r2, r3
 8013fbc:	6a3b      	ldr	r3, [r7, #32]
 8013fbe:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 8013fc0:	2300      	movs	r3, #0
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	371c      	adds	r7, #28
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr

08013fce <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 8013fce:	b580      	push	{r7, lr}
 8013fd0:	b086      	sub	sp, #24
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	60f8      	str	r0, [r7, #12]
 8013fd6:	60b9      	str	r1, [r7, #8]
 8013fd8:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 8013fde:	f107 0310 	add.w	r3, r7, #16
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	2113      	movs	r1, #19
 8013fe6:	68f8      	ldr	r0, [r7, #12]
 8013fe8:	f7fb fb5a 	bl	800f6a0 <phhalHw_Pn5180_ReadRegister>
 8013fec:	4603      	mov	r3, r0
 8013fee:	82bb      	strh	r3, [r7, #20]
 8013ff0:	8abb      	ldrh	r3, [r7, #20]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d001      	beq.n	8013ffa <phhalHw_Pn5180_ReadData+0x2c>
 8013ff6:	8abb      	ldrh	r3, [r7, #20]
 8013ff8:	e02d      	b.n	8014056 <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014000:	2b01      	cmp	r3, #1
 8014002:	d10f      	bne.n	8014024 <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	b29b      	uxth	r3, r3
 8014008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801400c:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8014012:	b29b      	uxth	r3, r3
 8014014:	f003 030f 	and.w	r3, r3, #15
 8014018:	b29b      	uxth	r3, r3
 801401a:	015b      	lsls	r3, r3, #5
 801401c:	b29b      	uxth	r3, r3
 801401e:	4313      	orrs	r3, r2
 8014020:	82fb      	strh	r3, [r7, #22]
 8014022:	e004      	b.n	801402e <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	b29b      	uxth	r3, r3
 8014028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801402c:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 801402e:	8afb      	ldrh	r3, [r7, #22]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00c      	beq.n	801404e <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 8014034:	8afb      	ldrh	r3, [r7, #22]
 8014036:	461a      	mov	r2, r3
 8014038:	68b9      	ldr	r1, [r7, #8]
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f7ff fb52 	bl	80136e4 <phhalHw_Pn5180_Instr_RetrieveRxData>
 8014040:	4603      	mov	r3, r0
 8014042:	82bb      	strh	r3, [r7, #20]
 8014044:	8abb      	ldrh	r3, [r7, #20]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d001      	beq.n	801404e <phhalHw_Pn5180_ReadData+0x80>
 801404a:	8abb      	ldrh	r3, [r7, #20]
 801404c:	e003      	b.n	8014056 <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	8afa      	ldrh	r2, [r7, #22]
 8014052:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014054:	2300      	movs	r3, #0
}
 8014056:	4618      	mov	r0, r3
 8014058:	3718      	adds	r7, #24
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 801405e:	b580      	push	{r7, lr}
 8014060:	b08e      	sub	sp, #56	@ 0x38
 8014062:	af00      	add	r7, sp, #0
 8014064:	60f8      	str	r0, [r7, #12]
 8014066:	607a      	str	r2, [r7, #4]
 8014068:	603b      	str	r3, [r7, #0]
 801406a:	460b      	mov	r3, r1
 801406c:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 801406e:	7afb      	ldrb	r3, [r7, #11]
 8014070:	2b10      	cmp	r3, #16
 8014072:	d018      	beq.n	80140a6 <phhalHw_Pn5180_TimerStart+0x48>
 8014074:	2b10      	cmp	r3, #16
 8014076:	dc1f      	bgt.n	80140b8 <phhalHw_Pn5180_TimerStart+0x5a>
 8014078:	2b0e      	cmp	r3, #14
 801407a:	d002      	beq.n	8014082 <phhalHw_Pn5180_TimerStart+0x24>
 801407c:	2b0f      	cmp	r3, #15
 801407e:	d009      	beq.n	8014094 <phhalHw_Pn5180_TimerStart+0x36>
 8014080:	e01a      	b.n	80140b8 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 8014082:	230e      	movs	r3, #14
 8014084:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 8014088:	230b      	movs	r3, #11
 801408a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 801408e:	2301      	movs	r3, #1
 8014090:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8014092:	e014      	b.n	80140be <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 8014094:	230f      	movs	r3, #15
 8014096:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 801409a:	230c      	movs	r3, #12
 801409c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 80140a0:	2301      	movs	r3, #1
 80140a2:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80140a4:	e00b      	b.n	80140be <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 80140a6:	2310      	movs	r3, #16
 80140a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 80140ac:	230d      	movs	r3, #13
 80140ae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 80140b2:	2301      	movs	r3, #1
 80140b4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80140b6:	e002      	b.n	80140be <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80140b8:	f240 2321 	movw	r3, #545	@ 0x221
 80140bc:	e0bd      	b.n	801423a <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 80140be:	2300      	movs	r3, #0
 80140c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80140c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80140c4:	1c5a      	adds	r2, r3, #1
 80140c6:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80140c8:	3338      	adds	r3, #56	@ 0x38
 80140ca:	443b      	add	r3, r7
 80140cc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80140d0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80140d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80140d6:	1c5a      	adds	r2, r3, #1
 80140d8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80140da:	3338      	adds	r3, #56	@ 0x38
 80140dc:	443b      	add	r3, r7
 80140de:	2201      	movs	r2, #1
 80140e0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80140e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80140e6:	1c5a      	adds	r2, r3, #1
 80140e8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80140ea:	3338      	adds	r3, #56	@ 0x38
 80140ec:	443b      	add	r3, r7
 80140ee:	2200      	movs	r2, #0
 80140f0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80140f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80140f6:	1c5a      	adds	r2, r3, #1
 80140f8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80140fa:	3338      	adds	r3, #56	@ 0x38
 80140fc:	443b      	add	r3, r7
 80140fe:	2200      	movs	r2, #0
 8014100:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8014104:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014106:	1c5a      	adds	r2, r3, #1
 8014108:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801410a:	3338      	adds	r3, #56	@ 0x38
 801410c:	443b      	add	r3, r7
 801410e:	2200      	movs	r2, #0
 8014110:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8014114:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014116:	1c5a      	adds	r2, r3, #1
 8014118:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801411a:	3338      	adds	r3, #56	@ 0x38
 801411c:	443b      	add	r3, r7
 801411e:	2200      	movs	r2, #0
 8014120:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 8014124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801412a:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 801412c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801412e:	1c5a      	adds	r2, r3, #1
 8014130:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8014132:	3338      	adds	r3, #56	@ 0x38
 8014134:	443b      	add	r3, r7
 8014136:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 801413a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801413e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014140:	1c5a      	adds	r2, r3, #1
 8014142:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8014144:	3338      	adds	r3, #56	@ 0x38
 8014146:	443b      	add	r3, r7
 8014148:	2201      	movs	r2, #1
 801414a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801414e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014150:	1c5a      	adds	r2, r3, #1
 8014152:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8014154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014156:	b2d2      	uxtb	r2, r2
 8014158:	3338      	adds	r3, #56	@ 0x38
 801415a:	443b      	add	r3, r7
 801415c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8014160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014162:	0a1a      	lsrs	r2, r3, #8
 8014164:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014166:	1c59      	adds	r1, r3, #1
 8014168:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801416a:	b2d2      	uxtb	r2, r2
 801416c:	3338      	adds	r3, #56	@ 0x38
 801416e:	443b      	add	r3, r7
 8014170:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8014174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014176:	0c1a      	lsrs	r2, r3, #16
 8014178:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801417a:	1c59      	adds	r1, r3, #1
 801417c:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801417e:	b2d2      	uxtb	r2, r2
 8014180:	3338      	adds	r3, #56	@ 0x38
 8014182:	443b      	add	r3, r7
 8014184:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8014188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801418a:	0e1a      	lsrs	r2, r3, #24
 801418c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801418e:	1c59      	adds	r1, r3, #1
 8014190:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8014192:	b2d2      	uxtb	r2, r2
 8014194:	3338      	adds	r3, #56	@ 0x38
 8014196:	443b      	add	r3, r7
 8014198:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 801419c:	687a      	ldr	r2, [r7, #4]
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	431a      	orrs	r2, r3
 80141a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80141a4:	4313      	orrs	r3, r2
 80141a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141a8:	4313      	orrs	r3, r2
 80141aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80141ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141ae:	1c5a      	adds	r2, r3, #1
 80141b0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80141b2:	3338      	adds	r3, #56	@ 0x38
 80141b4:	443b      	add	r3, r7
 80141b6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80141ba:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80141be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141c0:	1c5a      	adds	r2, r3, #1
 80141c2:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80141c4:	3338      	adds	r3, #56	@ 0x38
 80141c6:	443b      	add	r3, r7
 80141c8:	2201      	movs	r2, #1
 80141ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80141ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141d0:	1c5a      	adds	r2, r3, #1
 80141d2:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80141d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80141d6:	b2d2      	uxtb	r2, r2
 80141d8:	3338      	adds	r3, #56	@ 0x38
 80141da:	443b      	add	r3, r7
 80141dc:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80141e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141e2:	0a1a      	lsrs	r2, r3, #8
 80141e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141e6:	1c59      	adds	r1, r3, #1
 80141e8:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80141ea:	b2d2      	uxtb	r2, r2
 80141ec:	3338      	adds	r3, #56	@ 0x38
 80141ee:	443b      	add	r3, r7
 80141f0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80141f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f6:	0c1a      	lsrs	r2, r3, #16
 80141f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80141fa:	1c59      	adds	r1, r3, #1
 80141fc:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80141fe:	b2d2      	uxtb	r2, r2
 8014200:	3338      	adds	r3, #56	@ 0x38
 8014202:	443b      	add	r3, r7
 8014204:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8014208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801420a:	0e1a      	lsrs	r2, r3, #24
 801420c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801420e:	1c59      	adds	r1, r3, #1
 8014210:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8014212:	b2d2      	uxtb	r2, r2
 8014214:	3338      	adds	r3, #56	@ 0x38
 8014216:	443b      	add	r3, r7
 8014218:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 801421c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801421e:	f107 0314 	add.w	r3, r7, #20
 8014222:	4619      	mov	r1, r3
 8014224:	68f8      	ldr	r0, [r7, #12]
 8014226:	f7fe ff9b 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 801422a:	4603      	mov	r3, r0
 801422c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801422e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014230:	2b00      	cmp	r3, #0
 8014232:	d001      	beq.n	8014238 <phhalHw_Pn5180_TimerStart+0x1da>
 8014234:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014236:	e000      	b.n	801423a <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 8014238:	2300      	movs	r3, #0
}
 801423a:	4618      	mov	r0, r3
 801423c:	3738      	adds	r7, #56	@ 0x38
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
	...

08014244 <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b088      	sub	sp, #32
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	460b      	mov	r3, r1
 801424e:	807b      	strh	r3, [r7, #2]
 8014250:	4613      	mov	r3, r2
 8014252:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 8014254:	887b      	ldrh	r3, [r7, #2]
 8014256:	2b0c      	cmp	r3, #12
 8014258:	f200 81ad 	bhi.w	80145b6 <phhalHw_Pn5180_SetConfig_Int+0x372>
 801425c:	a201      	add	r2, pc, #4	@ (adr r2, 8014264 <phhalHw_Pn5180_SetConfig_Int+0x20>)
 801425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014262:	bf00      	nop
 8014264:	08014299 	.word	0x08014299
 8014268:	08014313 	.word	0x08014313
 801426c:	08014453 	.word	0x08014453
 8014270:	080145b7 	.word	0x080145b7
 8014274:	080145b7 	.word	0x080145b7
 8014278:	080145b7 	.word	0x080145b7
 801427c:	080145b7 	.word	0x080145b7
 8014280:	080145b7 	.word	0x080145b7
 8014284:	080145b7 	.word	0x080145b7
 8014288:	080145b7 	.word	0x080145b7
 801428c:	080145b7 	.word	0x080145b7
 8014290:	080145b7 	.word	0x080145b7
 8014294:	08014591 	.word	0x08014591
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 8014298:	883b      	ldrh	r3, [r7, #0]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d11e      	bne.n	80142dc <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 801429e:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 80142a2:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 80142a4:	697a      	ldr	r2, [r7, #20]
 80142a6:	2118      	movs	r1, #24
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7fe fee3 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80142ae:	4603      	mov	r3, r0
 80142b0:	837b      	strh	r3, [r7, #26]
 80142b2:	8b7b      	ldrh	r3, [r7, #26]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d001      	beq.n	80142bc <phhalHw_Pn5180_SetConfig_Int+0x78>
 80142b8:	8b7b      	ldrh	r3, [r7, #26]
 80142ba:	e187      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 80142bc:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80142c0:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 80142c2:	697a      	ldr	r2, [r7, #20]
 80142c4:	2112      	movs	r1, #18
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f7fe fed4 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80142cc:	4603      	mov	r3, r0
 80142ce:	837b      	strh	r3, [r7, #26]
 80142d0:	8b7b      	ldrh	r3, [r7, #26]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	f000 8172 	beq.w	80145bc <phhalHw_Pn5180_SetConfig_Int+0x378>
 80142d8:	8b7b      	ldrh	r3, [r7, #26]
 80142da:	e177      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 80142dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80142e0:	2118      	movs	r1, #24
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7fe fe50 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80142e8:	4603      	mov	r3, r0
 80142ea:	837b      	strh	r3, [r7, #26]
 80142ec:	8b7b      	ldrh	r3, [r7, #26]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d001      	beq.n	80142f6 <phhalHw_Pn5180_SetConfig_Int+0xb2>
 80142f2:	8b7b      	ldrh	r3, [r7, #26]
 80142f4:	e16a      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 80142f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80142fa:	2112      	movs	r1, #18
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7fe fe43 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8014302:	4603      	mov	r3, r0
 8014304:	837b      	strh	r3, [r7, #26]
 8014306:	8b7b      	ldrh	r3, [r7, #26]
 8014308:	2b00      	cmp	r3, #0
 801430a:	f000 8157 	beq.w	80145bc <phhalHw_Pn5180_SetConfig_Int+0x378>
 801430e:	8b7b      	ldrh	r3, [r7, #26]
 8014310:	e15c      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 8014312:	883b      	ldrh	r3, [r7, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d10f      	bne.n	8014338 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 8014318:	f06f 0301 	mvn.w	r3, #1
 801431c:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 801431e:	697a      	ldr	r2, [r7, #20]
 8014320:	2119      	movs	r1, #25
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f7fe fea6 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8014328:	4603      	mov	r3, r0
 801432a:	837b      	strh	r3, [r7, #26]
 801432c:	8b7b      	ldrh	r3, [r7, #26]
 801432e:	2b00      	cmp	r3, #0
 8014330:	f000 8146 	beq.w	80145c0 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 8014334:	8b7b      	ldrh	r3, [r7, #26]
 8014336:	e149      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8014338:	2300      	movs	r3, #0
 801433a:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 801433c:	f06f 0304 	mvn.w	r3, #4
 8014340:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8014342:	8b3b      	ldrh	r3, [r7, #24]
 8014344:	1c5a      	adds	r2, r3, #1
 8014346:	833a      	strh	r2, [r7, #24]
 8014348:	3320      	adds	r3, #32
 801434a:	443b      	add	r3, r7
 801434c:	2219      	movs	r2, #25
 801434e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8014352:	8b3b      	ldrh	r3, [r7, #24]
 8014354:	1c5a      	adds	r2, r3, #1
 8014356:	833a      	strh	r2, [r7, #24]
 8014358:	3320      	adds	r3, #32
 801435a:	443b      	add	r3, r7
 801435c:	2203      	movs	r2, #3
 801435e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014362:	8b3b      	ldrh	r3, [r7, #24]
 8014364:	1c5a      	adds	r2, r3, #1
 8014366:	833a      	strh	r2, [r7, #24]
 8014368:	69fa      	ldr	r2, [r7, #28]
 801436a:	b2d2      	uxtb	r2, r2
 801436c:	3320      	adds	r3, #32
 801436e:	443b      	add	r3, r7
 8014370:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	0a1a      	lsrs	r2, r3, #8
 8014378:	8b3b      	ldrh	r3, [r7, #24]
 801437a:	1c59      	adds	r1, r3, #1
 801437c:	8339      	strh	r1, [r7, #24]
 801437e:	b2d2      	uxtb	r2, r2
 8014380:	3320      	adds	r3, #32
 8014382:	443b      	add	r3, r7
 8014384:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8014388:	69fb      	ldr	r3, [r7, #28]
 801438a:	0c1a      	lsrs	r2, r3, #16
 801438c:	8b3b      	ldrh	r3, [r7, #24]
 801438e:	1c59      	adds	r1, r3, #1
 8014390:	8339      	strh	r1, [r7, #24]
 8014392:	b2d2      	uxtb	r2, r2
 8014394:	3320      	adds	r3, #32
 8014396:	443b      	add	r3, r7
 8014398:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	0e1a      	lsrs	r2, r3, #24
 80143a0:	8b3b      	ldrh	r3, [r7, #24]
 80143a2:	1c59      	adds	r1, r3, #1
 80143a4:	8339      	strh	r1, [r7, #24]
 80143a6:	b2d2      	uxtb	r2, r2
 80143a8:	3320      	adds	r3, #32
 80143aa:	443b      	add	r3, r7
 80143ac:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 80143b0:	2301      	movs	r3, #1
 80143b2:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80143ba:	2b06      	cmp	r3, #6
 80143bc:	d103      	bne.n	80143c6 <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 80143be:	69fb      	ldr	r3, [r7, #28]
 80143c0:	f043 0304 	orr.w	r3, r3, #4
 80143c4:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 80143c6:	8b3b      	ldrh	r3, [r7, #24]
 80143c8:	1c5a      	adds	r2, r3, #1
 80143ca:	833a      	strh	r2, [r7, #24]
 80143cc:	3320      	adds	r3, #32
 80143ce:	443b      	add	r3, r7
 80143d0:	2219      	movs	r2, #25
 80143d2:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80143d6:	8b3b      	ldrh	r3, [r7, #24]
 80143d8:	1c5a      	adds	r2, r3, #1
 80143da:	833a      	strh	r2, [r7, #24]
 80143dc:	3320      	adds	r3, #32
 80143de:	443b      	add	r3, r7
 80143e0:	2202      	movs	r2, #2
 80143e2:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80143e6:	8b3b      	ldrh	r3, [r7, #24]
 80143e8:	1c5a      	adds	r2, r3, #1
 80143ea:	833a      	strh	r2, [r7, #24]
 80143ec:	69fa      	ldr	r2, [r7, #28]
 80143ee:	b2d2      	uxtb	r2, r2
 80143f0:	3320      	adds	r3, #32
 80143f2:	443b      	add	r3, r7
 80143f4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	0a1a      	lsrs	r2, r3, #8
 80143fc:	8b3b      	ldrh	r3, [r7, #24]
 80143fe:	1c59      	adds	r1, r3, #1
 8014400:	8339      	strh	r1, [r7, #24]
 8014402:	b2d2      	uxtb	r2, r2
 8014404:	3320      	adds	r3, #32
 8014406:	443b      	add	r3, r7
 8014408:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	0c1a      	lsrs	r2, r3, #16
 8014410:	8b3b      	ldrh	r3, [r7, #24]
 8014412:	1c59      	adds	r1, r3, #1
 8014414:	8339      	strh	r1, [r7, #24]
 8014416:	b2d2      	uxtb	r2, r2
 8014418:	3320      	adds	r3, #32
 801441a:	443b      	add	r3, r7
 801441c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	0e1a      	lsrs	r2, r3, #24
 8014424:	8b3b      	ldrh	r3, [r7, #24]
 8014426:	1c59      	adds	r1, r3, #1
 8014428:	8339      	strh	r1, [r7, #24]
 801442a:	b2d2      	uxtb	r2, r2
 801442c:	3320      	adds	r3, #32
 801442e:	443b      	add	r3, r7
 8014430:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8014434:	8b3a      	ldrh	r2, [r7, #24]
 8014436:	f107 0308 	add.w	r3, r7, #8
 801443a:	4619      	mov	r1, r3
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7fe fe8f 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8014442:	4603      	mov	r3, r0
 8014444:	837b      	strh	r3, [r7, #26]
 8014446:	8b7b      	ldrh	r3, [r7, #26]
 8014448:	2b00      	cmp	r3, #0
 801444a:	f000 80b9 	beq.w	80145c0 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 801444e:	8b7b      	ldrh	r3, [r7, #26]
 8014450:	e0bc      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 8014452:	883b      	ldrh	r3, [r7, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d10f      	bne.n	8014478 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8014458:	f06f 0301 	mvn.w	r3, #1
 801445c:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 801445e:	697a      	ldr	r2, [r7, #20]
 8014460:	2112      	movs	r1, #18
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7fe fe06 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8014468:	4603      	mov	r3, r0
 801446a:	837b      	strh	r3, [r7, #26]
 801446c:	8b7b      	ldrh	r3, [r7, #26]
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 80a8 	beq.w	80145c4 <phhalHw_Pn5180_SetConfig_Int+0x380>
 8014474:	8b7b      	ldrh	r3, [r7, #26]
 8014476:	e0a9      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8014478:	2300      	movs	r3, #0
 801447a:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 801447c:	f06f 0304 	mvn.w	r3, #4
 8014480:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8014482:	8b3b      	ldrh	r3, [r7, #24]
 8014484:	1c5a      	adds	r2, r3, #1
 8014486:	833a      	strh	r2, [r7, #24]
 8014488:	3320      	adds	r3, #32
 801448a:	443b      	add	r3, r7
 801448c:	2212      	movs	r2, #18
 801448e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8014492:	8b3b      	ldrh	r3, [r7, #24]
 8014494:	1c5a      	adds	r2, r3, #1
 8014496:	833a      	strh	r2, [r7, #24]
 8014498:	3320      	adds	r3, #32
 801449a:	443b      	add	r3, r7
 801449c:	2203      	movs	r2, #3
 801449e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80144a2:	8b3b      	ldrh	r3, [r7, #24]
 80144a4:	1c5a      	adds	r2, r3, #1
 80144a6:	833a      	strh	r2, [r7, #24]
 80144a8:	69fa      	ldr	r2, [r7, #28]
 80144aa:	b2d2      	uxtb	r2, r2
 80144ac:	3320      	adds	r3, #32
 80144ae:	443b      	add	r3, r7
 80144b0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	0a1a      	lsrs	r2, r3, #8
 80144b8:	8b3b      	ldrh	r3, [r7, #24]
 80144ba:	1c59      	adds	r1, r3, #1
 80144bc:	8339      	strh	r1, [r7, #24]
 80144be:	b2d2      	uxtb	r2, r2
 80144c0:	3320      	adds	r3, #32
 80144c2:	443b      	add	r3, r7
 80144c4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	0c1a      	lsrs	r2, r3, #16
 80144cc:	8b3b      	ldrh	r3, [r7, #24]
 80144ce:	1c59      	adds	r1, r3, #1
 80144d0:	8339      	strh	r1, [r7, #24]
 80144d2:	b2d2      	uxtb	r2, r2
 80144d4:	3320      	adds	r3, #32
 80144d6:	443b      	add	r3, r7
 80144d8:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80144dc:	69fb      	ldr	r3, [r7, #28]
 80144de:	0e1a      	lsrs	r2, r3, #24
 80144e0:	8b3b      	ldrh	r3, [r7, #24]
 80144e2:	1c59      	adds	r1, r3, #1
 80144e4:	8339      	strh	r1, [r7, #24]
 80144e6:	b2d2      	uxtb	r2, r2
 80144e8:	3320      	adds	r3, #32
 80144ea:	443b      	add	r3, r7
 80144ec:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 80144f0:	2301      	movs	r3, #1
 80144f2:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80144fa:	2b06      	cmp	r3, #6
 80144fc:	d103      	bne.n	8014506 <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	f043 0304 	orr.w	r3, r3, #4
 8014504:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8014506:	8b3b      	ldrh	r3, [r7, #24]
 8014508:	1c5a      	adds	r2, r3, #1
 801450a:	833a      	strh	r2, [r7, #24]
 801450c:	3320      	adds	r3, #32
 801450e:	443b      	add	r3, r7
 8014510:	2212      	movs	r2, #18
 8014512:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8014516:	8b3b      	ldrh	r3, [r7, #24]
 8014518:	1c5a      	adds	r2, r3, #1
 801451a:	833a      	strh	r2, [r7, #24]
 801451c:	3320      	adds	r3, #32
 801451e:	443b      	add	r3, r7
 8014520:	2202      	movs	r2, #2
 8014522:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014526:	8b3b      	ldrh	r3, [r7, #24]
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	833a      	strh	r2, [r7, #24]
 801452c:	69fa      	ldr	r2, [r7, #28]
 801452e:	b2d2      	uxtb	r2, r2
 8014530:	3320      	adds	r3, #32
 8014532:	443b      	add	r3, r7
 8014534:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	0a1a      	lsrs	r2, r3, #8
 801453c:	8b3b      	ldrh	r3, [r7, #24]
 801453e:	1c59      	adds	r1, r3, #1
 8014540:	8339      	strh	r1, [r7, #24]
 8014542:	b2d2      	uxtb	r2, r2
 8014544:	3320      	adds	r3, #32
 8014546:	443b      	add	r3, r7
 8014548:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801454c:	69fb      	ldr	r3, [r7, #28]
 801454e:	0c1a      	lsrs	r2, r3, #16
 8014550:	8b3b      	ldrh	r3, [r7, #24]
 8014552:	1c59      	adds	r1, r3, #1
 8014554:	8339      	strh	r1, [r7, #24]
 8014556:	b2d2      	uxtb	r2, r2
 8014558:	3320      	adds	r3, #32
 801455a:	443b      	add	r3, r7
 801455c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014560:	69fb      	ldr	r3, [r7, #28]
 8014562:	0e1a      	lsrs	r2, r3, #24
 8014564:	8b3b      	ldrh	r3, [r7, #24]
 8014566:	1c59      	adds	r1, r3, #1
 8014568:	8339      	strh	r1, [r7, #24]
 801456a:	b2d2      	uxtb	r2, r2
 801456c:	3320      	adds	r3, #32
 801456e:	443b      	add	r3, r7
 8014570:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8014574:	8b3a      	ldrh	r2, [r7, #24]
 8014576:	f107 0308 	add.w	r3, r7, #8
 801457a:	4619      	mov	r1, r3
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f7fe fdef 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8014582:	4603      	mov	r3, r0
 8014584:	837b      	strh	r3, [r7, #26]
 8014586:	8b7b      	ldrh	r3, [r7, #26]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d01b      	beq.n	80145c4 <phhalHw_Pn5180_SetConfig_Int+0x380>
 801458c:	8b7b      	ldrh	r3, [r7, #26]
 801458e:	e01d      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 8014590:	883b      	ldrh	r3, [r7, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d102      	bne.n	801459c <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8014596:	f240 2323 	movw	r3, #547	@ 0x223
 801459a:	e017      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 801459c:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 80145a0:	2120      	movs	r1, #32
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f7fe fd66 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80145a8:	4603      	mov	r3, r0
 80145aa:	837b      	strh	r3, [r7, #26]
 80145ac:	8b7b      	ldrh	r3, [r7, #26]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d00a      	beq.n	80145c8 <phhalHw_Pn5180_SetConfig_Int+0x384>
 80145b2:	8b7b      	ldrh	r3, [r7, #26]
 80145b4:	e00a      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80145b6:	f240 237f 	movw	r3, #639	@ 0x27f
 80145ba:	e007      	b.n	80145cc <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 80145bc:	bf00      	nop
 80145be:	e004      	b.n	80145ca <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 80145c0:	bf00      	nop
 80145c2:	e002      	b.n	80145ca <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 80145c4:	bf00      	nop
 80145c6:	e000      	b.n	80145ca <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 80145c8:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80145ca:	2300      	movs	r3, #0
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3720      	adds	r7, #32
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80145e2:	2b04      	cmp	r3, #4
 80145e4:	d00f      	beq.n	8014606 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 80145e6:	2200      	movs	r2, #0
 80145e8:	2143      	movs	r1, #67	@ 0x43
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f7fe fc56 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 80145f0:	4603      	mov	r3, r0
 80145f2:	81fb      	strh	r3, [r7, #14]
 80145f4:	89fb      	ldrh	r3, [r7, #14]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 80145fa:	89fb      	ldrh	r3, [r7, #14]
 80145fc:	e013      	b.n	8014626 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	655a      	str	r2, [r3, #84]	@ 0x54
 8014604:	e00e      	b.n	8014624 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 8014606:	4a0a      	ldr	r2, [pc, #40]	@ (8014630 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8014608:	2143      	movs	r1, #67	@ 0x43
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f7fe fc46 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8014610:	4603      	mov	r3, r0
 8014612:	81fb      	strh	r3, [r7, #14]
 8014614:	89fb      	ldrh	r3, [r7, #14]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d001      	beq.n	801461e <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 801461a:	89fb      	ldrh	r3, [r7, #14]
 801461c:	e003      	b.n	8014626 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	4a03      	ldr	r2, [pc, #12]	@ (8014630 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8014622:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8014624:	2300      	movs	r3, #0
}
 8014626:	4618      	mov	r0, r3
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	00ff0019 	.word	0x00ff0019

08014634 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b086      	sub	sp, #24
 8014638:	af00      	add	r7, sp, #0
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	460b      	mov	r3, r1
 801463e:	607a      	str	r2, [r7, #4]
 8014640:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 8014642:	897b      	ldrh	r3, [r7, #10]
 8014644:	2b01      	cmp	r3, #1
 8014646:	d005      	beq.n	8014654 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 8014648:	897b      	ldrh	r3, [r7, #10]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d002      	beq.n	8014654 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801464e:	f240 2321 	movw	r3, #545	@ 0x221
 8014652:	e037      	b.n	80146c4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 8014654:	897b      	ldrh	r3, [r7, #10]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d018      	beq.n	801468c <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4013      	ands	r3, r2
 8014662:	2b00      	cmp	r3, #0
 8014664:	d12d      	bne.n	80146c2 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	2143      	movs	r1, #67	@ 0x43
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f7fe fc8c 	bl	8012f88 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8014670:	4603      	mov	r3, r0
 8014672:	82fb      	strh	r3, [r7, #22]
 8014674:	8afb      	ldrh	r3, [r7, #22]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d001      	beq.n	801467e <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 801467a:	8afb      	ldrh	r3, [r7, #22]
 801467c:	e022      	b.n	80146c4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	431a      	orrs	r2, r3
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	655a      	str	r2, [r3, #84]	@ 0x54
 801468a:	e01a      	b.n	80146c2 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	4013      	ands	r3, r2
 8014694:	2b00      	cmp	r3, #0
 8014696:	d014      	beq.n	80146c2 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	43db      	mvns	r3, r3
 801469c:	461a      	mov	r2, r3
 801469e:	2143      	movs	r1, #67	@ 0x43
 80146a0:	68f8      	ldr	r0, [r7, #12]
 80146a2:	f7fe fce7 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80146a6:	4603      	mov	r3, r0
 80146a8:	82fb      	strh	r3, [r7, #22]
 80146aa:	8afb      	ldrh	r3, [r7, #22]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d001      	beq.n	80146b4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 80146b0:	8afb      	ldrh	r3, [r7, #22]
 80146b2:	e007      	b.n	80146c4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	43db      	mvns	r3, r3
 80146bc:	401a      	ands	r2, r3
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 80146c2:	2300      	movs	r3, #0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b086      	sub	sp, #24
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	607b      	str	r3, [r7, #4]
 80146d6:	460b      	mov	r3, r1
 80146d8:	817b      	strh	r3, [r7, #10]
 80146da:	4613      	mov	r3, r2
 80146dc:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 80146de:	897b      	ldrh	r3, [r7, #10]
 80146e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80146e8:	f240 2321 	movw	r3, #545	@ 0x221
 80146ec:	e028      	b.n	8014740 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80146f2:	7a7b      	ldrb	r3, [r7, #9]
 80146f4:	fa22 f303 	lsr.w	r3, r2, r3
 80146f8:	b2da      	uxtb	r2, r3
 80146fa:	897b      	ldrh	r3, [r7, #10]
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	429a      	cmp	r2, r3
 8014700:	d01d      	beq.n	801473e <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014706:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	43db      	mvns	r3, r3
 801470c:	697a      	ldr	r2, [r7, #20]
 801470e:	4013      	ands	r3, r2
 8014710:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 8014712:	897a      	ldrh	r2, [r7, #10]
 8014714:	7a7b      	ldrb	r3, [r7, #9]
 8014716:	fa02 f303 	lsl.w	r3, r2, r3
 801471a:	697a      	ldr	r2, [r7, #20]
 801471c:	4313      	orrs	r3, r2
 801471e:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 8014720:	697a      	ldr	r2, [r7, #20]
 8014722:	2143      	movs	r1, #67	@ 0x43
 8014724:	68f8      	ldr	r0, [r7, #12]
 8014726:	f7fe fbb9 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 801472a:	4603      	mov	r3, r0
 801472c:	827b      	strh	r3, [r7, #18]
 801472e:	8a7b      	ldrh	r3, [r7, #18]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d001      	beq.n	8014738 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 8014734:	8a7b      	ldrh	r3, [r7, #18]
 8014736:	e003      	b.n	8014740 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	697a      	ldr	r2, [r7, #20]
 801473c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 801473e:	2300      	movs	r3, #0
}
 8014740:	4618      	mov	r0, r3
 8014742:	3718      	adds	r7, #24
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b086      	sub	sp, #24
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	4608      	mov	r0, r1
 8014752:	4611      	mov	r1, r2
 8014754:	461a      	mov	r2, r3
 8014756:	4603      	mov	r3, r0
 8014758:	817b      	strh	r3, [r7, #10]
 801475a:	460b      	mov	r3, r1
 801475c:	813b      	strh	r3, [r7, #8]
 801475e:	4613      	mov	r3, r2
 8014760:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 8014762:	2300      	movs	r3, #0
 8014764:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 8014766:	2300      	movs	r3, #0
 8014768:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801476e:	2b00      	cmp	r3, #0
 8014770:	d10f      	bne.n	8014792 <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014778:	897a      	ldrh	r2, [r7, #10]
 801477a:	429a      	cmp	r2, r3
 801477c:	d101      	bne.n	8014782 <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 801477e:	23ff      	movs	r3, #255	@ 0xff
 8014780:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8014788:	893a      	ldrh	r2, [r7, #8]
 801478a:	429a      	cmp	r2, r3
 801478c:	d101      	bne.n	8014792 <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 801478e:	23ff      	movs	r3, #255	@ 0xff
 8014790:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014798:	3b01      	subs	r3, #1
 801479a:	2b09      	cmp	r3, #9
 801479c:	f200 82a1 	bhi.w	8014ce2 <phhalHw_Pn5180_SetCardMode+0x59a>
 80147a0:	a201      	add	r2, pc, #4	@ (adr r2, 80147a8 <phhalHw_Pn5180_SetCardMode+0x60>)
 80147a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147a6:	bf00      	nop
 80147a8:	080147d1 	.word	0x080147d1
 80147ac:	08014999 	.word	0x08014999
 80147b0:	08014a39 	.word	0x08014a39
 80147b4:	08014b55 	.word	0x08014b55
 80147b8:	08014ce3 	.word	0x08014ce3
 80147bc:	08014beb 	.word	0x08014beb
 80147c0:	08014c6d 	.word	0x08014c6d
 80147c4:	08014c6d 	.word	0x08014c6d
 80147c8:	08014c6d 	.word	0x08014c6d
 80147cc:	08014a39 	.word	0x08014a39
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f000 808e 	beq.w	80148f6 <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d14e      	bne.n	8014882 <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 80147e4:	897b      	ldrh	r3, [r7, #10]
 80147e6:	2b03      	cmp	r3, #3
 80147e8:	dc0e      	bgt.n	8014808 <phhalHw_Pn5180_SetCardMode+0xc0>
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	db1e      	blt.n	801482c <phhalHw_Pn5180_SetCardMode+0xe4>
 80147ee:	2b03      	cmp	r3, #3
 80147f0:	d81c      	bhi.n	801482c <phhalHw_Pn5180_SetCardMode+0xe4>
 80147f2:	a201      	add	r2, pc, #4	@ (adr r2, 80147f8 <phhalHw_Pn5180_SetCardMode+0xb0>)
 80147f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f8:	0801480f 	.word	0x0801480f
 80147fc:	08014815 	.word	0x08014815
 8014800:	0801481b 	.word	0x0801481b
 8014804:	08014821 	.word	0x08014821
 8014808:	2bff      	cmp	r3, #255	@ 0xff
 801480a:	d00c      	beq.n	8014826 <phhalHw_Pn5180_SetCardMode+0xde>
 801480c:	e00e      	b.n	801482c <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 801480e:	2313      	movs	r3, #19
 8014810:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8014812:	e00e      	b.n	8014832 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 8014814:	2314      	movs	r3, #20
 8014816:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8014818:	e00b      	b.n	8014832 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 801481a:	2315      	movs	r3, #21
 801481c:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 801481e:	e008      	b.n	8014832 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 8014820:	2316      	movs	r3, #22
 8014822:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8014824:	e005      	b.n	8014832 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014826:	23ff      	movs	r3, #255	@ 0xff
 8014828:	75fb      	strb	r3, [r7, #23]
                        break;
 801482a:	e002      	b.n	8014832 <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801482c:	f240 2321 	movw	r3, #545	@ 0x221
 8014830:	e27c      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8014832:	893b      	ldrh	r3, [r7, #8]
 8014834:	2b03      	cmp	r3, #3
 8014836:	dc0f      	bgt.n	8014858 <phhalHw_Pn5180_SetCardMode+0x110>
 8014838:	2b00      	cmp	r3, #0
 801483a:	db1f      	blt.n	801487c <phhalHw_Pn5180_SetCardMode+0x134>
 801483c:	2b03      	cmp	r3, #3
 801483e:	d81d      	bhi.n	801487c <phhalHw_Pn5180_SetCardMode+0x134>
 8014840:	a201      	add	r2, pc, #4	@ (adr r2, 8014848 <phhalHw_Pn5180_SetCardMode+0x100>)
 8014842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014846:	bf00      	nop
 8014848:	0801485f 	.word	0x0801485f
 801484c:	08014865 	.word	0x08014865
 8014850:	0801486b 	.word	0x0801486b
 8014854:	08014871 	.word	0x08014871
 8014858:	2bff      	cmp	r3, #255	@ 0xff
 801485a:	d00c      	beq.n	8014876 <phhalHw_Pn5180_SetCardMode+0x12e>
 801485c:	e00e      	b.n	801487c <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 801485e:	2393      	movs	r3, #147	@ 0x93
 8014860:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8014862:	e098      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 8014864:	2394      	movs	r3, #148	@ 0x94
 8014866:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8014868:	e095      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 801486a:	2395      	movs	r3, #149	@ 0x95
 801486c:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 801486e:	e092      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 8014870:	2396      	movs	r3, #150	@ 0x96
 8014872:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8014874:	e08f      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014876:	23ff      	movs	r3, #255	@ 0xff
 8014878:	75bb      	strb	r3, [r7, #22]
                        break;
 801487a:	e08c      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801487c:	f240 2321 	movw	r3, #545	@ 0x221
 8014880:	e254      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8014882:	897b      	ldrh	r3, [r7, #10]
 8014884:	2bff      	cmp	r3, #255	@ 0xff
 8014886:	d013      	beq.n	80148b0 <phhalHw_Pn5180_SetCardMode+0x168>
 8014888:	2bff      	cmp	r3, #255	@ 0xff
 801488a:	dc14      	bgt.n	80148b6 <phhalHw_Pn5180_SetCardMode+0x16e>
 801488c:	2b02      	cmp	r3, #2
 801488e:	d00c      	beq.n	80148aa <phhalHw_Pn5180_SetCardMode+0x162>
 8014890:	2b02      	cmp	r3, #2
 8014892:	dc10      	bgt.n	80148b6 <phhalHw_Pn5180_SetCardMode+0x16e>
 8014894:	2b00      	cmp	r3, #0
 8014896:	d002      	beq.n	801489e <phhalHw_Pn5180_SetCardMode+0x156>
 8014898:	2b01      	cmp	r3, #1
 801489a:	d003      	beq.n	80148a4 <phhalHw_Pn5180_SetCardMode+0x15c>
 801489c:	e00b      	b.n	80148b6 <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 801489e:	2319      	movs	r3, #25
 80148a0:	75fb      	strb	r3, [r7, #23]
                        break;
 80148a2:	e00b      	b.n	80148bc <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 80148a4:	231a      	movs	r3, #26
 80148a6:	75fb      	strb	r3, [r7, #23]
                        break;
 80148a8:	e008      	b.n	80148bc <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 80148aa:	231b      	movs	r3, #27
 80148ac:	75fb      	strb	r3, [r7, #23]
                        break;
 80148ae:	e005      	b.n	80148bc <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80148b0:	23ff      	movs	r3, #255	@ 0xff
 80148b2:	75fb      	strb	r3, [r7, #23]
                        break;
 80148b4:	e002      	b.n	80148bc <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80148b6:	f240 2321 	movw	r3, #545	@ 0x221
 80148ba:	e237      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 80148bc:	893b      	ldrh	r3, [r7, #8]
 80148be:	2bff      	cmp	r3, #255	@ 0xff
 80148c0:	d013      	beq.n	80148ea <phhalHw_Pn5180_SetCardMode+0x1a2>
 80148c2:	2bff      	cmp	r3, #255	@ 0xff
 80148c4:	dc14      	bgt.n	80148f0 <phhalHw_Pn5180_SetCardMode+0x1a8>
 80148c6:	2b02      	cmp	r3, #2
 80148c8:	d00c      	beq.n	80148e4 <phhalHw_Pn5180_SetCardMode+0x19c>
 80148ca:	2b02      	cmp	r3, #2
 80148cc:	dc10      	bgt.n	80148f0 <phhalHw_Pn5180_SetCardMode+0x1a8>
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d002      	beq.n	80148d8 <phhalHw_Pn5180_SetCardMode+0x190>
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	d003      	beq.n	80148de <phhalHw_Pn5180_SetCardMode+0x196>
 80148d6:	e00b      	b.n	80148f0 <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 80148d8:	2399      	movs	r3, #153	@ 0x99
 80148da:	75bb      	strb	r3, [r7, #22]
                        break;
 80148dc:	e05b      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 80148de:	239a      	movs	r3, #154	@ 0x9a
 80148e0:	75bb      	strb	r3, [r7, #22]
                        break;
 80148e2:	e058      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 80148e4:	239b      	movs	r3, #155	@ 0x9b
 80148e6:	75bb      	strb	r3, [r7, #22]
                        break;
 80148e8:	e055      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80148ea:	23ff      	movs	r3, #255	@ 0xff
 80148ec:	75bb      	strb	r3, [r7, #22]
                        break;
 80148ee:	e052      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80148f0:	f240 2321 	movw	r3, #545	@ 0x221
 80148f4:	e21a      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 80148f6:	897b      	ldrh	r3, [r7, #10]
 80148f8:	2b03      	cmp	r3, #3
 80148fa:	dc0f      	bgt.n	801491c <phhalHw_Pn5180_SetCardMode+0x1d4>
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	db1f      	blt.n	8014940 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8014900:	2b03      	cmp	r3, #3
 8014902:	d81d      	bhi.n	8014940 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8014904:	a201      	add	r2, pc, #4	@ (adr r2, 801490c <phhalHw_Pn5180_SetCardMode+0x1c4>)
 8014906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801490a:	bf00      	nop
 801490c:	08014923 	.word	0x08014923
 8014910:	08014929 	.word	0x08014929
 8014914:	0801492f 	.word	0x0801492f
 8014918:	08014935 	.word	0x08014935
 801491c:	2bff      	cmp	r3, #255	@ 0xff
 801491e:	d00c      	beq.n	801493a <phhalHw_Pn5180_SetCardMode+0x1f2>
 8014920:	e00e      	b.n	8014940 <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 8014922:	2300      	movs	r3, #0
 8014924:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8014926:	e00e      	b.n	8014946 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 8014928:	2301      	movs	r3, #1
 801492a:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 801492c:	e00b      	b.n	8014946 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 801492e:	2302      	movs	r3, #2
 8014930:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8014932:	e008      	b.n	8014946 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 8014934:	2303      	movs	r3, #3
 8014936:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8014938:	e005      	b.n	8014946 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801493a:	23ff      	movs	r3, #255	@ 0xff
 801493c:	75fb      	strb	r3, [r7, #23]
                    break;
 801493e:	e002      	b.n	8014946 <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014940:	f240 2321 	movw	r3, #545	@ 0x221
 8014944:	e1f2      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 8014946:	893b      	ldrh	r3, [r7, #8]
 8014948:	2b03      	cmp	r3, #3
 801494a:	dc0f      	bgt.n	801496c <phhalHw_Pn5180_SetCardMode+0x224>
 801494c:	2b00      	cmp	r3, #0
 801494e:	db1f      	blt.n	8014990 <phhalHw_Pn5180_SetCardMode+0x248>
 8014950:	2b03      	cmp	r3, #3
 8014952:	d81d      	bhi.n	8014990 <phhalHw_Pn5180_SetCardMode+0x248>
 8014954:	a201      	add	r2, pc, #4	@ (adr r2, 801495c <phhalHw_Pn5180_SetCardMode+0x214>)
 8014956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801495a:	bf00      	nop
 801495c:	08014973 	.word	0x08014973
 8014960:	08014979 	.word	0x08014979
 8014964:	0801497f 	.word	0x0801497f
 8014968:	08014985 	.word	0x08014985
 801496c:	2bff      	cmp	r3, #255	@ 0xff
 801496e:	d00c      	beq.n	801498a <phhalHw_Pn5180_SetCardMode+0x242>
 8014970:	e00e      	b.n	8014990 <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 8014972:	2380      	movs	r3, #128	@ 0x80
 8014974:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8014976:	e00e      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 8014978:	2381      	movs	r3, #129	@ 0x81
 801497a:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 801497c:	e00b      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 801497e:	2382      	movs	r3, #130	@ 0x82
 8014980:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8014982:	e008      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 8014984:	2383      	movs	r3, #131	@ 0x83
 8014986:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8014988:	e005      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801498a:	23ff      	movs	r3, #255	@ 0xff
 801498c:	75bb      	strb	r3, [r7, #22]
                    break;
 801498e:	e002      	b.n	8014996 <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014990:	f240 2321 	movw	r3, #545	@ 0x221
 8014994:	e1ca      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 8014996:	e1a7      	b.n	8014ce8 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 8014998:	897b      	ldrh	r3, [r7, #10]
 801499a:	2b03      	cmp	r3, #3
 801499c:	dc0e      	bgt.n	80149bc <phhalHw_Pn5180_SetCardMode+0x274>
 801499e:	2b00      	cmp	r3, #0
 80149a0:	db1e      	blt.n	80149e0 <phhalHw_Pn5180_SetCardMode+0x298>
 80149a2:	2b03      	cmp	r3, #3
 80149a4:	d81c      	bhi.n	80149e0 <phhalHw_Pn5180_SetCardMode+0x298>
 80149a6:	a201      	add	r2, pc, #4	@ (adr r2, 80149ac <phhalHw_Pn5180_SetCardMode+0x264>)
 80149a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ac:	080149c3 	.word	0x080149c3
 80149b0:	080149c9 	.word	0x080149c9
 80149b4:	080149cf 	.word	0x080149cf
 80149b8:	080149d5 	.word	0x080149d5
 80149bc:	2bff      	cmp	r3, #255	@ 0xff
 80149be:	d00c      	beq.n	80149da <phhalHw_Pn5180_SetCardMode+0x292>
 80149c0:	e00e      	b.n	80149e0 <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 80149c2:	2304      	movs	r3, #4
 80149c4:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 80149c6:	e00e      	b.n	80149e6 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 80149c8:	2305      	movs	r3, #5
 80149ca:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 80149cc:	e00b      	b.n	80149e6 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 80149ce:	2306      	movs	r3, #6
 80149d0:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 80149d2:	e008      	b.n	80149e6 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 80149d4:	2307      	movs	r3, #7
 80149d6:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 80149d8:	e005      	b.n	80149e6 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80149da:	23ff      	movs	r3, #255	@ 0xff
 80149dc:	75fb      	strb	r3, [r7, #23]
                break;
 80149de:	e002      	b.n	80149e6 <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80149e0:	f240 2321 	movw	r3, #545	@ 0x221
 80149e4:	e1a2      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 80149e6:	893b      	ldrh	r3, [r7, #8]
 80149e8:	2b03      	cmp	r3, #3
 80149ea:	dc0f      	bgt.n	8014a0c <phhalHw_Pn5180_SetCardMode+0x2c4>
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	db1f      	blt.n	8014a30 <phhalHw_Pn5180_SetCardMode+0x2e8>
 80149f0:	2b03      	cmp	r3, #3
 80149f2:	d81d      	bhi.n	8014a30 <phhalHw_Pn5180_SetCardMode+0x2e8>
 80149f4:	a201      	add	r2, pc, #4	@ (adr r2, 80149fc <phhalHw_Pn5180_SetCardMode+0x2b4>)
 80149f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149fa:	bf00      	nop
 80149fc:	08014a13 	.word	0x08014a13
 8014a00:	08014a19 	.word	0x08014a19
 8014a04:	08014a1f 	.word	0x08014a1f
 8014a08:	08014a25 	.word	0x08014a25
 8014a0c:	2bff      	cmp	r3, #255	@ 0xff
 8014a0e:	d00c      	beq.n	8014a2a <phhalHw_Pn5180_SetCardMode+0x2e2>
 8014a10:	e00e      	b.n	8014a30 <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8014a12:	2384      	movs	r3, #132	@ 0x84
 8014a14:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8014a16:	e00e      	b.n	8014a36 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8014a18:	2385      	movs	r3, #133	@ 0x85
 8014a1a:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8014a1c:	e00b      	b.n	8014a36 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 8014a1e:	2386      	movs	r3, #134	@ 0x86
 8014a20:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8014a22:	e008      	b.n	8014a36 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8014a24:	2387      	movs	r3, #135	@ 0x87
 8014a26:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8014a28:	e005      	b.n	8014a36 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014a2a:	23ff      	movs	r3, #255	@ 0xff
 8014a2c:	75bb      	strb	r3, [r7, #22]
                break;
 8014a2e:	e002      	b.n	8014a36 <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014a30:	f240 2321 	movw	r3, #545	@ 0x221
 8014a34:	e17a      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8014a36:	e157      	b.n	8014ce8 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d05c      	beq.n	8014afa <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d12b      	bne.n	8014aa2 <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 8014a4a:	897b      	ldrh	r3, [r7, #10]
 8014a4c:	2bff      	cmp	r3, #255	@ 0xff
 8014a4e:	d00c      	beq.n	8014a6a <phhalHw_Pn5180_SetCardMode+0x322>
 8014a50:	2bff      	cmp	r3, #255	@ 0xff
 8014a52:	dc0d      	bgt.n	8014a70 <phhalHw_Pn5180_SetCardMode+0x328>
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d002      	beq.n	8014a5e <phhalHw_Pn5180_SetCardMode+0x316>
 8014a58:	2b02      	cmp	r3, #2
 8014a5a:	d003      	beq.n	8014a64 <phhalHw_Pn5180_SetCardMode+0x31c>
 8014a5c:	e008      	b.n	8014a70 <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 8014a5e:	2317      	movs	r3, #23
 8014a60:	75fb      	strb	r3, [r7, #23]
                        break;
 8014a62:	e008      	b.n	8014a76 <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 8014a64:	2318      	movs	r3, #24
 8014a66:	75fb      	strb	r3, [r7, #23]
                        break;
 8014a68:	e005      	b.n	8014a76 <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014a6a:	23ff      	movs	r3, #255	@ 0xff
 8014a6c:	75fb      	strb	r3, [r7, #23]
                        break;
 8014a6e:	e002      	b.n	8014a76 <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014a70:	f240 2321 	movw	r3, #545	@ 0x221
 8014a74:	e15a      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8014a76:	893b      	ldrh	r3, [r7, #8]
 8014a78:	2bff      	cmp	r3, #255	@ 0xff
 8014a7a:	d00c      	beq.n	8014a96 <phhalHw_Pn5180_SetCardMode+0x34e>
 8014a7c:	2bff      	cmp	r3, #255	@ 0xff
 8014a7e:	dc0d      	bgt.n	8014a9c <phhalHw_Pn5180_SetCardMode+0x354>
 8014a80:	2b01      	cmp	r3, #1
 8014a82:	d002      	beq.n	8014a8a <phhalHw_Pn5180_SetCardMode+0x342>
 8014a84:	2b02      	cmp	r3, #2
 8014a86:	d003      	beq.n	8014a90 <phhalHw_Pn5180_SetCardMode+0x348>
 8014a88:	e008      	b.n	8014a9c <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 8014a8a:	2397      	movs	r3, #151	@ 0x97
 8014a8c:	75bb      	strb	r3, [r7, #22]
                        break;
 8014a8e:	e060      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 8014a90:	2398      	movs	r3, #152	@ 0x98
 8014a92:	75bb      	strb	r3, [r7, #22]
                        break;
 8014a94:	e05d      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014a96:	23ff      	movs	r3, #255	@ 0xff
 8014a98:	75bb      	strb	r3, [r7, #22]
                        break;
 8014a9a:	e05a      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014a9c:	f240 2321 	movw	r3, #545	@ 0x221
 8014aa0:	e144      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8014aa2:	897b      	ldrh	r3, [r7, #10]
 8014aa4:	2bff      	cmp	r3, #255	@ 0xff
 8014aa6:	d00c      	beq.n	8014ac2 <phhalHw_Pn5180_SetCardMode+0x37a>
 8014aa8:	2bff      	cmp	r3, #255	@ 0xff
 8014aaa:	dc0d      	bgt.n	8014ac8 <phhalHw_Pn5180_SetCardMode+0x380>
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d002      	beq.n	8014ab6 <phhalHw_Pn5180_SetCardMode+0x36e>
 8014ab0:	2b02      	cmp	r3, #2
 8014ab2:	d003      	beq.n	8014abc <phhalHw_Pn5180_SetCardMode+0x374>
 8014ab4:	e008      	b.n	8014ac8 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8014ab6:	231a      	movs	r3, #26
 8014ab8:	75fb      	strb	r3, [r7, #23]
                        break;
 8014aba:	e008      	b.n	8014ace <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8014abc:	231b      	movs	r3, #27
 8014abe:	75fb      	strb	r3, [r7, #23]
                        break;
 8014ac0:	e005      	b.n	8014ace <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014ac2:	23ff      	movs	r3, #255	@ 0xff
 8014ac4:	75fb      	strb	r3, [r7, #23]
                        break;
 8014ac6:	e002      	b.n	8014ace <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014ac8:	f240 2321 	movw	r3, #545	@ 0x221
 8014acc:	e12e      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8014ace:	893b      	ldrh	r3, [r7, #8]
 8014ad0:	2bff      	cmp	r3, #255	@ 0xff
 8014ad2:	d00c      	beq.n	8014aee <phhalHw_Pn5180_SetCardMode+0x3a6>
 8014ad4:	2bff      	cmp	r3, #255	@ 0xff
 8014ad6:	dc0d      	bgt.n	8014af4 <phhalHw_Pn5180_SetCardMode+0x3ac>
 8014ad8:	2b01      	cmp	r3, #1
 8014ada:	d002      	beq.n	8014ae2 <phhalHw_Pn5180_SetCardMode+0x39a>
 8014adc:	2b02      	cmp	r3, #2
 8014ade:	d003      	beq.n	8014ae8 <phhalHw_Pn5180_SetCardMode+0x3a0>
 8014ae0:	e008      	b.n	8014af4 <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8014ae2:	239a      	movs	r3, #154	@ 0x9a
 8014ae4:	75bb      	strb	r3, [r7, #22]
                        break;
 8014ae6:	e034      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8014ae8:	239b      	movs	r3, #155	@ 0x9b
 8014aea:	75bb      	strb	r3, [r7, #22]
                        break;
 8014aec:	e031      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014aee:	23ff      	movs	r3, #255	@ 0xff
 8014af0:	75bb      	strb	r3, [r7, #22]
                        break;
 8014af2:	e02e      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014af4:	f240 2321 	movw	r3, #545	@ 0x221
 8014af8:	e118      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 8014afa:	897b      	ldrh	r3, [r7, #10]
 8014afc:	2bff      	cmp	r3, #255	@ 0xff
 8014afe:	d00c      	beq.n	8014b1a <phhalHw_Pn5180_SetCardMode+0x3d2>
 8014b00:	2bff      	cmp	r3, #255	@ 0xff
 8014b02:	dc0d      	bgt.n	8014b20 <phhalHw_Pn5180_SetCardMode+0x3d8>
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d002      	beq.n	8014b0e <phhalHw_Pn5180_SetCardMode+0x3c6>
 8014b08:	2b02      	cmp	r3, #2
 8014b0a:	d003      	beq.n	8014b14 <phhalHw_Pn5180_SetCardMode+0x3cc>
 8014b0c:	e008      	b.n	8014b20 <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 8014b0e:	2308      	movs	r3, #8
 8014b10:	75fb      	strb	r3, [r7, #23]
                    break;
 8014b12:	e008      	b.n	8014b26 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 8014b14:	2309      	movs	r3, #9
 8014b16:	75fb      	strb	r3, [r7, #23]
                    break;
 8014b18:	e005      	b.n	8014b26 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014b1a:	23ff      	movs	r3, #255	@ 0xff
 8014b1c:	75fb      	strb	r3, [r7, #23]
                    break;
 8014b1e:	e002      	b.n	8014b26 <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014b20:	f240 2321 	movw	r3, #545	@ 0x221
 8014b24:	e102      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 8014b26:	893b      	ldrh	r3, [r7, #8]
 8014b28:	2bff      	cmp	r3, #255	@ 0xff
 8014b2a:	d00c      	beq.n	8014b46 <phhalHw_Pn5180_SetCardMode+0x3fe>
 8014b2c:	2bff      	cmp	r3, #255	@ 0xff
 8014b2e:	dc0d      	bgt.n	8014b4c <phhalHw_Pn5180_SetCardMode+0x404>
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d002      	beq.n	8014b3a <phhalHw_Pn5180_SetCardMode+0x3f2>
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d003      	beq.n	8014b40 <phhalHw_Pn5180_SetCardMode+0x3f8>
 8014b38:	e008      	b.n	8014b4c <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 8014b3a:	2388      	movs	r3, #136	@ 0x88
 8014b3c:	75bb      	strb	r3, [r7, #22]
                    break;
 8014b3e:	e008      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8014b40:	2389      	movs	r3, #137	@ 0x89
 8014b42:	75bb      	strb	r3, [r7, #22]
                    break;
 8014b44:	e005      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014b46:	23ff      	movs	r3, #255	@ 0xff
 8014b48:	75bb      	strb	r3, [r7, #22]
                    break;
 8014b4a:	e002      	b.n	8014b52 <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014b4c:	f240 2321 	movw	r3, #545	@ 0x221
 8014b50:	e0ec      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 8014b52:	e0c9      	b.n	8014ce8 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 8014b54:	897b      	ldrh	r3, [r7, #10]
 8014b56:	2b0b      	cmp	r3, #11
 8014b58:	d002      	beq.n	8014b60 <phhalHw_Pn5180_SetCardMode+0x418>
 8014b5a:	2bff      	cmp	r3, #255	@ 0xff
 8014b5c:	d003      	beq.n	8014b66 <phhalHw_Pn5180_SetCardMode+0x41e>
 8014b5e:	e005      	b.n	8014b6c <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8014b60:	230e      	movs	r3, #14
 8014b62:	75fb      	strb	r3, [r7, #23]
                break;
 8014b64:	e005      	b.n	8014b72 <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014b66:	23ff      	movs	r3, #255	@ 0xff
 8014b68:	75fb      	strb	r3, [r7, #23]
                break;
 8014b6a:	e002      	b.n	8014b72 <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014b6c:	f240 2321 	movw	r3, #545	@ 0x221
 8014b70:	e0dc      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8014b72:	893b      	ldrh	r3, [r7, #8]
 8014b74:	2b0f      	cmp	r3, #15
 8014b76:	dc25      	bgt.n	8014bc4 <phhalHw_Pn5180_SetCardMode+0x47c>
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	dd32      	ble.n	8014be2 <phhalHw_Pn5180_SetCardMode+0x49a>
 8014b7c:	3b01      	subs	r3, #1
 8014b7e:	2b0e      	cmp	r3, #14
 8014b80:	d82f      	bhi.n	8014be2 <phhalHw_Pn5180_SetCardMode+0x49a>
 8014b82:	a201      	add	r2, pc, #4	@ (adr r2, 8014b88 <phhalHw_Pn5180_SetCardMode+0x440>)
 8014b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b88:	08014bd7 	.word	0x08014bd7
 8014b8c:	08014be3 	.word	0x08014be3
 8014b90:	08014be3 	.word	0x08014be3
 8014b94:	08014be3 	.word	0x08014be3
 8014b98:	08014be3 	.word	0x08014be3
 8014b9c:	08014be3 	.word	0x08014be3
 8014ba0:	08014be3 	.word	0x08014be3
 8014ba4:	08014be3 	.word	0x08014be3
 8014ba8:	08014be3 	.word	0x08014be3
 8014bac:	08014be3 	.word	0x08014be3
 8014bb0:	08014be3 	.word	0x08014be3
 8014bb4:	08014bd7 	.word	0x08014bd7
 8014bb8:	08014bcb 	.word	0x08014bcb
 8014bbc:	08014bd7 	.word	0x08014bd7
 8014bc0:	08014bd1 	.word	0x08014bd1
 8014bc4:	2bff      	cmp	r3, #255	@ 0xff
 8014bc6:	d009      	beq.n	8014bdc <phhalHw_Pn5180_SetCardMode+0x494>
 8014bc8:	e00b      	b.n	8014be2 <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 8014bca:	238d      	movs	r3, #141	@ 0x8d
 8014bcc:	75bb      	strb	r3, [r7, #22]
                break;
 8014bce:	e00b      	b.n	8014be8 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 8014bd0:	238e      	movs	r3, #142	@ 0x8e
 8014bd2:	75bb      	strb	r3, [r7, #22]
                break;
 8014bd4:	e008      	b.n	8014be8 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8014bd6:	f240 2323 	movw	r3, #547	@ 0x223
 8014bda:	e0a7      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014bdc:	23ff      	movs	r3, #255	@ 0xff
 8014bde:	75bb      	strb	r3, [r7, #22]
                break;
 8014be0:	e002      	b.n	8014be8 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014be2:	f240 2321 	movw	r3, #545	@ 0x221
 8014be6:	e0a1      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8014be8:	e07e      	b.n	8014ce8 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 8014bea:	897b      	ldrh	r3, [r7, #10]
 8014bec:	2b11      	cmp	r3, #17
 8014bee:	d002      	beq.n	8014bf6 <phhalHw_Pn5180_SetCardMode+0x4ae>
 8014bf0:	2bff      	cmp	r3, #255	@ 0xff
 8014bf2:	d00c      	beq.n	8014c0e <phhalHw_Pn5180_SetCardMode+0x4c6>
 8014bf4:	e00e      	b.n	8014c14 <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 8014bf6:	88fb      	ldrh	r3, [r7, #6]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d005      	beq.n	8014c08 <phhalHw_Pn5180_SetCardMode+0x4c0>
 8014bfc:	88fb      	ldrh	r3, [r7, #6]
 8014bfe:	2b02      	cmp	r3, #2
 8014c00:	d002      	beq.n	8014c08 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014c02:	f240 2321 	movw	r3, #545	@ 0x221
 8014c06:	e091      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 8014c08:	2310      	movs	r3, #16
 8014c0a:	75fb      	strb	r3, [r7, #23]
                break;
 8014c0c:	e005      	b.n	8014c1a <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014c0e:	23ff      	movs	r3, #255	@ 0xff
 8014c10:	75fb      	strb	r3, [r7, #23]
                break;
 8014c12:	e002      	b.n	8014c1a <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014c14:	f240 2321 	movw	r3, #545	@ 0x221
 8014c18:	e088      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8014c1a:	893b      	ldrh	r3, [r7, #8]
 8014c1c:	2b16      	cmp	r3, #22
 8014c1e:	dc0f      	bgt.n	8014c40 <phhalHw_Pn5180_SetCardMode+0x4f8>
 8014c20:	2b13      	cmp	r3, #19
 8014c22:	db1f      	blt.n	8014c64 <phhalHw_Pn5180_SetCardMode+0x51c>
 8014c24:	3b13      	subs	r3, #19
 8014c26:	2b03      	cmp	r3, #3
 8014c28:	d81c      	bhi.n	8014c64 <phhalHw_Pn5180_SetCardMode+0x51c>
 8014c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8014c30 <phhalHw_Pn5180_SetCardMode+0x4e8>)
 8014c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c30:	08014c47 	.word	0x08014c47
 8014c34:	08014c53 	.word	0x08014c53
 8014c38:	08014c4d 	.word	0x08014c4d
 8014c3c:	08014c59 	.word	0x08014c59
 8014c40:	2bff      	cmp	r3, #255	@ 0xff
 8014c42:	d00c      	beq.n	8014c5e <phhalHw_Pn5180_SetCardMode+0x516>
 8014c44:	e00e      	b.n	8014c64 <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 8014c46:	2390      	movs	r3, #144	@ 0x90
 8014c48:	75bb      	strb	r3, [r7, #22]
                break;
 8014c4a:	e00e      	b.n	8014c6a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 8014c4c:	238f      	movs	r3, #143	@ 0x8f
 8014c4e:	75bb      	strb	r3, [r7, #22]
                break;
 8014c50:	e00b      	b.n	8014c6a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 8014c52:	2392      	movs	r3, #146	@ 0x92
 8014c54:	75bb      	strb	r3, [r7, #22]
                break;
 8014c56:	e008      	b.n	8014c6a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8014c58:	2391      	movs	r3, #145	@ 0x91
 8014c5a:	75bb      	strb	r3, [r7, #22]
                break;
 8014c5c:	e005      	b.n	8014c6a <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014c5e:	23ff      	movs	r3, #255	@ 0xff
 8014c60:	75bb      	strb	r3, [r7, #22]
                break;
 8014c62:	e002      	b.n	8014c6a <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014c64:	f240 2321 	movw	r3, #545	@ 0x221
 8014c68:	e060      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8014c6a:	e03d      	b.n	8014ce8 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 8014c6c:	897b      	ldrh	r3, [r7, #10]
 8014c6e:	2bff      	cmp	r3, #255	@ 0xff
 8014c70:	d013      	beq.n	8014c9a <phhalHw_Pn5180_SetCardMode+0x552>
 8014c72:	2bff      	cmp	r3, #255	@ 0xff
 8014c74:	dc14      	bgt.n	8014ca0 <phhalHw_Pn5180_SetCardMode+0x558>
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	d00c      	beq.n	8014c94 <phhalHw_Pn5180_SetCardMode+0x54c>
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	dc10      	bgt.n	8014ca0 <phhalHw_Pn5180_SetCardMode+0x558>
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d002      	beq.n	8014c88 <phhalHw_Pn5180_SetCardMode+0x540>
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	d003      	beq.n	8014c8e <phhalHw_Pn5180_SetCardMode+0x546>
 8014c86:	e00b      	b.n	8014ca0 <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 8014c88:	230a      	movs	r3, #10
 8014c8a:	75fb      	strb	r3, [r7, #23]
                break;
 8014c8c:	e00b      	b.n	8014ca6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 8014c8e:	230b      	movs	r3, #11
 8014c90:	75fb      	strb	r3, [r7, #23]
            break;
 8014c92:	e008      	b.n	8014ca6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 8014c94:	230c      	movs	r3, #12
 8014c96:	75fb      	strb	r3, [r7, #23]
                break;
 8014c98:	e005      	b.n	8014ca6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014c9a:	23ff      	movs	r3, #255	@ 0xff
 8014c9c:	75fb      	strb	r3, [r7, #23]
                break;
 8014c9e:	e002      	b.n	8014ca6 <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014ca0:	f240 2321 	movw	r3, #545	@ 0x221
 8014ca4:	e042      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8014ca6:	893b      	ldrh	r3, [r7, #8]
 8014ca8:	2bff      	cmp	r3, #255	@ 0xff
 8014caa:	d013      	beq.n	8014cd4 <phhalHw_Pn5180_SetCardMode+0x58c>
 8014cac:	2bff      	cmp	r3, #255	@ 0xff
 8014cae:	dc14      	bgt.n	8014cda <phhalHw_Pn5180_SetCardMode+0x592>
 8014cb0:	2b02      	cmp	r3, #2
 8014cb2:	d00c      	beq.n	8014cce <phhalHw_Pn5180_SetCardMode+0x586>
 8014cb4:	2b02      	cmp	r3, #2
 8014cb6:	dc10      	bgt.n	8014cda <phhalHw_Pn5180_SetCardMode+0x592>
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d002      	beq.n	8014cc2 <phhalHw_Pn5180_SetCardMode+0x57a>
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d003      	beq.n	8014cc8 <phhalHw_Pn5180_SetCardMode+0x580>
 8014cc0:	e00b      	b.n	8014cda <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 8014cc2:	238a      	movs	r3, #138	@ 0x8a
 8014cc4:	75bb      	strb	r3, [r7, #22]
                break;
 8014cc6:	e00b      	b.n	8014ce0 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 8014cc8:	238b      	movs	r3, #139	@ 0x8b
 8014cca:	75bb      	strb	r3, [r7, #22]
            break;
 8014ccc:	e008      	b.n	8014ce0 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 8014cce:	238c      	movs	r3, #140	@ 0x8c
 8014cd0:	75bb      	strb	r3, [r7, #22]
                break;
 8014cd2:	e005      	b.n	8014ce0 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8014cd4:	23ff      	movs	r3, #255	@ 0xff
 8014cd6:	75bb      	strb	r3, [r7, #22]
                break;
 8014cd8:	e002      	b.n	8014ce0 <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014cda:	f240 2321 	movw	r3, #545	@ 0x221
 8014cde:	e025      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 8014ce0:	e002      	b.n	8014ce8 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014ce2:	f240 2321 	movw	r3, #545	@ 0x221
 8014ce6:	e021      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 8014ce8:	7dfb      	ldrb	r3, [r7, #23]
 8014cea:	2bff      	cmp	r3, #255	@ 0xff
 8014cec:	d102      	bne.n	8014cf4 <phhalHw_Pn5180_SetCardMode+0x5ac>
 8014cee:	7dbb      	ldrb	r3, [r7, #22]
 8014cf0:	2bff      	cmp	r3, #255	@ 0xff
 8014cf2:	d00c      	beq.n	8014d0e <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8014cf4:	7dba      	ldrb	r2, [r7, #22]
 8014cf6:	7dfb      	ldrb	r3, [r7, #23]
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f7fe ffc8 	bl	8013c90 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 8014d00:	4603      	mov	r3, r0
 8014d02:	82bb      	strh	r3, [r7, #20]
 8014d04:	8abb      	ldrh	r3, [r7, #20]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d001      	beq.n	8014d0e <phhalHw_Pn5180_SetCardMode+0x5c6>
 8014d0a:	8abb      	ldrh	r3, [r7, #20]
 8014d0c:	e00e      	b.n	8014d2c <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8014d0e:	897b      	ldrh	r3, [r7, #10]
 8014d10:	2bff      	cmp	r3, #255	@ 0xff
 8014d12:	d003      	beq.n	8014d1c <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	897a      	ldrh	r2, [r7, #10]
 8014d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8014d1c:	893b      	ldrh	r3, [r7, #8]
 8014d1e:	2bff      	cmp	r3, #255	@ 0xff
 8014d20:	d003      	beq.n	8014d2a <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	893a      	ldrh	r2, [r7, #8]
 8014d26:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 8014d2a:	2300      	movs	r3, #0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3718      	adds	r7, #24
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b088      	sub	sp, #32
 8014d38:	af02      	add	r7, sp, #8
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	807b      	strh	r3, [r7, #2]
 8014d40:	4613      	mov	r3, r2
 8014d42:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 8014d44:	2300      	movs	r3, #0
 8014d46:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8014d48:	787b      	ldrb	r3, [r7, #1]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d005      	beq.n	8014d5a <phhalHw_Pn5180_SetTmo+0x26>
 8014d4e:	787b      	ldrb	r3, [r7, #1]
 8014d50:	2b01      	cmp	r3, #1
 8014d52:	d002      	beq.n	8014d5a <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8014d54:	f240 2321 	movw	r3, #545	@ 0x221
 8014d58:	e051      	b.n	8014dfe <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 8014d5a:	887b      	ldrh	r3, [r7, #2]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d101      	bne.n	8014d64 <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 8014d60:	2300      	movs	r3, #0
 8014d62:	e04c      	b.n	8014dfe <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 8014d64:	787b      	ldrb	r3, [r7, #1]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d125      	bne.n	8014db6 <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8014d70:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8014d74:	d20d      	bcs.n	8014d92 <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 8014d76:	f107 030c 	add.w	r3, r7, #12
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f000 f966 	bl	8015050 <phhalHw_Pn5180_Int_GetDigiDelay>
 8014d84:	4603      	mov	r3, r0
 8014d86:	81fb      	strh	r3, [r7, #14]
 8014d88:	89fb      	ldrh	r3, [r7, #14]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d001      	beq.n	8014d92 <phhalHw_Pn5180_SetTmo+0x5e>
 8014d8e:	89fb      	ldrh	r3, [r7, #14]
 8014d90:	e035      	b.n	8014dfe <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 8014d92:	2300      	movs	r3, #0
 8014d94:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 8014d96:	f240 534c 	movw	r3, #1356	@ 0x54c
 8014d9a:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 8014d9c:	887b      	ldrh	r3, [r7, #2]
 8014d9e:	89ba      	ldrh	r2, [r7, #12]
 8014da0:	4413      	add	r3, r2
 8014da2:	461a      	mov	r2, r3
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	fb02 f303 	mul.w	r3, r2, r3
 8014daa:	4a17      	ldr	r2, [pc, #92]	@ (8014e08 <phhalHw_Pn5180_SetTmo+0xd4>)
 8014dac:	fba2 2303 	umull	r2, r3, r2, r3
 8014db0:	095b      	lsrs	r3, r3, #5
 8014db2:	613b      	str	r3, [r7, #16]
 8014db4:	e00f      	b.n	8014dd6 <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 8014db6:	233c      	movs	r3, #60	@ 0x3c
 8014db8:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 8014dba:	887b      	ldrh	r3, [r7, #2]
 8014dbc:	f644 5248 	movw	r2, #19784	@ 0x4d48
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	d805      	bhi.n	8014dd0 <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 8014dc4:	887b      	ldrh	r3, [r7, #2]
 8014dc6:	2235      	movs	r2, #53	@ 0x35
 8014dc8:	fb02 f303 	mul.w	r3, r2, r3
 8014dcc:	613b      	str	r3, [r7, #16]
 8014dce:	e002      	b.n	8014dd6 <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8014dd0:	f240 2322 	movw	r3, #546	@ 0x222
 8014dd4:	e013      	b.n	8014dfe <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	9301      	str	r3, [sp, #4]
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014de2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014de6:	210f      	movs	r1, #15
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f7ff f938 	bl	801405e <phhalHw_Pn5180_TimerStart>
 8014dee:	4603      	mov	r3, r0
 8014df0:	81fb      	strh	r3, [r7, #14]
 8014df2:	89fb      	ldrh	r3, [r7, #14]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d001      	beq.n	8014dfc <phhalHw_Pn5180_SetTmo+0xc8>
 8014df8:	89fb      	ldrh	r3, [r7, #14]
 8014dfa:	e000      	b.n	8014dfe <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 8014dfc:	2300      	movs	r3, #0
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3718      	adds	r7, #24
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	51eb851f 	.word	0x51eb851f

08014e0c <phhalHw_Pn5180_Int_Wait>:

phStatus_t phhalHw_Pn5180_Int_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint32_t dwLoadValue,
    uint32_t wPrescaler)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b094      	sub	sp, #80	@ 0x50
 8014e10:	af02      	add	r7, sp, #8
 8014e12:	60f8      	str	r0, [r7, #12]
 8014e14:	60b9      	str	r1, [r7, #8]
 8014e16:	607a      	str	r2, [r7, #4]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwIrqStatusReg;

    /* Setting Timer1 & Reload value Registers */
    bTmrConfigReg = TIMER0_CONFIG;
 8014e18:	230e      	movs	r3, #14
 8014e1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bTmrReloadReg = TIMER0_RELOAD;
 8014e1e:	230b      	movs	r3, #11
 8014e20:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 8014e24:	2301      	movs	r3, #1
 8014e26:	643b      	str	r3, [r7, #64]	@ 0x40

    /*write 0 to stop timer1*/
    wSizeOfRegTypeValueSets = 0U;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8014e2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e2e:	1c5a      	adds	r2, r3, #1
 8014e30:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e32:	3348      	adds	r3, #72	@ 0x48
 8014e34:	443b      	add	r3, r7
 8014e36:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8014e3a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8014e3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e40:	1c5a      	adds	r2, r3, #1
 8014e42:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e44:	3348      	adds	r3, #72	@ 0x48
 8014e46:	443b      	add	r3, r7
 8014e48:	2201      	movs	r2, #1
 8014e4a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8014e4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e50:	1c5a      	adds	r2, r3, #1
 8014e52:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e54:	3348      	adds	r3, #72	@ 0x48
 8014e56:	443b      	add	r3, r7
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8014e5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e64:	3348      	adds	r3, #72	@ 0x48
 8014e66:	443b      	add	r3, r7
 8014e68:	2200      	movs	r2, #0
 8014e6a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8014e6e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e70:	1c5a      	adds	r2, r3, #1
 8014e72:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e74:	3348      	adds	r3, #72	@ 0x48
 8014e76:	443b      	add	r3, r7
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8014e7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e80:	1c5a      	adds	r2, r3, #1
 8014e82:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e84:	3348      	adds	r3, #72	@ 0x48
 8014e86:	443b      	add	r3, r7
 8014e88:	2200      	movs	r2, #0
 8014e8a:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /*load the timer 2 reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 8014e8e:	68bb      	ldr	r3, [r7, #8]
 8014e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e94:	63bb      	str	r3, [r7, #56]	@ 0x38
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrReloadReg;
 8014e96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014e98:	1c5a      	adds	r2, r3, #1
 8014e9a:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014e9c:	3348      	adds	r3, #72	@ 0x48
 8014e9e:	443b      	add	r3, r7
 8014ea0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8014ea4:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8014ea8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014eaa:	1c5a      	adds	r2, r3, #1
 8014eac:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014eae:	3348      	adds	r3, #72	@ 0x48
 8014eb0:	443b      	add	r3, r7
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014eb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014eba:	1c5a      	adds	r2, r3, #1
 8014ebc:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014ec0:	b2d2      	uxtb	r2, r2
 8014ec2:	3348      	adds	r3, #72	@ 0x48
 8014ec4:	443b      	add	r3, r7
 8014ec6:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ecc:	0a1a      	lsrs	r2, r3, #8
 8014ece:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ed0:	1c59      	adds	r1, r3, #1
 8014ed2:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014ed4:	b2d2      	uxtb	r2, r2
 8014ed6:	3348      	adds	r3, #72	@ 0x48
 8014ed8:	443b      	add	r3, r7
 8014eda:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8014ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ee0:	0c1a      	lsrs	r2, r3, #16
 8014ee2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ee4:	1c59      	adds	r1, r3, #1
 8014ee6:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014ee8:	b2d2      	uxtb	r2, r2
 8014eea:	3348      	adds	r3, #72	@ 0x48
 8014eec:	443b      	add	r3, r7
 8014eee:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ef4:	0e1a      	lsrs	r2, r3, #24
 8014ef6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014ef8:	1c59      	adds	r1, r3, #1
 8014efa:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014efc:	b2d2      	uxtb	r2, r2
 8014efe:	3348      	adds	r3, #72	@ 0x48
 8014f00:	443b      	add	r3, r7
 8014f02:	f803 2c2c 	strb.w	r2, [r3, #-44]

    dwStartCond = TIMER0_CONFIG_T0_START_NOW_MASK;
 8014f06:	2340      	movs	r3, #64	@ 0x40
 8014f08:	637b      	str	r3, [r7, #52]	@ 0x34
    dwStopCond = 0x00U;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* T2_MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask);
 8014f0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f12:	431a      	orrs	r2, r3
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	4313      	orrs	r3, r2
 8014f18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014f1a:	4313      	orrs	r3, r2
 8014f1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8014f1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f20:	1c5a      	adds	r2, r3, #1
 8014f22:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014f24:	3348      	adds	r3, #72	@ 0x48
 8014f26:	443b      	add	r3, r7
 8014f28:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8014f2c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8014f30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f32:	1c5a      	adds	r2, r3, #1
 8014f34:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014f36:	3348      	adds	r3, #72	@ 0x48
 8014f38:	443b      	add	r3, r7
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8014f40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f42:	1c5a      	adds	r2, r3, #1
 8014f44:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8014f46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f48:	b2d2      	uxtb	r2, r2
 8014f4a:	3348      	adds	r3, #72	@ 0x48
 8014f4c:	443b      	add	r3, r7
 8014f4e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8014f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f54:	0a1a      	lsrs	r2, r3, #8
 8014f56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f58:	1c59      	adds	r1, r3, #1
 8014f5a:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014f5c:	b2d2      	uxtb	r2, r2
 8014f5e:	3348      	adds	r3, #72	@ 0x48
 8014f60:	443b      	add	r3, r7
 8014f62:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8014f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f68:	0c1a      	lsrs	r2, r3, #16
 8014f6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f6c:	1c59      	adds	r1, r3, #1
 8014f6e:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014f70:	b2d2      	uxtb	r2, r2
 8014f72:	3348      	adds	r3, #72	@ 0x48
 8014f74:	443b      	add	r3, r7
 8014f76:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8014f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f7c:	0e1a      	lsrs	r2, r3, #24
 8014f7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014f80:	1c59      	adds	r1, r3, #1
 8014f82:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8014f84:	b2d2      	uxtb	r2, r2
 8014f86:	3348      	adds	r3, #72	@ 0x48
 8014f88:	443b      	add	r3, r7
 8014f8a:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /* Clear Interrupt  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_TIMER0_IRQ_CLR_MASK));
 8014f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014f92:	2103      	movs	r1, #3
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f7fd ff81 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8014f9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d001      	beq.n	8014fa8 <phhalHw_Pn5180_Int_Wait+0x19c>
 8014fa4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014fa6:	e04f      	b.n	8015048 <phhalHw_Pn5180_Int_Wait+0x23c>
    phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8014fae:	2300      	movs	r3, #0
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	f007 f90e 	bl	801c1d4 <phOsal_EventClear>
    /* Enable IRQ source */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_TIMER0_IRQ_SET_ENABLE_MASK));
 8014fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014fbc:	2101      	movs	r1, #1
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f7fd ff6c 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8014fc8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d001      	beq.n	8014fd2 <phhalHw_Pn5180_Int_Wait+0x1c6>
 8014fce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014fd0:	e03a      	b.n	8015048 <phhalHw_Pn5180_Int_Wait+0x23c>
    /*Start the timer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8014fd2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014fd4:	f107 031c 	add.w	r3, r7, #28
 8014fd8:	4619      	mov	r1, r3
 8014fda:	68f8      	ldr	r0, [r7, #12]
 8014fdc:	f7fe f8c0 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8014fe4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d001      	beq.n	8014fee <phhalHw_Pn5180_Int_Wait+0x1e2>
 8014fea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014fec:	e02c      	b.n	8015048 <phhalHw_Pn5180_Int_Wait+0x23c>

    uint32_t irqEnable;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_ENABLE, &irqEnable);
 8014fee:	f107 0314 	add.w	r3, r7, #20
 8014ff2:	461a      	mov	r2, r3
 8014ff4:	2101      	movs	r1, #1
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f7fe f964 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>

    uint32_t irqStatus;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &irqStatus);
 8014ffc:	f107 0310 	add.w	r3, r7, #16
 8015000:	461a      	mov	r2, r3
 8015002:	2102      	movs	r1, #2
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7fe f95d 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>

    /* Wait for the timer0 to expire. */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_WaitIrq(pDataParams,PH_ON,PH_OFF,IRQ_STATUS_TIMER0_IRQ_MASK,&dwIrqStatusReg));
 801500a:	f107 0318 	add.w	r3, r7, #24
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015014:	2200      	movs	r2, #0
 8015016:	2101      	movs	r1, #1
 8015018:	68f8      	ldr	r0, [r7, #12]
 801501a:	f000 fbd5 	bl	80157c8 <phhalHw_Pn5180_WaitIrq>
 801501e:	4603      	mov	r3, r0
 8015020:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8015022:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015024:	2b00      	cmp	r3, #0
 8015026:	d001      	beq.n	801502c <phhalHw_Pn5180_Int_Wait+0x220>
 8015028:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801502a:	e00d      	b.n	8015048 <phhalHw_Pn5180_Int_Wait+0x23c>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams,TIMER0_CONFIG, (uint32_t)(~TIMER0_CONFIG_T0_ENABLE_MASK)));
 801502c:	f06f 0201 	mvn.w	r2, #1
 8015030:	210e      	movs	r1, #14
 8015032:	68f8      	ldr	r0, [r7, #12]
 8015034:	f7fe f81e 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8015038:	4603      	mov	r3, r0
 801503a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801503c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801503e:	2b00      	cmp	r3, #0
 8015040:	d001      	beq.n	8015046 <phhalHw_Pn5180_Int_Wait+0x23a>
 8015042:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015044:	e000      	b.n	8015048 <phhalHw_Pn5180_Int_Wait+0x23c>
    return PH_ERR_SUCCESS;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3748      	adds	r7, #72	@ 0x48
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 8015050:	b480      	push	{r7}
 8015052:	b087      	sub	sp, #28
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	460b      	mov	r3, r1
 801505a:	607a      	str	r2, [r7, #4]
 801505c:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8015064:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801506c:	3b01      	subs	r3, #1
 801506e:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015076:	3b01      	subs	r3, #1
 8015078:	2b09      	cmp	r3, #9
 801507a:	f200 8086 	bhi.w	801518a <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 801507e:	a201      	add	r2, pc, #4	@ (adr r2, 8015084 <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 8015080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015084:	080150ad 	.word	0x080150ad
 8015088:	080150ad 	.word	0x080150ad
 801508c:	080150eb 	.word	0x080150eb
 8015090:	08015103 	.word	0x08015103
 8015094:	08015119 	.word	0x08015119
 8015098:	08015127 	.word	0x08015127
 801509c:	0801518b 	.word	0x0801518b
 80150a0:	0801518b 	.word	0x0801518b
 80150a4:	0801518b 	.word	0x0801518b
 80150a8:	080150eb 	.word	0x080150eb
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80150ac:	7d7a      	ldrb	r2, [r7, #21]
 80150ae:	8afb      	ldrh	r3, [r7, #22]
 80150b0:	493b      	ldr	r1, [pc, #236]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80150b2:	0092      	lsls	r2, r2, #2
 80150b4:	4413      	add	r3, r2
 80150b6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 80150be:	7afb      	ldrb	r3, [r7, #11]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d005      	beq.n	80150d0 <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	881b      	ldrh	r3, [r3, #0]
 80150c8:	330f      	adds	r3, #15
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d15a      	bne.n	8015190 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	881b      	ldrh	r3, [r3, #0]
 80150de:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	801a      	strh	r2, [r3, #0]
        }
        break;
 80150e8:	e052      	b.n	8015190 <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 80150ea:	2302      	movs	r3, #2
 80150ec:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80150ee:	7d7a      	ldrb	r2, [r7, #21]
 80150f0:	8afb      	ldrh	r3, [r7, #22]
 80150f2:	492b      	ldr	r1, [pc, #172]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80150f4:	0092      	lsls	r2, r2, #2
 80150f6:	4413      	add	r3, r2
 80150f8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	801a      	strh	r2, [r3, #0]
        break;
 8015100:	e047      	b.n	8015192 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 8015102:	7d7a      	ldrb	r2, [r7, #21]
 8015104:	8afb      	ldrh	r3, [r7, #22]
 8015106:	3b0c      	subs	r3, #12
 8015108:	4925      	ldr	r1, [pc, #148]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801510a:	0092      	lsls	r2, r2, #2
 801510c:	4413      	add	r3, r2
 801510e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	801a      	strh	r2, [r3, #0]
        break;
 8015116:	e03c      	b.n	8015192 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8015118:	7d7b      	ldrb	r3, [r7, #21]
 801511a:	4a21      	ldr	r2, [pc, #132]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 801511c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	801a      	strh	r2, [r3, #0]
        break;
 8015124:	e035      	b.n	8015192 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 8015126:	8afb      	ldrh	r3, [r7, #22]
 8015128:	3b13      	subs	r3, #19
 801512a:	2b03      	cmp	r3, #3
 801512c:	d829      	bhi.n	8015182 <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 801512e:	a201      	add	r2, pc, #4	@ (adr r2, 8015134 <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 8015130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015134:	08015145 	.word	0x08015145
 8015138:	08015163 	.word	0x08015163
 801513c:	08015153 	.word	0x08015153
 8015140:	08015173 	.word	0x08015173
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8015144:	7d7b      	ldrb	r3, [r7, #21]
 8015146:	4a16      	ldr	r2, [pc, #88]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8015148:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	801a      	strh	r2, [r3, #0]
                break;
 8015150:	e01a      	b.n	8015188 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 8015152:	7d7b      	ldrb	r3, [r7, #21]
 8015154:	4a12      	ldr	r2, [pc, #72]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8015156:	00db      	lsls	r3, r3, #3
 8015158:	4413      	add	r3, r2
 801515a:	885a      	ldrh	r2, [r3, #2]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	801a      	strh	r2, [r3, #0]
                break;
 8015160:	e012      	b.n	8015188 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 8015162:	7d7b      	ldrb	r3, [r7, #21]
 8015164:	4a0e      	ldr	r2, [pc, #56]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	4413      	add	r3, r2
 801516a:	889a      	ldrh	r2, [r3, #4]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	801a      	strh	r2, [r3, #0]
                break;
 8015170:	e00a      	b.n	8015188 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 8015172:	7d7b      	ldrb	r3, [r7, #21]
 8015174:	4a0a      	ldr	r2, [pc, #40]	@ (80151a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8015176:	00db      	lsls	r3, r3, #3
 8015178:	4413      	add	r3, r2
 801517a:	88da      	ldrh	r2, [r3, #6]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	801a      	strh	r2, [r3, #0]
                break;
 8015180:	e002      	b.n	8015188 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8015182:	f240 237f 	movw	r3, #639	@ 0x27f
 8015186:	e005      	b.n	8015194 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 8015188:	e003      	b.n	8015192 <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801518a:	f240 237f 	movw	r3, #639	@ 0x27f
 801518e:	e001      	b.n	8015194 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 8015190:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8015192:	2300      	movs	r3, #0
}
 8015194:	4618      	mov	r0, r3
 8015196:	371c      	adds	r7, #28
 8015198:	46bd      	mov	sp, r7
 801519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519e:	4770      	bx	lr
 80151a0:	08026d98 	.word	0x08026d98

080151a4 <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 80151a4:	b5b0      	push	{r4, r5, r7, lr}
 80151a6:	b094      	sub	sp, #80	@ 0x50
 80151a8:	af04      	add	r7, sp, #16
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80151b2:	2300      	movs	r3, #0
 80151b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 80151be:	2300      	movs	r3, #0
 80151c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 80151c2:	2300      	movs	r3, #0
 80151c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 80151c6:	2300      	movs	r3, #0
 80151c8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 80151cc:	2300      	movs	r3, #0
 80151ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 80151d2:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 80151d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80151da:	9300      	str	r3, [sp, #0]
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	2200      	movs	r2, #0
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	f000 faf1 	bl	80157c8 <phhalHw_Pn5180_WaitIrq>
 80151e6:	4603      	mov	r3, r0
 80151e8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80151ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d001      	beq.n	80151f4 <phhalHw_Pn5180_Receive_Int+0x50>
 80151f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80151f2:	e233      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80151fa:	2b01      	cmp	r3, #1
 80151fc:	d10d      	bne.n	801521a <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 80151fe:	f107 0318 	add.w	r3, r7, #24
 8015202:	461a      	mov	r2, r3
 8015204:	211d      	movs	r1, #29
 8015206:	68f8      	ldr	r0, [r7, #12]
 8015208:	f7fe f85c 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 801520c:	4603      	mov	r3, r0
 801520e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8015210:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8015212:	2b00      	cmp	r3, #0
 8015214:	d001      	beq.n	801521a <phhalHw_Pn5180_Receive_Int+0x76>
 8015216:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8015218:	e220      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 801521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801521c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015220:	2b00      	cmp	r3, #0
 8015222:	d002      	beq.n	801522a <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 8015224:	237f      	movs	r3, #127	@ 0x7f
 8015226:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8015228:	e089      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015230:	2b01      	cmp	r3, #1
 8015232:	d10f      	bne.n	8015254 <phhalHw_Pn5180_Receive_Int+0xb0>
 8015234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00a      	beq.n	8015254 <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015240:	f003 0301 	and.w	r3, r3, #1
 8015244:	2b00      	cmp	r3, #0
 8015246:	d002      	beq.n	801524e <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 8015248:	2300      	movs	r3, #0
 801524a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801524c:	e077      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 801524e:	2301      	movs	r3, #1
 8015250:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8015252:	e074      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 8015254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015256:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801525a:	2b00      	cmp	r3, #0
 801525c:	d02e      	beq.n	80152bc <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8015264:	2b00      	cmp	r3, #0
 8015266:	d009      	beq.n	801527c <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f7fa ff6d 	bl	8010148 <phhalHw_Pn5180_FieldReset>
 801526e:	4603      	mov	r3, r0
 8015270:	867b      	strh	r3, [r7, #50]	@ 0x32
 8015272:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8015274:	2b00      	cmp	r3, #0
 8015276:	d001      	beq.n	801527c <phhalHw_Pn5180_Receive_Int+0xd8>
 8015278:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801527a:	e1ef      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 801527c:	2301      	movs	r3, #1
 801527e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015286:	2b01      	cmp	r3, #1
 8015288:	d159      	bne.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801528e:	2b00      	cmp	r3, #0
 8015290:	d155      	bne.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015298:	2b00      	cmp	r3, #0
 801529a:	d007      	beq.n	80152ac <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 801529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d14b      	bne.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 80152a6:	237f      	movs	r3, #127	@ 0x7f
 80152a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80152aa:	e048      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80152ac:	69bb      	ldr	r3, [r7, #24]
 80152ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d043      	beq.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 80152b6:	2310      	movs	r3, #16
 80152b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80152ba:	e040      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d123      	bne.n	801530e <phhalHw_Pn5180_Receive_Int+0x16a>
 80152c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d01e      	beq.n	801530e <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 80152d0:	69bb      	ldr	r3, [r7, #24]
 80152d2:	0b5b      	lsrs	r3, r3, #13
 80152d4:	b2db      	uxtb	r3, r3
 80152d6:	f003 0307 	and.w	r3, r3, #7
 80152da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d009      	beq.n	80152fa <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 80152e6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80152ea:	2b04      	cmp	r3, #4
 80152ec:	d002      	beq.n	80152f4 <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 80152ee:	2310      	movs	r3, #16
 80152f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80152f2:	e024      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 80152f4:	2344      	movs	r3, #68	@ 0x44
 80152f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80152f8:	e021      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 80152fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80152fe:	2b04      	cmp	r3, #4
 8015300:	d102      	bne.n	8015308 <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 8015302:	2301      	movs	r3, #1
 8015304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8015306:	e01a      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 8015308:	2310      	movs	r3, #16
 801530a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 801530c:	e017      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 801530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015314:	2b00      	cmp	r3, #0
 8015316:	d012      	beq.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801531e:	2b00      	cmp	r3, #0
 8015320:	d106      	bne.n	8015330 <phhalHw_Pn5180_Receive_Int+0x18c>
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015326:	2b00      	cmp	r3, #0
 8015328:	d002      	beq.n	8015330 <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 801532a:	2310      	movs	r3, #16
 801532c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801532e:	e006      	b.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 8015330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015332:	f003 0301 	and.w	r3, r3, #1
 8015336:	2b00      	cmp	r3, #0
 8015338:	d101      	bne.n	801533e <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 801533a:	2302      	movs	r3, #2
 801533c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 801533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015340:	f003 0301 	and.w	r3, r3, #1
 8015344:	2b00      	cmp	r3, #0
 8015346:	f000 8174 	beq.w	8015632 <phhalHw_Pn5180_Receive_Int+0x48e>
 801534a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801534c:	2b00      	cmp	r3, #0
 801534e:	f040 8170 	bne.w	8015632 <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2200      	movs	r2, #0
 8015356:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8015358:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 801535c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8015360:	f107 0320 	add.w	r3, r7, #32
 8015364:	9300      	str	r3, [sp, #0]
 8015366:	460b      	mov	r3, r1
 8015368:	2101      	movs	r1, #1
 801536a:	68f8      	ldr	r0, [r7, #12]
 801536c:	f7fe fda3 	bl	8013eb6 <phhalHw_Pn5180_GetRxBuffer>
 8015370:	4603      	mov	r3, r0
 8015372:	867b      	strh	r3, [r7, #50]	@ 0x32
 8015374:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <phhalHw_Pn5180_Receive_Int+0x1da>
 801537a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801537c:	e16e      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015384:	2b01      	cmp	r3, #1
 8015386:	d103      	bne.n	8015390 <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 8015388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 8015390:	f107 031c 	add.w	r3, r7, #28
 8015394:	461a      	mov	r2, r3
 8015396:	2113      	movs	r1, #19
 8015398:	68f8      	ldr	r0, [r7, #12]
 801539a:	f7fa f981 	bl	800f6a0 <phhalHw_Pn5180_ReadRegister>
 801539e:	4603      	mov	r3, r0
 80153a0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80153a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d001      	beq.n	80153ac <phhalHw_Pn5180_Receive_Int+0x208>
 80153a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80153aa:	e157      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d110      	bne.n	80153d8 <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153be:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	f003 030f 	and.w	r3, r3, #15
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	015b      	lsls	r3, r3, #5
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	4313      	orrs	r3, r2
 80153d2:	b29b      	uxth	r3, r3
 80153d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80153d6:	e005      	b.n	80153e4 <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	b29b      	uxth	r3, r3
 80153dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153e0:	b29b      	uxth	r3, r3
 80153e2:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 80153e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00c      	beq.n	8015404 <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80153ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80153ec:	461a      	mov	r2, r3
 80153ee:	6879      	ldr	r1, [r7, #4]
 80153f0:	68f8      	ldr	r0, [r7, #12]
 80153f2:	f7fe f977 	bl	80136e4 <phhalHw_Pn5180_Instr_RetrieveRxData>
 80153f6:	4603      	mov	r3, r0
 80153f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80153fa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d001      	beq.n	8015404 <phhalHw_Pn5180_Receive_Int+0x260>
 8015400:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8015402:	e12b      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801540a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 801540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540e:	0b5b      	lsrs	r3, r3, #13
 8015410:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 8015412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015414:	b29a      	uxth	r2, r3
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8015420:	2b00      	cmp	r3, #0
 8015422:	d044      	beq.n	80154ae <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 8015424:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015426:	2b00      	cmp	r3, #0
 8015428:	d107      	bne.n	801543a <phhalHw_Pn5180_Receive_Int+0x296>
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8015430:	2b00      	cmp	r3, #0
 8015432:	d102      	bne.n	801543a <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 8015434:	2301      	movs	r3, #1
 8015436:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8015438:	e051      	b.n	80154de <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 801543a:	2303      	movs	r3, #3
 801543c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8015444:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 8015446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015448:	0cdb      	lsrs	r3, r3, #19
 801544a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 801544c:	8c3a      	ldrh	r2, [r7, #32]
 801544e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015450:	4413      	add	r3, r2
 8015452:	b29b      	uxth	r3, r3
 8015454:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 8015456:	8c3b      	ldrh	r3, [r7, #32]
 8015458:	461a      	mov	r2, r3
 801545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801545c:	4293      	cmp	r3, r2
 801545e:	d904      	bls.n	801546a <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 8015460:	8c3b      	ldrh	r3, [r7, #32]
 8015462:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 8015464:	2304      	movs	r3, #4
 8015466:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8015468:	e004      	b.n	8015474 <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 801546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801546c:	b29b      	uxth	r3, r3
 801546e:	08db      	lsrs	r3, r3, #3
 8015470:	b29b      	uxth	r3, r3
 8015472:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 8015474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015476:	2b07      	cmp	r3, #7
 8015478:	d904      	bls.n	8015484 <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 801547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801547c:	f003 0307 	and.w	r3, r3, #7
 8015480:	61fb      	str	r3, [r7, #28]
 8015482:	e001      	b.n	8015488 <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 8015484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015486:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d00a      	beq.n	80154a4 <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 801548e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015490:	8c3b      	ldrh	r3, [r7, #32]
 8015492:	429a      	cmp	r2, r3
 8015494:	d102      	bne.n	801549c <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 8015496:	2304      	movs	r3, #4
 8015498:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801549a:	e003      	b.n	80154a4 <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 801549c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801549e:	3301      	adds	r3, #1
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	b29a      	uxth	r2, r3
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	861a      	strh	r2, [r3, #48]	@ 0x30
 80154ac:	e017      	b.n	80154de <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d002      	beq.n	80154be <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 80154b8:	2302      	movs	r3, #2
 80154ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80154bc:	e00f      	b.n	80154de <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 80154be:	69fb      	ldr	r3, [r7, #28]
 80154c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d002      	beq.n	80154ce <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 80154c8:	2306      	movs	r3, #6
 80154ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80154cc:	e007      	b.n	80154de <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 80154ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d004      	beq.n	80154de <phhalHw_Pn5180_Receive_Int+0x33a>
 80154d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d6:	2b08      	cmp	r3, #8
 80154d8:	d001      	beq.n	80154de <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 80154da:	2373      	movs	r3, #115	@ 0x73
 80154dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d117      	bne.n	8015518 <phhalHw_Pn5180_Receive_Int+0x374>
 80154e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d014      	beq.n	8015518 <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80154f6:	d002      	beq.n	80154fe <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 80154f8:	f240 2301 	movw	r3, #513	@ 0x201
 80154fc:	e0ae      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 80154fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015500:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8015504:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	1c5a      	adds	r2, r3, #1
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 8015510:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015512:	3b01      	subs	r3, #1
 8015514:	b29b      	uxth	r3, r3
 8015516:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	8bda      	ldrh	r2, [r3, #30]
 801551c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801551e:	4413      	add	r3, r2
 8015520:	b29a      	uxth	r2, r3
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d005      	beq.n	8015538 <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	695a      	ldr	r2, [r3, #20]
 8015530:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015532:	441a      	add	r2, r3
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d003      	beq.n	8015546 <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	8b5a      	ldrh	r2, [r3, #26]
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801554c:	2b01      	cmp	r3, #1
 801554e:	d169      	bne.n	8015624 <phhalHw_Pn5180_Receive_Int+0x480>
 8015550:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015552:	2b00      	cmp	r3, #0
 8015554:	d003      	beq.n	801555e <phhalHw_Pn5180_Receive_Int+0x3ba>
 8015556:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b73      	cmp	r3, #115	@ 0x73
 801555c:	d162      	bne.n	8015624 <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d025      	beq.n	80155b0 <phhalHw_Pn5180_Receive_Int+0x40c>
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d022      	beq.n	80155b0 <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6818      	ldr	r0, [r3, #0]
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 8015576:	b2dd      	uxtb	r5, r3
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	881b      	ldrh	r3, [r3, #0]
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	6812      	ldr	r2, [r2, #0]
 8015580:	f107 0117 	add.w	r1, r7, #23
 8015584:	9103      	str	r1, [sp, #12]
 8015586:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 801558a:	9102      	str	r1, [sp, #8]
 801558c:	9201      	str	r2, [sp, #4]
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	462b      	mov	r3, r5
 8015592:	4622      	mov	r2, r4
 8015594:	4601      	mov	r1, r0
 8015596:	2001      	movs	r0, #1
 8015598:	f7f3 ff0e 	bl	80093b8 <phTools_DecodeParity>
 801559c:	4603      	mov	r3, r0
 801559e:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80155a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d003      	beq.n	80155b0 <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 80155a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80155aa:	b2db      	uxtb	r3, r3
 80155ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 80155ae:	e039      	b.n	8015624 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 80155b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80155b2:	2b03      	cmp	r3, #3
 80155b4:	d933      	bls.n	801561e <phhalHw_Pn5180_Receive_Int+0x47a>
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d030      	beq.n	801561e <phhalHw_Pn5180_Receive_Int+0x47a>
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d02d      	beq.n	801561e <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80155c8:	3a02      	subs	r2, #2
 80155ca:	4611      	mov	r1, r2
 80155cc:	f107 0214 	add.w	r2, r7, #20
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7f4 f870 	bl	80096b6 <phTools_ComputeCrc_B>
 80155d6:	4603      	mov	r3, r0
 80155d8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80155da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d001      	beq.n	80155e4 <phhalHw_Pn5180_Receive_Int+0x440>
 80155e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80155e2:	e03b      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 80155e4:	7d3a      	ldrb	r2, [r7, #20]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6819      	ldr	r1, [r3, #0]
 80155ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80155ec:	3b02      	subs	r3, #2
 80155ee:	440b      	add	r3, r1
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d108      	bne.n	8015608 <phhalHw_Pn5180_Receive_Int+0x464>
 80155f6:	7d7a      	ldrb	r2, [r7, #21]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6819      	ldr	r1, [r3, #0]
 80155fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80155fe:	3b01      	subs	r3, #1
 8015600:	440b      	add	r3, r1
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	429a      	cmp	r2, r3
 8015606:	d002      	beq.n	801560e <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 8015608:	2302      	movs	r3, #2
 801560a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 801560c:	e00a      	b.n	8015624 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 801560e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015610:	3b02      	subs	r3, #2
 8015612:	b29a      	uxth	r2, r3
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 8015618:	2300      	movs	r3, #0
 801561a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 801561c:	e002      	b.n	8015624 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 801561e:	2306      	movs	r3, #6
 8015620:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 8015622:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8015624:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801562a:	d907      	bls.n	801563c <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 801562c:	2304      	movs	r3, #4
 801562e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8015630:	e004      	b.n	801563c <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 8015632:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015634:	2b00      	cmp	r3, #0
 8015636:	d101      	bne.n	801563c <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 8015638:	237f      	movs	r3, #127	@ 0x7f
 801563a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 801563c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801563e:	2b00      	cmp	r3, #0
 8015640:	d00b      	beq.n	801565a <phhalHw_Pn5180_Receive_Int+0x4b6>
 8015642:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015644:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015648:	2b00      	cmp	r3, #0
 801564a:	d106      	bne.n	801565a <phhalHw_Pn5180_Receive_Int+0x4b6>
 801564c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801564e:	b2db      	uxtb	r3, r3
 8015650:	b29b      	uxth	r3, r3
 8015652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015656:	b29b      	uxth	r3, r3
 8015658:	e000      	b.n	801565c <phhalHw_Pn5180_Receive_Int+0x4b8>
 801565a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 801565c:	4618      	mov	r0, r3
 801565e:	3740      	adds	r7, #64	@ 0x40
 8015660:	46bd      	mov	sp, r7
 8015662:	bdb0      	pop	{r4, r5, r7, pc}

08015664 <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 801566c:	f06f 0207 	mvn.w	r2, #7
 8015670:	2100      	movs	r1, #0
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f7fd fcfe 	bl	8013074 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8015678:	4603      	mov	r3, r0
 801567a:	81fb      	strh	r3, [r7, #14]
 801567c:	89fb      	ldrh	r3, [r7, #14]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d001      	beq.n	8015686 <phhalHw_Pn5180_Int_IdleCommand+0x22>
 8015682:	89fb      	ldrh	r3, [r7, #14]
 8015684:	e00c      	b.n	80156a0 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 8015686:	2204      	movs	r2, #4
 8015688:	2103      	movs	r1, #3
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f7fd fc06 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 8015690:	4603      	mov	r3, r0
 8015692:	81fb      	strh	r3, [r7, #14]
 8015694:	89fb      	ldrh	r3, [r7, #14]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d001      	beq.n	801569e <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 801569a:	89fb      	ldrh	r3, [r7, #14]
 801569c:	e000      	b.n	80156a0 <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 801569e:	2300      	movs	r3, #0
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3710      	adds	r7, #16
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b088      	sub	sp, #32
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	460b      	mov	r3, r1
 80156b2:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 80156b4:	2300      	movs	r3, #0
 80156b6:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 80156b8:	f06f 0307 	mvn.w	r3, #7
 80156bc:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 80156be:	8bfb      	ldrh	r3, [r7, #30]
 80156c0:	1c5a      	adds	r2, r3, #1
 80156c2:	83fa      	strh	r2, [r7, #30]
 80156c4:	3320      	adds	r3, #32
 80156c6:	443b      	add	r3, r7
 80156c8:	2200      	movs	r2, #0
 80156ca:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80156ce:	8bfb      	ldrh	r3, [r7, #30]
 80156d0:	1c5a      	adds	r2, r3, #1
 80156d2:	83fa      	strh	r2, [r7, #30]
 80156d4:	3320      	adds	r3, #32
 80156d6:	443b      	add	r3, r7
 80156d8:	2203      	movs	r2, #3
 80156da:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80156de:	8bfb      	ldrh	r3, [r7, #30]
 80156e0:	1c5a      	adds	r2, r3, #1
 80156e2:	83fa      	strh	r2, [r7, #30]
 80156e4:	69ba      	ldr	r2, [r7, #24]
 80156e6:	b2d2      	uxtb	r2, r2
 80156e8:	3320      	adds	r3, #32
 80156ea:	443b      	add	r3, r7
 80156ec:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80156f0:	69bb      	ldr	r3, [r7, #24]
 80156f2:	0a1a      	lsrs	r2, r3, #8
 80156f4:	8bfb      	ldrh	r3, [r7, #30]
 80156f6:	1c59      	adds	r1, r3, #1
 80156f8:	83f9      	strh	r1, [r7, #30]
 80156fa:	b2d2      	uxtb	r2, r2
 80156fc:	3320      	adds	r3, #32
 80156fe:	443b      	add	r3, r7
 8015700:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8015704:	69bb      	ldr	r3, [r7, #24]
 8015706:	0c1a      	lsrs	r2, r3, #16
 8015708:	8bfb      	ldrh	r3, [r7, #30]
 801570a:	1c59      	adds	r1, r3, #1
 801570c:	83f9      	strh	r1, [r7, #30]
 801570e:	b2d2      	uxtb	r2, r2
 8015710:	3320      	adds	r3, #32
 8015712:	443b      	add	r3, r7
 8015714:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8015718:	69bb      	ldr	r3, [r7, #24]
 801571a:	0e1a      	lsrs	r2, r3, #24
 801571c:	8bfb      	ldrh	r3, [r7, #30]
 801571e:	1c59      	adds	r1, r3, #1
 8015720:	83f9      	strh	r1, [r7, #30]
 8015722:	b2d2      	uxtb	r2, r2
 8015724:	3320      	adds	r3, #32
 8015726:	443b      	add	r3, r7
 8015728:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 801572c:	78fb      	ldrb	r3, [r7, #3]
 801572e:	f003 0307 	and.w	r3, r3, #7
 8015732:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8015734:	8bfb      	ldrh	r3, [r7, #30]
 8015736:	1c5a      	adds	r2, r3, #1
 8015738:	83fa      	strh	r2, [r7, #30]
 801573a:	3320      	adds	r3, #32
 801573c:	443b      	add	r3, r7
 801573e:	2200      	movs	r2, #0
 8015740:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8015744:	8bfb      	ldrh	r3, [r7, #30]
 8015746:	1c5a      	adds	r2, r3, #1
 8015748:	83fa      	strh	r2, [r7, #30]
 801574a:	3320      	adds	r3, #32
 801574c:	443b      	add	r3, r7
 801574e:	2202      	movs	r2, #2
 8015750:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8015754:	8bfb      	ldrh	r3, [r7, #30]
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	83fa      	strh	r2, [r7, #30]
 801575a:	69ba      	ldr	r2, [r7, #24]
 801575c:	b2d2      	uxtb	r2, r2
 801575e:	3320      	adds	r3, #32
 8015760:	443b      	add	r3, r7
 8015762:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	0a1a      	lsrs	r2, r3, #8
 801576a:	8bfb      	ldrh	r3, [r7, #30]
 801576c:	1c59      	adds	r1, r3, #1
 801576e:	83f9      	strh	r1, [r7, #30]
 8015770:	b2d2      	uxtb	r2, r2
 8015772:	3320      	adds	r3, #32
 8015774:	443b      	add	r3, r7
 8015776:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	0c1a      	lsrs	r2, r3, #16
 801577e:	8bfb      	ldrh	r3, [r7, #30]
 8015780:	1c59      	adds	r1, r3, #1
 8015782:	83f9      	strh	r1, [r7, #30]
 8015784:	b2d2      	uxtb	r2, r2
 8015786:	3320      	adds	r3, #32
 8015788:	443b      	add	r3, r7
 801578a:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801578e:	69bb      	ldr	r3, [r7, #24]
 8015790:	0e1a      	lsrs	r2, r3, #24
 8015792:	8bfb      	ldrh	r3, [r7, #30]
 8015794:	1c59      	adds	r1, r3, #1
 8015796:	83f9      	strh	r1, [r7, #30]
 8015798:	b2d2      	uxtb	r2, r2
 801579a:	3320      	adds	r3, #32
 801579c:	443b      	add	r3, r7
 801579e:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80157a2:	8bfa      	ldrh	r2, [r7, #30]
 80157a4:	f107 0308 	add.w	r3, r7, #8
 80157a8:	4619      	mov	r1, r3
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f7fd fcd8 	bl	8013160 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80157b0:	4603      	mov	r3, r0
 80157b2:	82fb      	strh	r3, [r7, #22]
 80157b4:	8afb      	ldrh	r3, [r7, #22]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d001      	beq.n	80157be <phhalHw_Pn5180_Int_LoadCommand+0x116>
 80157ba:	8afb      	ldrh	r3, [r7, #22]
 80157bc:	e000      	b.n	80157c0 <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 80157be:	2300      	movs	r3, #0

}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3720      	adds	r7, #32
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b088      	sub	sp, #32
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	607b      	str	r3, [r7, #4]
 80157d2:	460b      	mov	r3, r1
 80157d4:	72fb      	strb	r3, [r7, #11]
 80157d6:	4613      	mov	r3, r2
 80157d8:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d102      	bne.n	80157e6 <phhalHw_Pn5180_WaitIrq+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80157e0:	f240 237f 	movw	r3, #639	@ 0x27f
 80157e4:	e04a      	b.n	801587c <phhalHw_Pn5180_WaitIrq+0xb4>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d103      	bne.n	80157f8 <phhalHw_Pn5180_WaitIrq+0x30>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 80157f0:	7afb      	ldrb	r3, [r7, #11]
 80157f2:	f023 0301 	bic.w	r3, r3, #1
 80157f6:	72fb      	strb	r3, [r7, #11]
        do
        {
#ifndef _WIN32
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80157fe:	2b01      	cmp	r3, #1
 8015800:	d114      	bne.n	801582c <phhalHw_Pn5180_WaitIrq+0x64>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8015808:	2b00      	cmp	r3, #0
 801580a:	d106      	bne.n	801581a <phhalHw_Pn5180_WaitIrq+0x52>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 801580c:	2200      	movs	r2, #0
 801580e:	2101      	movs	r1, #1
 8015810:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015814:	f006 fab8 	bl	801bd88 <phDriver_TimerStart>
 8015818:	e008      	b.n	801582c <phhalHw_Pn5180_WaitIrq+0x64>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8015820:	2200      	movs	r2, #0
 8015822:	4619      	mov	r1, r3
 8015824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015828:	f006 faae 	bl	801bd88 <phDriver_TimerStart>
                }
            }
#endif
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 801582c:	f107 0318 	add.w	r3, r7, #24
 8015830:	461a      	mov	r2, r3
 8015832:	2102      	movs	r1, #2
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f7fd fd45 	bl	80132c4 <phhalHw_Pn5180_Instr_ReadRegister>
 801583a:	4603      	mov	r3, r0
 801583c:	83fb      	strh	r3, [r7, #30]
 801583e:	8bfb      	ldrh	r3, [r7, #30]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <phhalHw_Pn5180_WaitIrq+0x80>
 8015844:	8bfb      	ldrh	r3, [r7, #30]
 8015846:	e019      	b.n	801587c <phhalHw_Pn5180_WaitIrq+0xb4>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 8015848:	69ba      	ldr	r2, [r7, #24]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	4013      	ands	r3, r2
 801584e:	2b00      	cmp	r3, #0
 8015850:	d0d2      	beq.n	80157f8 <phhalHw_Pn5180_WaitIrq+0x30>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8015852:	69ba      	ldr	r2, [r7, #24]
 8015854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015856:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8015858:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801585c:	2b00      	cmp	r3, #0
 801585e:	db0c      	blt.n	801587a <phhalHw_Pn5180_WaitIrq+0xb2>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	461a      	mov	r2, r3
 8015864:	2103      	movs	r1, #3
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f7fd fb18 	bl	8012e9c <phhalHw_Pn5180_Instr_WriteRegister>
 801586c:	4603      	mov	r3, r0
 801586e:	83fb      	strh	r3, [r7, #30]
 8015870:	8bfb      	ldrh	r3, [r7, #30]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d001      	beq.n	801587a <phhalHw_Pn5180_WaitIrq+0xb2>
 8015876:	8bfb      	ldrh	r3, [r7, #30]
 8015878:	e000      	b.n	801587c <phhalHw_Pn5180_WaitIrq+0xb4>
        }
    }

    return PH_ERR_SUCCESS;
 801587a:	2300      	movs	r3, #0

}
 801587c:	4618      	mov	r0, r3
 801587e:	3720      	adds	r7, #32
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 8015884:	b480      	push	{r7}
 8015886:	b085      	sub	sp, #20
 8015888:	af00      	add	r7, sp, #0
 801588a:	60f8      	str	r0, [r7, #12]
 801588c:	460b      	mov	r3, r1
 801588e:	607a      	str	r2, [r7, #4]
 8015890:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 8015892:	897b      	ldrh	r3, [r7, #10]
 8015894:	2b20      	cmp	r3, #32
 8015896:	d002      	beq.n	801589e <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 8015898:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 801589c:	e01d      	b.n	80158da <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d101      	bne.n	80158a8 <phpalFelica_Sw_Init+0x24>
 80158a4:	2321      	movs	r3, #33	@ 0x21
 80158a6:	e018      	b.n	80158da <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d101      	bne.n	80158b2 <phpalFelica_Sw_Init+0x2e>
 80158ae:	2321      	movs	r3, #33	@ 0x21
 80158b0:	e013      	b.n	80158da <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f640 0201 	movw	r2, #2049	@ 0x801
 80158b8:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2200      	movs	r2, #0
 80158c4:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2200      	movs	r2, #0
 80158ca:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	2200      	movs	r2, #0
 80158d0:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	2200      	movs	r2, #0
 80158d6:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 80158d8:	2300      	movs	r3, #0
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3714      	adds	r7, #20
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr
	...

080158e8 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b08c      	sub	sp, #48	@ 0x30
 80158ec:	af02      	add	r7, sp, #8
 80158ee:	60f8      	str	r0, [r7, #12]
 80158f0:	60b9      	str	r1, [r7, #8]
 80158f2:	603b      	str	r3, [r7, #0]
 80158f4:	4613      	mov	r3, r2
 80158f6:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 80158f8:	2300      	movs	r3, #0
 80158fa:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 80158fc:	2300      	movs	r3, #0
 80158fe:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8015900:	2300      	movs	r3, #0
 8015902:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	3308      	adds	r3, #8
 8015908:	2212      	movs	r2, #18
 801590a:	2100      	movs	r1, #0
 801590c:	4618      	mov	r0, r3
 801590e:	f00c fcd5 	bl	80222bc <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2200      	movs	r2, #0
 801591c:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 801591e:	79fb      	ldrb	r3, [r7, #7]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00e      	beq.n	8015942 <phpalFelica_Sw_ReqC+0x5a>
 8015924:	79fb      	ldrb	r3, [r7, #7]
 8015926:	2b01      	cmp	r3, #1
 8015928:	d00b      	beq.n	8015942 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 801592a:	79fb      	ldrb	r3, [r7, #7]
 801592c:	2b03      	cmp	r3, #3
 801592e:	d008      	beq.n	8015942 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8015930:	79fb      	ldrb	r3, [r7, #7]
 8015932:	2b07      	cmp	r3, #7
 8015934:	d005      	beq.n	8015942 <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8015936:	79fb      	ldrb	r3, [r7, #7]
 8015938:	2b0f      	cmp	r3, #15
 801593a:	d002      	beq.n	8015942 <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 801593c:	f640 0321 	movw	r3, #2081	@ 0x821
 8015940:	e0e2      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	f107 0210 	add.w	r2, r7, #16
 801594a:	2121      	movs	r1, #33	@ 0x21
 801594c:	4618      	mov	r0, r3
 801594e:	f7fc f885 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8015952:	4603      	mov	r3, r0
 8015954:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015958:	2b00      	cmp	r3, #0
 801595a:	d001      	beq.n	8015960 <phpalFelica_Sw_ReqC+0x78>
 801595c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801595e:	e0d3      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 8015960:	8a3b      	ldrh	r3, [r7, #16]
 8015962:	2b03      	cmp	r3, #3
 8015964:	d005      	beq.n	8015972 <phpalFelica_Sw_ReqC+0x8a>
 8015966:	8a3b      	ldrh	r3, [r7, #16]
 8015968:	2b0a      	cmp	r3, #10
 801596a:	d002      	beq.n	8015972 <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 801596c:	f640 0325 	movw	r3, #2085	@ 0x825
 8015970:	e0ca      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 8015972:	8a3b      	ldrh	r3, [r7, #16]
 8015974:	2b03      	cmp	r3, #3
 8015976:	d107      	bne.n	8015988 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	7f9b      	ldrb	r3, [r3, #30]
 801597c:	461a      	mov	r2, r3
 801597e:	4b64      	ldr	r3, [pc, #400]	@ (8015b10 <phpalFelica_Sw_ReqC+0x228>)
 8015980:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8015984:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8015986:	e006      	b.n	8015996 <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	7f9b      	ldrb	r3, [r3, #30]
 801598c:	4a60      	ldr	r2, [pc, #384]	@ (8015b10 <phpalFelica_Sw_ReqC+0x228>)
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	4413      	add	r3, r2
 8015992:	885b      	ldrh	r3, [r3, #2]
 8015994:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 8015996:	79fb      	ldrb	r3, [r7, #7]
 8015998:	b29b      	uxth	r3, r3
 801599a:	461a      	mov	r2, r3
 801599c:	0092      	lsls	r2, r2, #2
 801599e:	441a      	add	r2, r3
 80159a0:	4611      	mov	r1, r2
 80159a2:	0109      	lsls	r1, r1, #4
 80159a4:	1a8a      	subs	r2, r1, r2
 80159a6:	0052      	lsls	r2, r2, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	00db      	lsls	r3, r3, #3
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 80159b2:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 80159b4:	2306      	movs	r3, #6
 80159b6:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 80159b8:	2300      	movs	r3, #0
 80159ba:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 80159c2:	68bb      	ldr	r3, [r7, #8]
 80159c4:	785b      	ldrb	r3, [r3, #1]
 80159c6:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	7f1b      	ldrb	r3, [r3, #28]
 80159cc:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 80159ce:	79fb      	ldrb	r3, [r7, #7]
 80159d0:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80159d8:	210d      	movs	r1, #13
 80159da:	4618      	mov	r0, r3
 80159dc:	f7fa fbf0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80159e0:	4603      	mov	r3, r0
 80159e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80159e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d001      	beq.n	80159ee <phpalFelica_Sw_ReqC+0x106>
 80159ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80159ec:	e08c      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 80159ee:	79fb      	ldrb	r3, [r7, #7]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d00d      	beq.n	8015a10 <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	2201      	movs	r2, #1
 80159fa:	2153      	movs	r1, #83	@ 0x53
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7fa fbdf 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015a02:	4603      	mov	r3, r0
 8015a04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d001      	beq.n	8015a10 <phpalFelica_Sw_ReqC+0x128>
 8015a0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a0e:	e07b      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	6858      	ldr	r0, [r3, #4]
 8015a14:	f107 0218 	add.w	r2, r7, #24
 8015a18:	f107 0312 	add.w	r3, r7, #18
 8015a1c:	9301      	str	r3, [sp, #4]
 8015a1e:	f107 0314 	add.w	r3, r7, #20
 8015a22:	9300      	str	r3, [sp, #0]
 8015a24:	2306      	movs	r3, #6
 8015a26:	2100      	movs	r1, #0
 8015a28:	f7fa f812 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8015a30:	79fb      	ldrb	r3, [r7, #7]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d00d      	beq.n	8015a52 <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	2153      	movs	r1, #83	@ 0x53
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7fa fbbe 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015a44:	4603      	mov	r3, r0
 8015a46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015a48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d001      	beq.n	8015a52 <phpalFelica_Sw_ReqC+0x16a>
 8015a4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015a50:	e05a      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8015a52:	8c3b      	ldrh	r3, [r7, #32]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <phpalFelica_Sw_ReqC+0x174>
 8015a58:	8c3b      	ldrh	r3, [r7, #32]
 8015a5a:	e055      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8015a5c:	79fb      	ldrb	r3, [r7, #7]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d015      	beq.n	8015a8e <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 8015a62:	8a7b      	ldrh	r3, [r7, #18]
 8015a64:	f003 031f 	and.w	r3, r3, #31
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d002      	beq.n	8015a74 <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8015a6e:	f640 0306 	movw	r3, #2054	@ 0x806
 8015a72:	e049      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 8015a74:	697a      	ldr	r2, [r7, #20]
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 8015a7a:	8a7a      	ldrh	r2, [r7, #18]
 8015a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a7e:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 8015a80:	8a7b      	ldrh	r3, [r7, #18]
 8015a82:	095b      	lsrs	r3, r3, #5
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	b2da      	uxtb	r2, r3
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	775a      	strb	r2, [r3, #29]
 8015a8c:	e038      	b.n	8015b00 <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8015a8e:	8a7b      	ldrh	r3, [r7, #18]
 8015a90:	2b12      	cmp	r3, #18
 8015a92:	d002      	beq.n	8015a9a <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 8015a94:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8015a96:	2b14      	cmp	r3, #20
 8015a98:	d10a      	bne.n	8015ab0 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	461a      	mov	r2, r3
 8015aa0:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 8015aa2:	429a      	cmp	r2, r3
 8015aa4:	d104      	bne.n	8015ab0 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8015aac:	2b01      	cmp	r3, #1
 8015aae:	d002      	beq.n	8015ab6 <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8015ab0:	f640 0306 	movw	r3, #2054	@ 0x806
 8015ab4:	e028      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 8015ab6:	8a7b      	ldrh	r3, [r7, #18]
 8015ab8:	2b14      	cmp	r3, #20
 8015aba:	d106      	bne.n	8015aca <phpalFelica_Sw_ReqC+0x1e2>
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	7f1b      	ldrb	r3, [r3, #28]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d102      	bne.n	8015aca <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8015ac4:	f640 0306 	movw	r3, #2054	@ 0x806
 8015ac8:	e01e      	b.n	8015b08 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	f103 0008 	add.w	r0, r3, #8
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	1c99      	adds	r1, r3, #2
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	781b      	ldrb	r3, [r3, #0]
 8015ad8:	3b02      	subs	r3, #2
 8015ada:	461a      	mov	r2, r3
 8015adc:	f00c fc6d 	bl	80223ba <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2201      	movs	r2, #1
 8015ae4:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	1c9a      	adds	r2, r3, #2
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	3b02      	subs	r3, #2
 8015af4:	b29a      	uxth	r2, r3
 8015af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015af8:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	2201      	movs	r2, #1
 8015afe:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2201      	movs	r2, #1
 8015b04:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 8015b06:	2300      	movs	r3, #0
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3728      	adds	r7, #40	@ 0x28
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	08026dd0 	.word	0x08026dd0

08015b14 <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 8015b14:	b480      	push	{r7}
 8015b16:	b087      	sub	sp, #28
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	607a      	str	r2, [r7, #4]
 8015b1e:	603b      	str	r3, [r7, #0]
 8015b20:	460b      	mov	r3, r1
 8015b22:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	7f5b      	ldrb	r3, [r3, #29]
 8015b28:	7afa      	ldrb	r2, [r7, #11]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d802      	bhi.n	8015b34 <phpalFelica_Sw_GetFrameInfo+0x20>
 8015b2e:	7afb      	ldrb	r3, [r7, #11]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d102      	bne.n	8015b3a <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8015b34:	f640 0321 	movw	r3, #2081	@ 0x821
 8015b38:	e06f      	b.n	8015c1a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8015b40:	7afb      	ldrb	r3, [r7, #11]
 8015b42:	3b01      	subs	r3, #1
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	015b      	lsls	r3, r3, #5
 8015b48:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8015b4a:	7dfb      	ldrb	r3, [r7, #23]
 8015b4c:	331c      	adds	r3, #28
 8015b4e:	687a      	ldr	r2, [r7, #4]
 8015b50:	4413      	add	r3, r2
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	2b12      	cmp	r3, #18
 8015b56:	d006      	beq.n	8015b66 <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8015b58:	7dfb      	ldrb	r3, [r7, #23]
 8015b5a:	331c      	adds	r3, #28
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	4413      	add	r3, r2
 8015b60:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8015b62:	2b14      	cmp	r3, #20
 8015b64:	d106      	bne.n	8015b74 <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 8015b66:	7dfb      	ldrb	r3, [r7, #23]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	687a      	ldr	r2, [r7, #4]
 8015b6c:	4413      	add	r3, r2
 8015b6e:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8015b70:	2b01      	cmp	r3, #1
 8015b72:	d002      	beq.n	8015b7a <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8015b74:	f640 0306 	movw	r3, #2054	@ 0x806
 8015b78:	e04f      	b.n	8015c1a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 8015b7a:	7dfb      	ldrb	r3, [r7, #23]
 8015b7c:	331c      	adds	r3, #28
 8015b7e:	687a      	ldr	r2, [r7, #4]
 8015b80:	4413      	add	r3, r2
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	2b14      	cmp	r3, #20
 8015b86:	d106      	bne.n	8015b96 <phpalFelica_Sw_GetFrameInfo+0x82>
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	7f1b      	ldrb	r3, [r3, #28]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d102      	bne.n	8015b96 <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8015b90:	f640 0306 	movw	r3, #2054	@ 0x806
 8015b94:	e041      	b.n	8015c1a <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 8015b96:	7dfb      	ldrb	r3, [r7, #23]
 8015b98:	331d      	adds	r3, #29
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	4413      	add	r3, r2
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	f003 031f 	and.w	r3, r3, #31
 8015ba4:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 8015ba6:	7dbb      	ldrb	r3, [r7, #22]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d026      	beq.n	8015bfa <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 8015bac:	7dbb      	ldrb	r3, [r7, #22]
 8015bae:	f003 0301 	and.w	r3, r3, #1
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d01d      	beq.n	8015bf2 <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 8015bb6:	7dbb      	ldrb	r3, [r7, #22]
 8015bb8:	f003 0304 	and.w	r3, r3, #4
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d003      	beq.n	8015bc8 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	2206      	movs	r2, #6
 8015bc4:	801a      	strh	r2, [r3, #0]
 8015bc6:	e027      	b.n	8015c18 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 8015bc8:	7dbb      	ldrb	r3, [r7, #22]
 8015bca:	f003 0308 	and.w	r3, r3, #8
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d003      	beq.n	8015bda <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	2203      	movs	r2, #3
 8015bd6:	801a      	strh	r2, [r3, #0]
 8015bd8:	e01e      	b.n	8015c18 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 8015bda:	7dbb      	ldrb	r3, [r7, #22]
 8015bdc:	f003 0302 	and.w	r3, r3, #2
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d003      	beq.n	8015bec <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	2202      	movs	r2, #2
 8015be8:	801a      	strh	r2, [r3, #0]
 8015bea:	e015      	b.n	8015c18 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 8015bec:	f640 0306 	movw	r3, #2054	@ 0x806
 8015bf0:	e013      	b.n	8015c1a <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	220c      	movs	r2, #12
 8015bf6:	801a      	strh	r2, [r3, #0]
 8015bf8:	e00e      	b.n	8015c18 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 8015bfa:	7dfb      	ldrb	r3, [r7, #23]
 8015bfc:	3302      	adds	r3, #2
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	441a      	add	r2, r3
 8015c02:	6a3b      	ldr	r3, [r7, #32]
 8015c04:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 8015c06:	7dfb      	ldrb	r3, [r7, #23]
 8015c08:	331c      	adds	r3, #28
 8015c0a:	687a      	ldr	r2, [r7, #4]
 8015c0c:	4413      	add	r3, r2
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	3b02      	subs	r3, #2
 8015c12:	b2da      	uxtb	r2, r3
 8015c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c16:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8015c18:	2300      	movs	r3, #0
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	371c      	adds	r7, #28
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c24:	4770      	bx	lr

08015c26 <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b082      	sub	sp, #8
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
 8015c2e:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2201      	movs	r2, #1
 8015c34:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	3308      	adds	r3, #8
 8015c3a:	2210      	movs	r2, #16
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f00c fbbb 	bl	80223ba <memcpy>

    return PH_ERR_SUCCESS;
 8015c44:	2300      	movs	r3, #0

}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3708      	adds	r7, #8
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b083      	sub	sp, #12
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
 8015c56:	460b      	mov	r3, r1
 8015c58:	807b      	strh	r3, [r7, #2]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 8015c5e:	887b      	ldrh	r3, [r7, #2]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d002      	beq.n	8015c6a <phpalFelica_Sw_SetConfig+0x1c>
 8015c64:	2b02      	cmp	r3, #2
 8015c66:	d00c      	beq.n	8015c82 <phpalFelica_Sw_SetConfig+0x34>
 8015c68:	e01f      	b.n	8015caa <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 8015c6a:	883b      	ldrh	r3, [r7, #0]
 8015c6c:	b2db      	uxtb	r3, r3
 8015c6e:	2b02      	cmp	r3, #2
 8015c70:	d902      	bls.n	8015c78 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8015c72:	f640 0321 	movw	r3, #2081	@ 0x821
 8015c76:	e01c      	b.n	8015cb2 <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 8015c78:	883b      	ldrh	r3, [r7, #0]
 8015c7a:	b2da      	uxtb	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	771a      	strb	r2, [r3, #28]
        break;
 8015c80:	e016      	b.n	8015cb0 <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8015c82:	883b      	ldrh	r3, [r7, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d00b      	beq.n	8015ca0 <phpalFelica_Sw_SetConfig+0x52>
 8015c88:	883b      	ldrh	r3, [r7, #0]
 8015c8a:	2b02      	cmp	r3, #2
 8015c8c:	d008      	beq.n	8015ca0 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 8015c8e:	883b      	ldrh	r3, [r7, #0]
 8015c90:	2b03      	cmp	r3, #3
 8015c92:	d005      	beq.n	8015ca0 <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8015c94:	883b      	ldrh	r3, [r7, #0]
 8015c96:	2b04      	cmp	r3, #4
 8015c98:	d002      	beq.n	8015ca0 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8015c9a:	f640 0321 	movw	r3, #2081	@ 0x821
 8015c9e:	e008      	b.n	8015cb2 <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 8015ca0:	883b      	ldrh	r3, [r7, #0]
 8015ca2:	b2da      	uxtb	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	779a      	strb	r2, [r3, #30]
        break;
 8015ca8:	e002      	b.n	8015cb0 <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8015caa:	f640 0323 	movw	r3, #2083	@ 0x823
 8015cae:	e000      	b.n	8015cb2 <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8015cb0:	2300      	movs	r3, #0
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	370c      	adds	r7, #12
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbc:	4770      	bx	lr

08015cbe <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 8015cbe:	b480      	push	{r7}
 8015cc0:	b085      	sub	sp, #20
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	60f8      	str	r0, [r7, #12]
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	607a      	str	r2, [r7, #4]
 8015cca:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8015ccc:	897b      	ldrh	r3, [r7, #10]
 8015cce:	2b03      	cmp	r3, #3
 8015cd0:	d012      	beq.n	8015cf8 <phpalFelica_Sw_GetConfig+0x3a>
 8015cd2:	2b03      	cmp	r3, #3
 8015cd4:	dc26      	bgt.n	8015d24 <phpalFelica_Sw_GetConfig+0x66>
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d002      	beq.n	8015ce0 <phpalFelica_Sw_GetConfig+0x22>
 8015cda:	2b01      	cmp	r3, #1
 8015cdc:	d006      	beq.n	8015cec <phpalFelica_Sw_GetConfig+0x2e>
 8015cde:	e021      	b.n	8015d24 <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	7f1b      	ldrb	r3, [r3, #28]
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	801a      	strh	r2, [r3, #0]
        break;
 8015cea:	e01e      	b.n	8015d2a <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	7f5b      	ldrb	r3, [r3, #29]
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	801a      	strh	r2, [r3, #0]
        break;
 8015cf6:	e018      	b.n	8015d2a <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	7e9b      	ldrb	r3, [r3, #26]
 8015cfc:	2b01      	cmp	r3, #1
 8015cfe:	d10d      	bne.n	8015d1c <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	7e1b      	ldrb	r3, [r3, #24]
 8015d04:	b21b      	sxth	r3, r3
 8015d06:	021b      	lsls	r3, r3, #8
 8015d08:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	7e5b      	ldrb	r3, [r3, #25]
 8015d0e:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8015d10:	4313      	orrs	r3, r2
 8015d12:	b21b      	sxth	r3, r3
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 8015d1a:	e006      	b.n	8015d2a <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	801a      	strh	r2, [r3, #0]
        break;
 8015d22:	e002      	b.n	8015d2a <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8015d24:	f640 0323 	movw	r3, #2083	@ 0x823
 8015d28:	e000      	b.n	8015d2c <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8015d2a:	2300      	movs	r3, #0
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3714      	adds	r7, #20
 8015d30:	46bd      	mov	sp, r7
 8015d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d36:	4770      	bx	lr

08015d38 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8015d38:	b480      	push	{r7}
 8015d3a:	b085      	sub	sp, #20
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	460b      	mov	r3, r1
 8015d42:	607a      	str	r2, [r7, #4]
 8015d44:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 8015d46:	897b      	ldrh	r3, [r7, #10]
 8015d48:	2b18      	cmp	r3, #24
 8015d4a:	d002      	beq.n	8015d52 <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 8015d4c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8015d50:	e01d      	b.n	8015d8e <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <phpalI14443p3a_Sw_Init+0x24>
 8015d58:	2321      	movs	r3, #33	@ 0x21
 8015d5a:	e018      	b.n	8015d8e <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d101      	bne.n	8015d66 <phpalI14443p3a_Sw_Init+0x2e>
 8015d62:	2321      	movs	r3, #33	@ 0x21
 8015d64:	e013      	b.n	8015d8e <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	f240 3201 	movw	r2, #769	@ 0x301
 8015d6c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2200      	movs	r2, #0
 8015d78:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	2202      	movs	r2, #2
 8015d84:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	2200      	movs	r2, #0
 8015d8a:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 8015d8c:	2300      	movs	r3, #0
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3714      	adds	r7, #20
 8015d92:	46bd      	mov	sp, r7
 8015d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d98:	4770      	bx	lr

08015d9a <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8015d9a:	b580      	push	{r7, lr}
 8015d9c:	b084      	sub	sp, #16
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	6078      	str	r0, [r7, #4]
 8015da2:	460b      	mov	r3, r1
 8015da4:	807b      	strh	r3, [r7, #2]
 8015da6:	4613      	mov	r3, r2
 8015da8:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 8015daa:	887b      	ldrh	r3, [r7, #2]
 8015dac:	2b03      	cmp	r3, #3
 8015dae:	d010      	beq.n	8015dd2 <phpalI14443p3a_Sw_SetConfig+0x38>
 8015db0:	2b03      	cmp	r3, #3
 8015db2:	dc1c      	bgt.n	8015dee <phpalI14443p3a_Sw_SetConfig+0x54>
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d002      	beq.n	8015dbe <phpalI14443p3a_Sw_SetConfig+0x24>
 8015db8:	2b02      	cmp	r3, #2
 8015dba:	d005      	beq.n	8015dc8 <phpalI14443p3a_Sw_SetConfig+0x2e>
 8015dbc:	e017      	b.n	8015dee <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 8015dbe:	883b      	ldrh	r3, [r7, #0]
 8015dc0:	b2da      	uxtb	r2, r3
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	751a      	strb	r2, [r3, #20]
       break;
 8015dc6:	e016      	b.n	8015df6 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 8015dc8:	883b      	ldrh	r3, [r7, #0]
 8015dca:	b2da      	uxtb	r2, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	755a      	strb	r2, [r3, #21]
       break;
 8015dd0:	e011      	b.n	8015df6 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	883a      	ldrh	r2, [r7, #0]
 8015dd8:	210d      	movs	r1, #13
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7fa f9f0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015de0:	4603      	mov	r3, r0
 8015de2:	81fb      	strh	r3, [r7, #14]
 8015de4:	89fb      	ldrh	r3, [r7, #14]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d004      	beq.n	8015df4 <phpalI14443p3a_Sw_SetConfig+0x5a>
 8015dea:	89fb      	ldrh	r3, [r7, #14]
 8015dec:	e004      	b.n	8015df8 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8015dee:	f240 3323 	movw	r3, #803	@ 0x323
 8015df2:	e001      	b.n	8015df8 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 8015df4:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8015df6:	2300      	movs	r3, #0

}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3710      	adds	r7, #16
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}

08015e00 <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b082      	sub	sp, #8
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 8015e0a:	683a      	ldr	r2, [r7, #0]
 8015e0c:	2126      	movs	r1, #38	@ 0x26
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f000 fc89 	bl	8016726 <phpalI14443p3a_Sw_RequestAEx>
 8015e14:	4603      	mov	r3, r0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3708      	adds	r7, #8
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 8015e1e:	b580      	push	{r7, lr}
 8015e20:	b082      	sub	sp, #8
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
 8015e26:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8015e28:	683a      	ldr	r2, [r7, #0]
 8015e2a:	2152      	movs	r1, #82	@ 0x52
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 fc7a 	bl	8016726 <phpalI14443p3a_Sw_RequestAEx>
 8015e32:	4603      	mov	r3, r0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3708      	adds	r7, #8
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b088      	sub	sp, #32
 8015e40:	af02      	add	r7, sp, #8
 8015e42:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015e44:	2300      	movs	r3, #0
 8015e46:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8015e54:	210d      	movs	r1, #13
 8015e56:	4618      	mov	r0, r3
 8015e58:	f7fa f9b2 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	82fb      	strh	r3, [r7, #22]
 8015e60:	8afb      	ldrh	r3, [r7, #22]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d001      	beq.n	8015e6a <phpalI14443p3a_Sw_HaltA+0x2e>
 8015e66:	8afb      	ldrh	r3, [r7, #22]
 8015e68:	e03b      	b.n	8015ee2 <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	685b      	ldr	r3, [r3, #4]
 8015e6e:	2201      	movs	r2, #1
 8015e70:	2101      	movs	r1, #1
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fa f9a4 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	82fb      	strh	r3, [r7, #22]
 8015e7c:	8afb      	ldrh	r3, [r7, #22]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d001      	beq.n	8015e86 <phpalI14443p3a_Sw_HaltA+0x4a>
 8015e82:	8afb      	ldrh	r3, [r7, #22]
 8015e84:	e02d      	b.n	8015ee2 <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	2102      	movs	r1, #2
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7fa f996 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015e94:	4603      	mov	r3, r0
 8015e96:	82fb      	strh	r3, [r7, #22]
 8015e98:	8afb      	ldrh	r3, [r7, #22]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d001      	beq.n	8015ea2 <phpalI14443p3a_Sw_HaltA+0x66>
 8015e9e:	8afb      	ldrh	r3, [r7, #22]
 8015ea0:	e01f      	b.n	8015ee2 <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 8015ea2:	2350      	movs	r3, #80	@ 0x50
 8015ea4:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	6858      	ldr	r0, [r3, #4]
 8015eae:	f107 0210 	add.w	r2, r7, #16
 8015eb2:	f107 030a 	add.w	r3, r7, #10
 8015eb6:	9301      	str	r3, [sp, #4]
 8015eb8:	f107 030c 	add.w	r3, r7, #12
 8015ebc:	9300      	str	r3, [sp, #0]
 8015ebe:	2302      	movs	r3, #2
 8015ec0:	2100      	movs	r1, #0
 8015ec2:	f7f9 fdc5 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 8015eca:	8abb      	ldrh	r3, [r7, #20]
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d003      	beq.n	8015eda <phpalI14443p3a_Sw_HaltA+0x9e>
 8015ed2:	2b01      	cmp	r3, #1
 8015ed4:	d104      	bne.n	8015ee0 <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	e003      	b.n	8015ee2 <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8015eda:	f240 3306 	movw	r3, #774	@ 0x306
 8015ede:	e000      	b.n	8015ee2 <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 8015ee0:	8abb      	ldrh	r3, [r7, #20]
    }
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3718      	adds	r7, #24
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}

08015eea <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 8015eea:	b580      	push	{r7, lr}
 8015eec:	b08e      	sub	sp, #56	@ 0x38
 8015eee:	af02      	add	r7, sp, #8
 8015ef0:	60f8      	str	r0, [r7, #12]
 8015ef2:	607a      	str	r2, [r7, #4]
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	460b      	mov	r3, r1
 8015ef8:	72fb      	strb	r3, [r7, #11]
 8015efa:	4613      	mov	r3, r2
 8015efc:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 8015efe:	2300      	movs	r3, #0
 8015f00:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 8015f02:	2300      	movs	r3, #0
 8015f04:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 8015f0a:	7abb      	ldrb	r3, [r7, #10]
 8015f0c:	2b40      	cmp	r3, #64	@ 0x40
 8015f0e:	d804      	bhi.n	8015f1a <phpalI14443p3a_Sw_Anticollision+0x30>
 8015f10:	7abb      	ldrb	r3, [r7, #10]
 8015f12:	f003 0308 	and.w	r3, r3, #8
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d002      	beq.n	8015f20 <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8015f1a:	f240 3321 	movw	r3, #801	@ 0x321
 8015f1e:	e217      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 8015f20:	7afb      	ldrb	r3, [r7, #11]
 8015f22:	2b97      	cmp	r3, #151	@ 0x97
 8015f24:	d00d      	beq.n	8015f42 <phpalI14443p3a_Sw_Anticollision+0x58>
 8015f26:	2b97      	cmp	r3, #151	@ 0x97
 8015f28:	dc08      	bgt.n	8015f3c <phpalI14443p3a_Sw_Anticollision+0x52>
 8015f2a:	2b93      	cmp	r3, #147	@ 0x93
 8015f2c:	d002      	beq.n	8015f34 <phpalI14443p3a_Sw_Anticollision+0x4a>
 8015f2e:	2b95      	cmp	r3, #149	@ 0x95
 8015f30:	d007      	beq.n	8015f42 <phpalI14443p3a_Sw_Anticollision+0x58>
 8015f32:	e003      	b.n	8015f3c <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	2200      	movs	r2, #0
 8015f38:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 8015f3a:	e002      	b.n	8015f42 <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8015f3c:	f240 3321 	movw	r3, #801	@ 0x321
 8015f40:	e206      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 8015f42:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2200      	movs	r2, #0
 8015f48:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 8015f4a:	7abb      	ldrb	r3, [r7, #10]
 8015f4c:	2b40      	cmp	r3, #64	@ 0x40
 8015f4e:	d01e      	beq.n	8015f8e <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 8015f50:	2300      	movs	r3, #0
 8015f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2101      	movs	r1, #1
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7fa f92e 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015f64:	4603      	mov	r3, r0
 8015f66:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015f68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d001      	beq.n	8015f72 <phpalI14443p3a_Sw_Anticollision+0x88>
 8015f6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015f70:	e1ee      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	2200      	movs	r2, #0
 8015f78:	2102      	movs	r1, #2
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7fa f920 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015f80:	4603      	mov	r3, r0
 8015f82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015f84:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d020      	beq.n	8015fcc <phpalI14443p3a_Sw_Anticollision+0xe2>
 8015f8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015f8c:	e1e0      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 8015f8e:	2301      	movs	r3, #1
 8015f90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	2201      	movs	r2, #1
 8015f9a:	2101      	movs	r1, #1
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7fa f90f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015fa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d001      	beq.n	8015fb0 <phpalI14443p3a_Sw_Anticollision+0xc6>
 8015fac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015fae:	e1cf      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	2201      	movs	r2, #1
 8015fb6:	2102      	movs	r1, #2
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7fa f901 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015fc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d001      	beq.n	8015fcc <phpalI14443p3a_Sw_Anticollision+0xe2>
 8015fc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015fca:	e1c1      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 8015fcc:	7afb      	ldrb	r3, [r7, #11]
 8015fce:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 8015fd0:	f107 0318 	add.w	r3, r7, #24
 8015fd4:	3302      	adds	r3, #2
 8015fd6:	2205      	movs	r2, #5
 8015fd8:	2100      	movs	r1, #0
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f00c f96e 	bl	80222bc <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 8015fe0:	7abb      	ldrb	r3, [r7, #10]
 8015fe2:	091b      	lsrs	r3, r3, #4
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	461a      	mov	r2, r3
 8015fe8:	7abb      	ldrb	r3, [r7, #10]
 8015fea:	f003 030f 	and.w	r3, r3, #15
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <phpalI14443p3a_Sw_Anticollision+0x10c>
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	e000      	b.n	8015ff8 <phpalI14443p3a_Sw_Anticollision+0x10e>
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	4413      	add	r3, r2
 8015ffa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 8015ffc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8015ffe:	f107 0318 	add.w	r3, r7, #24
 8016002:	3302      	adds	r3, #2
 8016004:	6879      	ldr	r1, [r7, #4]
 8016006:	4618      	mov	r0, r3
 8016008:	f00c f9d7 	bl	80223ba <memcpy>
    wSndBytes += 2U;
 801600c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801600e:	3302      	adds	r3, #2
 8016010:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 8016012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016016:	2b00      	cmp	r3, #0
 8016018:	d016      	beq.n	8016048 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 801601a:	2350      	movs	r3, #80	@ 0x50
 801601c:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	781a      	ldrb	r2, [r3, #0]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	3301      	adds	r3, #1
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	4053      	eors	r3, r2
 801602a:	b2da      	uxtb	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	3302      	adds	r3, #2
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	4053      	eors	r3, r2
 8016034:	b2da      	uxtb	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	3303      	adds	r3, #3
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	4053      	eors	r3, r2
 801603e:	b2db      	uxtb	r3, r3
 8016040:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 8016042:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016044:	3301      	adds	r3, #1
 8016046:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8016048:	7abb      	ldrb	r3, [r7, #10]
 801604a:	3320      	adds	r3, #32
 801604c:	b2db      	uxtb	r3, r3
 801604e:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	6858      	ldr	r0, [r3, #4]
 8016054:	7abb      	ldrb	r3, [r7, #10]
 8016056:	b29b      	uxth	r3, r3
 8016058:	f003 0307 	and.w	r3, r3, #7
 801605c:	b29b      	uxth	r3, r3
 801605e:	461a      	mov	r2, r3
 8016060:	2105      	movs	r1, #5
 8016062:	f7fa f8ad 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016066:	4603      	mov	r3, r0
 8016068:	853b      	strh	r3, [r7, #40]	@ 0x28
 801606a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801606c:	2b00      	cmp	r3, #0
 801606e:	d001      	beq.n	8016074 <phpalI14443p3a_Sw_Anticollision+0x18a>
 8016070:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016072:	e16d      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	6858      	ldr	r0, [r3, #4]
 8016078:	7abb      	ldrb	r3, [r7, #10]
 801607a:	b29b      	uxth	r3, r3
 801607c:	f003 0307 	and.w	r3, r3, #7
 8016080:	b29b      	uxth	r3, r3
 8016082:	461a      	mov	r2, r3
 8016084:	2103      	movs	r1, #3
 8016086:	f7fa f89b 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801608a:	4603      	mov	r3, r0
 801608c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801608e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016090:	2b00      	cmp	r3, #0
 8016092:	d001      	beq.n	8016098 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 8016094:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016096:	e15b      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	6858      	ldr	r0, [r3, #4]
 801609c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 801609e:	f107 0218 	add.w	r2, r7, #24
 80160a2:	f107 0312 	add.w	r3, r7, #18
 80160a6:	9301      	str	r3, [sp, #4]
 80160a8:	f107 0314 	add.w	r3, r7, #20
 80160ac:	9300      	str	r3, [sp, #0]
 80160ae:	460b      	mov	r3, r1
 80160b0:	2100      	movs	r1, #0
 80160b2:	f7f9 fccd 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 80160b6:	4603      	mov	r3, r0
 80160b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	685b      	ldr	r3, [r3, #4]
 80160be:	2200      	movs	r2, #0
 80160c0:	2105      	movs	r1, #5
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7fa f87c 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80160c8:	4603      	mov	r3, r0
 80160ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80160cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d001      	beq.n	80160d6 <phpalI14443p3a_Sw_Anticollision+0x1ec>
 80160d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80160d4:	e13c      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 80160d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d112      	bne.n	8016104 <phpalI14443p3a_Sw_Anticollision+0x21a>
 80160de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	2b03      	cmp	r3, #3
 80160e4:	d10e      	bne.n	8016104 <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	f107 0210 	add.w	r2, r7, #16
 80160ee:	2104      	movs	r1, #4
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7fb fcb3 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 80160f6:	4603      	mov	r3, r0
 80160f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80160fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d00f      	beq.n	8016120 <phpalI14443p3a_Sw_Anticollision+0x236>
 8016100:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016102:	e125      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8016104:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016106:	b2db      	uxtb	r3, r3
 8016108:	2b73      	cmp	r3, #115	@ 0x73
 801610a:	d102      	bne.n	8016112 <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801610c:	f240 3306 	movw	r3, #774	@ 0x306
 8016110:	e11e      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 8016112:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016114:	2b00      	cmp	r3, #0
 8016116:	d001      	beq.n	801611c <phpalI14443p3a_Sw_Anticollision+0x232>
 8016118:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801611a:	e119      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 801611c:	2300      	movs	r3, #0
 801611e:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 8016120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016124:	2b00      	cmp	r3, #0
 8016126:	f040 80ae 	bne.w	8016286 <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 801612a:	7abb      	ldrb	r3, [r7, #10]
 801612c:	091b      	lsrs	r3, r3, #4
 801612e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 8016132:	7abb      	ldrb	r3, [r7, #10]
 8016134:	091b      	lsrs	r3, r3, #4
 8016136:	b2da      	uxtb	r2, r3
 8016138:	8a7b      	ldrh	r3, [r7, #18]
 801613a:	b2db      	uxtb	r3, r3
 801613c:	4413      	add	r3, r2
 801613e:	b2db      	uxtb	r3, r3
 8016140:	00db      	lsls	r3, r3, #3
 8016142:	b2da      	uxtb	r2, r3
 8016144:	8a3b      	ldrh	r3, [r7, #16]
 8016146:	b2db      	uxtb	r3, r3
 8016148:	4413      	add	r3, r2
 801614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 801614e:	8a3b      	ldrh	r3, [r7, #16]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d004      	beq.n	801615e <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 8016154:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016158:	3b08      	subs	r3, #8
 801615a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 801615e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016162:	08db      	lsrs	r3, r3, #3
 8016164:	b2db      	uxtb	r3, r3
 8016166:	011b      	lsls	r3, r3, #4
 8016168:	b2da      	uxtb	r2, r3
 801616a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801616e:	f003 0307 	and.w	r3, r3, #7
 8016172:	b2db      	uxtb	r3, r3
 8016174:	4413      	add	r3, r2
 8016176:	b2da      	uxtb	r2, r3
 8016178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801617a:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 801617c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	2b50      	cmp	r3, #80	@ 0x50
 8016182:	d902      	bls.n	801618a <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8016184:	f240 3306 	movw	r3, #774	@ 0x306
 8016188:	e0e2      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 801618a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801618c:	b2db      	uxtb	r3, r3
 801618e:	2b00      	cmp	r3, #0
 8016190:	d106      	bne.n	80161a0 <phpalI14443p3a_Sw_Anticollision+0x2b6>
 8016192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	2b50      	cmp	r3, #80	@ 0x50
 8016198:	d002      	beq.n	80161a0 <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801619a:	f240 3306 	movw	r3, #774	@ 0x306
 801619e:	e0d7      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 80161a0:	8a7b      	ldrh	r3, [r7, #18]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d041      	beq.n	801622a <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 80161a6:	7abb      	ldrb	r3, [r7, #10]
 80161a8:	f003 0307 	and.w	r3, r3, #7
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d026      	beq.n	80161fe <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80161b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80161b4:	3302      	adds	r3, #2
 80161b6:	3330      	adds	r3, #48	@ 0x30
 80161b8:	443b      	add	r3, r7
 80161ba:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80161be:	7abb      	ldrb	r3, [r7, #10]
 80161c0:	f003 0307 	and.w	r3, r3, #7
 80161c4:	2101      	movs	r1, #1
 80161c6:	fa01 f303 	lsl.w	r3, r1, r3
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	3b01      	subs	r3, #1
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	4013      	ands	r3, r2
 80161d2:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	781a      	ldrb	r2, [r3, #0]
 80161d8:	7abb      	ldrb	r3, [r7, #10]
 80161da:	f003 0307 	and.w	r3, r3, #7
 80161de:	20ff      	movs	r0, #255	@ 0xff
 80161e0:	fa00 f303 	lsl.w	r3, r0, r3
 80161e4:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80161e6:	4013      	ands	r3, r2
 80161e8:	b2da      	uxtb	r2, r3
 80161ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80161ee:	3302      	adds	r3, #2
 80161f0:	430a      	orrs	r2, r1
 80161f2:	b2d2      	uxtb	r2, r2
 80161f4:	3330      	adds	r3, #48	@ 0x30
 80161f6:	443b      	add	r3, r7
 80161f8:	f803 2c18 	strb.w	r2, [r3, #-24]
 80161fc:	e008      	b.n	8016210 <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 80161fe:	697a      	ldr	r2, [r7, #20]
 8016200:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016204:	3302      	adds	r3, #2
 8016206:	7812      	ldrb	r2, [r2, #0]
 8016208:	3330      	adds	r3, #48	@ 0x30
 801620a:	443b      	add	r3, r7
 801620c:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 8016210:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016214:	3303      	adds	r3, #3
 8016216:	f107 0218 	add.w	r2, r7, #24
 801621a:	18d0      	adds	r0, r2, r3
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	3301      	adds	r3, #1
 8016220:	8a7a      	ldrh	r2, [r7, #18]
 8016222:	3a01      	subs	r2, #1
 8016224:	4619      	mov	r1, r3
 8016226:	f00c f8c8 	bl	80223ba <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 801622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	2b40      	cmp	r3, #64	@ 0x40
 8016230:	d91d      	bls.n	801626e <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 8016232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	2b4f      	cmp	r3, #79	@ 0x4f
 8016238:	d802      	bhi.n	8016240 <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 801623a:	f240 3305 	movw	r3, #773	@ 0x305
 801623e:	e087      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 8016240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016242:	2240      	movs	r2, #64	@ 0x40
 8016244:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 8016246:	8a7b      	ldrh	r3, [r7, #18]
 8016248:	3b01      	subs	r3, #1
 801624a:	b29b      	uxth	r3, r3
 801624c:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 801624e:	7eba      	ldrb	r2, [r7, #26]
 8016250:	7efb      	ldrb	r3, [r7, #27]
 8016252:	4053      	eors	r3, r2
 8016254:	b2da      	uxtb	r2, r3
 8016256:	7f3b      	ldrb	r3, [r7, #28]
 8016258:	4053      	eors	r3, r2
 801625a:	b2da      	uxtb	r2, r3
 801625c:	7f7b      	ldrb	r3, [r7, #29]
 801625e:	4053      	eors	r3, r2
 8016260:	b2da      	uxtb	r2, r3
 8016262:	7fbb      	ldrb	r3, [r7, #30]
 8016264:	429a      	cmp	r2, r3
 8016266:	d002      	beq.n	801626e <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8016268:	f240 3305 	movw	r3, #773	@ 0x305
 801626c:	e070      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 801626e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016272:	8a7a      	ldrh	r2, [r7, #18]
 8016274:	441a      	add	r2, r3
 8016276:	f107 0318 	add.w	r3, r7, #24
 801627a:	3302      	adds	r3, #2
 801627c:	4619      	mov	r1, r3
 801627e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016280:	f00c f89b 	bl	80223ba <memcpy>
 8016284:	e054      	b.n	8016330 <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 8016286:	8a7b      	ldrh	r3, [r7, #18]
 8016288:	2b01      	cmp	r3, #1
 801628a:	d002      	beq.n	8016292 <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801628c:	f240 3306 	movw	r3, #774	@ 0x306
 8016290:	e05e      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	f003 0304 	and.w	r3, r3, #4
 801629a:	2b00      	cmp	r3, #0
 801629c:	d01e      	beq.n	80162dc <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 801629e:	7afb      	ldrb	r3, [r7, #11]
 80162a0:	2b97      	cmp	r3, #151	@ 0x97
 80162a2:	d102      	bne.n	80162aa <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80162a4:	f240 3306 	movw	r3, #774	@ 0x306
 80162a8:	e052      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	2b88      	cmp	r3, #136	@ 0x88
 80162b0:	d002      	beq.n	80162b8 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80162b2:	f240 3306 	movw	r3, #774	@ 0x306
 80162b6:	e04b      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	7c9b      	ldrb	r3, [r3, #18]
 80162bc:	3308      	adds	r3, #8
 80162be:	68fa      	ldr	r2, [r7, #12]
 80162c0:	18d0      	adds	r0, r2, r3
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	3301      	adds	r3, #1
 80162c6:	2203      	movs	r2, #3
 80162c8:	4619      	mov	r1, r3
 80162ca:	f00c f876 	bl	80223ba <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	7c9b      	ldrb	r3, [r3, #18]
 80162d2:	3303      	adds	r3, #3
 80162d4:	b2da      	uxtb	r2, r3
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	749a      	strb	r2, [r3, #18]
 80162da:	e025      	b.n	8016328 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	2b88      	cmp	r3, #136	@ 0x88
 80162e2:	d102      	bne.n	80162ea <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80162e4:	f240 3306 	movw	r3, #774	@ 0x306
 80162e8:	e032      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	7c9b      	ldrb	r3, [r3, #18]
 80162ee:	3308      	adds	r3, #8
 80162f0:	68fa      	ldr	r2, [r7, #12]
 80162f2:	4413      	add	r3, r2
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	6812      	ldr	r2, [r2, #0]
 80162f8:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7c9b      	ldrb	r3, [r3, #18]
 80162fe:	3304      	adds	r3, #4
 8016300:	b2da      	uxtb	r2, r3
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2201      	movs	r2, #1
 801630a:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	220a      	movs	r2, #10
 8016312:	210e      	movs	r1, #14
 8016314:	4618      	mov	r0, r3
 8016316:	f7f9 ff53 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801631a:	4603      	mov	r3, r0
 801631c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801631e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016320:	2b00      	cmp	r3, #0
 8016322:	d001      	beq.n	8016328 <phpalI14443p3a_Sw_Anticollision+0x43e>
 8016324:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016326:	e013      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	781a      	ldrb	r2, [r3, #0]
 801632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801632e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 8016330:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016332:	2b00      	cmp	r3, #0
 8016334:	d00b      	beq.n	801634e <phpalI14443p3a_Sw_Anticollision+0x464>
 8016336:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016338:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801633c:	2b00      	cmp	r3, #0
 801633e:	d106      	bne.n	801634e <phpalI14443p3a_Sw_Anticollision+0x464>
 8016340:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016342:	b2db      	uxtb	r3, r3
 8016344:	b29b      	uxth	r3, r3
 8016346:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801634a:	b29b      	uxth	r3, r3
 801634c:	e000      	b.n	8016350 <phpalI14443p3a_Sw_Anticollision+0x466>
 801634e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8016350:	4618      	mov	r0, r3
 8016352:	3730      	adds	r7, #48	@ 0x30
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}

08016358 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b088      	sub	sp, #32
 801635c:	af02      	add	r7, sp, #8
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	607a      	str	r2, [r7, #4]
 8016362:	603b      	str	r3, [r7, #0]
 8016364:	460b      	mov	r3, r1
 8016366:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 8016368:	7af9      	ldrb	r1, [r7, #11]
 801636a:	f107 0317 	add.w	r3, r7, #23
 801636e:	9301      	str	r3, [sp, #4]
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	9300      	str	r3, [sp, #0]
 8016374:	2340      	movs	r3, #64	@ 0x40
 8016376:	687a      	ldr	r2, [r7, #4]
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f7ff fdb6 	bl	8015eea <phpalI14443p3a_Sw_Anticollision>
 801637e:	4603      	mov	r3, r0
}
 8016380:	4618      	mov	r0, r3
 8016382:	3718      	adds	r7, #24
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b08a      	sub	sp, #40	@ 0x28
 801638c:	af02      	add	r7, sp, #8
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	603b      	str	r3, [r7, #0]
 8016394:	4613      	mov	r3, r2
 8016396:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8016398:	2300      	movs	r3, #0
 801639a:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 801639c:	2300      	movs	r3, #0
 801639e:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 80163a0:	2300      	movs	r3, #0
 80163a2:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 80163a4:	2300      	movs	r3, #0
 80163a6:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 80163a8:	79fb      	ldrb	r3, [r7, #7]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d00f      	beq.n	80163ce <phpalI14443p3a_Sw_ActivateCard+0x46>
 80163ae:	79fb      	ldrb	r3, [r7, #7]
 80163b0:	2b04      	cmp	r3, #4
 80163b2:	d00c      	beq.n	80163ce <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 80163b4:	79fb      	ldrb	r3, [r7, #7]
 80163b6:	2b07      	cmp	r3, #7
 80163b8:	d009      	beq.n	80163ce <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 80163ba:	79fb      	ldrb	r3, [r7, #7]
 80163bc:	2b0a      	cmp	r3, #10
 80163be:	d006      	beq.n	80163ce <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d002      	beq.n	80163ce <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80163c8:	f240 3321 	movw	r3, #801	@ 0x321
 80163cc:	e18c      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 80163d2:	f107 0310 	add.w	r3, r7, #16
 80163d6:	2204      	movs	r2, #4
 80163d8:	2100      	movs	r1, #0
 80163da:	4618      	mov	r0, r3
 80163dc:	f00b ff6e 	bl	80222bc <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 80163e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163e6:	2200      	movs	r2, #0
 80163e8:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 80163ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ec:	2200      	movs	r2, #0
 80163ee:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	7d1b      	ldrb	r3, [r3, #20]
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d12a      	bne.n	801644e <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 80163f8:	f107 0314 	add.w	r3, r7, #20
 80163fc:	4619      	mov	r1, r3
 80163fe:	68f8      	ldr	r0, [r7, #12]
 8016400:	f7ff fd0d 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 8016404:	4603      	mov	r3, r0
 8016406:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8016408:	e019      	b.n	801643e <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 801640a:	7e3b      	ldrb	r3, [r7, #24]
 801640c:	3301      	adds	r3, #1
 801640e:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8016418:	2100      	movs	r1, #0
 801641a:	4618      	mov	r0, r3
 801641c:	f7f9 fe14 	bl	8010048 <phhalHw_Pn5180_Wait>
 8016420:	4603      	mov	r3, r0
 8016422:	83fb      	strh	r3, [r7, #30]
 8016424:	8bfb      	ldrh	r3, [r7, #30]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d001      	beq.n	801642e <phpalI14443p3a_Sw_ActivateCard+0xa6>
 801642a:	8bfb      	ldrh	r3, [r7, #30]
 801642c:	e15c      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801642e:	f107 0314 	add.w	r3, r7, #20
 8016432:	4619      	mov	r1, r3
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f7ff fcf2 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 801643a:	4603      	mov	r3, r0
 801643c:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801643e:	8bfb      	ldrh	r3, [r7, #30]
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b01      	cmp	r3, #1
 8016444:	d128      	bne.n	8016498 <phpalI14443p3a_Sw_ActivateCard+0x110>
 8016446:	7e3b      	ldrb	r3, [r7, #24]
 8016448:	2b01      	cmp	r3, #1
 801644a:	d9de      	bls.n	801640a <phpalI14443p3a_Sw_ActivateCard+0x82>
 801644c:	e024      	b.n	8016498 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	7d1b      	ldrb	r3, [r3, #20]
 8016452:	2b03      	cmp	r3, #3
 8016454:	d10c      	bne.n	8016470 <phpalI14443p3a_Sw_ActivateCard+0xe8>
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	7d5b      	ldrb	r3, [r3, #21]
 801645a:	2b01      	cmp	r3, #1
 801645c:	d108      	bne.n	8016470 <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801645e:	f107 0314 	add.w	r3, r7, #20
 8016462:	4619      	mov	r1, r3
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f7ff fcda 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 801646a:	4603      	mov	r3, r0
 801646c:	83fb      	strh	r3, [r7, #30]
 801646e:	e013      	b.n	8016498 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 8016470:	79fb      	ldrb	r3, [r7, #7]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d108      	bne.n	8016488 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 8016476:	f107 0314 	add.w	r3, r7, #20
 801647a:	4619      	mov	r1, r3
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f7ff fcbf 	bl	8015e00 <phpalI14443p3a_Sw_RequestA>
 8016482:	4603      	mov	r3, r0
 8016484:	83fb      	strh	r3, [r7, #30]
 8016486:	e007      	b.n	8016498 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8016488:	f107 0314 	add.w	r3, r7, #20
 801648c:	4619      	mov	r1, r3
 801648e:	68f8      	ldr	r0, [r7, #12]
 8016490:	f7ff fcc5 	bl	8015e1e <phpalI14443p3a_Sw_WakeUpA>
 8016494:	4603      	mov	r3, r0
 8016496:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8016498:	8bfb      	ldrh	r3, [r7, #30]
 801649a:	b2db      	uxtb	r3, r3
 801649c:	2b03      	cmp	r3, #3
 801649e:	d10b      	bne.n	80164b8 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	7d1b      	ldrb	r3, [r3, #20]
 80164a4:	2b01      	cmp	r3, #1
 80164a6:	d101      	bne.n	80164ac <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 80164a8:	8bfb      	ldrh	r3, [r7, #30]
 80164aa:	e11d      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 80164ac:	2301      	movs	r3, #1
 80164ae:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 80164b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164b2:	2201      	movs	r2, #1
 80164b4:	701a      	strb	r2, [r3, #0]
 80164b6:	e004      	b.n	80164c2 <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 80164b8:	8bfb      	ldrh	r3, [r7, #30]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d001      	beq.n	80164c2 <phpalI14443p3a_Sw_ActivateCard+0x13a>
 80164be:	8bfb      	ldrh	r3, [r7, #30]
 80164c0:	e112      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80164c2:	2300      	movs	r3, #0
 80164c4:	76bb      	strb	r3, [r7, #26]
 80164c6:	e0fb      	b.n	80166c0 <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 80164c8:	7ebb      	ldrb	r3, [r7, #26]
 80164ca:	2b02      	cmp	r3, #2
 80164cc:	d00c      	beq.n	80164e8 <phpalI14443p3a_Sw_ActivateCard+0x160>
 80164ce:	2b02      	cmp	r3, #2
 80164d0:	dc0d      	bgt.n	80164ee <phpalI14443p3a_Sw_ActivateCard+0x166>
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d002      	beq.n	80164dc <phpalI14443p3a_Sw_ActivateCard+0x154>
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d003      	beq.n	80164e2 <phpalI14443p3a_Sw_ActivateCard+0x15a>
 80164da:	e008      	b.n	80164ee <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 80164dc:	2393      	movs	r3, #147	@ 0x93
 80164de:	76fb      	strb	r3, [r7, #27]
            break;
 80164e0:	e005      	b.n	80164ee <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 80164e2:	2395      	movs	r3, #149	@ 0x95
 80164e4:	76fb      	strb	r3, [r7, #27]
            break;
 80164e6:	e002      	b.n	80164ee <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 80164e8:	2397      	movs	r3, #151	@ 0x97
 80164ea:	76fb      	strb	r3, [r7, #27]
            break;
 80164ec:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 80164ee:	79fa      	ldrb	r2, [r7, #7]
 80164f0:	7e7b      	ldrb	r3, [r7, #25]
 80164f2:	3304      	adds	r3, #4
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d107      	bne.n	8016508 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 80164f8:	7e7b      	ldrb	r3, [r7, #25]
 80164fa:	68ba      	ldr	r2, [r7, #8]
 80164fc:	4413      	add	r3, r2
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8016502:	2340      	movs	r3, #64	@ 0x40
 8016504:	75bb      	strb	r3, [r7, #22]
 8016506:	e097      	b.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8016508:	79fa      	ldrb	r2, [r7, #7]
 801650a:	7e7b      	ldrb	r3, [r7, #25]
 801650c:	3304      	adds	r3, #4
 801650e:	429a      	cmp	r2, r3
 8016510:	d911      	bls.n	8016536 <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 8016512:	2388      	movs	r3, #136	@ 0x88
 8016514:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 8016516:	7e7b      	ldrb	r3, [r7, #25]
 8016518:	68ba      	ldr	r2, [r7, #8]
 801651a:	18d1      	adds	r1, r2, r3
 801651c:	f107 0310 	add.w	r3, r7, #16
 8016520:	3301      	adds	r3, #1
 8016522:	2203      	movs	r2, #3
 8016524:	4618      	mov	r0, r3
 8016526:	f00b ff48 	bl	80223ba <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 801652a:	7e7b      	ldrb	r3, [r7, #25]
 801652c:	3303      	adds	r3, #3
 801652e:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8016530:	2340      	movs	r3, #64	@ 0x40
 8016532:	75bb      	strb	r3, [r7, #22]
 8016534:	e080      	b.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 8016536:	2300      	movs	r3, #0
 8016538:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 801653a:	e07d      	b.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 801653c:	7db8      	ldrb	r0, [r7, #22]
 801653e:	f107 0210 	add.w	r2, r7, #16
 8016542:	7ef9      	ldrb	r1, [r7, #27]
 8016544:	f107 0316 	add.w	r3, r7, #22
 8016548:	9301      	str	r3, [sp, #4]
 801654a:	f107 0310 	add.w	r3, r7, #16
 801654e:	9300      	str	r3, [sp, #0]
 8016550:	4603      	mov	r3, r0
 8016552:	68f8      	ldr	r0, [r7, #12]
 8016554:	f7ff fcc9 	bl	8015eea <phpalI14443p3a_Sw_Anticollision>
 8016558:	4603      	mov	r3, r0
 801655a:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	7d1b      	ldrb	r3, [r3, #20]
 8016560:	2b01      	cmp	r3, #1
 8016562:	d12b      	bne.n	80165bc <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 8016564:	2300      	movs	r3, #0
 8016566:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8016568:	e021      	b.n	80165ae <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 801656a:	7e3b      	ldrb	r3, [r7, #24]
 801656c:	3301      	adds	r3, #1
 801656e:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	685b      	ldr	r3, [r3, #4]
 8016574:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8016578:	2100      	movs	r1, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f7f9 fd64 	bl	8010048 <phhalHw_Pn5180_Wait>
 8016580:	4603      	mov	r3, r0
 8016582:	83fb      	strh	r3, [r7, #30]
 8016584:	8bfb      	ldrh	r3, [r7, #30]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d001      	beq.n	801658e <phpalI14443p3a_Sw_ActivateCard+0x206>
 801658a:	8bfb      	ldrh	r3, [r7, #30]
 801658c:	e0ac      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 801658e:	7db8      	ldrb	r0, [r7, #22]
 8016590:	f107 0210 	add.w	r2, r7, #16
 8016594:	7ef9      	ldrb	r1, [r7, #27]
 8016596:	f107 0316 	add.w	r3, r7, #22
 801659a:	9301      	str	r3, [sp, #4]
 801659c:	f107 0310 	add.w	r3, r7, #16
 80165a0:	9300      	str	r3, [sp, #0]
 80165a2:	4603      	mov	r3, r0
 80165a4:	68f8      	ldr	r0, [r7, #12]
 80165a6:	f7ff fca0 	bl	8015eea <phpalI14443p3a_Sw_Anticollision>
 80165aa:	4603      	mov	r3, r0
 80165ac:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80165ae:	8bfb      	ldrh	r3, [r7, #30]
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	2b01      	cmp	r3, #1
 80165b4:	d102      	bne.n	80165bc <phpalI14443p3a_Sw_ActivateCard+0x234>
 80165b6:	7e3b      	ldrb	r3, [r7, #24]
 80165b8:	2b01      	cmp	r3, #1
 80165ba:	d9d6      	bls.n	801656a <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80165bc:	8bfb      	ldrh	r3, [r7, #30]
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	2b03      	cmp	r3, #3
 80165c2:	d11b      	bne.n	80165fc <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	7d1b      	ldrb	r3, [r3, #20]
 80165c8:	2b01      	cmp	r3, #1
 80165ca:	d101      	bne.n	80165d0 <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 80165cc:	8bfb      	ldrh	r3, [r7, #30]
 80165ce:	e08b      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 80165d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165d2:	2201      	movs	r2, #1
 80165d4:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 80165d6:	7dbb      	ldrb	r3, [r7, #22]
 80165d8:	f003 0307 	and.w	r3, r3, #7
 80165dc:	2b06      	cmp	r3, #6
 80165de:	d804      	bhi.n	80165ea <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 80165e0:	7dbb      	ldrb	r3, [r7, #22]
 80165e2:	3301      	adds	r3, #1
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	75bb      	strb	r3, [r7, #22]
 80165e8:	e00d      	b.n	8016606 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 80165ea:	7dbb      	ldrb	r3, [r7, #22]
 80165ec:	091b      	lsrs	r3, r3, #4
 80165ee:	b2db      	uxtb	r3, r3
 80165f0:	3301      	adds	r3, #1
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	011b      	lsls	r3, r3, #4
 80165f6:	b2db      	uxtb	r3, r3
 80165f8:	75bb      	strb	r3, [r7, #22]
 80165fa:	e004      	b.n	8016606 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 80165fc:	8bfb      	ldrh	r3, [r7, #30]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d001      	beq.n	8016606 <phpalI14443p3a_Sw_ActivateCard+0x27e>
 8016602:	8bfb      	ldrh	r3, [r7, #30]
 8016604:	e070      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 8016606:	7dfb      	ldrb	r3, [r7, #23]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d115      	bne.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 801660c:	7d3b      	ldrb	r3, [r7, #20]
 801660e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 8016612:	2b00      	cmp	r3, #0
 8016614:	d102      	bne.n	801661c <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8016616:	7efb      	ldrb	r3, [r7, #27]
 8016618:	2b93      	cmp	r3, #147	@ 0x93
 801661a:	d007      	beq.n	801662c <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801661c:	7d3b      	ldrb	r3, [r7, #20]
 801661e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8016622:	2b40      	cmp	r3, #64	@ 0x40
 8016624:	d108      	bne.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8016626:	7efb      	ldrb	r3, [r7, #27]
 8016628:	2b95      	cmp	r3, #149	@ 0x95
 801662a:	d105      	bne.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 801662c:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801662e:	2b88      	cmp	r3, #136	@ 0x88
 8016630:	d102      	bne.n	8016638 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8016632:	f240 3306 	movw	r3, #774	@ 0x306
 8016636:	e057      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8016638:	7dbb      	ldrb	r3, [r7, #22]
 801663a:	2b40      	cmp	r3, #64	@ 0x40
 801663c:	f47f af7e 	bne.w	801653c <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8016640:	f107 0210 	add.w	r2, r7, #16
 8016644:	7ef9      	ldrb	r1, [r7, #27]
 8016646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016648:	68f8      	ldr	r0, [r7, #12]
 801664a:	f7ff fe85 	bl	8016358 <phpalI14443p3a_Sw_Select>
 801664e:	4603      	mov	r3, r0
 8016650:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	7d1b      	ldrb	r3, [r3, #20]
 8016656:	2b01      	cmp	r3, #1
 8016658:	d124      	bne.n	80166a4 <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 801665a:	2300      	movs	r3, #0
 801665c:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801665e:	e01a      	b.n	8016696 <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 8016660:	7e3b      	ldrb	r3, [r7, #24]
 8016662:	3301      	adds	r3, #1
 8016664:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801666e:	2100      	movs	r1, #0
 8016670:	4618      	mov	r0, r3
 8016672:	f7f9 fce9 	bl	8010048 <phhalHw_Pn5180_Wait>
 8016676:	4603      	mov	r3, r0
 8016678:	83fb      	strh	r3, [r7, #30]
 801667a:	8bfb      	ldrh	r3, [r7, #30]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d001      	beq.n	8016684 <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 8016680:	8bfb      	ldrh	r3, [r7, #30]
 8016682:	e031      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8016684:	f107 0210 	add.w	r2, r7, #16
 8016688:	7ef9      	ldrb	r1, [r7, #27]
 801668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f7ff fe63 	bl	8016358 <phpalI14443p3a_Sw_Select>
 8016692:	4603      	mov	r3, r0
 8016694:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8016696:	8bbb      	ldrh	r3, [r7, #28]
 8016698:	b2db      	uxtb	r3, r3
 801669a:	2b01      	cmp	r3, #1
 801669c:	d102      	bne.n	80166a4 <phpalI14443p3a_Sw_ActivateCard+0x31c>
 801669e:	7e3b      	ldrb	r3, [r7, #24]
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d9dd      	bls.n	8016660 <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 80166a4:	8bbb      	ldrh	r3, [r7, #28]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d001      	beq.n	80166ae <phpalI14443p3a_Sw_ActivateCard+0x326>
 80166aa:	8bbb      	ldrh	r3, [r7, #28]
 80166ac:	e01c      	b.n	80166e8 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 80166ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166b0:	781b      	ldrb	r3, [r3, #0]
 80166b2:	f003 0304 	and.w	r3, r3, #4
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d007      	beq.n	80166ca <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80166ba:	7ebb      	ldrb	r3, [r7, #26]
 80166bc:	3301      	adds	r3, #1
 80166be:	76bb      	strb	r3, [r7, #26]
 80166c0:	7ebb      	ldrb	r3, [r7, #26]
 80166c2:	2b02      	cmp	r3, #2
 80166c4:	f67f af00 	bls.w	80164c8 <phpalI14443p3a_Sw_ActivateCard+0x140>
 80166c8:	e000      	b.n	80166cc <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 80166ca:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	f103 0108 	add.w	r1, r3, #8
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	7c9b      	ldrb	r3, [r3, #18]
 80166d6:	461a      	mov	r2, r3
 80166d8:	6838      	ldr	r0, [r7, #0]
 80166da:	f00b fe6e 	bl	80223ba <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	7c9a      	ldrb	r2, [r3, #18]
 80166e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166e4:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80166e6:	2300      	movs	r3, #0
}
 80166e8:	4618      	mov	r0, r3
 80166ea:	3720      	adds	r7, #32
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b086      	sub	sp, #24
 80166f4:	af02      	add	r7, sp, #8
 80166f6:	60f8      	str	r0, [r7, #12]
 80166f8:	607a      	str	r2, [r7, #4]
 80166fa:	461a      	mov	r2, r3
 80166fc:	460b      	mov	r3, r1
 80166fe:	817b      	strh	r3, [r7, #10]
 8016700:	4613      	mov	r3, r2
 8016702:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	6858      	ldr	r0, [r3, #4]
 8016708:	893a      	ldrh	r2, [r7, #8]
 801670a:	8979      	ldrh	r1, [r7, #10]
 801670c:	69fb      	ldr	r3, [r7, #28]
 801670e:	9301      	str	r3, [sp, #4]
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	9300      	str	r3, [sp, #0]
 8016714:	4613      	mov	r3, r2
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	f7f9 f99a 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801671c:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 801671e:	4618      	mov	r0, r3
 8016720:	3710      	adds	r7, #16
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}

08016726 <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 8016726:	b580      	push	{r7, lr}
 8016728:	b08a      	sub	sp, #40	@ 0x28
 801672a:	af02      	add	r7, sp, #8
 801672c:	60f8      	str	r0, [r7, #12]
 801672e:	460b      	mov	r3, r1
 8016730:	607a      	str	r2, [r7, #4]
 8016732:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016734:	2300      	movs	r3, #0
 8016736:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016738:	2300      	movs	r3, #0
 801673a:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	2201      	movs	r2, #1
 8016742:	212e      	movs	r1, #46	@ 0x2e
 8016744:	4618      	mov	r0, r3
 8016746:	f7f9 fd3b 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801674a:	4603      	mov	r3, r0
 801674c:	83fb      	strh	r3, [r7, #30]
 801674e:	8bfb      	ldrh	r3, [r7, #30]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d001      	beq.n	8016758 <phpalI14443p3a_Sw_RequestAEx+0x32>
 8016754:	8bfb      	ldrh	r3, [r7, #30]
 8016756:	e0cc      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	2200      	movs	r2, #0
 801675e:	2109      	movs	r1, #9
 8016760:	4618      	mov	r0, r3
 8016762:	f7f9 fd2d 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016766:	4603      	mov	r3, r0
 8016768:	83fb      	strh	r3, [r7, #30]
 801676a:	8bfb      	ldrh	r3, [r7, #30]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <phpalI14443p3a_Sw_RequestAEx+0x4e>
 8016770:	8bfb      	ldrh	r3, [r7, #30]
 8016772:	e0be      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	685b      	ldr	r3, [r3, #4]
 8016778:	2200      	movs	r2, #0
 801677a:	210a      	movs	r1, #10
 801677c:	4618      	mov	r0, r3
 801677e:	f7f9 fd1f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016782:	4603      	mov	r3, r0
 8016784:	83fb      	strh	r3, [r7, #30]
 8016786:	8bfb      	ldrh	r3, [r7, #30]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d001      	beq.n	8016790 <phpalI14443p3a_Sw_RequestAEx+0x6a>
 801678c:	8bfb      	ldrh	r3, [r7, #30]
 801678e:	e0b0      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	2291      	movs	r2, #145	@ 0x91
 8016796:	210d      	movs	r1, #13
 8016798:	4618      	mov	r0, r3
 801679a:	f7f9 fd11 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801679e:	4603      	mov	r3, r0
 80167a0:	83fb      	strh	r3, [r7, #30]
 80167a2:	8bfb      	ldrh	r3, [r7, #30]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <phpalI14443p3a_Sw_RequestAEx+0x86>
 80167a8:	8bfb      	ldrh	r3, [r7, #30]
 80167aa:	e0a2      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	685b      	ldr	r3, [r3, #4]
 80167b0:	f107 0210 	add.w	r2, r7, #16
 80167b4:	2106      	movs	r1, #6
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7fb f950 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 80167bc:	4603      	mov	r3, r0
 80167be:	83fb      	strh	r3, [r7, #30]
 80167c0:	8bfb      	ldrh	r3, [r7, #30]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d001      	beq.n	80167ca <phpalI14443p3a_Sw_RequestAEx+0xa4>
 80167c6:	8bfb      	ldrh	r3, [r7, #30]
 80167c8:	e093      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	224c      	movs	r2, #76	@ 0x4c
 80167d0:	2106      	movs	r1, #6
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7f9 fcf4 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80167d8:	4603      	mov	r3, r0
 80167da:	83fb      	strh	r3, [r7, #30]
 80167dc:	8bfb      	ldrh	r3, [r7, #30]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d001      	beq.n	80167e6 <phpalI14443p3a_Sw_RequestAEx+0xc0>
 80167e2:	8bfb      	ldrh	r3, [r7, #30]
 80167e4:	e085      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	2200      	movs	r2, #0
 80167ec:	2101      	movs	r1, #1
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7f9 fce6 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80167f4:	4603      	mov	r3, r0
 80167f6:	83fb      	strh	r3, [r7, #30]
 80167f8:	8bfb      	ldrh	r3, [r7, #30]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d001      	beq.n	8016802 <phpalI14443p3a_Sw_RequestAEx+0xdc>
 80167fe:	8bfb      	ldrh	r3, [r7, #30]
 8016800:	e077      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	2200      	movs	r2, #0
 8016808:	2102      	movs	r1, #2
 801680a:	4618      	mov	r0, r3
 801680c:	f7f9 fcd8 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016810:	4603      	mov	r3, r0
 8016812:	83fb      	strh	r3, [r7, #30]
 8016814:	8bfb      	ldrh	r3, [r7, #30]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d001      	beq.n	801681e <phpalI14443p3a_Sw_RequestAEx+0xf8>
 801681a:	8bfb      	ldrh	r3, [r7, #30]
 801681c:	e069      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	2207      	movs	r2, #7
 8016824:	2103      	movs	r1, #3
 8016826:	4618      	mov	r0, r3
 8016828:	f7f9 fcca 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801682c:	4603      	mov	r3, r0
 801682e:	83fb      	strh	r3, [r7, #30]
 8016830:	8bfb      	ldrh	r3, [r7, #30]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d001      	beq.n	801683a <phpalI14443p3a_Sw_RequestAEx+0x114>
 8016836:	8bfb      	ldrh	r3, [r7, #30]
 8016838:	e05b      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 801683a:	7afb      	ldrb	r3, [r7, #11]
 801683c:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	6858      	ldr	r0, [r3, #4]
 8016842:	f107 0218 	add.w	r2, r7, #24
 8016846:	f107 0312 	add.w	r3, r7, #18
 801684a:	9301      	str	r3, [sp, #4]
 801684c:	f107 0314 	add.w	r3, r7, #20
 8016850:	9300      	str	r3, [sp, #0]
 8016852:	2301      	movs	r3, #1
 8016854:	2100      	movs	r1, #0
 8016856:	f7f9 f8fb 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801685a:	4603      	mov	r3, r0
 801685c:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	8a3a      	ldrh	r2, [r7, #16]
 8016864:	2106      	movs	r1, #6
 8016866:	4618      	mov	r0, r3
 8016868:	f7f9 fcaa 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801686c:	4603      	mov	r3, r0
 801686e:	83bb      	strh	r3, [r7, #28]
 8016870:	8bbb      	ldrh	r3, [r7, #28]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d001      	beq.n	801687a <phpalI14443p3a_Sw_RequestAEx+0x154>
 8016876:	8bbb      	ldrh	r3, [r7, #28]
 8016878:	e03b      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 801687a:	8bfb      	ldrh	r3, [r7, #30]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d001      	beq.n	8016884 <phpalI14443p3a_Sw_RequestAEx+0x15e>
 8016880:	8bfb      	ldrh	r3, [r7, #30]
 8016882:	e036      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 8016884:	8a7b      	ldrh	r3, [r7, #18]
 8016886:	2b02      	cmp	r3, #2
 8016888:	d12f      	bne.n	80168ea <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	881b      	ldrh	r3, [r3, #0]
 801688e:	b29a      	uxth	r2, r3
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	7d1b      	ldrb	r3, [r3, #20]
 8016898:	2b01      	cmp	r3, #1
 801689a:	d109      	bne.n	80168b0 <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	3301      	adds	r3, #1
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d022      	beq.n	80168f0 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80168aa:	f240 3306 	movw	r3, #774	@ 0x306
 80168ae:	e020      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	f003 031f 	and.w	r3, r3, #31
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d106      	bne.n	80168ca <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	3301      	adds	r3, #1
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	f003 030f 	and.w	r3, r3, #15
 80168c6:	2b0c      	cmp	r3, #12
 80168c8:	d10c      	bne.n	80168e4 <phpalI14443p3a_Sw_RequestAEx+0x1be>
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	3301      	adds	r3, #1
 80168ce:	781b      	ldrb	r3, [r3, #0]
 80168d0:	f003 030f 	and.w	r3, r3, #15
 80168d4:	2b0c      	cmp	r3, #12
 80168d6:	d10b      	bne.n	80168f0 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	f003 031f 	and.w	r3, r3, #31
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d005      	beq.n	80168f0 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80168e4:	f240 3306 	movw	r3, #774	@ 0x306
 80168e8:	e003      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80168ea:	f240 3306 	movw	r3, #774	@ 0x306
 80168ee:	e000      	b.n	80168f2 <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 80168f0:	2300      	movs	r3, #0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3720      	adds	r7, #32
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}

080168fa <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b084      	sub	sp, #16
 80168fe:	af00      	add	r7, sp, #0
 8016900:	60f8      	str	r0, [r7, #12]
 8016902:	60b9      	str	r1, [r7, #8]
 8016904:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	7cdb      	ldrb	r3, [r3, #19]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d102      	bne.n	8016914 <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 801690e:	f240 3325 	movw	r3, #805	@ 0x325
 8016912:	e00d      	b.n	8016930 <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	f103 0108 	add.w	r1, r3, #8
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	7c9b      	ldrb	r3, [r3, #18]
 801691e:	461a      	mov	r2, r3
 8016920:	68b8      	ldr	r0, [r7, #8]
 8016922:	f00b fd4a 	bl	80223ba <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	7c9a      	ldrb	r2, [r3, #18]
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801692e:	2300      	movs	r3, #0
}
 8016930:	4618      	mov	r0, r3
 8016932:	3710      	adds	r7, #16
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}

08016938 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8016938:	b480      	push	{r7}
 801693a:	b085      	sub	sp, #20
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	460b      	mov	r3, r1
 8016942:	607a      	str	r2, [r7, #4]
 8016944:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 8016946:	897b      	ldrh	r3, [r7, #10]
 8016948:	2b2c      	cmp	r3, #44	@ 0x2c
 801694a:	d002      	beq.n	8016952 <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 801694c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8016950:	e051      	b.n	80169f6 <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d101      	bne.n	801695c <phpalI14443p3b_Sw_Init+0x24>
 8016958:	2321      	movs	r3, #33	@ 0x21
 801695a:	e04c      	b.n	80169f6 <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d101      	bne.n	8016966 <phpalI14443p3b_Sw_Init+0x2e>
 8016962:	2321      	movs	r3, #33	@ 0x21
 8016964:	e047      	b.n	80169f6 <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	f240 4201 	movw	r2, #1025	@ 0x401
 801696c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	687a      	ldr	r2, [r7, #4]
 8016972:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	2200      	movs	r2, #0
 8016978:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2200      	movs	r2, #0
 801697e:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	2200      	movs	r2, #0
 8016984:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2200      	movs	r2, #0
 801698a:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2200      	movs	r2, #0
 8016990:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2204      	movs	r2, #4
 8016996:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2202      	movs	r2, #2
 801699c:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2200      	movs	r2, #0
 80169a2:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2200      	movs	r2, #0
 80169a8:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2200      	movs	r2, #0
 80169ae:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	2200      	movs	r2, #0
 80169b4:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2200      	movs	r2, #0
 80169ba:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80169c2:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2200      	movs	r2, #0
 80169c8:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2200      	movs	r2, #0
 80169ce:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2200      	movs	r2, #0
 80169d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	2200      	movs	r2, #0
 80169da:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	2202      	movs	r2, #2
 80169e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2200      	movs	r2, #0
 80169e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2201      	movs	r2, #1
 80169f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 80169f4:	2300      	movs	r3, #0
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3714      	adds	r7, #20
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr
	...

08016a04 <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 8016a04:	b480      	push	{r7}
 8016a06:	b083      	sub	sp, #12
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	460b      	mov	r3, r1
 8016a0e:	807b      	strh	r3, [r7, #2]
 8016a10:	4613      	mov	r3, r2
 8016a12:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8016a14:	887b      	ldrh	r3, [r7, #2]
 8016a16:	2b03      	cmp	r3, #3
 8016a18:	d82c      	bhi.n	8016a74 <phpalI14443p3b_Sw_SetConfig+0x70>
 8016a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8016a20 <phpalI14443p3b_Sw_SetConfig+0x1c>)
 8016a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a20:	08016a31 	.word	0x08016a31
 8016a24:	08016a3b 	.word	0x08016a3b
 8016a28:	08016a47 	.word	0x08016a47
 8016a2c:	08016a53 	.word	0x08016a53
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8016a30:	883b      	ldrh	r3, [r7, #0]
 8016a32:	b2da      	uxtb	r2, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	759a      	strb	r2, [r3, #22]
        break;
 8016a38:	e01f      	b.n	8016a7a <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 8016a3a:	883b      	ldrh	r3, [r7, #0]
 8016a3c:	b2da      	uxtb	r2, r3
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 8016a44:	e019      	b.n	8016a7a <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 8016a46:	883b      	ldrh	r3, [r7, #0]
 8016a48:	b2da      	uxtb	r2, r3
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8016a50:	e013      	b.n	8016a7a <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8016a52:	883b      	ldrh	r3, [r7, #0]
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d006      	beq.n	8016a68 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 8016a5a:	883b      	ldrh	r3, [r7, #0]
 8016a5c:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8016a5e:	2b01      	cmp	r3, #1
 8016a60:	d002      	beq.n	8016a68 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016a62:	f240 4321 	movw	r3, #1057	@ 0x421
 8016a66:	e009      	b.n	8016a7c <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 8016a68:	883b      	ldrh	r3, [r7, #0]
 8016a6a:	b2da      	uxtb	r2, r3
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 8016a72:	e002      	b.n	8016a7a <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016a74:	f240 4323 	movw	r3, #1059	@ 0x423
 8016a78:	e000      	b.n	8016a7c <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 8016a7a:	2300      	movs	r3, #0
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	370c      	adds	r7, #12
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b085      	sub	sp, #20
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	460b      	mov	r3, r1
 8016a92:	607a      	str	r2, [r7, #4]
 8016a94:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8016a96:	897b      	ldrh	r3, [r7, #10]
 8016a98:	2b05      	cmp	r3, #5
 8016a9a:	d828      	bhi.n	8016aee <phpalI14443p3b_Sw_GetConfig+0x66>
 8016a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8016aa4 <phpalI14443p3b_Sw_GetConfig+0x1c>)
 8016a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aa2:	bf00      	nop
 8016aa4:	08016abd 	.word	0x08016abd
 8016aa8:	08016aef 	.word	0x08016aef
 8016aac:	08016aef 	.word	0x08016aef
 8016ab0:	08016ac9 	.word	0x08016ac9
 8016ab4:	08016ad7 	.word	0x08016ad7
 8016ab8:	08016ae3 	.word	0x08016ae3
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	7d9b      	ldrb	r3, [r3, #22]
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	801a      	strh	r2, [r3, #0]
        break;
 8016ac6:	e015      	b.n	8016af4 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8016ace:	461a      	mov	r2, r3
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	801a      	strh	r2, [r3, #0]
        break;
 8016ad4:	e00e      	b.n	8016af4 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	7d1b      	ldrb	r3, [r3, #20]
 8016ada:	461a      	mov	r2, r3
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	801a      	strh	r2, [r3, #0]
        break;
 8016ae0:	e008      	b.n	8016af4 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	7d5b      	ldrb	r3, [r3, #21]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	801a      	strh	r2, [r3, #0]
        break;
 8016aec:	e002      	b.n	8016af4 <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016aee:	f240 4323 	movw	r3, #1059	@ 0x423
 8016af2:	e000      	b.n	8016af6 <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8016af4:	2300      	movs	r3, #0
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	3714      	adds	r7, #20
 8016afa:	46bd      	mov	sp, r7
 8016afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b00:	4770      	bx	lr
 8016b02:	bf00      	nop

08016b04 <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b086      	sub	sp, #24
 8016b08:	af04      	add	r7, sp, #16
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	4608      	mov	r0, r1
 8016b0e:	4611      	mov	r1, r2
 8016b10:	461a      	mov	r2, r3
 8016b12:	4603      	mov	r3, r0
 8016b14:	70fb      	strb	r3, [r7, #3]
 8016b16:	460b      	mov	r3, r1
 8016b18:	70bb      	strb	r3, [r7, #2]
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8016b1e:	78b9      	ldrb	r1, [r7, #2]
 8016b20:	78fa      	ldrb	r2, [r7, #3]
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	9302      	str	r3, [sp, #8]
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	9301      	str	r3, [sp, #4]
 8016b2a:	787b      	ldrb	r3, [r7, #1]
 8016b2c:	9300      	str	r3, [sp, #0]
 8016b2e:	460b      	mov	r3, r1
 8016b30:	2100      	movs	r1, #0
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	f000 fc54 	bl	80173e0 <phpalI14443p3b_Sw_RequestBEx>
 8016b38:	4603      	mov	r3, r0
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3708      	adds	r7, #8
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b086      	sub	sp, #24
 8016b46:	af04      	add	r7, sp, #16
 8016b48:	6078      	str	r0, [r7, #4]
 8016b4a:	4608      	mov	r0, r1
 8016b4c:	4611      	mov	r1, r2
 8016b4e:	461a      	mov	r2, r3
 8016b50:	4603      	mov	r3, r0
 8016b52:	70fb      	strb	r3, [r7, #3]
 8016b54:	460b      	mov	r3, r1
 8016b56:	70bb      	strb	r3, [r7, #2]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8016b5c:	78b9      	ldrb	r1, [r7, #2]
 8016b5e:	78fa      	ldrb	r2, [r7, #3]
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	9302      	str	r3, [sp, #8]
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	9301      	str	r3, [sp, #4]
 8016b68:	787b      	ldrb	r3, [r7, #1]
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	2101      	movs	r1, #1
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f000 fc35 	bl	80173e0 <phpalI14443p3b_Sw_RequestBEx>
 8016b76:	4603      	mov	r3, r0
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3708      	adds	r7, #8
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b08a      	sub	sp, #40	@ 0x28
 8016b84:	af02      	add	r7, sp, #8
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	607a      	str	r2, [r7, #4]
 8016b8a:	603b      	str	r3, [r7, #0]
 8016b8c:	460b      	mov	r3, r1
 8016b8e:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016b90:	2300      	movs	r3, #0
 8016b92:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016b94:	2300      	movs	r3, #0
 8016b96:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 8016b98:	7afb      	ldrb	r3, [r7, #11]
 8016b9a:	2b01      	cmp	r3, #1
 8016b9c:	d902      	bls.n	8016ba4 <phpalI14443p3b_Sw_SlotMarker+0x24>
 8016b9e:	7afb      	ldrb	r3, [r7, #11]
 8016ba0:	2b10      	cmp	r3, #16
 8016ba2:	d902      	bls.n	8016baa <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016ba4:	f240 4321 	movw	r3, #1057	@ 0x421
 8016ba8:	e026      	b.n	8016bf8 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 8016baa:	7afb      	ldrb	r3, [r7, #11]
 8016bac:	3b01      	subs	r3, #1
 8016bae:	b2db      	uxtb	r3, r3
 8016bb0:	011b      	lsls	r3, r3, #4
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	f043 0305 	orr.w	r3, r3, #5
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	6858      	ldr	r0, [r3, #4]
 8016bc0:	f107 021c 	add.w	r2, r7, #28
 8016bc4:	f107 0316 	add.w	r3, r7, #22
 8016bc8:	9301      	str	r3, [sp, #4]
 8016bca:	f107 0318 	add.w	r3, r7, #24
 8016bce:	9300      	str	r3, [sp, #0]
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	2100      	movs	r1, #0
 8016bd4:	f7f8 ff3c 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	83fb      	strh	r3, [r7, #30]
 8016bdc:	8bfb      	ldrh	r3, [r7, #30]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d001      	beq.n	8016be6 <phpalI14443p3b_Sw_SlotMarker+0x66>
 8016be2:	8bfb      	ldrh	r3, [r7, #30]
 8016be4:	e008      	b.n	8016bf8 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8016be6:	69b9      	ldr	r1, [r7, #24]
 8016be8:	8afa      	ldrh	r2, [r7, #22]
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	9300      	str	r3, [sp, #0]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	68f8      	ldr	r0, [r7, #12]
 8016bf2:	f000 fb31 	bl	8017258 <phpalI14443p3b_Sw_CheckATQBEx>
 8016bf6:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3720      	adds	r7, #32
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b088      	sub	sp, #32
 8016c04:	af02      	add	r7, sp, #8
 8016c06:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8016c18:	210d      	movs	r1, #13
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7f9 fad0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016c20:	4603      	mov	r3, r0
 8016c22:	82fb      	strh	r3, [r7, #22]
 8016c24:	8afb      	ldrh	r3, [r7, #22]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d001      	beq.n	8016c2e <phpalI14443p3b_Sw_HaltB+0x2e>
 8016c2a:	8afb      	ldrh	r3, [r7, #22]
 8016c2c:	e029      	b.n	8016c82 <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 8016c2e:	2350      	movs	r3, #80	@ 0x50
 8016c30:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	3309      	adds	r3, #9
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6858      	ldr	r0, [r3, #4]
 8016c40:	f107 0210 	add.w	r2, r7, #16
 8016c44:	f107 030a 	add.w	r3, r7, #10
 8016c48:	9301      	str	r3, [sp, #4]
 8016c4a:	f107 030c 	add.w	r3, r7, #12
 8016c4e:	9300      	str	r3, [sp, #0]
 8016c50:	2305      	movs	r3, #5
 8016c52:	2100      	movs	r1, #0
 8016c54:	f7f8 fefc 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	82fb      	strh	r3, [r7, #22]
 8016c5c:	8afb      	ldrh	r3, [r7, #22]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d001      	beq.n	8016c66 <phpalI14443p3b_Sw_HaltB+0x66>
 8016c62:	8afb      	ldrh	r3, [r7, #22]
 8016c64:	e00d      	b.n	8016c82 <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 8016c66:	897b      	ldrh	r3, [r7, #10]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d103      	bne.n	8016c74 <phpalI14443p3b_Sw_HaltB+0x74>
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d002      	beq.n	8016c7a <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8016c74:	f240 4306 	movw	r3, #1030	@ 0x406
 8016c78:	e003      	b.n	8016c82 <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8016c80:	2300      	movs	r3, #0
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3718      	adds	r7, #24
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}
 8016c8a:	0000      	movs	r0, r0
 8016c8c:	0000      	movs	r0, r0
	...

08016c90 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b090      	sub	sp, #64	@ 0x40
 8016c94:	af02      	add	r7, sp, #8
 8016c96:	60f8      	str	r0, [r7, #12]
 8016c98:	60b9      	str	r1, [r7, #8]
 8016c9a:	4611      	mov	r1, r2
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	460b      	mov	r3, r1
 8016ca0:	71fb      	strb	r3, [r7, #7]
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016caa:	2300      	movs	r3, #0
 8016cac:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 8016cbc:	f04f 0300 	mov.w	r3, #0
 8016cc0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 8016cc2:	79fb      	ldrb	r3, [r7, #7]
 8016cc4:	2b0c      	cmp	r3, #12
 8016cc6:	d005      	beq.n	8016cd4 <phpalI14443p3b_Sw_Attrib+0x44>
 8016cc8:	79fb      	ldrb	r3, [r7, #7]
 8016cca:	2b0d      	cmp	r3, #13
 8016ccc:	d002      	beq.n	8016cd4 <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016cce:	f240 4321 	movw	r3, #1057	@ 0x421
 8016cd2:	e295      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 8016cd4:	79bb      	ldrb	r3, [r7, #6]
 8016cd6:	2b0c      	cmp	r3, #12
 8016cd8:	d807      	bhi.n	8016cea <phpalI14443p3b_Sw_Attrib+0x5a>
 8016cda:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016cde:	2b03      	cmp	r3, #3
 8016ce0:	d803      	bhi.n	8016cea <phpalI14443p3b_Sw_Attrib+0x5a>
 8016ce2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8016ce6:	2b03      	cmp	r3, #3
 8016ce8:	d902      	bls.n	8016cf0 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016cea:	f240 4321 	movw	r3, #1057	@ 0x421
 8016cee:	e287      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8016cf0:	79bb      	ldrb	r3, [r7, #6]
 8016cf2:	2b07      	cmp	r3, #7
 8016cf4:	d807      	bhi.n	8016d06 <phpalI14443p3b_Sw_Attrib+0x76>
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016cfc:	2b01      	cmp	r3, #1
 8016cfe:	d102      	bne.n	8016d06 <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016d00:	f240 4321 	movw	r3, #1057	@ 0x421
 8016d04:	e27c      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 8016d06:	231d      	movs	r3, #29
 8016d08:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	7d9b      	ldrb	r3, [r3, #22]
 8016d18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 8016d1c:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8016d20:	019b      	lsls	r3, r3, #6
 8016d22:	b25a      	sxtb	r2, r3
 8016d24:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8016d28:	011b      	lsls	r3, r3, #4
 8016d2a:	b25b      	sxtb	r3, r3
 8016d2c:	4313      	orrs	r3, r2
 8016d2e:	b25a      	sxtb	r2, r3
 8016d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d34:	4313      	orrs	r3, r2
 8016d36:	b25b      	sxtb	r3, r3
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016d44:	2b01      	cmp	r3, #1
 8016d46:	d108      	bne.n	8016d5a <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	330a      	adds	r3, #10
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	f003 0301 	and.w	r3, r3, #1
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016d58:	e007      	b.n	8016d6a <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 8016d5a:	68bb      	ldr	r3, [r7, #8]
 8016d5c:	330a      	adds	r3, #10
 8016d5e:	781b      	ldrb	r3, [r3, #0]
 8016d60:	f003 0307 	and.w	r3, r3, #7
 8016d64:	b2db      	uxtb	r3, r3
 8016d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	330b      	adds	r3, #11
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	f003 0301 	and.w	r3, r3, #1
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d006      	beq.n	8016d86 <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 8016d78:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016d7c:	2b0e      	cmp	r3, #14
 8016d7e:	d905      	bls.n	8016d8c <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8016d80:	f240 4321 	movw	r3, #1057	@ 0x421
 8016d84:	e23c      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 8016d86:	2300      	movs	r3, #0
 8016d88:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 8016d8c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016d90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	330b      	adds	r3, #11
 8016d98:	781b      	ldrb	r3, [r3, #0]
 8016d9a:	091b      	lsrs	r3, r3, #4
 8016d9c:	b2da      	uxtb	r2, r3
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	7c5b      	ldrb	r3, [r3, #17]
 8016da6:	2b0f      	cmp	r3, #15
 8016da8:	d102      	bne.n	8016db0 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	2204      	movs	r2, #4
 8016dae:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	7c5b      	ldrb	r3, [r3, #17]
 8016db4:	461a      	mov	r2, r3
 8016db6:	2301      	movs	r3, #1
 8016db8:	4093      	lsls	r3, r2
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7e9 fba2 	bl	8000504 <__aeabi_ui2d>
 8016dc0:	a3ab      	add	r3, pc, #684	@ (adr r3, 8017070 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 8016dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc6:	f7e9 fc17 	bl	80005f8 <__aeabi_dmul>
 8016dca:	4602      	mov	r2, r0
 8016dcc:	460b      	mov	r3, r1
 8016dce:	4610      	mov	r0, r2
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	f7e9 fee9 	bl	8000ba8 <__aeabi_d2f>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016de0:	2b03      	cmp	r3, #3
 8016de2:	d108      	bne.n	8016df6 <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 8016de4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016de8:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8017060 <phpalI14443p3b_Sw_Attrib+0x3d0>
 8016dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016df0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8016df4:	e014      	b.n	8016e20 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 8016df6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016dfa:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8017064 <phpalI14443p3b_Sw_Attrib+0x3d4>
 8016dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e02:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	d107      	bne.n	8016e20 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 8016e10:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016e14:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8017068 <phpalI14443p3b_Sw_Attrib+0x3d8>
 8016e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e1c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 8016e20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016e28:	ee17 3a90 	vmov	r3, s15
 8016e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 8016e2e:	79fb      	ldrb	r3, [r7, #7]
 8016e30:	2b0d      	cmp	r3, #13
 8016e32:	d10e      	bne.n	8016e52 <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8016e3c:	210d      	movs	r1, #13
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7f9 f9be 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016e44:	4603      	mov	r3, r0
 8016e46:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016e48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d029      	beq.n	8016ea2 <phpalI14443p3b_Sw_Attrib+0x212>
 8016e4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016e50:	e1d6      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8016e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016e58:	d314      	bcc.n	8016e84 <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	6858      	ldr	r0, [r3, #4]
 8016e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e60:	4a82      	ldr	r2, [pc, #520]	@ (801706c <phpalI14443p3b_Sw_Attrib+0x3dc>)
 8016e62:	fba2 2303 	umull	r2, r3, r2, r3
 8016e66:	099b      	lsrs	r3, r3, #6
 8016e68:	b29b      	uxth	r3, r3
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	461a      	mov	r2, r3
 8016e70:	210e      	movs	r1, #14
 8016e72:	f7f9 f9a5 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016e76:	4603      	mov	r3, r0
 8016e78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016e7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d010      	beq.n	8016ea2 <phpalI14443p3b_Sw_Attrib+0x212>
 8016e80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016e82:	e1bd      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e8a:	b292      	uxth	r2, r2
 8016e8c:	210d      	movs	r1, #13
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7f9 f996 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8016e94:	4603      	mov	r3, r0
 8016e96:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016e98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d001      	beq.n	8016ea2 <phpalI14443p3b_Sw_Attrib+0x212>
 8016e9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016ea0:	e1ae      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	6858      	ldr	r0, [r3, #4]
 8016eaa:	f107 021c 	add.w	r2, r7, #28
 8016eae:	f107 0316 	add.w	r3, r7, #22
 8016eb2:	9301      	str	r3, [sp, #4]
 8016eb4:	f107 0318 	add.w	r3, r7, #24
 8016eb8:	9300      	str	r3, [sp, #0]
 8016eba:	2309      	movs	r3, #9
 8016ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016ec0:	f7f8 fdc6 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016ec8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d001      	beq.n	8016ed2 <phpalI14443p3b_Sw_Attrib+0x242>
 8016ece:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016ed0:	e196      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	6858      	ldr	r0, [r3, #4]
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	699a      	ldr	r2, [r3, #24]
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	8bd9      	ldrh	r1, [r3, #30]
 8016ede:	f107 0316 	add.w	r3, r7, #22
 8016ee2:	9301      	str	r3, [sp, #4]
 8016ee4:	f107 0318 	add.w	r3, r7, #24
 8016ee8:	9300      	str	r3, [sp, #0]
 8016eea:	460b      	mov	r3, r1
 8016eec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016ef0:	f7f8 fdae 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8016efe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8016f02:	e04d      	b.n	8016fa0 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d118      	bne.n	8016f40 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8016f0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f10:	b2db      	uxtb	r3, r3
 8016f12:	2b01      	cmp	r3, #1
 8016f14:	d003      	beq.n	8016f1e <phpalI14443p3b_Sw_Attrib+0x28e>
 8016f16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f18:	b2db      	uxtb	r3, r3
 8016f1a:	2b11      	cmp	r3, #17
 8016f1c:	d10e      	bne.n	8016f3c <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8016f26:	2100      	movs	r1, #0
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f9 f88d 	bl	8010048 <phhalHw_Pn5180_Wait>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016f32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d003      	beq.n	8016f40 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8016f38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f3a:	e161      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 8016f3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f3e:	e15f      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8016f40:	2300      	movs	r3, #0
 8016f42:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	6858      	ldr	r0, [r3, #4]
 8016f48:	f107 021c 	add.w	r2, r7, #28
 8016f4c:	f107 0316 	add.w	r3, r7, #22
 8016f50:	9301      	str	r3, [sp, #4]
 8016f52:	f107 0318 	add.w	r3, r7, #24
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	2309      	movs	r3, #9
 8016f5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016f5e:	f7f8 fd77 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8016f62:	4603      	mov	r3, r0
 8016f64:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016f66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d001      	beq.n	8016f70 <phpalI14443p3b_Sw_Attrib+0x2e0>
 8016f6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016f6e:	e147      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	6858      	ldr	r0, [r3, #4]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	699a      	ldr	r2, [r3, #24]
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	8bd9      	ldrh	r1, [r3, #30]
 8016f7c:	f107 0316 	add.w	r3, r7, #22
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	f107 0318 	add.w	r3, r7, #24
 8016f86:	9300      	str	r3, [sp, #0]
 8016f88:	460b      	mov	r3, r1
 8016f8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016f8e:	f7f8 fd5f 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8016f92:	4603      	mov	r3, r0
 8016f94:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 8016f96:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016f9a:	3b01      	subs	r3, #1
 8016f9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8016fa0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d003      	beq.n	8016fb0 <phpalI14443p3b_Sw_Attrib+0x320>
 8016fa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016faa:	b2db      	uxtb	r3, r3
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d1a9      	bne.n	8016f04 <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 8016fb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d001      	beq.n	8016fba <phpalI14443p3b_Sw_Attrib+0x32a>
 8016fb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016fb8:	e122      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 8016fba:	8afb      	ldrh	r3, [r7, #22]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d102      	bne.n	8016fc6 <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8016fc0:	f240 4306 	movw	r3, #1030	@ 0x406
 8016fc4:	e11c      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	330b      	adds	r3, #11
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	f003 0301 	and.w	r3, r3, #1
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d00a      	beq.n	8016fea <phpalI14443p3b_Sw_Attrib+0x35a>
 8016fd4:	69bb      	ldr	r3, [r7, #24]
 8016fd6:	781b      	ldrb	r3, [r3, #0]
 8016fd8:	f003 020f 	and.w	r2, r3, #15
 8016fdc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	d002      	beq.n	8016fea <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8016fe4:	f240 4306 	movw	r3, #1030	@ 0x406
 8016fe8:	e10a      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016ff0:	2b03      	cmp	r3, #3
 8016ff2:	d00f      	beq.n	8017014 <phpalI14443p3b_Sw_Attrib+0x384>
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	330b      	adds	r3, #11
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	f003 0301 	and.w	r3, r3, #1
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d108      	bne.n	8017014 <phpalI14443p3b_Sw_Attrib+0x384>
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	781b      	ldrb	r3, [r3, #0]
 8017006:	f003 030f 	and.w	r3, r3, #15
 801700a:	2b00      	cmp	r3, #0
 801700c:	d002      	beq.n	8017014 <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801700e:	f240 4306 	movw	r3, #1030	@ 0x406
 8017012:	e0f5      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 8017014:	69bb      	ldr	r3, [r7, #24]
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	091b      	lsrs	r3, r3, #4
 801701a:	b2da      	uxtb	r2, r3
 801701c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801701e:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 8017020:	8afb      	ldrh	r3, [r7, #22]
 8017022:	2b01      	cmp	r3, #1
 8017024:	d931      	bls.n	801708a <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 8017026:	8afb      	ldrh	r3, [r7, #22]
 8017028:	3b01      	subs	r3, #1
 801702a:	b29a      	uxth	r2, r3
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	8bdb      	ldrh	r3, [r3, #30]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d105      	bne.n	8017044 <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	2200      	movs	r2, #0
 801703c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801703e:	f240 4306 	movw	r3, #1030	@ 0x406
 8017042:	e0dd      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801704c:	429a      	cmp	r2, r3
 801704e:	d913      	bls.n	8017078 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	2200      	movs	r2, #0
 8017054:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 8017056:	f240 4304 	movw	r3, #1028	@ 0x404
 801705a:	e0d1      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
 801705c:	f3af 8000 	nop.w
 8017060:	427c0000 	.word	0x427c0000
 8017064:	4566a000 	.word	0x4566a000
 8017068:	447a0000 	.word	0x447a0000
 801706c:	10624dd3 	.word	0x10624dd3
 8017070:	d12e109d 	.word	0xd12e109d
 8017074:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6a18      	ldr	r0, [r3, #32]
 801707c:	69bb      	ldr	r3, [r7, #24]
 801707e:	1c59      	adds	r1, r3, #1
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8017084:	461a      	mov	r2, r3
 8017086:	f00b f998 	bl	80223ba <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017090:	2b03      	cmp	r3, #3
 8017092:	d006      	beq.n	80170a2 <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	2200      	movs	r2, #0
 8017098:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	2200      	movs	r2, #0
 801709e:	73da      	strb	r2, [r3, #15]
 80170a0:	e011      	b.n	80170c6 <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	330b      	adds	r3, #11
 80170a6:	781b      	ldrb	r3, [r3, #0]
 80170a8:	f003 0301 	and.w	r3, r3, #1
 80170ac:	b2da      	uxtb	r2, r3
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	330b      	adds	r3, #11
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	085b      	lsrs	r3, r3, #1
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	f003 0301 	and.w	r3, r3, #1
 80170c0:	b2da      	uxtb	r2, r3
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 80170c6:	69bb      	ldr	r3, [r7, #24]
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	f003 030f 	and.w	r3, r3, #15
 80170ce:	b2da      	uxtb	r2, r3
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	330a      	adds	r3, #10
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	091b      	lsrs	r3, r3, #4
 80170dc:	b2da      	uxtb	r2, r3
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	79ba      	ldrb	r2, [r7, #6]
 80170e6:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80170ee:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80170f6:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 80170f8:	2300      	movs	r3, #0
 80170fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 80170fe:	79fb      	ldrb	r3, [r7, #7]
 8017100:	2b0d      	cmp	r3, #13
 8017102:	d125      	bne.n	8017150 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8017104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801710a:	d312      	bcc.n	8017132 <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	6858      	ldr	r0, [r3, #4]
 8017110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017112:	4a3d      	ldr	r2, [pc, #244]	@ (8017208 <phpalI14443p3b_Sw_Attrib+0x578>)
 8017114:	fba2 2303 	umull	r2, r3, r2, r3
 8017118:	099b      	lsrs	r3, r3, #6
 801711a:	b29b      	uxth	r3, r3
 801711c:	461a      	mov	r2, r3
 801711e:	210e      	movs	r1, #14
 8017120:	f7f9 f84e 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017124:	4603      	mov	r3, r0
 8017126:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8017128:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801712a:	2b00      	cmp	r3, #0
 801712c:	d010      	beq.n	8017150 <phpalI14443p3b_Sw_Attrib+0x4c0>
 801712e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017130:	e066      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017138:	b292      	uxth	r2, r2
 801713a:	210d      	movs	r1, #13
 801713c:	4618      	mov	r0, r3
 801713e:	f7f9 f83f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017142:	4603      	mov	r3, r0
 8017144:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8017146:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017148:	2b00      	cmp	r3, #0
 801714a:	d001      	beq.n	8017150 <phpalI14443p3b_Sw_Attrib+0x4c0>
 801714c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801714e:	e057      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	f000 f9ef 	bl	8017534 <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 8017156:	4603      	mov	r3, r0
 8017158:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801715a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801715c:	2b00      	cmp	r3, #0
 801715e:	d001      	beq.n	8017164 <phpalI14443p3b_Sw_Attrib+0x4d4>
 8017160:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017162:	e04d      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	6858      	ldr	r0, [r3, #4]
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	8b9b      	ldrh	r3, [r3, #28]
 801716c:	461a      	mov	r2, r3
 801716e:	2107      	movs	r1, #7
 8017170:	f7f9 f826 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017174:	4603      	mov	r3, r0
 8017176:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8017178:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801717a:	2b00      	cmp	r3, #0
 801717c:	d001      	beq.n	8017182 <phpalI14443p3b_Sw_Attrib+0x4f2>
 801717e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017180:	e03e      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 8017182:	79fb      	ldrb	r3, [r7, #7]
 8017184:	2b0d      	cmp	r3, #13
 8017186:	d13a      	bne.n	80171fe <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	330c      	adds	r3, #12
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	091b      	lsrs	r3, r3, #4
 8017190:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 8017194:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8017198:	2b0f      	cmp	r3, #15
 801719a:	d102      	bne.n	80171a2 <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 801719c:	2300      	movs	r3, #0
 801719e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 80171a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80171a6:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80171aa:	fa02 f303 	lsl.w	r3, r2, r3
 80171ae:	333f      	adds	r3, #63	@ 0x3f
 80171b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 80171b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171b8:	d312      	bcc.n	80171e0 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	6858      	ldr	r0, [r3, #4]
 80171be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171c0:	4a11      	ldr	r2, [pc, #68]	@ (8017208 <phpalI14443p3b_Sw_Attrib+0x578>)
 80171c2:	fba2 2303 	umull	r2, r3, r2, r3
 80171c6:	099b      	lsrs	r3, r3, #6
 80171c8:	b29b      	uxth	r3, r3
 80171ca:	461a      	mov	r2, r3
 80171cc:	2101      	movs	r1, #1
 80171ce:	f7f8 ff3b 	bl	8010048 <phhalHw_Pn5180_Wait>
 80171d2:	4603      	mov	r3, r0
 80171d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80171d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d010      	beq.n	80171fe <phpalI14443p3b_Sw_Attrib+0x56e>
 80171dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80171de:	e00f      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	685b      	ldr	r3, [r3, #4]
 80171e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80171e6:	b292      	uxth	r2, r2
 80171e8:	2100      	movs	r1, #0
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7f8 ff2c 	bl	8010048 <phhalHw_Pn5180_Wait>
 80171f0:	4603      	mov	r3, r0
 80171f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80171f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d001      	beq.n	80171fe <phpalI14443p3b_Sw_Attrib+0x56e>
 80171fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80171fc:	e000      	b.n	8017200 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 80171fe:	2300      	movs	r3, #0
}
 8017200:	4618      	mov	r0, r3
 8017202:	3738      	adds	r7, #56	@ 0x38
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	10624dd3 	.word	0x10624dd3

0801720c <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 801720c:	b480      	push	{r7}
 801720e:	b085      	sub	sp, #20
 8017210:	af00      	add	r7, sp, #0
 8017212:	60f8      	str	r0, [r7, #12]
 8017214:	60b9      	str	r1, [r7, #8]
 8017216:	607a      	str	r2, [r7, #4]
 8017218:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	7b9a      	ldrb	r2, [r3, #14]
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	7c1a      	ldrb	r2, [r3, #16]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	7bda      	ldrb	r2, [r3, #15]
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	7c5a      	ldrb	r2, [r3, #17]
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	7cda      	ldrb	r2, [r3, #19]
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	7c9a      	ldrb	r2, [r3, #18]
 8017246:	6a3b      	ldr	r3, [r7, #32]
 8017248:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801724a:	2300      	movs	r3, #0
}
 801724c:	4618      	mov	r0, r3
 801724e:	3714      	adds	r7, #20
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b086      	sub	sp, #24
 801725c:	af00      	add	r7, sp, #0
 801725e:	60f8      	str	r0, [r7, #12]
 8017260:	60b9      	str	r1, [r7, #8]
 8017262:	603b      	str	r3, [r7, #0]
 8017264:	4613      	mov	r3, r2
 8017266:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 8017268:	88fb      	ldrh	r3, [r7, #6]
 801726a:	2b0c      	cmp	r3, #12
 801726c:	d005      	beq.n	801727a <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 801726e:	88fb      	ldrh	r3, [r7, #6]
 8017270:	2b0d      	cmp	r3, #13
 8017272:	d002      	beq.n	801727a <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8017274:	f240 4306 	movw	r3, #1030	@ 0x406
 8017278:	e0ae      	b.n	80173d8 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	781b      	ldrb	r3, [r3, #0]
 801727e:	2b50      	cmp	r3, #80	@ 0x50
 8017280:	d002      	beq.n	8017288 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8017282:	f240 4306 	movw	r3, #1030	@ 0x406
 8017286:	e0a7      	b.n	80173d8 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 8017288:	88fb      	ldrh	r3, [r7, #6]
 801728a:	461a      	mov	r2, r3
 801728c:	68b9      	ldr	r1, [r7, #8]
 801728e:	6838      	ldr	r0, [r7, #0]
 8017290:	f00b f893 	bl	80223ba <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 8017294:	88fb      	ldrh	r3, [r7, #6]
 8017296:	b2da      	uxtb	r2, r3
 8017298:	6a3b      	ldr	r3, [r7, #32]
 801729a:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80172a2:	2b02      	cmp	r3, #2
 80172a4:	d013      	beq.n	80172ce <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	330a      	adds	r3, #10
 80172aa:	781b      	ldrb	r3, [r3, #0]
 80172ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80172b2:	d91f      	bls.n	80172f4 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	330a      	adds	r3, #10
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	f003 030f 	and.w	r3, r3, #15
 80172be:	b2da      	uxtb	r2, r3
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	330a      	adds	r3, #10
 80172c4:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80172c8:	b2d2      	uxtb	r2, r2
 80172ca:	701a      	strb	r2, [r3, #0]
 80172cc:	e012      	b.n	80172f4 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	330a      	adds	r3, #10
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172d8:	2b80      	cmp	r3, #128	@ 0x80
 80172da:	d90b      	bls.n	80172f4 <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	330a      	adds	r3, #10
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	f003 030f 	and.w	r3, r3, #15
 80172e6:	b2da      	uxtb	r2, r3
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	330a      	adds	r3, #10
 80172ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80172f0:	b2d2      	uxtb	r2, r2
 80172f2:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d109      	bne.n	8017312 <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	330a      	adds	r3, #10
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	f003 0308 	and.w	r3, r3, #8
 8017308:	2b00      	cmp	r3, #0
 801730a:	d002      	beq.n	8017312 <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801730c:	f240 4306 	movw	r3, #1030	@ 0x406
 8017310:	e062      	b.n	80173d8 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017318:	2b03      	cmp	r3, #3
 801731a:	d132      	bne.n	8017382 <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	330a      	adds	r3, #10
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	085b      	lsrs	r3, r3, #1
 8017324:	b2db      	uxtb	r3, r3
 8017326:	f003 0303 	and.w	r3, r3, #3
 801732a:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 801732c:	7d7b      	ldrb	r3, [r7, #21]
 801732e:	2b02      	cmp	r3, #2
 8017330:	d00e      	beq.n	8017350 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 8017332:	2b02      	cmp	r3, #2
 8017334:	dc11      	bgt.n	801735a <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 8017336:	2b00      	cmp	r3, #0
 8017338:	d002      	beq.n	8017340 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 801733a:	2b01      	cmp	r3, #1
 801733c:	d004      	beq.n	8017348 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 801733e:	e00c      	b.n	801735a <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	2285      	movs	r2, #133	@ 0x85
 8017344:	839a      	strh	r2, [r3, #28]
            break;
 8017346:	e00d      	b.n	8017364 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	22f6      	movs	r2, #246	@ 0xf6
 801734c:	839a      	strh	r2, [r3, #28]
            break;
 801734e:	e009      	b.n	8017364 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	f240 128d 	movw	r2, #397	@ 0x18d
 8017356:	839a      	strh	r2, [r3, #28]
            break;
 8017358:	e004      	b.n	8017364 <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8017360:	839a      	strh	r2, [r3, #28]
            break;
 8017362:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	6858      	ldr	r0, [r3, #4]
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	8b9b      	ldrh	r3, [r3, #28]
 801736c:	461a      	mov	r2, r3
 801736e:	2107      	movs	r1, #7
 8017370:	f7f8 ff26 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017374:	4603      	mov	r3, r0
 8017376:	82fb      	strh	r3, [r7, #22]
 8017378:	8afb      	ldrh	r3, [r7, #22]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d022      	beq.n	80173c4 <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 801737e:	8afb      	ldrh	r3, [r7, #22]
 8017380:	e02a      	b.n	80173d8 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	330a      	adds	r3, #10
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	085b      	lsrs	r3, r3, #1
 801738a:	b2db      	uxtb	r3, r3
 801738c:	f003 0303 	and.w	r3, r3, #3
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b03      	cmp	r3, #3
 8017394:	d112      	bne.n	80173bc <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	f240 22bb 	movw	r2, #699	@ 0x2bb
 801739c:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80173a6:	2107      	movs	r1, #7
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7f8 ff09 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80173ae:	4603      	mov	r3, r0
 80173b0:	82fb      	strh	r3, [r7, #22]
 80173b2:	8afb      	ldrh	r3, [r7, #22]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d005      	beq.n	80173c4 <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 80173b8:	8afb      	ldrh	r3, [r7, #22]
 80173ba:	e00d      	b.n	80173d8 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80173c2:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	3309      	adds	r3, #9
 80173c8:	683a      	ldr	r2, [r7, #0]
 80173ca:	3201      	adds	r2, #1
 80173cc:	6812      	ldr	r2, [r2, #0]
 80173ce:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2201      	movs	r2, #1
 80173d4:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 80173d6:	2300      	movs	r3, #0
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3718      	adds	r7, #24
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}

080173e0 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b088      	sub	sp, #32
 80173e4:	af02      	add	r7, sp, #8
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	4608      	mov	r0, r1
 80173ea:	4611      	mov	r1, r2
 80173ec:	461a      	mov	r2, r3
 80173ee:	4603      	mov	r3, r0
 80173f0:	70fb      	strb	r3, [r7, #3]
 80173f2:	460b      	mov	r3, r1
 80173f4:	70bb      	strb	r3, [r7, #2]
 80173f6:	4613      	mov	r3, r2
 80173f8:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80173fa:	2300      	movs	r3, #0
 80173fc:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80173fe:	2300      	movs	r3, #0
 8017400:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 8017402:	78bb      	ldrb	r3, [r7, #2]
 8017404:	2b04      	cmp	r3, #4
 8017406:	d902      	bls.n	801740e <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8017408:	f240 4321 	movw	r3, #1057	@ 0x421
 801740c:	e08d      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 801740e:	2305      	movs	r3, #5
 8017410:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 8017412:	787b      	ldrb	r3, [r7, #1]
 8017414:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 8017416:	78bb      	ldrb	r3, [r7, #2]
 8017418:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 801741a:	78fb      	ldrb	r3, [r7, #3]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d004      	beq.n	801742a <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 8017420:	7cbb      	ldrb	r3, [r7, #18]
 8017422:	f043 0308 	orr.w	r3, r3, #8
 8017426:	b2db      	uxtb	r3, r3
 8017428:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 801742a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d004      	beq.n	801743c <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 8017432:	7cbb      	ldrb	r3, [r7, #18]
 8017434:	f043 0310 	orr.w	r3, r3, #16
 8017438:	b2db      	uxtb	r3, r3
 801743a:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017442:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2200      	movs	r2, #0
 8017448:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	2200      	movs	r2, #0
 8017450:	2109      	movs	r1, #9
 8017452:	4618      	mov	r0, r3
 8017454:	f7f8 feb4 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017458:	4603      	mov	r3, r0
 801745a:	82fb      	strh	r3, [r7, #22]
 801745c:	8afb      	ldrh	r3, [r7, #22]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d001      	beq.n	8017466 <phpalI14443p3b_Sw_RequestBEx+0x86>
 8017462:	8afb      	ldrh	r3, [r7, #22]
 8017464:	e061      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	2200      	movs	r2, #0
 801746c:	210a      	movs	r1, #10
 801746e:	4618      	mov	r0, r3
 8017470:	f7f8 fea6 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017474:	4603      	mov	r3, r0
 8017476:	82fb      	strh	r3, [r7, #22]
 8017478:	8afb      	ldrh	r3, [r7, #22]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d001      	beq.n	8017482 <phpalI14443p3b_Sw_RequestBEx+0xa2>
 801747e:	8afb      	ldrh	r3, [r7, #22]
 8017480:	e053      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017488:	2b01      	cmp	r3, #1
 801748a:	d10e      	bne.n	80174aa <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	685b      	ldr	r3, [r3, #4]
 8017490:	f240 22d6 	movw	r2, #726	@ 0x2d6
 8017494:	210d      	movs	r1, #13
 8017496:	4618      	mov	r0, r3
 8017498:	f7f8 fe92 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801749c:	4603      	mov	r3, r0
 801749e:	82fb      	strh	r3, [r7, #22]
 80174a0:	8afb      	ldrh	r3, [r7, #22]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d023      	beq.n	80174ee <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80174a6:	8afb      	ldrh	r3, [r7, #22]
 80174a8:	e03f      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174b0:	2b03      	cmp	r3, #3
 80174b2:	d10e      	bne.n	80174d2 <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	685b      	ldr	r3, [r3, #4]
 80174b8:	f240 2297 	movw	r2, #663	@ 0x297
 80174bc:	210d      	movs	r1, #13
 80174be:	4618      	mov	r0, r3
 80174c0:	f7f8 fe7e 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80174c4:	4603      	mov	r3, r0
 80174c6:	82fb      	strh	r3, [r7, #22]
 80174c8:	8afb      	ldrh	r3, [r7, #22]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d00f      	beq.n	80174ee <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80174ce:	8afb      	ldrh	r3, [r7, #22]
 80174d0:	e02b      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	2211      	movs	r2, #17
 80174d8:	210e      	movs	r1, #14
 80174da:	4618      	mov	r0, r3
 80174dc:	f7f8 fe70 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80174e0:	4603      	mov	r3, r0
 80174e2:	82fb      	strh	r3, [r7, #22]
 80174e4:	8afb      	ldrh	r3, [r7, #22]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d001      	beq.n	80174ee <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80174ea:	8afb      	ldrh	r3, [r7, #22]
 80174ec:	e01d      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	6858      	ldr	r0, [r3, #4]
 80174f2:	f107 0210 	add.w	r2, r7, #16
 80174f6:	f107 030a 	add.w	r3, r7, #10
 80174fa:	9301      	str	r3, [sp, #4]
 80174fc:	f107 030c 	add.w	r3, r7, #12
 8017500:	9300      	str	r3, [sp, #0]
 8017502:	2303      	movs	r3, #3
 8017504:	2100      	movs	r1, #0
 8017506:	f7f8 faa3 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801750a:	4603      	mov	r3, r0
 801750c:	82fb      	strh	r3, [r7, #22]
 801750e:	8afb      	ldrh	r3, [r7, #22]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d001      	beq.n	8017518 <phpalI14443p3b_Sw_RequestBEx+0x138>
 8017514:	8afb      	ldrh	r3, [r7, #22]
 8017516:	e008      	b.n	801752a <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8017518:	68f9      	ldr	r1, [r7, #12]
 801751a:	897a      	ldrh	r2, [r7, #10]
 801751c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801751e:	9300      	str	r3, [sp, #0]
 8017520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017522:	6878      	ldr	r0, [r7, #4]
 8017524:	f7ff fe98 	bl	8017258 <phpalI14443p3b_Sw_CheckATQBEx>
 8017528:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 801752a:	4618      	mov	r0, r3
 801752c:	3718      	adds	r7, #24
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
	...

08017534 <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	7d1b      	ldrb	r3, [r3, #20]
 8017540:	2b03      	cmp	r3, #3
 8017542:	d817      	bhi.n	8017574 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 8017544:	a201      	add	r2, pc, #4	@ (adr r2, 801754c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 8017546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801754a:	bf00      	nop
 801754c:	0801755d 	.word	0x0801755d
 8017550:	08017563 	.word	0x08017563
 8017554:	08017569 	.word	0x08017569
 8017558:	0801756f 	.word	0x0801756f
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 801755c:	2300      	movs	r3, #0
 801755e:	81fb      	strh	r3, [r7, #14]
        break;
 8017560:	e00b      	b.n	801757a <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 8017562:	2301      	movs	r3, #1
 8017564:	81fb      	strh	r3, [r7, #14]
        break;
 8017566:	e008      	b.n	801757a <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8017568:	2302      	movs	r3, #2
 801756a:	81fb      	strh	r3, [r7, #14]
        break;
 801756c:	e005      	b.n	801757a <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 801756e:	2303      	movs	r3, #3
 8017570:	81fb      	strh	r3, [r7, #14]
        break;
 8017572:	e002      	b.n	801757a <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8017574:	f240 4321 	movw	r3, #1057	@ 0x421
 8017578:	e03a      	b.n	80175f0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	7d5b      	ldrb	r3, [r3, #21]
 801757e:	2b03      	cmp	r3, #3
 8017580:	d816      	bhi.n	80175b0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 8017582:	a201      	add	r2, pc, #4	@ (adr r2, 8017588 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 8017584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017588:	08017599 	.word	0x08017599
 801758c:	0801759f 	.word	0x0801759f
 8017590:	080175a5 	.word	0x080175a5
 8017594:	080175ab 	.word	0x080175ab
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8017598:	2300      	movs	r3, #0
 801759a:	81bb      	strh	r3, [r7, #12]
        break;
 801759c:	e00b      	b.n	80175b6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 801759e:	2301      	movs	r3, #1
 80175a0:	81bb      	strh	r3, [r7, #12]
        break;
 80175a2:	e008      	b.n	80175b6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 80175a4:	2302      	movs	r3, #2
 80175a6:	81bb      	strh	r3, [r7, #12]
        break;
 80175a8:	e005      	b.n	80175b6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 80175aa:	2303      	movs	r3, #3
 80175ac:	81bb      	strh	r3, [r7, #12]
        break;
 80175ae:	e002      	b.n	80175b6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80175b0:	f240 4321 	movw	r3, #1057	@ 0x421
 80175b4:	e01c      	b.n	80175f0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	89fa      	ldrh	r2, [r7, #14]
 80175bc:	2109      	movs	r1, #9
 80175be:	4618      	mov	r0, r3
 80175c0:	f7f8 fdfe 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80175c4:	4603      	mov	r3, r0
 80175c6:	817b      	strh	r3, [r7, #10]
 80175c8:	897b      	ldrh	r3, [r7, #10]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d001      	beq.n	80175d2 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 80175ce:	897b      	ldrh	r3, [r7, #10]
 80175d0:	e00e      	b.n	80175f0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	89ba      	ldrh	r2, [r7, #12]
 80175d8:	210a      	movs	r1, #10
 80175da:	4618      	mov	r0, r3
 80175dc:	f7f8 fdf0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80175e0:	4603      	mov	r3, r0
 80175e2:	817b      	strh	r3, [r7, #10]
 80175e4:	897b      	ldrh	r3, [r7, #10]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d001      	beq.n	80175ee <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 80175ea:	897b      	ldrh	r3, [r7, #10]
 80175ec:	e000      	b.n	80175f0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 80175ee:	2300      	movs	r3, #0

}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3710      	adds	r7, #16
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}

080175f8 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 80175f8:	b480      	push	{r7}
 80175fa:	b083      	sub	sp, #12
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	3309      	adds	r3, #9
 8017606:	683a      	ldr	r2, [r7, #0]
 8017608:	6812      	ldr	r2, [r2, #0]
 801760a:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2201      	movs	r2, #1
 8017610:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8017612:	2300      	movs	r3, #0
}
 8017614:	4618      	mov	r0, r3
 8017616:	370c      	adds	r7, #12
 8017618:	46bd      	mov	sp, r7
 801761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761e:	4770      	bx	lr

08017620 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b084      	sub	sp, #16
 8017624:	af00      	add	r7, sp, #0
 8017626:	60f8      	str	r0, [r7, #12]
 8017628:	460b      	mov	r3, r1
 801762a:	607a      	str	r2, [r7, #4]
 801762c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 801762e:	897b      	ldrh	r3, [r7, #10]
 8017630:	2b14      	cmp	r3, #20
 8017632:	d002      	beq.n	801763a <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 8017634:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8017638:	e017      	b.n	801766a <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d101      	bne.n	8017644 <phpalI14443p4_Sw_Init+0x24>
 8017640:	2321      	movs	r3, #33	@ 0x21
 8017642:	e012      	b.n	801766a <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d101      	bne.n	801764e <phpalI14443p4_Sw_Init+0x2e>
 801764a:	2321      	movs	r3, #33	@ 0x21
 801764c:	e00d      	b.n	801766a <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f240 6201 	movw	r2, #1537	@ 0x601
 8017654:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2202      	movs	r2, #2
 8017660:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 8017662:	68f8      	ldr	r0, [r7, #12]
 8017664:	f000 f840 	bl	80176e8 <phpalI14443p4_Sw_ResetProtocol>
 8017668:	4603      	mov	r3, r0
}
 801766a:	4618      	mov	r0, r3
 801766c:	3710      	adds	r7, #16
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}

08017672 <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 8017672:	b480      	push	{r7}
 8017674:	b083      	sub	sp, #12
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	4608      	mov	r0, r1
 801767c:	4611      	mov	r1, r2
 801767e:	461a      	mov	r2, r3
 8017680:	4603      	mov	r3, r0
 8017682:	70fb      	strb	r3, [r7, #3]
 8017684:	460b      	mov	r3, r1
 8017686:	70bb      	strb	r3, [r7, #2]
 8017688:	4613      	mov	r3, r2
 801768a:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2200      	movs	r2, #0
 8017690:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 8017692:	78bb      	ldrb	r3, [r7, #2]
 8017694:	2b0e      	cmp	r3, #14
 8017696:	d808      	bhi.n	80176aa <phpalI14443p4_Sw_SetProtocol+0x38>
 8017698:	7d3b      	ldrb	r3, [r7, #20]
 801769a:	2b0e      	cmp	r3, #14
 801769c:	d805      	bhi.n	80176aa <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 801769e:	7e3b      	ldrb	r3, [r7, #24]
 80176a0:	2b0c      	cmp	r3, #12
 80176a2:	d802      	bhi.n	80176aa <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 80176a4:	7f3b      	ldrb	r3, [r7, #28]
 80176a6:	2b0c      	cmp	r3, #12
 80176a8:	d902      	bls.n	80176b0 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80176aa:	f240 6321 	movw	r3, #1569	@ 0x621
 80176ae:	e015      	b.n	80176dc <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	78fa      	ldrb	r2, [r7, #3]
 80176b4:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	78ba      	ldrb	r2, [r7, #2]
 80176ba:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	787a      	ldrb	r2, [r7, #1]
 80176c0:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	7c3a      	ldrb	r2, [r7, #16]
 80176c6:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	7d3a      	ldrb	r2, [r7, #20]
 80176cc:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	7e3a      	ldrb	r2, [r7, #24]
 80176d2:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	7f3a      	ldrb	r2, [r7, #28]
 80176d8:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 80176da:	2300      	movs	r3, #0
}
 80176dc:	4618      	mov	r0, r3
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 80176e8:	b480      	push	{r7}
 80176ea:	b083      	sub	sp, #12
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2201      	movs	r2, #1
 80176f4:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2200      	movs	r2, #0
 80176fa:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2200      	movs	r2, #0
 8017700:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	2200      	movs	r2, #0
 8017706:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2200      	movs	r2, #0
 801770c:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2200      	movs	r2, #0
 8017712:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	2204      	movs	r2, #4
 8017718:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	2200      	movs	r2, #0
 801771e:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	2202      	movs	r2, #2
 8017724:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2202      	movs	r2, #2
 801772a:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 801772c:	2300      	movs	r3, #0
}
 801772e:	4618      	mov	r0, r3
 8017730:	370c      	adds	r7, #12
 8017732:	46bd      	mov	sp, r7
 8017734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017738:	4770      	bx	lr

0801773a <phpalI14443p4_Sw_Deselect>:

phStatus_t phpalI14443p4_Sw_Deselect(
                                     phpalI14443p4_Sw_DataParams_t * pDataParams
                                     )
{
 801773a:	b580      	push	{r7, lr}
 801773c:	b08a      	sub	sp, #40	@ 0x28
 801773e:	af02      	add	r7, sp, #8
 8017740:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint16_t    PH_MEMLOC_REM wIsoFrameLen = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	827b      	strh	r3, [r7, #18]
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8017746:	2300      	movs	r3, #0
 8017748:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 801774a:	2300      	movs	r3, #0
 801774c:	817b      	strh	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bInvalidBlock;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint16_t    PH_MEMLOC_REM wRetries;

    /* Build S(DESELECT) frame */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildSBlock(
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	7a58      	ldrb	r0, [r3, #9]
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	7a99      	ldrb	r1, [r3, #10]
 8017756:	f107 0312 	add.w	r3, r7, #18
 801775a:	9301      	str	r3, [sp, #4]
 801775c:	f107 0314 	add.w	r3, r7, #20
 8017760:	9300      	str	r3, [sp, #0]
 8017762:	2300      	movs	r3, #0
 8017764:	2200      	movs	r2, #0
 8017766:	f001 f936 	bl	80189d6 <phpalI14443p4_Sw_BuildSBlock>
 801776a:	4603      	mov	r3, r0
 801776c:	833b      	strh	r3, [r7, #24]
 801776e:	8b3b      	ldrh	r3, [r7, #24]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d001      	beq.n	8017778 <phpalI14443p4_Sw_Deselect+0x3e>
 8017774:	8b3b      	ldrh	r3, [r7, #24]
 8017776:	e08f      	b.n	8017898 <phpalI14443p4_Sw_Deselect+0x15e>
        0,
        bIsoFrame,
        &wIsoFrameLen));

    /* Set DESELECT timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	685b      	ldr	r3, [r3, #4]
 801777c:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8017780:	210d      	movs	r1, #13
 8017782:	4618      	mov	r0, r3
 8017784:	f7f8 fd1c 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017788:	4603      	mov	r3, r0
 801778a:	833b      	strh	r3, [r7, #24]
 801778c:	8b3b      	ldrh	r3, [r7, #24]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d001      	beq.n	8017796 <phpalI14443p4_Sw_Deselect+0x5c>
 8017792:	8b3b      	ldrh	r3, [r7, #24]
 8017794:	e080      	b.n	8017898 <phpalI14443p4_Sw_Deselect+0x15e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4_SW_FWT_DESELECT_US + PHPAL_I14443P4_EXT_TIME_US));

    /* Retrieve max. retry count */
    wRetries = (uint16_t)pDataParams->bMaxRetryCount + 1U;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	7c5b      	ldrb	r3, [r3, #17]
 801779a:	3301      	adds	r3, #1
 801779c:	837b      	strh	r3, [r7, #26]

    /* Reset response received flag */
    bResponseReceived = 0;
 801779e:	2300      	movs	r3, #0
 80177a0:	777b      	strb	r3, [r7, #29]
    /* Do as long as invalid responses are received
    and the retry counter has not reached zero.*/
    do
    {
        /* Send the S(DESELECT) request */
        status = phhalHw_Exchange(
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	6858      	ldr	r0, [r3, #4]
 80177a6:	8a79      	ldrh	r1, [r7, #18]
 80177a8:	f107 0214 	add.w	r2, r7, #20
 80177ac:	f107 030a 	add.w	r3, r7, #10
 80177b0:	9301      	str	r3, [sp, #4]
 80177b2:	f107 030c 	add.w	r3, r7, #12
 80177b6:	9300      	str	r3, [sp, #0]
 80177b8:	460b      	mov	r3, r1
 80177ba:	2100      	movs	r1, #0
 80177bc:	f7f8 f948 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 80177c0:	4603      	mov	r3, r0
 80177c2:	83fb      	strh	r3, [r7, #30]
            wIsoFrameLen,
            &pResp,
            &wRespLen);

        /* Status --> InvalidBlock mapping */
        bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_DESELECT_IS_INVALID_BLOCK_STATUS(status);
 80177c4:	8bfb      	ldrh	r3, [r7, #30]
 80177c6:	b2db      	uxtb	r3, r3
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d013      	beq.n	80177f4 <phpalI14443p4_Sw_Deselect+0xba>
 80177cc:	8bfb      	ldrh	r3, [r7, #30]
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	2b02      	cmp	r3, #2
 80177d2:	d00f      	beq.n	80177f4 <phpalI14443p4_Sw_Deselect+0xba>
 80177d4:	8bfb      	ldrh	r3, [r7, #30]
 80177d6:	b2db      	uxtb	r3, r3
 80177d8:	2b05      	cmp	r3, #5
 80177da:	d00b      	beq.n	80177f4 <phpalI14443p4_Sw_Deselect+0xba>
 80177dc:	8bfb      	ldrh	r3, [r7, #30]
 80177de:	b2db      	uxtb	r3, r3
 80177e0:	2b73      	cmp	r3, #115	@ 0x73
 80177e2:	d007      	beq.n	80177f4 <phpalI14443p4_Sw_Deselect+0xba>
 80177e4:	8bfb      	ldrh	r3, [r7, #30]
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	2b06      	cmp	r3, #6
 80177ea:	d003      	beq.n	80177f4 <phpalI14443p4_Sw_Deselect+0xba>
 80177ec:	8bfb      	ldrh	r3, [r7, #30]
 80177ee:	b2db      	uxtb	r3, r3
 80177f0:	2b03      	cmp	r3, #3
 80177f2:	d101      	bne.n	80177f8 <phpalI14443p4_Sw_Deselect+0xbe>
 80177f4:	2301      	movs	r3, #1
 80177f6:	e000      	b.n	80177fa <phpalI14443p4_Sw_Deselect+0xc0>
 80177f8:	2300      	movs	r3, #0
 80177fa:	75fb      	strb	r3, [r7, #23]

        if (0U == (bInvalidBlock))
 80177fc:	7dfb      	ldrb	r3, [r7, #23]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d12f      	bne.n	8017862 <phpalI14443p4_Sw_Deselect+0x128>
        {
            /* Check for other errors */
            PH_CHECK_SUCCESS(status);
 8017802:	8bfb      	ldrh	r3, [r7, #30]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d001      	beq.n	801780c <phpalI14443p4_Sw_Deselect+0xd2>
 8017808:	8bfb      	ldrh	r3, [r7, #30]
 801780a:	e045      	b.n	8017898 <phpalI14443p4_Sw_Deselect+0x15e>

            /* Signal that we've received something */
            bResponseReceived = 1;
 801780c:	2301      	movs	r3, #1
 801780e:	777b      	strb	r3, [r7, #29]

            /* Rule 8, ISO/IEC 14443-4:2008(E), "...the S(DESELECT) request may be re-transmitted..." */
            if ((wRespLen == wIsoFrameLen) && (wRespLen > 0U) && (wRespLen < 3U))
 8017810:	897a      	ldrh	r2, [r7, #10]
 8017812:	8a7b      	ldrh	r3, [r7, #18]
 8017814:	429a      	cmp	r2, r3
 8017816:	d121      	bne.n	801785c <phpalI14443p4_Sw_Deselect+0x122>
 8017818:	897b      	ldrh	r3, [r7, #10]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d01e      	beq.n	801785c <phpalI14443p4_Sw_Deselect+0x122>
 801781e:	897b      	ldrh	r3, [r7, #10]
 8017820:	2b02      	cmp	r3, #2
 8017822:	d81b      	bhi.n	801785c <phpalI14443p4_Sw_Deselect+0x122>
            {
                /* Mask out Power-Level-Indication */
                if (0U != (pDataParams->bCidEnabled))
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	7a5b      	ldrb	r3, [r3, #9]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d008      	beq.n	801783e <phpalI14443p4_Sw_Deselect+0x104>
                {
                    pResp[1] &= 0x3FU;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	3301      	adds	r3, #1
 8017830:	781a      	ldrb	r2, [r3, #0]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	3301      	adds	r3, #1
 8017836:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801783a:	b2d2      	uxtb	r2, r2
 801783c:	701a      	strb	r2, [r3, #0]
                }

                /* Verify S(DESELECT) Response */
                if (memcmp(bIsoFrame, pResp, wRespLen) != 0)
 801783e:	68f9      	ldr	r1, [r7, #12]
 8017840:	897b      	ldrh	r3, [r7, #10]
 8017842:	461a      	mov	r2, r3
 8017844:	f107 0314 	add.w	r3, r7, #20
 8017848:	4618      	mov	r0, r3
 801784a:	f00a fd27 	bl	802229c <memcmp>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d006      	beq.n	8017862 <phpalI14443p4_Sw_Deselect+0x128>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017854:	f240 6306 	movw	r3, #1542	@ 0x606
 8017858:	83fb      	strh	r3, [r7, #30]
                if (memcmp(bIsoFrame, pResp, wRespLen) != 0)
 801785a:	e002      	b.n	8017862 <phpalI14443p4_Sw_Deselect+0x128>
                }
            }
            else
            {
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 801785c:	f240 6306 	movw	r3, #1542	@ 0x606
 8017860:	83fb      	strh	r3, [r7, #30]
            }
        }
        --wRetries;
 8017862:	8b7b      	ldrh	r3, [r7, #26]
 8017864:	3b01      	subs	r3, #1
 8017866:	837b      	strh	r3, [r7, #26]
    }
    /* Retry as long as neccessary */
    while ((0U != bInvalidBlock) && (wRetries != 0U));
 8017868:	7dfb      	ldrb	r3, [r7, #23]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d002      	beq.n	8017874 <phpalI14443p4_Sw_Deselect+0x13a>
 801786e:	8b7b      	ldrh	r3, [r7, #26]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d196      	bne.n	80177a2 <phpalI14443p4_Sw_Deselect+0x68>

    /* Operation not successful */
    if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8017874:	8bfb      	ldrh	r3, [r7, #30]
 8017876:	b2db      	uxtb	r3, r3
 8017878:	2b00      	cmp	r3, #0
 801787a:	d009      	beq.n	8017890 <phpalI14443p4_Sw_Deselect+0x156>
    {
        /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
        if ((pDataParams->bMaxRetryCount > 0U) && (bResponseReceived > 0U))
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	7c5b      	ldrb	r3, [r3, #17]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d005      	beq.n	8017890 <phpalI14443p4_Sw_Deselect+0x156>
 8017884:	7f7b      	ldrb	r3, [r7, #29]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d002      	beq.n	8017890 <phpalI14443p4_Sw_Deselect+0x156>
        {
            status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 801788a:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 801788e:	83fb      	strh	r3, [r7, #30]
        }
    }

    /* Apply default parameters */
    (void) phpalI14443p4_Sw_ResetProtocol(pDataParams);
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7ff ff29 	bl	80176e8 <phpalI14443p4_Sw_ResetProtocol>

    return status;
 8017896:	8bfb      	ldrh	r3, [r7, #30]
}
 8017898:	4618      	mov	r0, r3
 801789a:	3720      	adds	r7, #32
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <phpalI14443p4_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 80178a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178a2:	b095      	sub	sp, #84	@ 0x54
 80178a4:	af04      	add	r7, sp, #16
 80178a6:	60f8      	str	r0, [r7, #12]
 80178a8:	607a      	str	r2, [r7, #4]
 80178aa:	461a      	mov	r2, r3
 80178ac:	460b      	mov	r3, r1
 80178ae:	817b      	strh	r3, [r7, #10]
 80178b0:	4613      	mov	r3, r2
 80178b2:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bBufferOverflow;

    /* Used to build I/R/S block frames */
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint16_t    PH_MEMLOC_REM wIsoFrameLen = 0;
 80178b4:	2300      	movs	r3, #0
 80178b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bRxOverlapped[3];
    uint16_t    PH_MEMLOC_REM wRxOverlappedLen = 0;
 80178b8:	2300      	movs	r3, #0
 80178ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t    PH_MEMLOC_REM wRxStartPos;
    uint8_t     PH_MEMLOC_REM bUseNad = 0;
 80178bc:	2300      	movs	r3, #0
 80178be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bForceSend;

    /* Used for Transmission */
    uint16_t    PH_MEMLOC_REM wRxBufferSize;
    uint16_t    PH_MEMLOC_REM wTxBufferSize;
    uint16_t    PH_MEMLOC_REM wTxBufferLen = 0;
 80178c2:	2300      	movs	r3, #0
 80178c4:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wInfLength = 0;
 80178c6:	2300      	movs	r3, #0
 80178c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t    PH_MEMLOC_REM wMaxPcdFrameSize;
    uint16_t    PH_MEMLOC_REM wMaxCardFrameSize;
    uint16_t    PH_MEMLOC_REM wPcb = 0;
 80178ca:	2300      	movs	r3, #0
 80178cc:	833b      	strh	r3, [r7, #24]
    uint8_t     PH_MEMLOC_REM bRetryCountRetransmit;

    /* Used for Reception */
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 80178ce:	2300      	movs	r3, #0
 80178d0:	613b      	str	r3, [r7, #16]

    /* Option parameter check */
    if (0u != (wOption &  (uint16_t)~(uint16_t)
 80178d2:	897a      	ldrh	r2, [r7, #10]
 80178d4:	f643 73fc 	movw	r3, #16380	@ 0x3ffc
 80178d8:	4013      	ands	r3, r2
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d002      	beq.n	80178e4 <phpalI14443p4_Sw_Exchange+0x44>
        (
        PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT |
        PH_EXCHANGE_TXCHAINING | PH_EXCHANGE_RXCHAINING | PH_EXCHANGE_RXCHAINING_BUFSIZE
        )))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80178de:	f240 6321 	movw	r3, #1569	@ 0x621
 80178e2:	e34b      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 80178e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d102      	bne.n	80178f0 <phpalI14443p4_Sw_Exchange+0x50>
    {
        ppRxBuffer = &pRxBuffer;
 80178ea:	f107 0310 	add.w	r3, r7, #16
 80178ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    if (pRxLength == NULL)
 80178f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d102      	bne.n	80178fc <phpalI14443p4_Sw_Exchange+0x5c>
    {
        pRxLength = &RxLength;
 80178f6:	f107 0316 	add.w	r3, r7, #22
 80178fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Retrieve HAL buffer sizes */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE, &wRxBufferSize));
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	f107 021e 	add.w	r2, r7, #30
 8017904:	2131      	movs	r1, #49	@ 0x31
 8017906:	4618      	mov	r0, r3
 8017908:	f7fa f8a8 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801790c:	4603      	mov	r3, r0
 801790e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017910:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017912:	2b00      	cmp	r3, #0
 8017914:	d001      	beq.n	801791a <phpalI14443p4_Sw_Exchange+0x7a>
 8017916:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017918:	e330      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE, &wTxBufferSize));
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	f107 021c 	add.w	r2, r7, #28
 8017922:	2132      	movs	r1, #50	@ 0x32
 8017924:	4618      	mov	r0, r3
 8017926:	f7fa f899 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801792a:	4603      	mov	r3, r0
 801792c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801792e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017930:	2b00      	cmp	r3, #0
 8017932:	d001      	beq.n	8017938 <phpalI14443p4_Sw_Exchange+0x98>
 8017934:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017936:	e321      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>

    /* Retrieve maximum frame sizes */
    wMaxPcdFrameSize = bI14443p4_FsTable[pDataParams->bFsdi] - (uint16_t)2U;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	7b9b      	ldrb	r3, [r3, #14]
 801793c:	461a      	mov	r2, r3
 801793e:	4b98      	ldr	r3, [pc, #608]	@ (8017ba0 <phpalI14443p4_Sw_Exchange+0x300>)
 8017940:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017944:	3b02      	subs	r3, #2
 8017946:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wMaxCardFrameSize = bI14443p4_FsTable[pDataParams->bFsci] - (uint16_t)2U;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	7bdb      	ldrb	r3, [r3, #15]
 801794c:	461a      	mov	r2, r3
 801794e:	4b94      	ldr	r3, [pc, #592]	@ (8017ba0 <phpalI14443p4_Sw_Exchange+0x300>)
 8017950:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017954:	3b02      	subs	r3, #2
 8017956:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* R(ACK) transmission in case of Rx-Chaining */
    if (((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING) ||
 8017958:	897b      	ldrh	r3, [r7, #10]
 801795a:	f003 030f 	and.w	r3, r3, #15
 801795e:	2b02      	cmp	r3, #2
 8017960:	d004      	beq.n	801796c <phpalI14443p4_Sw_Exchange+0xcc>
        ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 8017962:	897b      	ldrh	r3, [r7, #10]
 8017964:	f003 030f 	and.w	r3, r3, #15
    if (((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING) ||
 8017968:	2b03      	cmp	r3, #3
 801796a:	d103      	bne.n	8017974 <phpalI14443p4_Sw_Exchange+0xd4>
    {
        pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_RX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	2282      	movs	r2, #130	@ 0x82
 8017970:	721a      	strb	r2, [r3, #8]
 8017972:	e008      	b.n	8017986 <phpalI14443p4_Sw_Exchange+0xe6>
    }
    /* I-Block transmission */
    else
    {
        /* Reset to default state if not in Tx-Mode */
        if ((pDataParams->bStateNow & PH_EXCHANGE_MODE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_TX)
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	7a1b      	ldrb	r3, [r3, #8]
 8017978:	f003 030f 	and.w	r3, r3, #15
 801797c:	2b01      	cmp	r3, #1
 801797e:	d002      	beq.n	8017986 <phpalI14443p4_Sw_Exchange+0xe6>
        {
            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2201      	movs	r2, #1
 8017984:	721a      	strb	r2, [r3, #8]
        }
    }

    /* Reset receive length */
    *pRxLength = 0;
 8017986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017988:	2200      	movs	r2, #0
 801798a:	801a      	strh	r2, [r3, #0]

    /* Reset RetryCount */
    bRetryCountRetransmit = 0;
 801798c:	2300      	movs	r3, #0
 801798e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    /* Reset BufferOverflow flag */
    bBufferOverflow = 0;
 8017992:	2300      	movs	r3, #0
 8017994:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    /*     I-BLOCK TRANSMISSION LOOP    */
    /* ******************************** */
    do
    {
        /* Reset Preloaded bytes and ForceSend */
        wTxBufferLen = 0;
 8017998:	2300      	movs	r3, #0
 801799a:	837b      	strh	r3, [r7, #26]
        bForceSend = 0;
 801799c:	2300      	movs	r3, #0
 801799e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        switch (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK)
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	7a1b      	ldrb	r3, [r3, #8]
 80179a6:	f003 030f 	and.w	r3, r3, #15
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d003      	beq.n	80179b6 <phpalI14443p4_Sw_Exchange+0x116>
 80179ae:	2b02      	cmp	r3, #2
 80179b0:	f000 8114 	beq.w	8017bdc <phpalI14443p4_Sw_Exchange+0x33c>
 80179b4:	e143      	b.n	8017c3e <phpalI14443p4_Sw_Exchange+0x39e>
        {
        case PHPAL_I14443P4_SW_STATE_I_BLOCK_TX:

            /* Retrieve Number of preloaded bytes */
            if (0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))
 80179b6:	897b      	ldrh	r3, [r7, #10]
 80179b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d00e      	beq.n	80179de <phpalI14443p4_Sw_Exchange+0x13e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	f107 021a 	add.w	r2, r7, #26
 80179c8:	2133      	movs	r1, #51	@ 0x33
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7fa f846 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 80179d0:	4603      	mov	r3, r0
 80179d2:	863b      	strh	r3, [r7, #48]	@ 0x30
 80179d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d001      	beq.n	80179de <phpalI14443p4_Sw_Exchange+0x13e>
 80179da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80179dc:	e2ce      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                    PHHAL_HW_CONFIG_TXBUFFER_LENGTH,
                    &wTxBufferLen));
            }

            /* Set initial INF length to (remaining) input data length */
            wInfLength = wTxLength;
 80179de:	893b      	ldrh	r3, [r7, #8]
 80179e0:	86bb      	strh	r3, [r7, #52]	@ 0x34

            /* Frame has already been preloaded -> IsoFrameLen is zero */
            if (wTxBufferLen > 0U)
 80179e2:	8b7b      	ldrh	r3, [r7, #26]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d002      	beq.n	80179ee <phpalI14443p4_Sw_Exchange+0x14e>
            {
                /* do not generate the iso frame */
                wIsoFrameLen = 0;
 80179e8:	2300      	movs	r3, #0
 80179ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80179ec:	e01e      	b.n	8017a2c <phpalI14443p4_Sw_Exchange+0x18c>
            }
            /* Else evaluate IsoFrameLen*/
            else
            {
                /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                if ((0U == ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))))
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	7a1b      	ldrb	r3, [r3, #8]
 80179f2:	b25b      	sxtb	r3, r3
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	db04      	blt.n	8017a02 <phpalI14443p4_Sw_Exchange+0x162>
                {
                    bUseNad = pDataParams->bNadEnabled;
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	7adb      	ldrb	r3, [r3, #11]
 80179fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017a00:	e002      	b.n	8017a08 <phpalI14443p4_Sw_Exchange+0x168>
                }
                else
                {
                    bUseNad = 0;
 8017a02:	2300      	movs	r3, #0
 8017a04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Evaluate frame overhead */
                wIsoFrameLen = 1;
 8017a08:	2301      	movs	r3, #1
 8017a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (0U != (bUseNad))
 8017a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d003      	beq.n	8017a1c <phpalI14443p4_Sw_Exchange+0x17c>
                {
                    ++wIsoFrameLen;
 8017a14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a16:	3301      	adds	r3, #1
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                }
                if (0U != (pDataParams->bCidEnabled))
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	7a5b      	ldrb	r3, [r3, #9]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d003      	beq.n	8017a2c <phpalI14443p4_Sw_Exchange+0x18c>
                {
                    ++wIsoFrameLen;
 8017a24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a26:	3301      	adds	r3, #1
 8017a28:	b29b      	uxth	r3, r3
 8017a2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                }
            }

            /* Check if chaining is intended or not */
            if ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING)
 8017a2c:	897b      	ldrh	r3, [r7, #10]
 8017a2e:	f003 030f 	and.w	r3, r3, #15
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d107      	bne.n	8017a46 <phpalI14443p4_Sw_Exchange+0x1a6>
            {
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	7a1b      	ldrb	r3, [r3, #8]
 8017a3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017a3e:	b2da      	uxtb	r2, r3
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	721a      	strb	r2, [r3, #8]
 8017a44:	e006      	b.n	8017a54 <phpalI14443p4_Sw_Exchange+0x1b4>
            }
            else
            {
                pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	7a1b      	ldrb	r3, [r3, #8]
 8017a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017a4e:	b2da      	uxtb	r2, r3
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	721a      	strb	r2, [r3, #8]
            }

            /* Force frame exchange if
            a) the maximum frame size of the card has been reached;
            */
            if ((wTxBufferLen + wIsoFrameLen + wInfLength) > wMaxCardFrameSize)
 8017a54:	8b7b      	ldrh	r3, [r7, #26]
 8017a56:	461a      	mov	r2, r3
 8017a58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a5a:	441a      	add	r2, r3
 8017a5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017a5e:	441a      	add	r2, r3
 8017a60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a62:	429a      	cmp	r2, r3
 8017a64:	dd10      	ble.n	8017a88 <phpalI14443p4_Sw_Exchange+0x1e8>
            {
                /* force frame exchange */
                bForceSend = 1;
 8017a66:	2301      	movs	r3, #1
 8017a68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                /* force chaining */
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	7a1b      	ldrb	r3, [r3, #8]
 8017a70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017a74:	b2da      	uxtb	r2, r3
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	721a      	strb	r2, [r3, #8]

                /* limit number of bytes to send */
                wInfLength = wMaxCardFrameSize - wTxBufferLen - wIsoFrameLen;
 8017a7a:	8b7b      	ldrh	r3, [r7, #26]
 8017a7c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8017a7e:	1ad3      	subs	r3, r2, r3
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a84:	1ad3      	subs	r3, r2, r3
 8017a86:	86bb      	strh	r3, [r7, #52]	@ 0x34
            }

            /* Force frame exchange if
            b) the TxBuffer is full;
            */
            if ((0U != ((wOption & PH_EXCHANGE_BUFFERED_BIT))) &&
 8017a88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	da12      	bge.n	8017ab6 <phpalI14443p4_Sw_Exchange+0x216>
                ((wTxBufferLen + wIsoFrameLen + wInfLength) >= wTxBufferSize))
 8017a90:	8b7b      	ldrh	r3, [r7, #26]
 8017a92:	461a      	mov	r2, r3
 8017a94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a96:	441a      	add	r2, r3
 8017a98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017a9a:	4413      	add	r3, r2
 8017a9c:	8bba      	ldrh	r2, [r7, #28]
            if ((0U != ((wOption & PH_EXCHANGE_BUFFERED_BIT))) &&
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	db09      	blt.n	8017ab6 <phpalI14443p4_Sw_Exchange+0x216>
            {
                /* force frame exchange */
                bForceSend = 1;
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                /* force chaining */
                pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	7a1b      	ldrb	r3, [r3, #8]
 8017aac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017ab0:	b2da      	uxtb	r2, r3
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	721a      	strb	r2, [r3, #8]
            }

            /* Generate / Buffer ISO frame */
            if (wIsoFrameLen > 0U)
 8017ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d039      	beq.n	8017b30 <phpalI14443p4_Sw_Exchange+0x290>
            {
                /* Generate I-Block frame header */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildIBlock(
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	7a58      	ldrb	r0, [r3, #9]
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	7a9c      	ldrb	r4, [r3, #10]
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	7b1e      	ldrb	r6, [r3, #12]
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	7c1b      	ldrb	r3, [r3, #16]
 8017acc:	68fa      	ldr	r2, [r7, #12]
 8017ace:	7a12      	ldrb	r2, [r2, #8]
 8017ad0:	09d2      	lsrs	r2, r2, #7
 8017ad2:	b2d2      	uxtb	r2, r2
 8017ad4:	f897 5037 	ldrb.w	r5, [r7, #55]	@ 0x37
 8017ad8:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8017adc:	9103      	str	r1, [sp, #12]
 8017ade:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017ae2:	9102      	str	r1, [sp, #8]
 8017ae4:	9201      	str	r2, [sp, #4]
 8017ae6:	9300      	str	r3, [sp, #0]
 8017ae8:	4633      	mov	r3, r6
 8017aea:	462a      	mov	r2, r5
 8017aec:	4621      	mov	r1, r4
 8017aee:	f000 fee3 	bl	80188b8 <phpalI14443p4_Sw_BuildIBlock>
 8017af2:	4603      	mov	r3, r0
 8017af4:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017af6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d001      	beq.n	8017b00 <phpalI14443p4_Sw_Exchange+0x260>
 8017afc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017afe:	e23d      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                    (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT)) ? 1U : 0U,
                    bIsoFrame,
                    &wIsoFrameLen));

                /* Write Frame to HAL TxBuffer but do not preform Exchange */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	6858      	ldr	r0, [r3, #4]
 8017b04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017b06:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	9101      	str	r1, [sp, #4]
 8017b0e:	2100      	movs	r1, #0
 8017b10:	9100      	str	r1, [sp, #0]
 8017b12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017b16:	f7f7 ff9b 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017b1e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d001      	beq.n	8017b28 <phpalI14443p4_Sw_Exchange+0x288>
 8017b24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b26:	e229      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                    wIsoFrameLen,
                    NULL,
                    NULL));

                /* Retain the preloaded bytes from now on */
                wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8017b28:	897b      	ldrh	r3, [r7, #10]
 8017b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017b2e:	817b      	strh	r3, [r7, #10]
            }

            /* Tx-Buffering mode (and no forced exchange) */
            if ((0U == bForceSend) && (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8017b30:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d113      	bne.n	8017b60 <phpalI14443p4_Sw_Exchange+0x2c0>
 8017b38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	da0f      	bge.n	8017b60 <phpalI14443p4_Sw_Exchange+0x2c0>
            {
                /* Preload the data into the TxBuffer */
                return phhalHw_Exchange(
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	6858      	ldr	r0, [r3, #4]
 8017b44:	897b      	ldrh	r3, [r7, #10]
 8017b46:	f023 030f 	bic.w	r3, r3, #15
 8017b4a:	b299      	uxth	r1, r3
 8017b4c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017b4e:	2200      	movs	r2, #0
 8017b50:	9201      	str	r2, [sp, #4]
 8017b52:	2200      	movs	r2, #0
 8017b54:	9200      	str	r2, [sp, #0]
 8017b56:	687a      	ldr	r2, [r7, #4]
 8017b58:	f7f7 ff7a 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	e20d      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                    NULL,
                    NULL);
            }

            /* Content has been buffered before */
            if (wTxBufferLen > 0U)
 8017b60:	8b7b      	ldrh	r3, [r7, #26]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d06e      	beq.n	8017c44 <phpalI14443p4_Sw_Exchange+0x3a4>
            {
                /* retrieve PCB byte */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_OFFSET, 0x00));
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	212f      	movs	r1, #47	@ 0x2f
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7f8 fb26 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017b74:	4603      	mov	r3, r0
 8017b76:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017b78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d001      	beq.n	8017b82 <phpalI14443p4_Sw_Exchange+0x2e2>
 8017b7e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b80:	e1fc      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, &wPcb));
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	685b      	ldr	r3, [r3, #4]
 8017b86:	f107 0218 	add.w	r2, r7, #24
 8017b8a:	2134      	movs	r1, #52	@ 0x34
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7f9 ff65 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8017b92:	4603      	mov	r3, r0
 8017b94:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017b96:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d003      	beq.n	8017ba4 <phpalI14443p4_Sw_Exchange+0x304>
 8017b9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017b9e:	e1ed      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
 8017ba0:	08026de0 	.word	0x08026de0

                /* Preloaded Data or ForceSend -> Modify PCB byte if neccessary */
                if ((0U != bForceSend) || ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING))
 8017ba4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d104      	bne.n	8017bb6 <phpalI14443p4_Sw_Exchange+0x316>
 8017bac:	897b      	ldrh	r3, [r7, #10]
 8017bae:	f003 030f 	and.w	r3, r3, #15
 8017bb2:	2b01      	cmp	r3, #1
 8017bb4:	d146      	bne.n	8017c44 <phpalI14443p4_Sw_Exchange+0x3a4>
                {
                    /* modify PCB byte */
                    wPcb |= PHPAL_I14443P4_SW_PCB_CHAINING;
 8017bb6:	8b3b      	ldrh	r3, [r7, #24]
 8017bb8:	f043 0310 	orr.w	r3, r3, #16
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	833b      	strh	r3, [r7, #24]
                    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, wPcb));
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	8b3a      	ldrh	r2, [r7, #24]
 8017bc6:	2134      	movs	r1, #52	@ 0x34
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7f8 faf9 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017bd2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d035      	beq.n	8017c44 <phpalI14443p4_Sw_Exchange+0x3a4>
 8017bd8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017bda:	e1cf      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
            break;

        case PHPAL_I14443P4_SW_STATE_I_BLOCK_RX:

            /* Build R(ACK) frame */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	7a58      	ldrb	r0, [r3, #9]
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	7a99      	ldrb	r1, [r3, #10]
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	7c1a      	ldrb	r2, [r3, #16]
 8017be8:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8017bec:	9301      	str	r3, [sp, #4]
 8017bee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	f000 feb1 	bl	801895c <phpalI14443p4_Sw_BuildRBlock>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017bfe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d001      	beq.n	8017c08 <phpalI14443p4_Sw_Exchange+0x368>
 8017c04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c06:	e1b9      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                1,
                bIsoFrame,
                &wIsoFrameLen));

            /* Write Frame to HAL TxBuffer but do not preform Exchange */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	6858      	ldr	r0, [r3, #4]
 8017c0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c0e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8017c12:	2100      	movs	r1, #0
 8017c14:	9101      	str	r1, [sp, #4]
 8017c16:	2100      	movs	r1, #0
 8017c18:	9100      	str	r1, [sp, #0]
 8017c1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017c1e:	f7f7 ff17 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8017c22:	4603      	mov	r3, r0
 8017c24:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017c26:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d001      	beq.n	8017c30 <phpalI14443p4_Sw_Exchange+0x390>
 8017c2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017c2e:	e1a5      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                wIsoFrameLen,
                NULL,
                NULL));

            /* Retain the preloaded bytes from now on */
            wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8017c30:	897b      	ldrh	r3, [r7, #10]
 8017c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017c36:	817b      	strh	r3, [r7, #10]

            /* do not append any data */
            wInfLength = 0;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	86bb      	strh	r3, [r7, #52]	@ 0x34
            break;
 8017c3c:	e003      	b.n	8017c46 <phpalI14443p4_Sw_Exchange+0x3a6>

            /* Should NEVER happen! */
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017c3e:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017c42:	e19b      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
            break;
 8017c44:	bf00      	nop
        }

        /* Perform Exchange using complete ISO handling */
        status = phpalI14443p4_Sw_IsoHandling(
 8017c46:	897b      	ldrh	r3, [r7, #10]
 8017c48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017c4c:	b299      	uxth	r1, r3
 8017c4e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8017c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017c54:	9302      	str	r3, [sp, #8]
 8017c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017c58:	9301      	str	r3, [sp, #4]
 8017c5a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017c5c:	9300      	str	r3, [sp, #0]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	68f8      	ldr	r0, [r7, #12]
 8017c62:	f000 f98f 	bl	8017f84 <phpalI14443p4_Sw_IsoHandling>
 8017c66:	4603      	mov	r3, r0
 8017c68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            wInfLength,
            ppRxBuffer,
            pRxLength);

        /* Complete chaining if buffer is full */
        if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8017c6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c6c:	b2db      	uxtb	r3, r3
 8017c6e:	2b04      	cmp	r3, #4
 8017c70:	d10f      	bne.n	8017c92 <phpalI14443p4_Sw_Exchange+0x3f2>
            ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 8017c72:	897b      	ldrh	r3, [r7, #10]
 8017c74:	f003 030f 	and.w	r3, r3, #15
        if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8017c78:	2b03      	cmp	r3, #3
 8017c7a:	d10a      	bne.n	8017c92 <phpalI14443p4_Sw_Exchange+0x3f2>
        {
            /* Indicate Buffer Overflow */
            bBufferOverflow = 1;
 8017c7c:	2301      	movs	r3, #1
 8017c7e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            /* Toggle Blocknumber */
            pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	7c1b      	ldrb	r3, [r3, #16]
 8017c86:	f083 0301 	eor.w	r3, r3, #1
 8017c8a:	b2da      	uxtb	r2, r3
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	741a      	strb	r2, [r3, #16]
 8017c90:	e004      	b.n	8017c9c <phpalI14443p4_Sw_Exchange+0x3fc>
        }
        /* Else bail out on error */
        else
        {
            PH_CHECK_SUCCESS(status);
 8017c92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d001      	beq.n	8017c9c <phpalI14443p4_Sw_Exchange+0x3fc>
 8017c98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c9a:	e16f      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
        }

        /* Retransmission in progress */
        if (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT))
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	7a1b      	ldrb	r3, [r3, #8]
 8017ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d039      	beq.n	8017d1c <phpalI14443p4_Sw_Exchange+0x47c>
        {
            /* Increment Retransmit RetryCount */
            ++bRetryCountRetransmit;
 8017ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017cac:	3301      	adds	r3, #1
 8017cae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            /* Restore internal TxBuffer. */
            /* Neccessary in case RxBuffer and TxBuffer are the same. */
            if (wTxBufferLen > 0U)
 8017cb2:	8b7b      	ldrh	r3, [r7, #26]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d029      	beq.n	8017d0c <phpalI14443p4_Sw_Exchange+0x46c>
            {
                /* restore PCB byte */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER_OFFSET, 0x00));
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	212f      	movs	r1, #47	@ 0x2f
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7f8 fa7d 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017cca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <phpalI14443p4_Sw_Exchange+0x434>
 8017cd0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017cd2:	e153      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXBUFFER, wPcb));
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	8b3a      	ldrh	r2, [r7, #24]
 8017cda:	2134      	movs	r1, #52	@ 0x34
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7f8 fa6f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017ce6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d001      	beq.n	8017cf0 <phpalI14443p4_Sw_Exchange+0x450>
 8017cec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017cee:	e145      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>

                /* restore TxBufferLen */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	8b7a      	ldrh	r2, [r7, #26]
 8017cf6:	2133      	movs	r1, #51	@ 0x33
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f7f8 fa61 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017d02:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d001      	beq.n	8017d0c <phpalI14443p4_Sw_Exchange+0x46c>
 8017d08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017d0a:	e137      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                    PHHAL_HW_CONFIG_TXBUFFER_LENGTH,
                    wTxBufferLen));
            }

            /* Clear retransmission bit */
            pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT;
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	7a1b      	ldrb	r3, [r3, #8]
 8017d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017d14:	b2da      	uxtb	r2, r3
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	721a      	strb	r2, [r3, #8]
 8017d1a:	e026      	b.n	8017d6a <phpalI14443p4_Sw_Exchange+0x4ca>
        }
        /* No retransmission in progress */
        else
        {
            /* Reset Retransmit RetryCount */
            bRetryCountRetransmit = 0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            /* Chaining is active */
            if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	7a1b      	ldrb	r3, [r3, #8]
 8017d26:	2b81      	cmp	r3, #129	@ 0x81
 8017d28:	d111      	bne.n	8017d4e <phpalI14443p4_Sw_Exchange+0x4ae>
            {
                /* Bytes to send cannot be less than sent bytes */
                if (wTxLength < wInfLength)
 8017d2a:	893a      	ldrh	r2, [r7, #8]
 8017d2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d202      	bcs.n	8017d38 <phpalI14443p4_Sw_Exchange+0x498>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017d32:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017d36:	e121      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                }

                /* Remove sent bytes from TxBuffer */
                pTxBuffer = pTxBuffer + wInfLength;
 8017d38:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017d3a:	687a      	ldr	r2, [r7, #4]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	607b      	str	r3, [r7, #4]

                /* below if condition is added to make QAC compliant  */
                if(wTxLength > 0U)
 8017d40:	893b      	ldrh	r3, [r7, #8]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d003      	beq.n	8017d4e <phpalI14443p4_Sw_Exchange+0x4ae>
                {
                    wTxLength = wTxLength - wInfLength;
 8017d46:	893a      	ldrh	r2, [r7, #8]
 8017d48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017d4a:	1ad3      	subs	r3, r2, r3
 8017d4c:	813b      	strh	r3, [r7, #8]
                }
            }

            /* Buffered / TxChaining mode -> finished after sending */
            if ((wTxLength == 0U) &&
 8017d4e:	893b      	ldrh	r3, [r7, #8]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d10a      	bne.n	8017d6a <phpalI14443p4_Sw_Exchange+0x4ca>
                (
                ((wOption & PH_EXCHANGE_BUFFERED_BIT) > 0U) ||
 8017d54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
            if ((wTxLength == 0U) &&
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	db04      	blt.n	8017d66 <phpalI14443p4_Sw_Exchange+0x4c6>
                ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_TXCHAINING)
 8017d5c:	897b      	ldrh	r3, [r7, #10]
 8017d5e:	f003 030f 	and.w	r3, r3, #15
                ((wOption & PH_EXCHANGE_BUFFERED_BIT) > 0U) ||
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d101      	bne.n	8017d6a <phpalI14443p4_Sw_Exchange+0x4ca>
                ))
            {
                return PH_ERR_SUCCESS;
 8017d66:	2300      	movs	r3, #0
 8017d68:	e108      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
            }
        }
    }
    /* Loop as long as the state does not transit to RX mode */
    while ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_RX);
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	7a1b      	ldrb	r3, [r3, #8]
 8017d6e:	f003 030f 	and.w	r3, r3, #15
 8017d72:	2b02      	cmp	r3, #2
 8017d74:	f47f ae10 	bne.w	8017998 <phpalI14443p4_Sw_Exchange+0xf8>

    /* Overlap PCB */
    wRxOverlappedLen = 1;
 8017d78:	2301      	movs	r3, #1
 8017d7a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* Overlap CID */
    if (0u != ((*ppRxBuffer)[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING))
 8017d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	f003 0308 	and.w	r3, r3, #8
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d002      	beq.n	8017d90 <phpalI14443p4_Sw_Exchange+0x4f0>
    {
        wRxOverlappedLen++;
 8017d8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017d8c:	3301      	adds	r3, #1
 8017d8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }

    /* Overlap NAD */
    if (0u != ((*ppRxBuffer)[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING))
 8017d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	781b      	ldrb	r3, [r3, #0]
 8017d96:	f003 0304 	and.w	r3, r3, #4
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d002      	beq.n	8017da4 <phpalI14443p4_Sw_Exchange+0x504>
    {
        wRxOverlappedLen++;
 8017d9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017da0:	3301      	adds	r3, #1
 8017da2:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }

    /* Reset RxStartPos */
    wRxStartPos = 0;
 8017da4:	2300      	movs	r3, #0
 8017da6:	873b      	strh	r3, [r7, #56]	@ 0x38
    /*      I-BLOCK RECEPTION LOOP      */
    /* ******************************** */
    do
    {
        /* Only allow receive state at this point */
        if ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) != PHPAL_I14443P4_SW_STATE_I_BLOCK_RX)
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	7a1b      	ldrb	r3, [r3, #8]
 8017dac:	f003 030f 	and.w	r3, r3, #15
 8017db0:	2b02      	cmp	r3, #2
 8017db2:	d002      	beq.n	8017dba <phpalI14443p4_Sw_Exchange+0x51a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017db4:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017db8:	e0e0      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
        }

        /* Rule 2, ISO/IEC 14443-4:2008(E), PICC chaining */
        if (0U != (pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	7a1b      	ldrb	r3, [r3, #8]
 8017dbe:	b25b      	sxtb	r3, r3
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	f280 80ae 	bge.w	8017f22 <phpalI14443p4_Sw_Exchange+0x682>
        {
            /* Skip overlapping / SUCCESS_CHAINING checks in case of BufferOverflow */
            if (0U == (bBufferOverflow))
 8017dc6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d139      	bne.n	8017e42 <phpalI14443p4_Sw_Exchange+0x5a2>
            {
                /* This is first chained response */
                if (wRxStartPos == 0U)
 8017dce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d106      	bne.n	8017de2 <phpalI14443p4_Sw_Exchange+0x542>
                {
                    /* Special NAD chaining handling */
                    /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                    if (0U != (pDataParams->bNadEnabled))
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	7adb      	ldrb	r3, [r3, #11]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d002      	beq.n	8017de2 <phpalI14443p4_Sw_Exchange+0x542>
                    {
                        --wRxOverlappedLen;
 8017ddc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017dde:	3b01      	subs	r3, #1
 8017de0:	877b      	strh	r3, [r7, #58]	@ 0x3a
                    }
                }

                /* Backup overlapped bytes */
                (void)memcpy(bRxOverlapped, &(*ppRxBuffer)[((*pRxLength) - wRxOverlappedLen)], wRxOverlappedLen);
 8017de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017de8:	8812      	ldrh	r2, [r2, #0]
 8017dea:	4611      	mov	r1, r2
 8017dec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017dee:	1a8a      	subs	r2, r1, r2
 8017df0:	1899      	adds	r1, r3, r2
 8017df2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017df4:	f107 0320 	add.w	r3, r7, #32
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f00a fade 	bl	80223ba <memcpy>

                /* Calculate RxBuffer Start Position */
                wRxStartPos = (*pRxLength) - wRxOverlappedLen;
 8017dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017e00:	881a      	ldrh	r2, [r3, #0]
 8017e02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017e04:	1ad3      	subs	r3, r2, r3
 8017e06:	873b      	strh	r3, [r7, #56]	@ 0x38

                /* Skip SUCCESS_CHAINING check for RXCHAINING_BUFSIZE mode */
                if ((wOption & PH_EXCHANGE_MODE_MASK) != PH_EXCHANGE_RXCHAINING_BUFSIZE)
 8017e08:	897b      	ldrh	r3, [r7, #10]
 8017e0a:	f003 030f 	and.w	r3, r3, #15
 8017e0e:	2b03      	cmp	r3, #3
 8017e10:	d017      	beq.n	8017e42 <phpalI14443p4_Sw_Exchange+0x5a2>
                {
                    /* Return with chaining status if the next chain may not fit into our buffer */
                    if ((*pRxLength + wMaxPcdFrameSize) > wRxBufferSize)
 8017e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017e14:	881b      	ldrh	r3, [r3, #0]
 8017e16:	461a      	mov	r2, r3
 8017e18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017e1a:	4413      	add	r3, r2
 8017e1c:	8bfa      	ldrh	r2, [r7, #30]
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	dd0f      	ble.n	8017e42 <phpalI14443p4_Sw_Exchange+0x5a2>
                    {
                        /* Adjust RxBuffer position */
                        (*ppRxBuffer) = (*ppRxBuffer) + wRxOverlappedLen;
 8017e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017e28:	441a      	add	r2, r3
 8017e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017e2c:	601a      	str	r2, [r3, #0]
                        *pRxLength = *pRxLength - wRxOverlappedLen;
 8017e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017e30:	881a      	ldrh	r2, [r3, #0]
 8017e32:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017e34:	1ad3      	subs	r3, r2, r3
 8017e36:	b29a      	uxth	r2, r3
 8017e38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017e3a:	801a      	strh	r2, [r3, #0]

                        return PH_ADD_COMPCODE_FIXED(PH_ERR_SUCCESS_CHAINING, PH_COMP_PAL_ISO14443P4);
 8017e3c:	f240 6371 	movw	r3, #1649	@ 0x671
 8017e40:	e09c      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                    }
                }
            }

            /* Set RxBuffer Start Position */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	685b      	ldr	r3, [r3, #4]
 8017e46:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8017e48:	2130      	movs	r1, #48	@ 0x30
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7f8 f9b8 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017e50:	4603      	mov	r3, r0
 8017e52:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017e54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d001      	beq.n	8017e5e <phpalI14443p4_Sw_Exchange+0x5be>
 8017e5a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e5c:	e08e      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXBUFFER_STARTPOS,
                wRxStartPos));

            /* Prepare R(ACK) frame */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	7a58      	ldrb	r0, [r3, #9]
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	7a99      	ldrb	r1, [r3, #10]
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	7c1a      	ldrb	r2, [r3, #16]
 8017e6a:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8017e6e:	9301      	str	r3, [sp, #4]
 8017e70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017e74:	9300      	str	r3, [sp, #0]
 8017e76:	2301      	movs	r3, #1
 8017e78:	f000 fd70 	bl	801895c <phpalI14443p4_Sw_BuildRBlock>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017e80:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d001      	beq.n	8017e8a <phpalI14443p4_Sw_Exchange+0x5ea>
 8017e86:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e88:	e078      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                1,
                bIsoFrame,
                &wIsoFrameLen));

            /* Perform Exchange using complete ISO handling */
            status = phpalI14443p4_Sw_IsoHandling(
 8017e8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e8c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017e90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017e92:	9202      	str	r2, [sp, #8]
 8017e94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017e96:	9201      	str	r2, [sp, #4]
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	460b      	mov	r3, r1
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	2100      	movs	r1, #0
 8017ea0:	68f8      	ldr	r0, [r7, #12]
 8017ea2:	f000 f86f 	bl	8017f84 <phpalI14443p4_Sw_IsoHandling>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                wIsoFrameLen,
                ppRxBuffer,
                pRxLength);

            /* Complete chaining if buffer is full */
            if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8017eaa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	2b04      	cmp	r3, #4
 8017eb0:	d111      	bne.n	8017ed6 <phpalI14443p4_Sw_Exchange+0x636>
                ((wOption & PH_EXCHANGE_MODE_MASK) == PH_EXCHANGE_RXCHAINING_BUFSIZE))
 8017eb2:	897b      	ldrh	r3, [r7, #10]
 8017eb4:	f003 030f 	and.w	r3, r3, #15
            if (((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW) &&
 8017eb8:	2b03      	cmp	r3, #3
 8017eba:	d10c      	bne.n	8017ed6 <phpalI14443p4_Sw_Exchange+0x636>
            {
                /* Reset wRxStartPos */
                wRxStartPos = 0;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	873b      	strh	r3, [r7, #56]	@ 0x38

                /* Indicate Buffer Overflow */
                bBufferOverflow = 1;
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

                /* Toggle Blocknumber */
                pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	7c1b      	ldrb	r3, [r3, #16]
 8017eca:	f083 0301 	eor.w	r3, r3, #1
 8017ece:	b2da      	uxtb	r2, r3
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	741a      	strb	r2, [r3, #16]
 8017ed4:	e04c      	b.n	8017f70 <phpalI14443p4_Sw_Exchange+0x6d0>
            }
            /* Default behaviour */
            else
            {
                /* In case of buffer overflow error from HAL, reset the HAL Rx Buffer Start position */
                if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && ((status & PH_ERR_MASK) == PH_ERR_BUFFER_OVERFLOW))
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	7c9b      	ldrb	r3, [r3, #18]
 8017eda:	2b03      	cmp	r3, #3
 8017edc:	d011      	beq.n	8017f02 <phpalI14443p4_Sw_Exchange+0x662>
 8017ede:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	2b04      	cmp	r3, #4
 8017ee4:	d10d      	bne.n	8017f02 <phpalI14443p4_Sw_Exchange+0x662>
                {
                    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	685b      	ldr	r3, [r3, #4]
 8017eea:	2200      	movs	r2, #0
 8017eec:	2130      	movs	r1, #48	@ 0x30
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7f8 f966 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017ef8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d001      	beq.n	8017f02 <phpalI14443p4_Sw_Exchange+0x662>
 8017efe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017f00:	e03c      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>
                }
                /* Bail out on error */
                PH_CHECK_SUCCESS(status);
 8017f02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d001      	beq.n	8017f0c <phpalI14443p4_Sw_Exchange+0x66c>
 8017f08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f0a:	e037      	b.n	8017f7c <phpalI14443p4_Sw_Exchange+0x6dc>

                /* Restore overlapped INF bytes */
                (void)memcpy(&(*ppRxBuffer)[wRxStartPos], bRxOverlapped, wRxOverlappedLen); /* PRQA S 3354 */
 8017f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017f0e:	681a      	ldr	r2, [r3, #0]
 8017f10:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017f12:	4413      	add	r3, r2
 8017f14:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017f16:	f107 0120 	add.w	r1, r7, #32
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f00a fa4d 	bl	80223ba <memcpy>
 8017f20:	e026      	b.n	8017f70 <phpalI14443p4_Sw_Exchange+0x6d0>
        }
        /* No chaining -> reception finished */
        else
        {
            /* Return data */
            if (0U == (bBufferOverflow))
 8017f22:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d119      	bne.n	8017f5e <phpalI14443p4_Sw_Exchange+0x6be>
            {
                /* Special NAD chaining handling */
                /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                if ((wRxStartPos > 0U) && (pDataParams->bNadEnabled > 0U))
 8017f2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d006      	beq.n	8017f3e <phpalI14443p4_Sw_Exchange+0x69e>
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	7adb      	ldrb	r3, [r3, #11]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d002      	beq.n	8017f3e <phpalI14443p4_Sw_Exchange+0x69e>
                {
                    ++wRxOverlappedLen;
 8017f38:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017f3a:	3301      	adds	r3, #1
 8017f3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
                }

                /* Do not return protocol bytes, advance to INF field */
                (*ppRxBuffer) = (*ppRxBuffer) + wRxOverlappedLen;
 8017f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017f40:	681a      	ldr	r2, [r3, #0]
 8017f42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017f44:	441a      	add	r2, r3
 8017f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017f48:	601a      	str	r2, [r3, #0]
                *pRxLength = *pRxLength - wRxOverlappedLen;
 8017f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017f4c:	881a      	ldrh	r2, [r3, #0]
 8017f4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017f50:	1ad3      	subs	r3, r2, r3
 8017f52:	b29a      	uxth	r2, r3
 8017f54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017f56:	801a      	strh	r2, [r3, #0]
                /* Reception successful */
                status = PH_ERR_SUCCESS;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8017f5c:	e005      	b.n	8017f6a <phpalI14443p4_Sw_Exchange+0x6ca>
            }
            /* do not return any data in case of Buffer Overflow */
            else
            {
                *pRxLength = 0;
 8017f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017f60:	2200      	movs	r2, #0
 8017f62:	801a      	strh	r2, [r3, #0]
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P4);
 8017f64:	f240 6304 	movw	r3, #1540	@ 0x604
 8017f68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            /* Reception finished */
            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_FINISHED;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	220f      	movs	r2, #15
 8017f6e:	721a      	strb	r2, [r3, #8]
        }
    }
    while (pDataParams->bStateNow != PHPAL_I14443P4_SW_STATE_FINISHED);
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	7a1b      	ldrb	r3, [r3, #8]
 8017f74:	2b0f      	cmp	r3, #15
 8017f76:	f47f af17 	bne.w	8017da8 <phpalI14443p4_Sw_Exchange+0x508>

    return status;
 8017f7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3744      	adds	r7, #68	@ 0x44
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f84 <phpalI14443p4_Sw_IsoHandling>:
                                        uint8_t * pTxBuffer,
                                        uint16_t wTxLength,
                                        uint8_t ** ppRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 8017f84:	b590      	push	{r4, r7, lr}
 8017f86:	b091      	sub	sp, #68	@ 0x44
 8017f88:	af02      	add	r7, sp, #8
 8017f8a:	60f8      	str	r0, [r7, #12]
 8017f8c:	607b      	str	r3, [r7, #4]
 8017f8e:	460b      	mov	r3, r1
 8017f90:	817b      	strh	r3, [r7, #10]
 8017f92:	4613      	mov	r3, r2
 8017f94:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8017f96:	2300      	movs	r3, #0
 8017f98:	86fb      	strh	r3, [r7, #54]	@ 0x36
    phStatus_t  PH_MEMLOC_REM statusBkUp = PH_ERR_SUCCESS;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	847b      	strh	r3, [r7, #34]	@ 0x22
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsoFrame[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wRxBufferStartPos;
    uint8_t     PH_MEMLOC_REM bInvalidBlock;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bWtxm = 0;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bCheckNad;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint32_t    PH_MEMLOC_REM dwTimeoutMax = PHPAL_I14443P4_SW_FWT_MAX_US;
 8017fac:	4b99      	ldr	r3, [pc, #612]	@ (8018214 <phpalI14443p4_Sw_IsoHandling+0x290>)
 8017fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTimeoutPrev = 0;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bTimeoutInMs = 0;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t     bNAKCount = 0;
 8017fba:	2300      	movs	r3, #0
 8017fbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t     bACKCount = 0;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Buffered Exchange is not allowed here */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8017fc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	da02      	bge.n	8017fd4 <phpalI14443p4_Sw_IsoHandling+0x50>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_PAL_ISO14443P4);
 8017fce:	f240 637f 	movw	r3, #1663	@ 0x67f
 8017fd2:	e362      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
    }

    /* Ignore custom modes */
    wOption &= (uint16_t)~(uint16_t)PH_EXCHANGE_MODE_MASK;
 8017fd4:	897b      	ldrh	r3, [r7, #10]
 8017fd6:	f023 030f 	bic.w	r3, r3, #15
 8017fda:	817b      	strh	r3, [r7, #10]

    /* Reset response received flag */
    bResponseReceived = 0;
 8017fdc:	2300      	movs	r3, #0
 8017fde:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Loops in case of an error */
    do
    {
        /* WTX Timeout - set temporary FWT */
        if (bWtxm > 0U)
 8017fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	f000 8081 	beq.w	80180ee <phpalI14443p4_Sw_IsoHandling+0x16a>
        {
            /* Retrieve current timeout */
            status = phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, &wTimeoutPrev);
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	f107 0210 	add.w	r2, r7, #16
 8017ff4:	210d      	movs	r1, #13
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7f9 fd30 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	86fb      	strh	r3, [r7, #54]	@ 0x36

            /* Timeout is out of range, retrieve it in milliseconds */
            if ((status & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW)
 8018000:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018002:	b2db      	uxtb	r3, r3
 8018004:	2b22      	cmp	r3, #34	@ 0x22
 8018006:	d112      	bne.n	801802e <phpalI14443p4_Sw_IsoHandling+0xaa>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimeoutPrev));
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	685b      	ldr	r3, [r3, #4]
 801800c:	f107 0210 	add.w	r2, r7, #16
 8018010:	210e      	movs	r1, #14
 8018012:	4618      	mov	r0, r3
 8018014:	f7f9 fd22 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8018018:	4603      	mov	r3, r0
 801801a:	833b      	strh	r3, [r7, #24]
 801801c:	8b3b      	ldrh	r3, [r7, #24]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d001      	beq.n	8018026 <phpalI14443p4_Sw_IsoHandling+0xa2>
 8018022:	8b3b      	ldrh	r3, [r7, #24]
 8018024:	e339      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
                bTimeoutInMs = 1;
 8018026:	2301      	movs	r3, #1
 8018028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801802c:	e007      	b.n	801803e <phpalI14443p4_Sw_IsoHandling+0xba>
            }
            else
            {
                PH_CHECK_SUCCESS(status);
 801802e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018030:	2b00      	cmp	r3, #0
 8018032:	d001      	beq.n	8018038 <phpalI14443p4_Sw_IsoHandling+0xb4>
 8018034:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018036:	e330      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
                bTimeoutInMs = 0;
 8018038:	2300      	movs	r3, #0
 801803a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            /* Calculate temporary WTX timeout */
            if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	7c9b      	ldrb	r3, [r3, #18]
 8018042:	2b03      	cmp	r3, #3
 8018044:	d10c      	bne.n	8018060 <phpalI14443p4_Sw_IsoHandling+0xdc>
            {
                dwTimeout = (((uint32_t)PHPAL_I14443P4_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi)) * (uint32_t)bWtxm) +
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	7b5b      	ldrb	r3, [r3, #13]
 801804a:	461a      	mov	r2, r3
 801804c:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 8018050:	4093      	lsls	r3, r2
 8018052:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8018056:	fb02 f303 	mul.w	r3, r2, r3
 801805a:	333c      	adds	r3, #60	@ 0x3c
 801805c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801805e:	e018      	b.n	8018092 <phpalI14443p4_Sw_IsoHandling+0x10e>
                            (uint32_t)PHPAL_I14443P4_EXT_TIME_US;
            }
            else
            {
                /* As per Digital Spec V1.1 req 15.3.2.1, NFC Forum Device SHALL wait at least FWTtemp + delta FWTT4AT for a Response */
                dwTimeout = (((uint32_t)PHPAL_I14443P4_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi)) * (uint32_t)bWtxm) +
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	7b5b      	ldrb	r3, [r3, #13]
 8018064:	461a      	mov	r2, r3
 8018066:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 801806a:	4093      	lsls	r3, r2
 801806c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8018070:	fb02 f303 	mul.w	r3, r2, r3
 8018074:	f603 6329 	addw	r3, r3, #3625	@ 0xe29
 8018078:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            (uint32_t)PHPAL_I14443P4_SW_DELTA_FWT_US;

                dwTimeoutMax = PHPAL_I14443P4_SW_NFC_FWT_MAX_US;
 801807a:	4b67      	ldr	r3, [pc, #412]	@ (8018218 <phpalI14443p4_Sw_IsoHandling+0x294>)
 801807c:	62bb      	str	r3, [r7, #40]	@ 0x28

                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	7c9b      	ldrb	r3, [r3, #18]
 8018082:	2b01      	cmp	r3, #1
 8018084:	d105      	bne.n	8018092 <phpalI14443p4_Sw_IsoHandling+0x10e>
                {
                    dwTimeout += (uint32_t)PHPAL_I14443P4_SW_DELTA_TPCD_US;
 8018086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018088:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801808c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    dwTimeoutMax = PHPAL_I14443P4_SW_EMVCO_FWT_MAX_US;
 801808e:	4b63      	ldr	r3, [pc, #396]	@ (801821c <phpalI14443p4_Sw_IsoHandling+0x298>)
 8018090:	62bb      	str	r3, [r7, #40]	@ 0x28
                }
            }

            /* Limit timeout to FWT max */
            if (dwTimeout > dwTimeoutMax)
 8018092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018096:	429a      	cmp	r2, r3
 8018098:	d901      	bls.n	801809e <phpalI14443p4_Sw_IsoHandling+0x11a>
            {
                dwTimeout = dwTimeoutMax;
 801809a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801809c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Set temporary WTX timeout */
            if (dwTimeout > 0xFFFFU)
 801809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80180a4:	d314      	bcc.n	80180d0 <phpalI14443p4_Sw_IsoHandling+0x14c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, (uint16_t)((dwTimeout / 1000U) + 1U)));
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	6858      	ldr	r0, [r3, #4]
 80180aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ac:	4a5c      	ldr	r2, [pc, #368]	@ (8018220 <phpalI14443p4_Sw_IsoHandling+0x29c>)
 80180ae:	fba2 2303 	umull	r2, r3, r2, r3
 80180b2:	099b      	lsrs	r3, r3, #6
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	3301      	adds	r3, #1
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	461a      	mov	r2, r3
 80180bc:	210e      	movs	r1, #14
 80180be:	f7f8 f87f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80180c2:	4603      	mov	r3, r0
 80180c4:	833b      	strh	r3, [r7, #24]
 80180c6:	8b3b      	ldrh	r3, [r7, #24]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d010      	beq.n	80180ee <phpalI14443p4_Sw_IsoHandling+0x16a>
 80180cc:	8b3b      	ldrh	r3, [r7, #24]
 80180ce:	e2e4      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, (uint16_t)dwTimeout));
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80180d6:	b292      	uxth	r2, r2
 80180d8:	210d      	movs	r1, #13
 80180da:	4618      	mov	r0, r3
 80180dc:	f7f8 f870 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80180e0:	4603      	mov	r3, r0
 80180e2:	833b      	strh	r3, [r7, #24]
 80180e4:	8b3b      	ldrh	r3, [r7, #24]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d001      	beq.n	80180ee <phpalI14443p4_Sw_IsoHandling+0x16a>
 80180ea:	8b3b      	ldrh	r3, [r7, #24]
 80180ec:	e2d5      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
            }
        }

        /* Call HAL exchange function */
        status = phhalHw_Exchange(
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	6858      	ldr	r0, [r3, #4]
 80180f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80180f6:	8979      	ldrh	r1, [r7, #10]
 80180f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180fa:	9301      	str	r3, [sp, #4]
 80180fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180fe:	9300      	str	r3, [sp, #0]
 8018100:	4613      	mov	r3, r2
 8018102:	687a      	ldr	r2, [r7, #4]
 8018104:	f7f7 fca4 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8018108:	4603      	mov	r3, r0
 801810a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            wOption,
            pTxBuffer,
            wTxLength,
            ppRxBuffer,
            pRxLength);
        statusBkUp = status;
 801810c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801810e:	847b      	strh	r3, [r7, #34]	@ 0x22

        /* Reset Exchange Option */
        wOption = PH_EXCHANGE_DEFAULT;
 8018110:	2300      	movs	r3, #0
 8018112:	817b      	strh	r3, [r7, #10]

        /* Reset transmission length */
        wTxLength = 0;
 8018114:	2300      	movs	r3, #0
 8018116:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        /* Status --> InvalidBlock mapping */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	7c9b      	ldrb	r3, [r3, #18]
 801811e:	2b01      	cmp	r3, #1
 8018120:	d11d      	bne.n	801815e <phpalI14443p4_Sw_IsoHandling+0x1da>
        {
            bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_EMVCO_IS_INVALID_BLOCK_STATUS(status);
 8018122:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018124:	b2db      	uxtb	r3, r3
 8018126:	2b01      	cmp	r3, #1
 8018128:	d013      	beq.n	8018152 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801812a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801812c:	b2db      	uxtb	r3, r3
 801812e:	2b02      	cmp	r3, #2
 8018130:	d00f      	beq.n	8018152 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8018132:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018134:	b2db      	uxtb	r3, r3
 8018136:	2b11      	cmp	r3, #17
 8018138:	d00b      	beq.n	8018152 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801813a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801813c:	b2db      	uxtb	r3, r3
 801813e:	2b05      	cmp	r3, #5
 8018140:	d007      	beq.n	8018152 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 8018142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018144:	b2db      	uxtb	r3, r3
 8018146:	2b03      	cmp	r3, #3
 8018148:	d003      	beq.n	8018152 <phpalI14443p4_Sw_IsoHandling+0x1ce>
 801814a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801814c:	b2db      	uxtb	r3, r3
 801814e:	2b06      	cmp	r3, #6
 8018150:	d101      	bne.n	8018156 <phpalI14443p4_Sw_IsoHandling+0x1d2>
 8018152:	2301      	movs	r3, #1
 8018154:	e000      	b.n	8018158 <phpalI14443p4_Sw_IsoHandling+0x1d4>
 8018156:	2300      	movs	r3, #0
 8018158:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 801815c:	e014      	b.n	8018188 <phpalI14443p4_Sw_IsoHandling+0x204>
        }
        else
        {
           bInvalidBlock = (uint8_t)PHPAL_I14443P4_SW_IS_INVALID_BLOCK_STATUS(status);
 801815e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018160:	b2db      	uxtb	r3, r3
 8018162:	2b01      	cmp	r3, #1
 8018164:	d00b      	beq.n	801817e <phpalI14443p4_Sw_IsoHandling+0x1fa>
 8018166:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018168:	b2db      	uxtb	r3, r3
 801816a:	2b02      	cmp	r3, #2
 801816c:	d007      	beq.n	801817e <phpalI14443p4_Sw_IsoHandling+0x1fa>
 801816e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018170:	b2db      	uxtb	r3, r3
 8018172:	2b05      	cmp	r3, #5
 8018174:	d003      	beq.n	801817e <phpalI14443p4_Sw_IsoHandling+0x1fa>
 8018176:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018178:	b2db      	uxtb	r3, r3
 801817a:	2b03      	cmp	r3, #3
 801817c:	d101      	bne.n	8018182 <phpalI14443p4_Sw_IsoHandling+0x1fe>
 801817e:	2301      	movs	r3, #1
 8018180:	e000      	b.n	8018184 <phpalI14443p4_Sw_IsoHandling+0x200>
 8018182:	2300      	movs	r3, #0
 8018184:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        if (0U == (bInvalidBlock))
 8018188:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801818c:	2b00      	cmp	r3, #0
 801818e:	d149      	bne.n	8018224 <phpalI14443p4_Sw_IsoHandling+0x2a0>
        {
            /* MIFARE compliancy: force protocol error on NAK */
            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8018190:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018192:	b2db      	uxtb	r3, r3
 8018194:	2b73      	cmp	r3, #115	@ 0x73
 8018196:	d113      	bne.n	80181c0 <phpalI14443p4_Sw_IsoHandling+0x23c>
            {
                *pRxLength = 0;
 8018198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801819a:	2200      	movs	r2, #0
 801819c:	801a      	strh	r2, [r3, #0]
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	2200      	movs	r2, #0
 80181a4:	2130      	movs	r1, #48	@ 0x30
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7f8 f80a 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80181ac:	4603      	mov	r3, r0
 80181ae:	833b      	strh	r3, [r7, #24]
 80181b0:	8b3b      	ldrh	r3, [r7, #24]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d001      	beq.n	80181ba <phpalI14443p4_Sw_IsoHandling+0x236>
 80181b6:	8b3b      	ldrh	r3, [r7, #24]
 80181b8:	e26f      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80181ba:	f240 6306 	movw	r3, #1542	@ 0x606
 80181be:	e26c      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
            }
            else
            {
                PH_CHECK_SUCCESS(status);
 80181c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d001      	beq.n	80181ca <phpalI14443p4_Sw_IsoHandling+0x246>
 80181c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80181c8:	e267      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>

                /* WTX Timeout - restore previous value */
                if (bWtxm > 0U)
 80181ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d028      	beq.n	8018224 <phpalI14443p4_Sw_IsoHandling+0x2a0>
                {
                    /* Restore previous state and timeout after */
                    if (0U == (bTimeoutInMs))
 80181d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d10d      	bne.n	80181f6 <phpalI14443p4_Sw_IsoHandling+0x272>
                    {
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimeoutPrev));
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	8a3a      	ldrh	r2, [r7, #16]
 80181e0:	210d      	movs	r1, #13
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7f7 ffec 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80181e8:	4603      	mov	r3, r0
 80181ea:	833b      	strh	r3, [r7, #24]
 80181ec:	8b3b      	ldrh	r3, [r7, #24]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d018      	beq.n	8018224 <phpalI14443p4_Sw_IsoHandling+0x2a0>
 80181f2:	8b3b      	ldrh	r3, [r7, #24]
 80181f4:	e251      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
                    }
                    else
                    {
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, wTimeoutPrev));
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	8a3a      	ldrh	r2, [r7, #16]
 80181fc:	210e      	movs	r1, #14
 80181fe:	4618      	mov	r0, r3
 8018200:	f7f7 ffde 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8018204:	4603      	mov	r3, r0
 8018206:	833b      	strh	r3, [r7, #24]
 8018208:	8b3b      	ldrh	r3, [r7, #24]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d00a      	beq.n	8018224 <phpalI14443p4_Sw_IsoHandling+0x2a0>
 801820e:	8b3b      	ldrh	r3, [r7, #24]
 8018210:	e243      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
 8018212:	bf00      	nop
 8018214:	004b8408 	.word	0x004b8408
 8018218:	004b93a8 	.word	0x004b93a8
 801821c:	004b9790 	.word	0x004b9790
 8018220:	10624dd3 	.word	0x10624dd3
                }
            }
        }

        /* Reset defaults */
        bWtxm = 0;
 8018224:	2300      	movs	r3, #0
 8018226:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        /* Emvco: case_id TA404_04, TA411_04, TB404_04, TB411_04 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, &wRxBufferStartPos));
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	685b      	ldr	r3, [r3, #4]
 801822e:	f107 0212 	add.w	r2, r7, #18
 8018232:	2130      	movs	r1, #48	@ 0x30
 8018234:	4618      	mov	r0, r3
 8018236:	f7f9 fc11 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801823a:	4603      	mov	r3, r0
 801823c:	833b      	strh	r3, [r7, #24]
 801823e:	8b3b      	ldrh	r3, [r7, #24]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d001      	beq.n	8018248 <phpalI14443p4_Sw_IsoHandling+0x2c4>
 8018244:	8b3b      	ldrh	r3, [r7, #24]
 8018246:	e228      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
        /* Check for FSD */
        if(((*pRxLength) - wRxBufferStartPos) > (bI14443p4_FsTable[pDataParams->bFsdi] - 2))
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	7b9b      	ldrb	r3, [r3, #14]
 801824c:	461a      	mov	r2, r3
 801824e:	4b9d      	ldr	r3, [pc, #628]	@ (80184c4 <phpalI14443p4_Sw_IsoHandling+0x540>)
 8018250:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018254:	1e5a      	subs	r2, r3, #1
 8018256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018258:	881b      	ldrh	r3, [r3, #0]
 801825a:	4619      	mov	r1, r3
 801825c:	8a7b      	ldrh	r3, [r7, #18]
 801825e:	1acb      	subs	r3, r1, r3
 8018260:	429a      	cmp	r2, r3
 8018262:	dc15      	bgt.n	8018290 <phpalI14443p4_Sw_IsoHandling+0x30c>
         {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	2200      	movs	r2, #0
 801826a:	2130      	movs	r1, #48	@ 0x30
 801826c:	4618      	mov	r0, r3
 801826e:	f7f7 ffa7 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8018272:	4603      	mov	r3, r0
 8018274:	833b      	strh	r3, [r7, #24]
 8018276:	8b3b      	ldrh	r3, [r7, #24]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d001      	beq.n	8018280 <phpalI14443p4_Sw_IsoHandling+0x2fc>
 801827c:	8b3b      	ldrh	r3, [r7, #24]
 801827e:	e20c      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8018280:	f240 6306 	movw	r3, #1542	@ 0x606
 8018284:	86fb      	strh	r3, [r7, #54]	@ 0x36
            *pRxLength = 0;
 8018286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018288:	2200      	movs	r2, #0
 801828a:	801a      	strh	r2, [r3, #0]
            return status;
 801828c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801828e:	e204      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
         }
        /* Do not enter if we received an invalid block */
        if (0U == (bInvalidBlock))
 8018290:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018294:	2b00      	cmp	r3, #0
 8018296:	f040 8138 	bne.w	801850a <phpalI14443p4_Sw_IsoHandling+0x586>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 801829a:	2301      	movs	r3, #1
 801829c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

            /* Map receive buffer pointer to current data */
            pResp = *ppRxBuffer + wRxBufferStartPos;
 80182a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	8a7a      	ldrh	r2, [r7, #18]
 80182a6:	4413      	add	r3, r2
 80182a8:	61fb      	str	r3, [r7, #28]
            wRespLen = *pRxLength - wRxBufferStartPos;
 80182aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182ac:	881a      	ldrh	r2, [r3, #0]
 80182ae:	8a7b      	ldrh	r3, [r7, #18]
 80182b0:	1ad3      	subs	r3, r2, r3
 80182b2:	837b      	strh	r3, [r7, #26]

            /* I-Block handling */
            if (0u != (PHPAL_I14443P4_SW_IS_I_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d15e      	bne.n	801837e <phpalI14443p4_Sw_IsoHandling+0x3fa>
            {
                /* Rule 2/10, ISO/IEC 14443-4:2008(E) */
                if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	7a1b      	ldrb	r3, [r3, #8]
 80182c4:	2b81      	cmp	r3, #129	@ 0x81
 80182c6:	d103      	bne.n	80182d0 <phpalI14443p4_Sw_IsoHandling+0x34c>
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 80182c8:	2301      	movs	r3, #1
 80182ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80182ce:	e104      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                }
                else
                {
                    /* Evaluate if NAD should be present */
                    /* 7.1.1.3 c), ISO/IEC 14443-4:2008(E), "During chaining the NAD shall only be transmitted in the first block of chain." */
                    if ((pDataParams->bNadEnabled > 0U) && (0U == ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_CHAINING_BIT))))
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	7adb      	ldrb	r3, [r3, #11]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d008      	beq.n	80182ea <phpalI14443p4_Sw_IsoHandling+0x366>
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	7a1b      	ldrb	r3, [r3, #8]
 80182dc:	b25b      	sxtb	r3, r3
 80182de:	2b00      	cmp	r3, #0
 80182e0:	db03      	blt.n	80182ea <phpalI14443p4_Sw_IsoHandling+0x366>
                    {
                        bCheckNad = 1;
 80182e2:	2301      	movs	r3, #1
 80182e4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80182e8:	e002      	b.n	80182f0 <phpalI14443p4_Sw_IsoHandling+0x36c>
                    }
                    else
                    {
                        bCheckNad = 0;
 80182ea:	2300      	movs	r3, #0
 80182ec:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
                    }

                    /* Check if I-Block is valid */
                    status = phpalI14443p4_Sw_IsValidIBlock(
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	7a58      	ldrb	r0, [r3, #9]
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	7a99      	ldrb	r1, [r3, #10]
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	7b1c      	ldrb	r4, [r3, #12]
 80182fc:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8018300:	8b7b      	ldrh	r3, [r7, #26]
 8018302:	9301      	str	r3, [sp, #4]
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	9300      	str	r3, [sp, #0]
 8018308:	4623      	mov	r3, r4
 801830a:	f000 f9cb 	bl	80186a4 <phpalI14443p4_Sw_IsValidIBlock>
 801830e:	4603      	mov	r3, r0
 8018310:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        pDataParams->bNad,
                        pResp,
                        wRespLen);

                    /* Blocknumber is equal, I-Block Rx mode is active */
                    if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (PHPAL_I14443P4_SW_IS_BLOCKNR_EQUAL(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 8018312:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018314:	b2db      	uxtb	r3, r3
 8018316:	2b00      	cmp	r3, #0
 8018318:	d12d      	bne.n	8018376 <phpalI14443p4_Sw_IsoHandling+0x3f2>
 801831a:	69fb      	ldr	r3, [r7, #28]
 801831c:	781b      	ldrb	r3, [r3, #0]
 801831e:	f003 0301 	and.w	r3, r3, #1
 8018322:	68fa      	ldr	r2, [r7, #12]
 8018324:	7c12      	ldrb	r2, [r2, #16]
 8018326:	4293      	cmp	r3, r2
 8018328:	d125      	bne.n	8018376 <phpalI14443p4_Sw_IsoHandling+0x3f2>
                    {
                        /* Switch from Tx-Mode to Rx-Mode */
                        if ((pDataParams->bStateNow & PHPAL_I14443P4_SW_STATE_MASK) == PHPAL_I14443P4_SW_STATE_I_BLOCK_TX)
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	7a1b      	ldrb	r3, [r3, #8]
 801832e:	f003 030f 	and.w	r3, r3, #15
 8018332:	2b01      	cmp	r3, #1
 8018334:	d102      	bne.n	801833c <phpalI14443p4_Sw_IsoHandling+0x3b8>
                        {
                            pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_RX;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2202      	movs	r2, #2
 801833a:	721a      	strb	r2, [r3, #8]
                        }

                        /* Rule B, ISO/IEC 14443-4:2008(E), toggle Blocknumber */
                        pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	7c1b      	ldrb	r3, [r3, #16]
 8018340:	f083 0301 	eor.w	r3, r3, #1
 8018344:	b2da      	uxtb	r2, r3
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	741a      	strb	r2, [r3, #16]

                        /* Set chaining bit if card is chaining */
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 801834a:	69fb      	ldr	r3, [r7, #28]
 801834c:	781b      	ldrb	r3, [r3, #0]
 801834e:	f003 0310 	and.w	r3, r3, #16
 8018352:	2b00      	cmp	r3, #0
 8018354:	d007      	beq.n	8018366 <phpalI14443p4_Sw_IsoHandling+0x3e2>
                        {
                            pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	7a1b      	ldrb	r3, [r3, #8]
 801835a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801835e:	b2da      	uxtb	r2, r3
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	721a      	strb	r2, [r3, #8]
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8018364:	e0b9      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Clear chaining bit otherwise */
                        else
                        {
                            pDataParams->bStateNow &= (uint8_t)~(uint8_t)PHPAL_I14443P4_SW_STATE_CHAINING_BIT;
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	7a1b      	ldrb	r3, [r3, #8]
 801836a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801836e:	b2da      	uxtb	r2, r3
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	721a      	strb	r2, [r3, #8]
                        if (0u != (PHPAL_I14443P4_SW_IS_CHAINING(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 8018374:	e0b1      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                    /* We received an invalid block */
                    else
                    {
                        /* Protocol violation */
                        bInvalidBlock = 1;
 8018376:	2301      	movs	r3, #1
 8018378:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 801837c:	e0ad      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                }
            }
            /* R(ACK) handling */
            else if ((PHPAL_I14443P4_SW_IS_R_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U) && (PHPAL_I14443P4_SW_IS_ACK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018386:	2b80      	cmp	r3, #128	@ 0x80
 8018388:	d144      	bne.n	8018414 <phpalI14443p4_Sw_IsoHandling+0x490>
 801838a:	69fb      	ldr	r3, [r7, #28]
 801838c:	781b      	ldrb	r3, [r3, #0]
 801838e:	f003 0310 	and.w	r3, r3, #16
 8018392:	2b00      	cmp	r3, #0
 8018394:	d13e      	bne.n	8018414 <phpalI14443p4_Sw_IsoHandling+0x490>
            {
                /* Check if R-Block is valid */
                status = phpalI14443p4_Sw_IsValidRBlock(
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	7a58      	ldrb	r0, [r3, #9]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	7a99      	ldrb	r1, [r3, #10]
 801839e:	8b7b      	ldrh	r3, [r7, #26]
 80183a0:	69fa      	ldr	r2, [r7, #28]
 80183a2:	f000 f9ee 	bl	8018782 <phpalI14443p4_Sw_IsValidRBlock>
 80183a6:	4603      	mov	r3, r0
 80183a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    pDataParams->bCid,
                    pResp,
                    wRespLen);

                /* R-Block invalid or not in transmission mode */
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80183aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80183ac:	b2db      	uxtb	r3, r3
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d003      	beq.n	80183ba <phpalI14443p4_Sw_IsoHandling+0x436>
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 80183b2:	2301      	movs	r3, #1
 80183b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80183b8:	e08f      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                }
                else
                {
                    /* Blocknumber is equal */
                    if (0u != (PHPAL_I14443P4_SW_IS_BLOCKNR_EQUAL(pResp[PHPAL_I14443P4_SW_PCB_POS])))
 80183ba:	69fb      	ldr	r3, [r7, #28]
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	f003 0301 	and.w	r3, r3, #1
 80183c2:	68fa      	ldr	r2, [r7, #12]
 80183c4:	7c12      	ldrb	r2, [r2, #16]
 80183c6:	4293      	cmp	r3, r2
 80183c8:	d10f      	bne.n	80183ea <phpalI14443p4_Sw_IsoHandling+0x466>
                    {
                        /* Continue TX chaining */
                        if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_TX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	7a1b      	ldrb	r3, [r3, #8]
 80183ce:	2b81      	cmp	r3, #129	@ 0x81
 80183d0:	d107      	bne.n	80183e2 <phpalI14443p4_Sw_IsoHandling+0x45e>
                        {
                            /* Rule B, ISO/IEC 14443-4:2008(E), toggle Blocknumber */
                            pDataParams->bPcbBlockNum ^= PHPAL_I14443P4_SW_PCB_BLOCKNR;
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	7c1b      	ldrb	r3, [r3, #16]
 80183d6:	f083 0301 	eor.w	r3, r3, #1
 80183da:	b2da      	uxtb	r2, r3
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	741a      	strb	r2, [r3, #16]
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80183e0:	e07b      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Not in chaining mode */
                        else
                        {
                            /* Protocol violation */
                            bInvalidBlock = 1;
 80183e2:	2301      	movs	r3, #1
 80183e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80183e8:	e077      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                    }
                    /* Rule 6, ISO/IEC 14443-4:2008(E), unequal block number */
                    else
                    {
                        /* Limit this behaviour with bMaxRetryCount, bRetry count is set by the caller in this case */
                        if ((bRetryCount > pDataParams->bMaxRetryCount) || (pDataParams->bMaxRetryCount == 0U))
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	7c5b      	ldrb	r3, [r3, #17]
 80183ee:	7a7a      	ldrb	r2, [r7, #9]
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d803      	bhi.n	80183fc <phpalI14443p4_Sw_IsoHandling+0x478>
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	7c5b      	ldrb	r3, [r3, #17]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d103      	bne.n	8018404 <phpalI14443p4_Sw_IsoHandling+0x480>
                        {
                            /* Protocol violation */
                            bInvalidBlock = 1;
 80183fc:	2301      	movs	r3, #1
 80183fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8018402:	e06a      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                        /* Send last I-Block again */
                        else
                        {
                            pDataParams->bStateNow |= PHPAL_I14443P4_SW_STATE_RETRANSMIT_BIT;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	7a1b      	ldrb	r3, [r3, #8]
 8018408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801840c:	b2da      	uxtb	r2, r3
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	721a      	strb	r2, [r3, #8]
                if ((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8018412:	e062      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                        }
                    }
                }
            }
            /* S(WTX) handling */
            else if ((PHPAL_I14443P4_SW_IS_S_BLOCK(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U) && (PHPAL_I14443P4_SW_IS_WTX(pResp[PHPAL_I14443P4_SW_PCB_POS]) > 0U))
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801841c:	2bc0      	cmp	r3, #192	@ 0xc0
 801841e:	d157      	bne.n	80184d0 <phpalI14443p4_Sw_IsoHandling+0x54c>
 8018420:	69fb      	ldr	r3, [r7, #28]
 8018422:	781b      	ldrb	r3, [r3, #0]
 8018424:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8018428:	2b30      	cmp	r3, #48	@ 0x30
 801842a:	d151      	bne.n	80184d0 <phpalI14443p4_Sw_IsoHandling+0x54c>
            {
                /* Check if S-Block is valid */
                status = phpalI14443p4_Sw_IsValidSBlock(
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	7a58      	ldrb	r0, [r3, #9]
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	7a99      	ldrb	r1, [r3, #10]
 8018434:	8b7b      	ldrh	r3, [r7, #26]
 8018436:	69fa      	ldr	r2, [r7, #28]
 8018438:	f000 f9ec 	bl	8018814 <phpalI14443p4_Sw_IsValidSBlock>
 801843c:	4603      	mov	r3, r0
 801843e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    pDataParams->bCid,
                    pResp,
                    wRespLen);

                /* Rule 3, ISO/IEC 14443-4:2008(E), S(WTX) handling */
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8018440:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018442:	b2db      	uxtb	r3, r3
 8018444:	2b00      	cmp	r3, #0
 8018446:	d13f      	bne.n	80184c8 <phpalI14443p4_Sw_IsoHandling+0x544>
                {
                    /* Retrieve WTXM */
                    bWtxm = pResp[wRespLen-1u];
 8018448:	8b7b      	ldrh	r3, [r7, #26]
 801844a:	3b01      	subs	r3, #1
 801844c:	69fa      	ldr	r2, [r7, #28]
 801844e:	4413      	add	r3, r2
 8018450:	781b      	ldrb	r3, [r3, #0]
 8018452:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* EMV 2.5 */
                    if ((0U != ((bWtxm & PHPAL_I14443P4_SW_S_BLOCK_INF_PLI_MASK))) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8018456:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801845a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801845e:	2b00      	cmp	r3, #0
 8018460:	d007      	beq.n	8018472 <phpalI14443p4_Sw_IsoHandling+0x4ee>
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	7c9b      	ldrb	r3, [r3, #18]
 8018466:	2b01      	cmp	r3, #1
 8018468:	d103      	bne.n	8018472 <phpalI14443p4_Sw_IsoHandling+0x4ee>
                    {
                        status =  PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 801846a:	f240 6306 	movw	r3, #1542	@ 0x606
 801846e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        break;
 8018470:	e104      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
                    }

                    /* Ignore and clear the Power Level Indication */
                    bWtxm &= 0x3FU;
 8018472:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801847a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* Treat invalid WTXM value as protocol error, do not perform error correction. */
                    if ((bWtxm == 0U) || (bWtxm > 59U))
 801847e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018482:	2b00      	cmp	r3, #0
 8018484:	d003      	beq.n	801848e <phpalI14443p4_Sw_IsoHandling+0x50a>
 8018486:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801848a:	2b3b      	cmp	r3, #59	@ 0x3b
 801848c:	d903      	bls.n	8018496 <phpalI14443p4_Sw_IsoHandling+0x512>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 801848e:	f240 6306 	movw	r3, #1542	@ 0x606
 8018492:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        break;
 8018494:	e0f2      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
                    }

                    /* Generate S(WTX) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildSBlock(
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	7a58      	ldrb	r0, [r3, #9]
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	7a99      	ldrb	r1, [r3, #10]
 801849e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80184a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80184a6:	9301      	str	r3, [sp, #4]
 80184a8:	f107 0314 	add.w	r3, r7, #20
 80184ac:	9300      	str	r3, [sp, #0]
 80184ae:	4613      	mov	r3, r2
 80184b0:	2201      	movs	r2, #1
 80184b2:	f000 fa90 	bl	80189d6 <phpalI14443p4_Sw_BuildSBlock>
 80184b6:	4603      	mov	r3, r0
 80184b8:	833b      	strh	r3, [r7, #24]
 80184ba:	8b3b      	ldrh	r3, [r7, #24]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d00b      	beq.n	80184d8 <phpalI14443p4_Sw_IsoHandling+0x554>
 80184c0:	8b3b      	ldrh	r3, [r7, #24]
 80184c2:	e0ea      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
 80184c4:	08026de0 	.word	0x08026de0
                }
                /* We received an invalid block */
                else
                {
                    /* Protocol violation */
                    bInvalidBlock = 1;
 80184c8:	2301      	movs	r3, #1
 80184ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80184ce:	e003      	b.n	80184d8 <phpalI14443p4_Sw_IsoHandling+0x554>
            }
            /* We received an invalid block */
            else
            {
                /* Protocol violation */
                bInvalidBlock = 1;
 80184d0:	2301      	movs	r3, #1
 80184d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80184d6:	e000      	b.n	80184da <phpalI14443p4_Sw_IsoHandling+0x556>
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80184d8:	bf00      	nop
            }

            /* Protocol violation */
            if (0U != (bInvalidBlock))
 80184da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d010      	beq.n	8018504 <phpalI14443p4_Sw_IsoHandling+0x580>
            {
                /* Emvco:  case_id TA404_XY and TA401_15 */
                /* bMaxRetryCount = 0 suppresses the S(DESELECT) behaviour */
                if((pDataParams->bMaxRetryCount > 0U) && (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	7c5b      	ldrb	r3, [r3, #17]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d008      	beq.n	80184fc <phpalI14443p4_Sw_IsoHandling+0x578>
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	7c9b      	ldrb	r3, [r3, #18]
 80184ee:	2b01      	cmp	r3, #1
 80184f0:	d004      	beq.n	80184fc <phpalI14443p4_Sw_IsoHandling+0x578>
                {
                    /* send S(DESELECT) (ignore return code) */
                    statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 80184f2:	68f8      	ldr	r0, [r7, #12]
 80184f4:	f7ff f921 	bl	801773a <phpalI14443p4_Sw_Deselect>
 80184f8:	4603      	mov	r3, r0
 80184fa:	833b      	strh	r3, [r7, #24]
                }

                /* bail out with protocol error */
                status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80184fc:	f240 6306 	movw	r3, #1542	@ 0x606
 8018500:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8018502:	e0bb      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
            }
            /* Reset retry counter on no error */
            else
            {
                bRetryCount = 0;
 8018504:	2300      	movs	r3, #0
 8018506:	727b      	strb	r3, [r7, #9]
 8018508:	e0a8      	b.n	801865c <phpalI14443p4_Sw_IsoHandling+0x6d8>
             * and For EMVCo: TA401_15 Article(10.3.4.4)
             * Says, After 2nd failed retry of I-block exchange. Send NAk
             */

            /* This is added to restrict retry count less than 1 for ISO mode */
            if( (bRetryCount >= pDataParams->bMaxRetryCount) && (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	7c5b      	ldrb	r3, [r3, #17]
 801850e:	7a7a      	ldrb	r2, [r7, #9]
 8018510:	429a      	cmp	r2, r3
 8018512:	d31f      	bcc.n	8018554 <phpalI14443p4_Sw_IsoHandling+0x5d0>
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	7c9b      	ldrb	r3, [r3, #18]
 8018518:	2b03      	cmp	r3, #3
 801851a:	d11b      	bne.n	8018554 <phpalI14443p4_Sw_IsoHandling+0x5d0>
            {
                if (pDataParams->bMaxRetryCount > 0U)
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	7c5b      	ldrb	r3, [r3, #17]
 8018520:	2b00      	cmp	r3, #0
 8018522:	f000 80a4 	beq.w	801866e <phpalI14443p4_Sw_IsoHandling+0x6ea>
                {
                    /* backup retry count */
                    bRetryCount = pDataParams->bMaxRetryCount;
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	7c5b      	ldrb	r3, [r3, #17]
 801852a:	727b      	strb	r3, [r7, #9]

                    /* set retry count to zero to send only one S(DESELECT) */
                    pDataParams->bMaxRetryCount = 0;
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	2200      	movs	r2, #0
 8018530:	745a      	strb	r2, [r3, #17]

                    /* send deselect (ignore return code) */
                    statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8018532:	68f8      	ldr	r0, [r7, #12]
 8018534:	f7ff f901 	bl	801773a <phpalI14443p4_Sw_Deselect>
 8018538:	4603      	mov	r3, r0
 801853a:	833b      	strh	r3, [r7, #24]

                    /* restore retry count setting */
                    pDataParams->bMaxRetryCount = bRetryCount;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	7a7a      	ldrb	r2, [r7, #9]
 8018540:	745a      	strb	r2, [r3, #17]

                    /* Return ERR_RECOVERY_FAILED if some response has been received before */
                    if (0U != (bResponseReceived))
 8018542:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018546:	2b00      	cmp	r3, #0
 8018548:	f000 8091 	beq.w	801866e <phpalI14443p4_Sw_IsoHandling+0x6ea>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 801854c:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8018550:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    }
                }
                break;
 8018552:	e08c      	b.n	801866e <phpalI14443p4_Sw_IsoHandling+0x6ea>
            }

            else if (bRetryCount <= pDataParams->bMaxRetryCount)
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	7c5b      	ldrb	r3, [r3, #17]
 8018558:	7a7a      	ldrb	r2, [r7, #9]
 801855a:	429a      	cmp	r2, r3
 801855c:	d85d      	bhi.n	801861a <phpalI14443p4_Sw_IsoHandling+0x696>
            {
                /* Rule 5, ISO/IEC 14443-4:2008(E) */
                if (pDataParams->bStateNow == (PHPAL_I14443P4_SW_STATE_I_BLOCK_RX | PHPAL_I14443P4_SW_STATE_CHAINING_BIT))
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	7a1b      	ldrb	r3, [r3, #8]
 8018562:	2b82      	cmp	r3, #130	@ 0x82
 8018564:	d12c      	bne.n	80185c0 <phpalI14443p4_Sw_IsoHandling+0x63c>
                {
                    /* Generate R(ACK) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	7a58      	ldrb	r0, [r3, #9]
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	7a99      	ldrb	r1, [r3, #10]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	7c1a      	ldrb	r2, [r3, #16]
 8018572:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8018576:	9301      	str	r3, [sp, #4]
 8018578:	f107 0314 	add.w	r3, r7, #20
 801857c:	9300      	str	r3, [sp, #0]
 801857e:	2301      	movs	r3, #1
 8018580:	f000 f9ec 	bl	801895c <phpalI14443p4_Sw_BuildRBlock>
 8018584:	4603      	mov	r3, r0
 8018586:	833b      	strh	r3, [r7, #24]
 8018588:	8b3b      	ldrh	r3, [r7, #24]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d001      	beq.n	8018592 <phpalI14443p4_Sw_IsoHandling+0x60e>
 801858e:	8b3b      	ldrh	r3, [r7, #24]
 8018590:	e083      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
                        pDataParams->bPcbBlockNum,
                        1,
                        bIsoFrame,
                        &wTxLength));

                    bNAKCount = 0;
 8018592:	2300      	movs	r3, #0
 8018594:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                    /* Emvco: case_id TA410 */
                    if(bACKCount >= pDataParams->bMaxRetryCount)
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	7c5b      	ldrb	r3, [r3, #17]
 801859c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d266      	bcs.n	8018672 <phpalI14443p4_Sw_IsoHandling+0x6ee>
                    {
                        break;
                    }

                    if((statusBkUp & PH_ERR_MASK) != PH_ERR_SUCCESS )
 80185a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80185a6:	b2db      	uxtb	r3, r3
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d005      	beq.n	80185b8 <phpalI14443p4_Sw_IsoHandling+0x634>
                    {
                        bACKCount++;
 80185ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80185b0:	3301      	adds	r3, #1
 80185b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80185b6:	e04e      	b.n	8018656 <phpalI14443p4_Sw_IsoHandling+0x6d2>
                    }
                    else
                    {
                        bACKCount = 0;
 80185b8:	2300      	movs	r3, #0
 80185ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80185be:	e04a      	b.n	8018656 <phpalI14443p4_Sw_IsoHandling+0x6d2>
                }
                /* Rule 4, ISO/IEC 14443-4:2008(E) */
                else
                {
                    /* Generate R(NAK) frame */
                    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4_Sw_BuildRBlock(
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	7a58      	ldrb	r0, [r3, #9]
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	7a99      	ldrb	r1, [r3, #10]
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	7c1a      	ldrb	r2, [r3, #16]
 80185cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80185d0:	9301      	str	r3, [sp, #4]
 80185d2:	f107 0314 	add.w	r3, r7, #20
 80185d6:	9300      	str	r3, [sp, #0]
 80185d8:	2300      	movs	r3, #0
 80185da:	f000 f9bf 	bl	801895c <phpalI14443p4_Sw_BuildRBlock>
 80185de:	4603      	mov	r3, r0
 80185e0:	833b      	strh	r3, [r7, #24]
 80185e2:	8b3b      	ldrh	r3, [r7, #24]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d001      	beq.n	80185ec <phpalI14443p4_Sw_IsoHandling+0x668>
 80185e8:	8b3b      	ldrh	r3, [r7, #24]
 80185ea:	e056      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>
                        pDataParams->bCid,
                        pDataParams->bPcbBlockNum,
                        0,
                        bIsoFrame,
                        &wTxLength));
                    bACKCount = 0;
 80185ec:	2300      	movs	r3, #0
 80185ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                    /* Emvco: case_id TA402 TA403 */
                    if(bNAKCount >= pDataParams->bMaxRetryCount)
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	7c5b      	ldrb	r3, [r3, #17]
 80185f6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80185fa:	429a      	cmp	r2, r3
 80185fc:	d23b      	bcs.n	8018676 <phpalI14443p4_Sw_IsoHandling+0x6f2>
                    {
                        break;
                    }
                    /* Emvco: case_id: TA415_X */
                    if((statusBkUp & PH_ERR_MASK) != PH_ERR_SUCCESS )
 80185fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018600:	b2db      	uxtb	r3, r3
 8018602:	2b00      	cmp	r3, #0
 8018604:	d005      	beq.n	8018612 <phpalI14443p4_Sw_IsoHandling+0x68e>
                    {
                        bNAKCount++;
 8018606:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801860a:	3301      	adds	r3, #1
 801860c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8018610:	e021      	b.n	8018656 <phpalI14443p4_Sw_IsoHandling+0x6d2>
                    }
                    else
                    {
                        bNAKCount = 0;
 8018612:	2300      	movs	r3, #0
 8018614:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8018618:	e01d      	b.n	8018656 <phpalI14443p4_Sw_IsoHandling+0x6d2>
            }
            /* Bail out if the max. retry count is reached */
            else
            {
                /* Deselect card if behaviour is enabled */
                if (pDataParams->bMaxRetryCount > 0U)
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	7c5b      	ldrb	r3, [r3, #17]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d02b      	beq.n	801867a <phpalI14443p4_Sw_IsoHandling+0x6f6>
                {
                    /* backup retry count */
                    bRetryCount = pDataParams->bMaxRetryCount;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	7c5b      	ldrb	r3, [r3, #17]
 8018626:	727b      	strb	r3, [r7, #9]

                    /* set retry count to zero to send only one S(DESELECT) */
                    pDataParams->bMaxRetryCount = 0;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	2200      	movs	r2, #0
 801862c:	745a      	strb	r2, [r3, #17]

                    /* Emvco Doesnot expect DeSelect Command*/
                    if(pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	7c9b      	ldrb	r3, [r3, #18]
 8018632:	2b01      	cmp	r3, #1
 8018634:	d004      	beq.n	8018640 <phpalI14443p4_Sw_IsoHandling+0x6bc>
                    {
                        /* send deselect (ignore return code) */
                        statusTmp = phpalI14443p4_Sw_Deselect(pDataParams);
 8018636:	68f8      	ldr	r0, [r7, #12]
 8018638:	f7ff f87f 	bl	801773a <phpalI14443p4_Sw_Deselect>
 801863c:	4603      	mov	r3, r0
 801863e:	833b      	strh	r3, [r7, #24]
                    }
                    /* restore retry count setting */
                    pDataParams->bMaxRetryCount = bRetryCount;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	7a7a      	ldrb	r2, [r7, #9]
 8018644:	745a      	strb	r2, [r3, #17]

                    /* Return ERR_RECOVERY_FAILED if some response has been received before */
                    if (0U != (bResponseReceived)) {
 8018646:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801864a:	2b00      	cmp	r3, #0
 801864c:	d015      	beq.n	801867a <phpalI14443p4_Sw_IsoHandling+0x6f6>
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I14443P4_ERR_RECOVERY_FAILED, PH_COMP_PAL_ISO14443P4);
 801864e:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8018652:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    }
                }
                break;
 8018654:	e011      	b.n	801867a <phpalI14443p4_Sw_IsoHandling+0x6f6>
            }

            /* Increment retry count */
            ++bRetryCount;
 8018656:	7a7b      	ldrb	r3, [r7, #9]
 8018658:	3301      	adds	r3, #1
 801865a:	727b      	strb	r3, [r7, #9]
        }

        /* Map TxBuffer to ISO Frame buffer for next loop */
        pTxBuffer = bIsoFrame;
 801865c:	f107 0314 	add.w	r3, r7, #20
 8018660:	607b      	str	r3, [r7, #4]
    }
    /* Loop as long as we generate transmissions */
    while (0U != wTxLength);
 8018662:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018666:	2b00      	cmp	r3, #0
 8018668:	f47f acbb 	bne.w	8017fe2 <phpalI14443p4_Sw_IsoHandling+0x5e>
 801866c:	e006      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
                break;
 801866e:	bf00      	nop
 8018670:	e004      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
                        break;
 8018672:	bf00      	nop
 8018674:	e002      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
                        break;
 8018676:	bf00      	nop
 8018678:	e000      	b.n	801867c <phpalI14443p4_Sw_IsoHandling+0x6f8>
                break;
 801867a:	bf00      	nop

    /* Reset RxBuffer Start Position */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	2200      	movs	r2, #0
 8018682:	2130      	movs	r1, #48	@ 0x30
 8018684:	4618      	mov	r0, r3
 8018686:	f7f7 fd9b 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801868a:	4603      	mov	r3, r0
 801868c:	833b      	strh	r3, [r7, #24]
 801868e:	8b3b      	ldrh	r3, [r7, #24]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d001      	beq.n	8018698 <phpalI14443p4_Sw_IsoHandling+0x714>
 8018694:	8b3b      	ldrh	r3, [r7, #24]
 8018696:	e000      	b.n	801869a <phpalI14443p4_Sw_IsoHandling+0x716>

    return status;
 8018698:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 801869a:	4618      	mov	r0, r3
 801869c:	373c      	adds	r7, #60	@ 0x3c
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd90      	pop	{r4, r7, pc}
 80186a2:	bf00      	nop

080186a4 <phpalI14443p4_Sw_IsValidIBlock>:
    uint8_t bCheckNad,
    uint8_t bNad,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 80186a4:	b490      	push	{r4, r7}
 80186a6:	b084      	sub	sp, #16
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	4604      	mov	r4, r0
 80186ac:	4608      	mov	r0, r1
 80186ae:	4611      	mov	r1, r2
 80186b0:	461a      	mov	r2, r3
 80186b2:	4623      	mov	r3, r4
 80186b4:	71fb      	strb	r3, [r7, #7]
 80186b6:	4603      	mov	r3, r0
 80186b8:	71bb      	strb	r3, [r7, #6]
 80186ba:	460b      	mov	r3, r1
 80186bc:	717b      	strb	r3, [r7, #5]
 80186be:	4613      	mov	r3, r2
 80186c0:	713b      	strb	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 80186c2:	2300      	movs	r3, #0
 80186c4:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_I_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_I_BLOCK_RFU_BITS)
 80186c6:	69bb      	ldr	r3, [r7, #24]
 80186c8:	781b      	ldrb	r3, [r3, #0]
 80186ca:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80186ce:	2b02      	cmp	r3, #2
 80186d0:	d002      	beq.n	80186d8 <phpalI14443p4_Sw_IsValidIBlock+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80186d2:	f240 6306 	movw	r3, #1542	@ 0x606
 80186d6:	e04f      	b.n	8018778 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 80186d8:	2301      	movs	r3, #1
 80186da:	81fb      	strh	r3, [r7, #14]

    /* Enable CID checking if neccessary */
    if (0U != (bCheckCid))
 80186dc:	79fb      	ldrb	r3, [r7, #7]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d002      	beq.n	80186e8 <phpalI14443p4_Sw_IsValidIBlock+0x44>
    {
        wExpRxLength++;
 80186e2:	89fb      	ldrh	r3, [r7, #14]
 80186e4:	3301      	adds	r3, #1
 80186e6:	81fb      	strh	r3, [r7, #14]
    }

    /* Enable NAD checking if neccessary */
    if (0U != (bCheckNad))
 80186e8:	797b      	ldrb	r3, [r7, #5]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d002      	beq.n	80186f4 <phpalI14443p4_Sw_IsValidIBlock+0x50>
    {
        wExpRxLength++;
 80186ee:	89fb      	ldrh	r3, [r7, #14]
 80186f0:	3301      	adds	r3, #1
 80186f2:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the minimum frame length */
    if (wRxLength < wExpRxLength)
 80186f4:	8bba      	ldrh	r2, [r7, #28]
 80186f6:	89fb      	ldrh	r3, [r7, #14]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d202      	bcs.n	8018702 <phpalI14443p4_Sw_IsValidIBlock+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80186fc:	f240 6306 	movw	r3, #1542	@ 0x606
 8018700:	e03a      	b.n	8018778 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* CID presence check */
    if ((0u != bCheckCid) &&
 8018702:	79fb      	ldrb	r3, [r7, #7]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d00d      	beq.n	8018724 <phpalI14443p4_Sw_IsValidIBlock+0x80>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING) > 0U) &&
 8018708:	69bb      	ldr	r3, [r7, #24]
 801870a:	781b      	ldrb	r3, [r3, #0]
 801870c:	f003 0308 	and.w	r3, r3, #8
    if ((0u != bCheckCid) &&
 8018710:	2b00      	cmp	r3, #0
 8018712:	d007      	beq.n	8018724 <phpalI14443p4_Sw_IsValidIBlock+0x80>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid)
 8018714:	69bb      	ldr	r3, [r7, #24]
 8018716:	3301      	adds	r3, #1
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	f003 020f 	and.w	r2, r3, #15
 801871e:	79bb      	ldrb	r3, [r7, #6]
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING) > 0U) &&
 8018720:	429a      	cmp	r2, r3
 8018722:	d00b      	beq.n	801873c <phpalI14443p4_Sw_IsValidIBlock+0x98>
        )
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8018724:	79fb      	ldrb	r3, [r7, #7]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d105      	bne.n	8018736 <phpalI14443p4_Sw_IsValidIBlock+0x92>
 801872a:	69bb      	ldr	r3, [r7, #24]
 801872c:	781b      	ldrb	r3, [r3, #0]
 801872e:	f003 0308 	and.w	r3, r3, #8
 8018732:	2b00      	cmp	r3, #0
 8018734:	d002      	beq.n	801873c <phpalI14443p4_Sw_IsValidIBlock+0x98>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8018736:	f240 6306 	movw	r3, #1542	@ 0x606
 801873a:	e01d      	b.n	8018778 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    /* NAD presence check */
    if ((0u != bCheckNad) &&
 801873c:	797b      	ldrb	r3, [r7, #5]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d00d      	beq.n	801875e <phpalI14443p4_Sw_IsValidIBlock+0xba>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING)) &&
 8018742:	69bb      	ldr	r3, [r7, #24]
 8018744:	781b      	ldrb	r3, [r3, #0]
 8018746:	f003 0304 	and.w	r3, r3, #4
    if ((0u != bCheckNad) &&
 801874a:	2b00      	cmp	r3, #0
 801874c:	d007      	beq.n	801875e <phpalI14443p4_Sw_IsValidIBlock+0xba>
        (pRxBuffer[wExpRxLength-1u] == bNad)
 801874e:	89fb      	ldrh	r3, [r7, #14]
 8018750:	3b01      	subs	r3, #1
 8018752:	69ba      	ldr	r2, [r7, #24]
 8018754:	4413      	add	r3, r2
 8018756:	781b      	ldrb	r3, [r3, #0]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING)) &&
 8018758:	793a      	ldrb	r2, [r7, #4]
 801875a:	429a      	cmp	r2, r3
 801875c:	d00b      	beq.n	8018776 <phpalI14443p4_Sw_IsValidIBlock+0xd2>
        )
    {
        /* CHECK SUCCEEDED */
    }
    /* NAD absence check */
    else if ((bCheckNad == 0U) && ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING) == 0U))
 801875e:	797b      	ldrb	r3, [r7, #5]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d105      	bne.n	8018770 <phpalI14443p4_Sw_IsValidIBlock+0xcc>
 8018764:	69bb      	ldr	r3, [r7, #24]
 8018766:	781b      	ldrb	r3, [r3, #0]
 8018768:	f003 0304 	and.w	r3, r3, #4
 801876c:	2b00      	cmp	r3, #0
 801876e:	d002      	beq.n	8018776 <phpalI14443p4_Sw_IsValidIBlock+0xd2>
        /* CHECK SUCCEEDED */
    }
    /* NAD protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8018770:	f240 6306 	movw	r3, #1542	@ 0x606
 8018774:	e000      	b.n	8018778 <phpalI14443p4_Sw_IsValidIBlock+0xd4>
    }

    return PH_ERR_SUCCESS;
 8018776:	2300      	movs	r3, #0
}
 8018778:	4618      	mov	r0, r3
 801877a:	3710      	adds	r7, #16
 801877c:	46bd      	mov	sp, r7
 801877e:	bc90      	pop	{r4, r7}
 8018780:	4770      	bx	lr

08018782 <phpalI14443p4_Sw_IsValidRBlock>:
    uint8_t bCheckCid,
    uint8_t bCid,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8018782:	b480      	push	{r7}
 8018784:	b085      	sub	sp, #20
 8018786:	af00      	add	r7, sp, #0
 8018788:	603a      	str	r2, [r7, #0]
 801878a:	461a      	mov	r2, r3
 801878c:	4603      	mov	r3, r0
 801878e:	71fb      	strb	r3, [r7, #7]
 8018790:	460b      	mov	r3, r1
 8018792:	71bb      	strb	r3, [r7, #6]
 8018794:	4613      	mov	r3, r2
 8018796:	80bb      	strh	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 8018798:	2300      	movs	r3, #0
 801879a:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_R_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_R_BLOCK_RFU_BITS)
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	f003 0326 	and.w	r3, r3, #38	@ 0x26
 80187a4:	2b22      	cmp	r3, #34	@ 0x22
 80187a6:	d002      	beq.n	80187ae <phpalI14443p4_Sw_IsValidRBlock+0x2c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80187a8:	f240 6306 	movw	r3, #1542	@ 0x606
 80187ac:	e02c      	b.n	8018808 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 80187ae:	2301      	movs	r3, #1
 80187b0:	81fb      	strh	r3, [r7, #14]

    /* If CID is enabled, we always expect it */
    if (0U != (bCheckCid))
 80187b2:	79fb      	ldrb	r3, [r7, #7]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d002      	beq.n	80187be <phpalI14443p4_Sw_IsValidRBlock+0x3c>
    {
        wExpRxLength++;
 80187b8:	89fb      	ldrh	r3, [r7, #14]
 80187ba:	3301      	adds	r3, #1
 80187bc:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the exact frame length */
    if (wRxLength != wExpRxLength)
 80187be:	88ba      	ldrh	r2, [r7, #4]
 80187c0:	89fb      	ldrh	r3, [r7, #14]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d002      	beq.n	80187cc <phpalI14443p4_Sw_IsValidRBlock+0x4a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80187c6:	f240 6306 	movw	r3, #1542	@ 0x606
 80187ca:	e01d      	b.n	8018808 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    /* CID presence check */
    if ((0U != bCheckCid) &&
 80187cc:	79fb      	ldrb	r3, [r7, #7]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d00d      	beq.n	80187ee <phpalI14443p4_Sw_IsValidRBlock+0x6c>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 80187d2:	683b      	ldr	r3, [r7, #0]
 80187d4:	781b      	ldrb	r3, [r3, #0]
 80187d6:	f003 0308 	and.w	r3, r3, #8
    if ((0U != bCheckCid) &&
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d007      	beq.n	80187ee <phpalI14443p4_Sw_IsValidRBlock+0x6c>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid))
 80187de:	683b      	ldr	r3, [r7, #0]
 80187e0:	3301      	adds	r3, #1
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	f003 020f 	and.w	r2, r3, #15
 80187e8:	79bb      	ldrb	r3, [r7, #6]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 80187ea:	429a      	cmp	r2, r3
 80187ec:	d00b      	beq.n	8018806 <phpalI14443p4_Sw_IsValidRBlock+0x84>
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 80187ee:	79fb      	ldrb	r3, [r7, #7]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d105      	bne.n	8018800 <phpalI14443p4_Sw_IsValidRBlock+0x7e>
 80187f4:	683b      	ldr	r3, [r7, #0]
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	f003 0308 	and.w	r3, r3, #8
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d002      	beq.n	8018806 <phpalI14443p4_Sw_IsValidRBlock+0x84>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 8018800:	f240 6306 	movw	r3, #1542	@ 0x606
 8018804:	e000      	b.n	8018808 <phpalI14443p4_Sw_IsValidRBlock+0x86>
    }

    return PH_ERR_SUCCESS;
 8018806:	2300      	movs	r3, #0
}
 8018808:	4618      	mov	r0, r3
 801880a:	3714      	adds	r7, #20
 801880c:	46bd      	mov	sp, r7
 801880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018812:	4770      	bx	lr

08018814 <phpalI14443p4_Sw_IsValidSBlock>:
    uint8_t bCheckCid,
    uint8_t bCid,
    uint8_t * pRxBuffer,
    uint16_t wRxLength
    )
{
 8018814:	b480      	push	{r7}
 8018816:	b085      	sub	sp, #20
 8018818:	af00      	add	r7, sp, #0
 801881a:	603a      	str	r2, [r7, #0]
 801881c:	461a      	mov	r2, r3
 801881e:	4603      	mov	r3, r0
 8018820:	71fb      	strb	r3, [r7, #7]
 8018822:	460b      	mov	r3, r1
 8018824:	71bb      	strb	r3, [r7, #6]
 8018826:	4613      	mov	r3, r2
 8018828:	80bb      	strh	r3, [r7, #4]
    uint16_t PH_MEMLOC_REM wExpRxLength = 0;
 801882a:	2300      	movs	r3, #0
 801882c:	81fb      	strh	r3, [r7, #14]

    /* Check RFU bits, return with Protocol error if received PCB byte is not related to "Waiting time extension" */
    if ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_S_BLOCK_RFU_MASK) != PHPAL_I14443P4_SW_S_BLOCK_RFU_BITS)
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	781b      	ldrb	r3, [r3, #0]
 8018832:	f003 0307 	and.w	r3, r3, #7
 8018836:	2b02      	cmp	r3, #2
 8018838:	d002      	beq.n	8018840 <phpalI14443p4_Sw_IsValidSBlock+0x2c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 801883a:	f240 6306 	movw	r3, #1542	@ 0x606
 801883e:	e035      	b.n	80188ac <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    /* We always expect the PCB byte to be present */
    wExpRxLength = 1;
 8018840:	2301      	movs	r3, #1
 8018842:	81fb      	strh	r3, [r7, #14]

    /* If CID is enabled, we always expect it */
    if (0U != (bCheckCid))
 8018844:	79fb      	ldrb	r3, [r7, #7]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d002      	beq.n	8018850 <phpalI14443p4_Sw_IsValidSBlock+0x3c>
    {
        wExpRxLength++;
 801884a:	89fb      	ldrh	r3, [r7, #14]
 801884c:	3301      	adds	r3, #1
 801884e:	81fb      	strh	r3, [r7, #14]
    }

    /* If this is a WTX request, we expect an additional INF byte */
    if (0u != (PHPAL_I14443P4_SW_IS_WTX(pRxBuffer[PHPAL_I14443P4_SW_PCB_POS])))
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8018858:	2b30      	cmp	r3, #48	@ 0x30
 801885a:	d102      	bne.n	8018862 <phpalI14443p4_Sw_IsValidSBlock+0x4e>
    {
        wExpRxLength++;
 801885c:	89fb      	ldrh	r3, [r7, #14]
 801885e:	3301      	adds	r3, #1
 8018860:	81fb      	strh	r3, [r7, #14]
    }

    /* The frame should have the exact frame length */
    if (wRxLength != wExpRxLength)
 8018862:	88ba      	ldrh	r2, [r7, #4]
 8018864:	89fb      	ldrh	r3, [r7, #14]
 8018866:	429a      	cmp	r2, r3
 8018868:	d002      	beq.n	8018870 <phpalI14443p4_Sw_IsValidSBlock+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 801886a:	f240 6306 	movw	r3, #1542	@ 0x606
 801886e:	e01d      	b.n	80188ac <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    /* CID presence check */
    if ((0u != bCheckCid) &&
 8018870:	79fb      	ldrb	r3, [r7, #7]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d00d      	beq.n	8018892 <phpalI14443p4_Sw_IsValidSBlock+0x7e>
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	781b      	ldrb	r3, [r3, #0]
 801887a:	f003 0308 	and.w	r3, r3, #8
    if ((0u != bCheckCid) &&
 801887e:	2b00      	cmp	r3, #0
 8018880:	d007      	beq.n	8018892 <phpalI14443p4_Sw_IsValidSBlock+0x7e>
        ((pRxBuffer[PHPAL_I14443P4_SW_PCB_POS+1U] & PHPAL_I14443P4_SW_CID_MASK) == bCid))
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	3301      	adds	r3, #1
 8018886:	781b      	ldrb	r3, [r3, #0]
 8018888:	f003 020f 	and.w	r2, r3, #15
 801888c:	79bb      	ldrb	r3, [r7, #6]
        (0U != (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)) &&
 801888e:	429a      	cmp	r2, r3
 8018890:	d00b      	beq.n	80188aa <phpalI14443p4_Sw_IsValidSBlock+0x96>
    {
        /* CHECK SUCCEEDED */
    }
    /* CID absence check */
    else if ((0u == bCheckCid) && (0u == (pRxBuffer[PHPAL_I14443P4_SW_PCB_POS] & PHPAL_I14443P4_SW_PCB_CID_FOLLOWING)))
 8018892:	79fb      	ldrb	r3, [r7, #7]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d105      	bne.n	80188a4 <phpalI14443p4_Sw_IsValidSBlock+0x90>
 8018898:	683b      	ldr	r3, [r7, #0]
 801889a:	781b      	ldrb	r3, [r3, #0]
 801889c:	f003 0308 	and.w	r3, r3, #8
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d002      	beq.n	80188aa <phpalI14443p4_Sw_IsValidSBlock+0x96>
        /* CHECK SUCCEEDED */
    }
    /* CID protocol error */
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4);
 80188a4:	f240 6306 	movw	r3, #1542	@ 0x606
 80188a8:	e000      	b.n	80188ac <phpalI14443p4_Sw_IsValidSBlock+0x98>
    }

    return PH_ERR_SUCCESS;
 80188aa:	2300      	movs	r3, #0
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	3714      	adds	r7, #20
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr

080188b8 <phpalI14443p4_Sw_BuildIBlock>:
                                        uint8_t bPcbBlockNum,
                                        uint8_t bChaining,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 80188b8:	b490      	push	{r4, r7}
 80188ba:	b082      	sub	sp, #8
 80188bc:	af00      	add	r7, sp, #0
 80188be:	4604      	mov	r4, r0
 80188c0:	4608      	mov	r0, r1
 80188c2:	4611      	mov	r1, r2
 80188c4:	461a      	mov	r2, r3
 80188c6:	4623      	mov	r3, r4
 80188c8:	71fb      	strb	r3, [r7, #7]
 80188ca:	4603      	mov	r3, r0
 80188cc:	71bb      	strb	r3, [r7, #6]
 80188ce:	460b      	mov	r3, r1
 80188d0:	717b      	strb	r3, [r7, #5]
 80188d2:	4613      	mov	r3, r2
 80188d4:	713b      	strb	r3, [r7, #4]
    /* I-Block PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] = PHPAL_I14443P4_SW_I_BLOCK | PHPAL_I14443P4_SW_I_BLOCK_RFU_BITS | bPcbBlockNum;
 80188d6:	7c3b      	ldrb	r3, [r7, #16]
 80188d8:	f043 0302 	orr.w	r3, r3, #2
 80188dc:	b2da      	uxtb	r2, r3
 80188de:	69bb      	ldr	r3, [r7, #24]
 80188e0:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 80188e2:	69fb      	ldr	r3, [r7, #28]
 80188e4:	2201      	movs	r2, #1
 80188e6:	801a      	strh	r2, [r3, #0]

    /* Check if chaining is neccessary */
    if (0U != (bChaining))
 80188e8:	7d3b      	ldrb	r3, [r7, #20]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d006      	beq.n	80188fc <phpalI14443p4_Sw_BuildIBlock+0x44>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CHAINING;
 80188ee:	69bb      	ldr	r3, [r7, #24]
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	f043 0310 	orr.w	r3, r3, #16
 80188f6:	b2da      	uxtb	r2, r3
 80188f8:	69bb      	ldr	r3, [r7, #24]
 80188fa:	701a      	strb	r2, [r3, #0]
    }

    /* Append CID if neccessary */
    if (0U != (bCidEnabled))
 80188fc:	79fb      	ldrb	r3, [r7, #7]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d011      	beq.n	8018926 <phpalI14443p4_Sw_BuildIBlock+0x6e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8018902:	69bb      	ldr	r3, [r7, #24]
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	f043 0308 	orr.w	r3, r3, #8
 801890a:	b2da      	uxtb	r2, r3
 801890c:	69bb      	ldr	r3, [r7, #24]
 801890e:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8018910:	69fb      	ldr	r3, [r7, #28]
 8018912:	881b      	ldrh	r3, [r3, #0]
 8018914:	1c5a      	adds	r2, r3, #1
 8018916:	b291      	uxth	r1, r2
 8018918:	69fa      	ldr	r2, [r7, #28]
 801891a:	8011      	strh	r1, [r2, #0]
 801891c:	461a      	mov	r2, r3
 801891e:	69bb      	ldr	r3, [r7, #24]
 8018920:	4413      	add	r3, r2
 8018922:	79ba      	ldrb	r2, [r7, #6]
 8018924:	701a      	strb	r2, [r3, #0]
    }

    /* Append NAD if neccessary */
    if (0U != (bNadEnabled))
 8018926:	797b      	ldrb	r3, [r7, #5]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d011      	beq.n	8018950 <phpalI14443p4_Sw_BuildIBlock+0x98>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_NAD_FOLLOWING;
 801892c:	69bb      	ldr	r3, [r7, #24]
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	f043 0304 	orr.w	r3, r3, #4
 8018934:	b2da      	uxtb	r2, r3
 8018936:	69bb      	ldr	r3, [r7, #24]
 8018938:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bNad;
 801893a:	69fb      	ldr	r3, [r7, #28]
 801893c:	881b      	ldrh	r3, [r3, #0]
 801893e:	1c5a      	adds	r2, r3, #1
 8018940:	b291      	uxth	r1, r2
 8018942:	69fa      	ldr	r2, [r7, #28]
 8018944:	8011      	strh	r1, [r2, #0]
 8018946:	461a      	mov	r2, r3
 8018948:	69bb      	ldr	r3, [r7, #24]
 801894a:	4413      	add	r3, r2
 801894c:	793a      	ldrb	r2, [r7, #4]
 801894e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8018950:	2300      	movs	r3, #0
}
 8018952:	4618      	mov	r0, r3
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bc90      	pop	{r4, r7}
 801895a:	4770      	bx	lr

0801895c <phpalI14443p4_Sw_BuildRBlock>:
                                        uint8_t bPcbBlockNum,
                                        uint8_t bIsAck,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 801895c:	b490      	push	{r4, r7}
 801895e:	b082      	sub	sp, #8
 8018960:	af00      	add	r7, sp, #0
 8018962:	4604      	mov	r4, r0
 8018964:	4608      	mov	r0, r1
 8018966:	4611      	mov	r1, r2
 8018968:	461a      	mov	r2, r3
 801896a:	4623      	mov	r3, r4
 801896c:	71fb      	strb	r3, [r7, #7]
 801896e:	4603      	mov	r3, r0
 8018970:	71bb      	strb	r3, [r7, #6]
 8018972:	460b      	mov	r3, r1
 8018974:	717b      	strb	r3, [r7, #5]
 8018976:	4613      	mov	r3, r2
 8018978:	713b      	strb	r3, [r7, #4]
    /* R(ACK) PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS]  = PHPAL_I14443P4_SW_R_BLOCK | PHPAL_I14443P4_SW_R_BLOCK_RFU_BITS | bPcbBlockNum;
 801897a:	797b      	ldrb	r3, [r7, #5]
 801897c:	f063 035d 	orn	r3, r3, #93	@ 0x5d
 8018980:	b2da      	uxtb	r2, r3
 8018982:	693b      	ldr	r3, [r7, #16]
 8018984:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 8018986:	697b      	ldr	r3, [r7, #20]
 8018988:	2201      	movs	r2, #1
 801898a:	801a      	strh	r2, [r3, #0]

    /* Switch to R(NAK) if neccessary */
    if (0U == (bIsAck))
 801898c:	793b      	ldrb	r3, [r7, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d106      	bne.n	80189a0 <phpalI14443p4_Sw_BuildRBlock+0x44>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_NAK;
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	781b      	ldrb	r3, [r3, #0]
 8018996:	f043 0310 	orr.w	r3, r3, #16
 801899a:	b2da      	uxtb	r2, r3
 801899c:	693b      	ldr	r3, [r7, #16]
 801899e:	701a      	strb	r2, [r3, #0]
    }

    /* Append CID if supported */
    if (bCidEnabled != 0U)
 80189a0:	79fb      	ldrb	r3, [r7, #7]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d011      	beq.n	80189ca <phpalI14443p4_Sw_BuildRBlock+0x6e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 80189a6:	693b      	ldr	r3, [r7, #16]
 80189a8:	781b      	ldrb	r3, [r3, #0]
 80189aa:	f043 0308 	orr.w	r3, r3, #8
 80189ae:	b2da      	uxtb	r2, r3
 80189b0:	693b      	ldr	r3, [r7, #16]
 80189b2:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	881b      	ldrh	r3, [r3, #0]
 80189b8:	1c5a      	adds	r2, r3, #1
 80189ba:	b291      	uxth	r1, r2
 80189bc:	697a      	ldr	r2, [r7, #20]
 80189be:	8011      	strh	r1, [r2, #0]
 80189c0:	461a      	mov	r2, r3
 80189c2:	693b      	ldr	r3, [r7, #16]
 80189c4:	4413      	add	r3, r2
 80189c6:	79ba      	ldrb	r2, [r7, #6]
 80189c8:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 80189ca:	2300      	movs	r3, #0
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3708      	adds	r7, #8
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bc90      	pop	{r4, r7}
 80189d4:	4770      	bx	lr

080189d6 <phpalI14443p4_Sw_BuildSBlock>:
                                        uint8_t bIsWtx,
                                        uint8_t bWtxm,
                                        uint8_t * pTxBuffer,
                                        uint16_t * pTxLength
                                        )
{
 80189d6:	b490      	push	{r4, r7}
 80189d8:	b082      	sub	sp, #8
 80189da:	af00      	add	r7, sp, #0
 80189dc:	4604      	mov	r4, r0
 80189de:	4608      	mov	r0, r1
 80189e0:	4611      	mov	r1, r2
 80189e2:	461a      	mov	r2, r3
 80189e4:	4623      	mov	r3, r4
 80189e6:	71fb      	strb	r3, [r7, #7]
 80189e8:	4603      	mov	r3, r0
 80189ea:	71bb      	strb	r3, [r7, #6]
 80189ec:	460b      	mov	r3, r1
 80189ee:	717b      	strb	r3, [r7, #5]
 80189f0:	4613      	mov	r3, r2
 80189f2:	713b      	strb	r3, [r7, #4]
    /* S-Block PCB */
    pTxBuffer[PHPAL_I14443P4_SW_PCB_POS]  = PHPAL_I14443P4_SW_S_BLOCK | PHPAL_I14443P4_SW_S_BLOCK_RFU_BITS;
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	22c2      	movs	r2, #194	@ 0xc2
 80189f8:	701a      	strb	r2, [r3, #0]
    *pTxLength = 1;
 80189fa:	697b      	ldr	r3, [r7, #20]
 80189fc:	2201      	movs	r2, #1
 80189fe:	801a      	strh	r2, [r3, #0]

    /* Append CID if supported */
    if (bCidEnabled != 0U)
 8018a00:	79fb      	ldrb	r3, [r7, #7]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d011      	beq.n	8018a2a <phpalI14443p4_Sw_BuildSBlock+0x54>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_CID_FOLLOWING;
 8018a06:	693b      	ldr	r3, [r7, #16]
 8018a08:	781b      	ldrb	r3, [r3, #0]
 8018a0a:	f043 0308 	orr.w	r3, r3, #8
 8018a0e:	b2da      	uxtb	r2, r3
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bCid;
 8018a14:	697b      	ldr	r3, [r7, #20]
 8018a16:	881b      	ldrh	r3, [r3, #0]
 8018a18:	1c5a      	adds	r2, r3, #1
 8018a1a:	b291      	uxth	r1, r2
 8018a1c:	697a      	ldr	r2, [r7, #20]
 8018a1e:	8011      	strh	r1, [r2, #0]
 8018a20:	461a      	mov	r2, r3
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	4413      	add	r3, r2
 8018a26:	79ba      	ldrb	r2, [r7, #6]
 8018a28:	701a      	strb	r2, [r3, #0]
    }

    /* By default, PCB byte(bit 5 and 6) is configured to DESELECT command.
     * Configure PCB byte to WTX(instead of DESELECT) and append WTXM based on bIsWtx input value.
     */
    if (0U != (bIsWtx))
 8018a2a:	797b      	ldrb	r3, [r7, #5]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d011      	beq.n	8018a54 <phpalI14443p4_Sw_BuildSBlock+0x7e>
    {
        pTxBuffer[PHPAL_I14443P4_SW_PCB_POS] |= PHPAL_I14443P4_SW_PCB_WTX;
 8018a30:	693b      	ldr	r3, [r7, #16]
 8018a32:	781b      	ldrb	r3, [r3, #0]
 8018a34:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8018a38:	b2da      	uxtb	r2, r3
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	701a      	strb	r2, [r3, #0]
        pTxBuffer[(*pTxLength)++] = bWtxm;
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	881b      	ldrh	r3, [r3, #0]
 8018a42:	1c5a      	adds	r2, r3, #1
 8018a44:	b291      	uxth	r1, r2
 8018a46:	697a      	ldr	r2, [r7, #20]
 8018a48:	8011      	strh	r1, [r2, #0]
 8018a4a:	461a      	mov	r2, r3
 8018a4c:	693b      	ldr	r3, [r7, #16]
 8018a4e:	4413      	add	r3, r2
 8018a50:	793a      	ldrb	r2, [r7, #4]
 8018a52:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8018a54:	2300      	movs	r3, #0
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3708      	adds	r7, #8
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bc90      	pop	{r4, r7}
 8018a5e:	4770      	bx	lr

08018a60 <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8018a60:	b480      	push	{r7}
 8018a62:	b083      	sub	sp, #12
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
 8018a68:	460b      	mov	r3, r1
 8018a6a:	807b      	strh	r3, [r7, #2]
 8018a6c:	4613      	mov	r3, r2
 8018a6e:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8018a70:	887b      	ldrh	r3, [r7, #2]
 8018a72:	2b06      	cmp	r3, #6
 8018a74:	d876      	bhi.n	8018b64 <phpalI14443p4_Sw_SetConfig+0x104>
 8018a76:	a201      	add	r2, pc, #4	@ (adr r2, 8018a7c <phpalI14443p4_Sw_SetConfig+0x1c>)
 8018a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a7c:	08018aa3 	.word	0x08018aa3
 8018a80:	08018ab9 	.word	0x08018ab9
 8018a84:	08018aef 	.word	0x08018aef
 8018a88:	08018b17 	.word	0x08018b17
 8018a8c:	08018b2d 	.word	0x08018b2d
 8018a90:	08018b5b 	.word	0x08018b5b
 8018a94:	08018a99 	.word	0x08018a99
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 8018a98:	883b      	ldrh	r3, [r7, #0]
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	749a      	strb	r2, [r3, #18]
            break;
 8018aa0:	e063      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 8018aa2:	883b      	ldrh	r3, [r7, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d103      	bne.n	8018ab0 <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2200      	movs	r2, #0
 8018aac:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 8018aae:	e05c      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	2201      	movs	r2, #1
 8018ab4:	741a      	strb	r2, [r3, #16]
            break;
 8018ab6:	e058      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 8018ab8:	883b      	ldrh	r3, [r7, #0]
 8018aba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d00e      	beq.n	8018ae0 <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 8018ac2:	883b      	ldrh	r3, [r7, #0]
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	2b0e      	cmp	r3, #14
 8018ac8:	d902      	bls.n	8018ad0 <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8018aca:	f240 6321 	movw	r3, #1569	@ 0x621
 8018ace:	e04d      	b.n	8018b6c <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 8018ad6:	883b      	ldrh	r3, [r7, #0]
 8018ad8:	b2da      	uxtb	r2, r3
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 8018ade:	e044      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2200      	movs	r2, #0
 8018aea:	729a      	strb	r2, [r3, #10]
            break;
 8018aec:	e03d      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 8018aee:	883b      	ldrh	r3, [r7, #0]
 8018af0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d007      	beq.n	8018b08 <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	2201      	movs	r2, #1
 8018afc:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 8018afe:	883b      	ldrh	r3, [r7, #0]
 8018b00:	b2da      	uxtb	r2, r3
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 8018b06:	e030      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2200      	movs	r2, #0
 8018b12:	731a      	strb	r2, [r3, #12]
            break;
 8018b14:	e029      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 8018b16:	883b      	ldrh	r3, [r7, #0]
 8018b18:	2b0e      	cmp	r3, #14
 8018b1a:	d902      	bls.n	8018b22 <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8018b1c:	f240 6321 	movw	r3, #1569	@ 0x621
 8018b20:	e024      	b.n	8018b6c <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 8018b22:	883b      	ldrh	r3, [r7, #0]
 8018b24:	b2da      	uxtb	r2, r3
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	735a      	strb	r2, [r3, #13]
            break;
 8018b2a:	e01e      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8018b2c:	883b      	ldrh	r3, [r7, #0]
 8018b2e:	0a1b      	lsrs	r3, r3, #8
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	2b0c      	cmp	r3, #12
 8018b34:	d803      	bhi.n	8018b3e <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 8018b36:	883b      	ldrh	r3, [r7, #0]
 8018b38:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8018b3a:	2b0c      	cmp	r3, #12
 8018b3c:	d902      	bls.n	8018b44 <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8018b3e:	f240 6321 	movw	r3, #1569	@ 0x621
 8018b42:	e013      	b.n	8018b6c <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 8018b44:	883b      	ldrh	r3, [r7, #0]
 8018b46:	0a1b      	lsrs	r3, r3, #8
 8018b48:	b29b      	uxth	r3, r3
 8018b4a:	b2da      	uxtb	r2, r3
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 8018b50:	883b      	ldrh	r3, [r7, #0]
 8018b52:	b2da      	uxtb	r2, r3
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	73da      	strb	r2, [r3, #15]
            break;
 8018b58:	e007      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 8018b5a:	883b      	ldrh	r3, [r7, #0]
 8018b5c:	b2da      	uxtb	r2, r3
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	745a      	strb	r2, [r3, #17]
            break;
 8018b62:	e002      	b.n	8018b6a <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8018b64:	f240 6323 	movw	r3, #1571	@ 0x623
 8018b68:	e000      	b.n	8018b6c <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 8018b6a:	2300      	movs	r3, #0
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	370c      	adds	r7, #12
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr

08018b78 <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8018b78:	b480      	push	{r7}
 8018b7a:	b085      	sub	sp, #20
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	60f8      	str	r0, [r7, #12]
 8018b80:	460b      	mov	r3, r1
 8018b82:	607a      	str	r2, [r7, #4]
 8018b84:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 8018b86:	897b      	ldrh	r3, [r7, #10]
 8018b88:	2b14      	cmp	r3, #20
 8018b8a:	d002      	beq.n	8018b92 <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 8018b8c:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8018b90:	e032      	b.n	8018bf8 <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d101      	bne.n	8018b9c <phpalI14443p4a_Sw_Init+0x24>
 8018b98:	2321      	movs	r3, #33	@ 0x21
 8018b9a:	e02d      	b.n	8018bf8 <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d101      	bne.n	8018ba6 <phpalI14443p4a_Sw_Init+0x2e>
 8018ba2:	2321      	movs	r3, #33	@ 0x21
 8018ba4:	e028      	b.n	8018bf8 <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	f240 5201 	movw	r2, #1281	@ 0x501
 8018bac:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	687a      	ldr	r2, [r7, #4]
 8018bb2:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	2200      	movs	r2, #0
 8018bca:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	2204      	movs	r2, #4
 8018bd0:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	2202      	movs	r2, #2
 8018bd6:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	2200      	movs	r2, #0
 8018bdc:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2200      	movs	r2, #0
 8018be2:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2200      	movs	r2, #0
 8018be8:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	2202      	movs	r2, #2
 8018bee:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 8018bf6:	2300      	movs	r3, #0
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3714      	adds	r7, #20
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c02:	4770      	bx	lr

08018c04 <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8018c04:	b480      	push	{r7}
 8018c06:	b083      	sub	sp, #12
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	460b      	mov	r3, r1
 8018c0e:	807b      	strh	r3, [r7, #2]
 8018c10:	4613      	mov	r3, r2
 8018c12:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 8018c14:	887b      	ldrh	r3, [r7, #2]
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d002      	beq.n	8018c20 <phpalI14443p4a_Sw_SetConfig+0x1c>
 8018c1a:	2b02      	cmp	r3, #2
 8018c1c:	d005      	beq.n	8018c2a <phpalI14443p4a_Sw_SetConfig+0x26>
 8018c1e:	e014      	b.n	8018c4a <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 8018c20:	883b      	ldrh	r3, [r7, #0]
 8018c22:	b2da      	uxtb	r2, r3
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	745a      	strb	r2, [r3, #17]
      break;
 8018c28:	e012      	b.n	8018c50 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8018c2a:	883b      	ldrh	r3, [r7, #0]
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d006      	beq.n	8018c40 <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 8018c32:	883b      	ldrh	r3, [r7, #0]
 8018c34:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	d002      	beq.n	8018c40 <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018c3a:	f240 5321 	movw	r3, #1313	@ 0x521
 8018c3e:	e008      	b.n	8018c52 <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 8018c40:	883b      	ldrh	r3, [r7, #0]
 8018c42:	b2da      	uxtb	r2, r3
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	749a      	strb	r2, [r3, #18]
      break;
 8018c48:	e002      	b.n	8018c50 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018c4a:	f240 5323 	movw	r3, #1315	@ 0x523
 8018c4e:	e000      	b.n	8018c52 <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 8018c50:	2300      	movs	r3, #0
}
 8018c52:	4618      	mov	r0, r3
 8018c54:	370c      	adds	r7, #12
 8018c56:	46bd      	mov	sp, r7
 8018c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5c:	4770      	bx	lr
	...

08018c60 <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 8018c60:	b480      	push	{r7}
 8018c62:	b085      	sub	sp, #20
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	460b      	mov	r3, r1
 8018c6a:	607a      	str	r2, [r7, #4]
 8018c6c:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8018c6e:	897b      	ldrh	r3, [r7, #10]
 8018c70:	3b01      	subs	r3, #1
 8018c72:	2b03      	cmp	r3, #3
 8018c74:	d822      	bhi.n	8018cbc <phpalI14443p4a_Sw_GetConfig+0x5c>
 8018c76:	a201      	add	r2, pc, #4	@ (adr r2, 8018c7c <phpalI14443p4a_Sw_GetConfig+0x1c>)
 8018c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c7c:	08018c8d 	.word	0x08018c8d
 8018c80:	08018c99 	.word	0x08018c99
 8018c84:	08018ca5 	.word	0x08018ca5
 8018c88:	08018cb1 	.word	0x08018cb1
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	7c5b      	ldrb	r3, [r3, #17]
 8018c90:	461a      	mov	r2, r3
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	801a      	strh	r2, [r3, #0]
        break;
 8018c96:	e014      	b.n	8018cc2 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	7c9b      	ldrb	r3, [r3, #18]
 8018c9c:	461a      	mov	r2, r3
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	801a      	strh	r2, [r3, #0]
        break;
 8018ca2:	e00e      	b.n	8018cc2 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	7bdb      	ldrb	r3, [r3, #15]
 8018ca8:	461a      	mov	r2, r3
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	801a      	strh	r2, [r3, #0]
        break;
 8018cae:	e008      	b.n	8018cc2 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	7c1b      	ldrb	r3, [r3, #16]
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	801a      	strh	r2, [r3, #0]
        break;
 8018cba:	e002      	b.n	8018cc2 <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018cbc:	f240 5323 	movw	r3, #1315	@ 0x523
 8018cc0:	e000      	b.n	8018cc4 <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8018cc2:	2300      	movs	r3, #0
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3714      	adds	r7, #20
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr

08018cd0 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 8018cd0:	b5b0      	push	{r4, r5, r7, lr}
 8018cd2:	b08e      	sub	sp, #56	@ 0x38
 8018cd4:	af02      	add	r7, sp, #8
 8018cd6:	60f8      	str	r0, [r7, #12]
 8018cd8:	607b      	str	r3, [r7, #4]
 8018cda:	460b      	mov	r3, r1
 8018cdc:	72fb      	strb	r3, [r7, #11]
 8018cde:	4613      	mov	r3, r2
 8018ce0:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	7c5b      	ldrb	r3, [r3, #17]
 8018cf2:	2b02      	cmp	r3, #2
 8018cf4:	d012      	beq.n	8018d1c <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 8018cf6:	7afb      	ldrb	r3, [r7, #11]
 8018cf8:	2b0c      	cmp	r3, #12
 8018cfa:	d802      	bhi.n	8018d02 <phpalI14443p4a_Sw_Rats+0x32>
 8018cfc:	7abb      	ldrb	r3, [r7, #10]
 8018cfe:	2b0e      	cmp	r3, #14
 8018d00:	d902      	bls.n	8018d08 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018d02:	f240 5321 	movw	r3, #1313	@ 0x521
 8018d06:	e2c5      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8018d08:	7afb      	ldrb	r3, [r7, #11]
 8018d0a:	2b07      	cmp	r3, #7
 8018d0c:	d80f      	bhi.n	8018d2e <phpalI14443p4a_Sw_Rats+0x5e>
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	7c5b      	ldrb	r3, [r3, #17]
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d10b      	bne.n	8018d2e <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018d16:	f240 5321 	movw	r3, #1313	@ 0x521
 8018d1a:	e2bb      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 8018d1c:	7afb      	ldrb	r3, [r7, #11]
 8018d1e:	2b08      	cmp	r3, #8
 8018d20:	d802      	bhi.n	8018d28 <phpalI14443p4a_Sw_Rats+0x58>
 8018d22:	7abb      	ldrb	r3, [r7, #10]
 8018d24:	2b0e      	cmp	r3, #14
 8018d26:	d902      	bls.n	8018d2e <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8018d28:	f240 5321 	movw	r3, #1313	@ 0x521
 8018d2c:	e2b2      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	685b      	ldr	r3, [r3, #4]
 8018d32:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8018d36:	210d      	movs	r1, #13
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7f7 fa41 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d001      	beq.n	8018d4c <phpalI14443p4a_Sw_Rats+0x7c>
 8018d48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d4a:	e2a3      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 8018d4c:	23e0      	movs	r3, #224	@ 0xe0
 8018d4e:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8018d50:	7afb      	ldrb	r3, [r7, #11]
 8018d52:	011b      	lsls	r3, r3, #4
 8018d54:	b2da      	uxtb	r2, r3
 8018d56:	7abb      	ldrb	r3, [r7, #10]
 8018d58:	f003 030f 	and.w	r3, r3, #15
 8018d5c:	b2db      	uxtb	r3, r3
 8018d5e:	4313      	orrs	r3, r2
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	6858      	ldr	r0, [r3, #4]
 8018d68:	f107 0218 	add.w	r2, r7, #24
 8018d6c:	f107 0312 	add.w	r3, r7, #18
 8018d70:	9301      	str	r3, [sp, #4]
 8018d72:	f107 0314 	add.w	r3, r7, #20
 8018d76:	9300      	str	r3, [sp, #0]
 8018d78:	2302      	movs	r3, #2
 8018d7a:	2100      	movs	r1, #0
 8018d7c:	f7f6 fe68 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8018d80:	4603      	mov	r3, r0
 8018d82:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	7c9b      	ldrb	r3, [r3, #18]
 8018d88:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8018d8c:	e031      	b.n	8018df2 <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	7c5b      	ldrb	r3, [r3, #17]
 8018d92:	2b01      	cmp	r3, #1
 8018d94:	d118      	bne.n	8018dc8 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8018d96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018d98:	b2db      	uxtb	r3, r3
 8018d9a:	2b01      	cmp	r3, #1
 8018d9c:	d003      	beq.n	8018da6 <phpalI14443p4a_Sw_Rats+0xd6>
 8018d9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	2b11      	cmp	r3, #17
 8018da4:	d10e      	bne.n	8018dc4 <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	685b      	ldr	r3, [r3, #4]
 8018daa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8018dae:	2100      	movs	r1, #0
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7f7 f949 	bl	8010048 <phhalHw_Pn5180_Wait>
 8018db6:	4603      	mov	r3, r0
 8018db8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8018dba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d003      	beq.n	8018dc8 <phpalI14443p4a_Sw_Rats+0xf8>
 8018dc0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018dc2:	e267      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 8018dc4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018dc6:	e265      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	6858      	ldr	r0, [r3, #4]
 8018dcc:	f107 0218 	add.w	r2, r7, #24
 8018dd0:	f107 0312 	add.w	r3, r7, #18
 8018dd4:	9301      	str	r3, [sp, #4]
 8018dd6:	f107 0314 	add.w	r3, r7, #20
 8018dda:	9300      	str	r3, [sp, #0]
 8018ddc:	2302      	movs	r3, #2
 8018dde:	2100      	movs	r1, #0
 8018de0:	f7f6 fe36 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8018de4:	4603      	mov	r3, r0
 8018de6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 8018de8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018dec:	3b01      	subs	r3, #1
 8018dee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8018df2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d003      	beq.n	8018e02 <phpalI14443p4a_Sw_Rats+0x132>
 8018dfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d1c5      	bne.n	8018d8e <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8018e02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018e04:	b2db      	uxtb	r3, r3
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	f040 81c5 	bne.w	8019196 <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 8018e0c:	8a7b      	ldrh	r3, [r7, #18]
 8018e0e:	b2da      	uxtb	r2, r3
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d102      	bne.n	8018e1e <phpalI14443p4a_Sw_Rats+0x14e>
 8018e18:	8a7b      	ldrh	r3, [r7, #18]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d102      	bne.n	8018e24 <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018e1e:	f240 5306 	movw	r3, #1286	@ 0x506
 8018e22:	e237      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	8a7a      	ldrh	r2, [r7, #18]
 8018e28:	4619      	mov	r1, r3
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f009 fac5 	bl	80223ba <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	7c5b      	ldrb	r3, [r3, #17]
 8018e34:	2b03      	cmp	r3, #3
 8018e36:	d006      	beq.n	8018e46 <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	2200      	movs	r2, #0
 8018e42:	729a      	strb	r2, [r3, #10]
 8018e44:	e005      	b.n	8018e52 <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	2201      	movs	r2, #1
 8018e4a:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	7aba      	ldrb	r2, [r7, #10]
 8018e50:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	2200      	movs	r2, #0
 8018e56:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2204      	movs	r2, #4
 8018e62:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	7afa      	ldrb	r2, [r7, #11]
 8018e68:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	2202      	movs	r2, #2
 8018e6e:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	2200      	movs	r2, #0
 8018e74:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 8018e82:	2301      	movs	r3, #1
 8018e84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 8018e88:	8a7b      	ldrh	r3, [r7, #18]
 8018e8a:	2b01      	cmp	r3, #1
 8018e8c:	f240 80ba 	bls.w	8019004 <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 8018e90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	4413      	add	r3, r2
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	f003 030f 	and.w	r3, r3, #15
 8018e9e:	b2da      	uxtb	r2, r3
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	7c5b      	ldrb	r3, [r3, #17]
 8018ea8:	2b02      	cmp	r3, #2
 8018eaa:	d007      	beq.n	8018ebc <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	7b5b      	ldrb	r3, [r3, #13]
 8018eb0:	2b0c      	cmp	r3, #12
 8018eb2:	d90a      	bls.n	8018eca <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	220c      	movs	r2, #12
 8018eb8:	735a      	strb	r2, [r3, #13]
 8018eba:	e006      	b.n	8018eca <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	7b5b      	ldrb	r3, [r3, #13]
 8018ec0:	2b08      	cmp	r3, #8
 8018ec2:	d902      	bls.n	8018eca <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	2208      	movs	r2, #8
 8018ec8:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 8018eca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018ece:	3301      	adds	r3, #1
 8018ed0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	3301      	adds	r3, #1
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	f003 0310 	and.w	r3, r3, #16
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d021      	beq.n	8018f26 <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8018ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018ee6:	b29a      	uxth	r2, r3
 8018ee8:	8a7b      	ldrh	r3, [r7, #18]
 8018eea:	429a      	cmp	r2, r3
 8018eec:	d302      	bcc.n	8018ef4 <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018eee:	f240 5306 	movw	r3, #1286	@ 0x506
 8018ef2:	e1cf      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 8018ef4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018ef8:	687a      	ldr	r2, [r7, #4]
 8018efa:	4413      	add	r3, r2
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	f003 0308 	and.w	r3, r3, #8
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d003      	beq.n	8018f0e <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	72da      	strb	r2, [r3, #11]
 8018f0c:	e006      	b.n	8018f1c <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 8018f0e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f12:	687a      	ldr	r2, [r7, #4]
 8018f14:	4413      	add	r3, r2
 8018f16:	781a      	ldrb	r2, [r3, #0]
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 8018f1c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f20:	3301      	adds	r3, #1
 8018f22:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	3301      	adds	r3, #1
 8018f2a:	781b      	ldrb	r3, [r3, #0]
 8018f2c:	f003 0320 	and.w	r3, r3, #32
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d02d      	beq.n	8018f90 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8018f34:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f38:	b29a      	uxth	r2, r3
 8018f3a:	8a7b      	ldrh	r3, [r7, #18]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d302      	bcc.n	8018f46 <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018f40:	f240 5306 	movw	r3, #1286	@ 0x506
 8018f44:	e1a6      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 8018f46:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f4a:	687a      	ldr	r2, [r7, #4]
 8018f4c:	4413      	add	r3, r2
 8018f4e:	781b      	ldrb	r3, [r3, #0]
 8018f50:	f003 030f 	and.w	r3, r3, #15
 8018f54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8018f58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018f5c:	2b0f      	cmp	r3, #15
 8018f5e:	d102      	bne.n	8018f66 <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8018f60:	2300      	movs	r3, #0
 8018f62:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 8018f66:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f6a:	687a      	ldr	r2, [r7, #4]
 8018f6c:	4413      	add	r3, r2
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	091b      	lsrs	r3, r3, #4
 8018f72:	b2da      	uxtb	r2, r3
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	7b1b      	ldrb	r3, [r3, #12]
 8018f7c:	2b0f      	cmp	r3, #15
 8018f7e:	d102      	bne.n	8018f86 <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	2204      	movs	r2, #4
 8018f84:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 8018f86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f8a:	3301      	adds	r3, #1
 8018f8c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	3301      	adds	r3, #1
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d032      	beq.n	8019004 <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8018f9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018fa2:	b29a      	uxth	r2, r3
 8018fa4:	8a7b      	ldrh	r3, [r7, #18]
 8018fa6:	429a      	cmp	r2, r3
 8018fa8:	d302      	bcc.n	8018fb0 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8018faa:	f240 5306 	movw	r3, #1286	@ 0x506
 8018fae:	e171      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	7c5b      	ldrb	r3, [r3, #17]
 8018fb4:	2b01      	cmp	r3, #1
 8018fb6:	d025      	beq.n	8019004 <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	7c5b      	ldrb	r3, [r3, #17]
 8018fbc:	2b03      	cmp	r3, #3
 8018fbe:	d10b      	bne.n	8018fd8 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 8018fc0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018fc4:	687a      	ldr	r2, [r7, #4]
 8018fc6:	4413      	add	r3, r2
 8018fc8:	781b      	ldrb	r3, [r3, #0]
 8018fca:	f003 0301 	and.w	r3, r3, #1
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d002      	beq.n	8018fd8 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	2201      	movs	r2, #1
 8018fd6:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 8018fd8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018fdc:	687a      	ldr	r2, [r7, #4]
 8018fde:	4413      	add	r3, r2
 8018fe0:	781b      	ldrb	r3, [r3, #0]
 8018fe2:	f003 0302 	and.w	r3, r3, #2
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d106      	bne.n	8018ff8 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2200      	movs	r2, #0
 8018fee:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	729a      	strb	r2, [r3, #10]
 8018ff6:	e005      	b.n	8019004 <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	2201      	movs	r2, #1
 8018ffc:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	7aba      	ldrb	r2, [r7, #10]
 8019002:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 8019004:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019008:	2201      	movs	r2, #1
 801900a:	fa02 f303 	lsl.w	r3, r2, r3
 801900e:	4618      	mov	r0, r3
 8019010:	f7e7 fa78 	bl	8000504 <__aeabi_ui2d>
 8019014:	a3a7      	add	r3, pc, #668	@ (adr r3, 80192b4 <phpalI14443p4a_Sw_Rats+0x5e4>)
 8019016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901a:	f7e7 faed 	bl	80005f8 <__aeabi_dmul>
 801901e:	4602      	mov	r2, r0
 8019020:	460b      	mov	r3, r1
 8019022:	4610      	mov	r0, r2
 8019024:	4619      	mov	r1, r3
 8019026:	f7e7 fdbf 	bl	8000ba8 <__aeabi_d2f>
 801902a:	4603      	mov	r3, r0
 801902c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	7c5b      	ldrb	r3, [r3, #17]
 8019032:	2b03      	cmp	r3, #3
 8019034:	d01f      	beq.n	8019076 <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 8019036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019038:	f7e7 fa86 	bl	8000548 <__aeabi_f2d>
 801903c:	4604      	mov	r4, r0
 801903e:	460d      	mov	r5, r1
 8019040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019044:	2201      	movs	r2, #1
 8019046:	fa02 f303 	lsl.w	r3, r2, r3
 801904a:	4618      	mov	r0, r3
 801904c:	f7e7 fa5a 	bl	8000504 <__aeabi_ui2d>
 8019050:	a39a      	add	r3, pc, #616	@ (adr r3, 80192bc <phpalI14443p4a_Sw_Rats+0x5ec>)
 8019052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019056:	f7e7 facf 	bl	80005f8 <__aeabi_dmul>
 801905a:	4602      	mov	r2, r0
 801905c:	460b      	mov	r3, r1
 801905e:	4620      	mov	r0, r4
 8019060:	4629      	mov	r1, r5
 8019062:	f7e7 f913 	bl	800028c <__adddf3>
 8019066:	4602      	mov	r2, r0
 8019068:	460b      	mov	r3, r1
 801906a:	4610      	mov	r0, r2
 801906c:	4619      	mov	r1, r3
 801906e:	f7e7 fd9b 	bl	8000ba8 <__aeabi_d2f>
 8019072:	4603      	mov	r3, r0
 8019074:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 8019076:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801907a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801907e:	ee17 3a90 	vmov	r3, s15
 8019082:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 8019084:	6a3b      	ldr	r3, [r7, #32]
 8019086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801908a:	d314      	bcc.n	80190b6 <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	6858      	ldr	r0, [r3, #4]
 8019090:	6a3b      	ldr	r3, [r7, #32]
 8019092:	4a83      	ldr	r2, [pc, #524]	@ (80192a0 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8019094:	fba2 2303 	umull	r2, r3, r2, r3
 8019098:	099b      	lsrs	r3, r3, #6
 801909a:	b29b      	uxth	r3, r3
 801909c:	3301      	adds	r3, #1
 801909e:	b29b      	uxth	r3, r3
 80190a0:	461a      	mov	r2, r3
 80190a2:	2101      	movs	r1, #1
 80190a4:	f7f6 ffd0 	bl	8010048 <phhalHw_Pn5180_Wait>
 80190a8:	4603      	mov	r3, r0
 80190aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80190ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d010      	beq.n	80190d4 <phpalI14443p4a_Sw_Rats+0x404>
 80190b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190b4:	e0ee      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	685b      	ldr	r3, [r3, #4]
 80190ba:	6a3a      	ldr	r2, [r7, #32]
 80190bc:	b292      	uxth	r2, r2
 80190be:	2100      	movs	r1, #0
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7f6 ffc1 	bl	8010048 <phhalHw_Pn5180_Wait>
 80190c6:	4603      	mov	r3, r0
 80190c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80190ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d001      	beq.n	80190d4 <phpalI14443p4a_Sw_Rats+0x404>
 80190d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190d2:	e0df      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 80190d4:	4b73      	ldr	r3, [pc, #460]	@ (80192a4 <phpalI14443p4a_Sw_Rats+0x5d4>)
 80190d6:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	7b1b      	ldrb	r3, [r3, #12]
 80190dc:	461a      	mov	r2, r3
 80190de:	2301      	movs	r3, #1
 80190e0:	4093      	lsls	r3, r2
 80190e2:	ee07 3a90 	vmov	s15, r3
 80190e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80190ea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80190ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80190f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	7c5b      	ldrb	r3, [r3, #17]
 80190fa:	2b03      	cmp	r3, #3
 80190fc:	d108      	bne.n	8019110 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 80190fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8019102:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80192a8 <phpalI14443p4a_Sw_Rats+0x5d8>
 8019106:	ee77 7a87 	vadd.f32	s15, s15, s14
 801910a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 801910e:	e013      	b.n	8019138 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 8019110:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8019114:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80192ac <phpalI14443p4a_Sw_Rats+0x5dc>
 8019118:	ee77 7a87 	vadd.f32	s15, s15, s14
 801911c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	7c5b      	ldrb	r3, [r3, #17]
 8019124:	2b01      	cmp	r3, #1
 8019126:	d107      	bne.n	8019138 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8019128:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801912c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80192b0 <phpalI14443p4a_Sw_Rats+0x5e0>
 8019130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019134:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8019138:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801913c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019140:	ee17 3a90 	vmov	r3, s15
 8019144:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8019146:	69fb      	ldr	r3, [r7, #28]
 8019148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801914c:	d314      	bcc.n	8019178 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	6858      	ldr	r0, [r3, #4]
 8019152:	69fb      	ldr	r3, [r7, #28]
 8019154:	4a52      	ldr	r2, [pc, #328]	@ (80192a0 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8019156:	fba2 2303 	umull	r2, r3, r2, r3
 801915a:	099b      	lsrs	r3, r3, #6
 801915c:	b29b      	uxth	r3, r3
 801915e:	3301      	adds	r3, #1
 8019160:	b29b      	uxth	r3, r3
 8019162:	461a      	mov	r2, r3
 8019164:	210e      	movs	r1, #14
 8019166:	f7f7 f82b 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801916a:	4603      	mov	r3, r0
 801916c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801916e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019170:	2b00      	cmp	r3, #0
 8019172:	d07f      	beq.n	8019274 <phpalI14443p4a_Sw_Rats+0x5a4>
 8019174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019176:	e08d      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	685b      	ldr	r3, [r3, #4]
 801917c:	69fa      	ldr	r2, [r7, #28]
 801917e:	b292      	uxth	r2, r2
 8019180:	210d      	movs	r1, #13
 8019182:	4618      	mov	r0, r3
 8019184:	f7f7 f81c 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019188:	4603      	mov	r3, r0
 801918a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801918c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801918e:	2b00      	cmp	r3, #0
 8019190:	d070      	beq.n	8019274 <phpalI14443p4a_Sw_Rats+0x5a4>
 8019192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019194:	e07e      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	7c5b      	ldrb	r3, [r3, #17]
 801919a:	2b01      	cmp	r3, #1
 801919c:	d101      	bne.n	80191a2 <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 801919e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191a0:	e078      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 80191a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	2b01      	cmp	r3, #1
 80191a8:	d00d      	beq.n	80191c6 <phpalI14443p4a_Sw_Rats+0x4f6>
 80191aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191ac:	b2db      	uxtb	r3, r3
 80191ae:	2b02      	cmp	r3, #2
 80191b0:	d009      	beq.n	80191c6 <phpalI14443p4a_Sw_Rats+0x4f6>
 80191b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191b4:	b2db      	uxtb	r3, r3
 80191b6:	2b05      	cmp	r3, #5
 80191b8:	d005      	beq.n	80191c6 <phpalI14443p4a_Sw_Rats+0x4f6>
 80191ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191bc:	b2db      	uxtb	r3, r3
 80191be:	2b03      	cmp	r3, #3
 80191c0:	d001      	beq.n	80191c6 <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 80191c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191c4:	e066      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 80191c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	2b01      	cmp	r3, #1
 80191cc:	d00e      	beq.n	80191ec <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	685b      	ldr	r3, [r3, #4]
 80191d2:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80191d6:	2100      	movs	r1, #0
 80191d8:	4618      	mov	r0, r3
 80191da:	f7f6 ff35 	bl	8010048 <phhalHw_Pn5180_Wait>
 80191de:	4603      	mov	r3, r0
 80191e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80191e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d001      	beq.n	80191ec <phpalI14443p4a_Sw_Rats+0x51c>
 80191e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191ea:	e053      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 80191ec:	23c2      	movs	r3, #194	@ 0xc2
 80191ee:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 80191f0:	2301      	movs	r3, #1
 80191f2:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	6858      	ldr	r0, [r3, #4]
 80191f8:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80191fa:	f107 0218 	add.w	r2, r7, #24
 80191fe:	f107 0312 	add.w	r3, r7, #18
 8019202:	9301      	str	r3, [sp, #4]
 8019204:	f107 0314 	add.w	r3, r7, #20
 8019208:	9300      	str	r3, [sp, #0]
 801920a:	460b      	mov	r3, r1
 801920c:	2100      	movs	r1, #0
 801920e:	f7f6 fc1f 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8019212:	4603      	mov	r3, r0
 8019214:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 8019216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019218:	b2db      	uxtb	r3, r3
 801921a:	2b00      	cmp	r3, #0
 801921c:	d107      	bne.n	801922e <phpalI14443p4a_Sw_Rats+0x55e>
 801921e:	8a7b      	ldrh	r3, [r7, #18]
 8019220:	2b01      	cmp	r3, #1
 8019222:	d104      	bne.n	801922e <phpalI14443p4a_Sw_Rats+0x55e>
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	781a      	ldrb	r2, [r3, #0]
 8019228:	7e3b      	ldrb	r3, [r7, #24]
 801922a:	429a      	cmp	r2, r3
 801922c:	d022      	beq.n	8019274 <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	f240 424c 	movw	r2, #1100	@ 0x44c
 8019236:	210d      	movs	r1, #13
 8019238:	4618      	mov	r0, r3
 801923a:	f7f6 ffc1 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801923e:	4603      	mov	r3, r0
 8019240:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8019242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019244:	2b00      	cmp	r3, #0
 8019246:	d001      	beq.n	801924c <phpalI14443p4a_Sw_Rats+0x57c>
 8019248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801924a:	e023      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 801924c:	2350      	movs	r3, #80	@ 0x50
 801924e:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8019250:	2300      	movs	r3, #0
 8019252:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	6858      	ldr	r0, [r3, #4]
 8019258:	f107 0218 	add.w	r2, r7, #24
 801925c:	f107 0312 	add.w	r3, r7, #18
 8019260:	9301      	str	r3, [sp, #4]
 8019262:	f107 0314 	add.w	r3, r7, #20
 8019266:	9300      	str	r3, [sp, #0]
 8019268:	2302      	movs	r3, #2
 801926a:	2100      	movs	r1, #0
 801926c:	f7f6 fbf0 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8019270:	4603      	mov	r3, r0
 8019272:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 8019274:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019276:	2b00      	cmp	r3, #0
 8019278:	d00b      	beq.n	8019292 <phpalI14443p4a_Sw_Rats+0x5c2>
 801927a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801927c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8019280:	2b00      	cmp	r3, #0
 8019282:	d106      	bne.n	8019292 <phpalI14443p4a_Sw_Rats+0x5c2>
 8019284:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019286:	b2db      	uxtb	r3, r3
 8019288:	b29b      	uxth	r3, r3
 801928a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801928e:	b29b      	uxth	r3, r3
 8019290:	e000      	b.n	8019294 <phpalI14443p4a_Sw_Rats+0x5c4>
 8019292:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8019294:	4618      	mov	r0, r3
 8019296:	3730      	adds	r7, #48	@ 0x30
 8019298:	46bd      	mov	sp, r7
 801929a:	bdb0      	pop	{r4, r5, r7, pc}
 801929c:	f3af 8000 	nop.w
 80192a0:	10624dd3 	.word	0x10624dd3
 80192a4:	4397084f 	.word	0x4397084f
 80192a8:	42700000 	.word	0x42700000
 80192ac:	45638000 	.word	0x45638000
 80192b0:	447a0000 	.word	0x447a0000
 80192b4:	d12e109d 	.word	0xd12e109d
 80192b8:	4072e109 	.word	0x4072e109
 80192bc:	b9c518eb 	.word	0xb9c518eb
 80192c0:	403c518e 	.word	0x403c518e

080192c4 <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b08a      	sub	sp, #40	@ 0x28
 80192c8:	af02      	add	r7, sp, #8
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	460b      	mov	r3, r1
 80192ce:	70fb      	strb	r3, [r7, #3]
 80192d0:	4613      	mov	r3, r2
 80192d2:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80192d4:	2300      	movs	r3, #0
 80192d6:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80192d8:	2300      	movs	r3, #0
 80192da:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 80192dc:	78fb      	ldrb	r3, [r7, #3]
 80192de:	2b03      	cmp	r3, #3
 80192e0:	d816      	bhi.n	8019310 <phpalI14443p4a_Sw_Pps+0x4c>
 80192e2:	a201      	add	r2, pc, #4	@ (adr r2, 80192e8 <phpalI14443p4a_Sw_Pps+0x24>)
 80192e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192e8:	080192f9 	.word	0x080192f9
 80192ec:	080192ff 	.word	0x080192ff
 80192f0:	08019305 	.word	0x08019305
 80192f4:	0801930b 	.word	0x0801930b
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 80192f8:	2300      	movs	r3, #0
 80192fa:	83fb      	strh	r3, [r7, #30]
        break;
 80192fc:	e00b      	b.n	8019316 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 80192fe:	2301      	movs	r3, #1
 8019300:	83fb      	strh	r3, [r7, #30]
        break;
 8019302:	e008      	b.n	8019316 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8019304:	2302      	movs	r3, #2
 8019306:	83fb      	strh	r3, [r7, #30]
        break;
 8019308:	e005      	b.n	8019316 <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 801930a:	2303      	movs	r3, #3
 801930c:	83fb      	strh	r3, [r7, #30]
        break;
 801930e:	e002      	b.n	8019316 <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8019310:	f240 5321 	movw	r3, #1313	@ 0x521
 8019314:	e080      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 8019316:	78bb      	ldrb	r3, [r7, #2]
 8019318:	2b03      	cmp	r3, #3
 801931a:	d817      	bhi.n	801934c <phpalI14443p4a_Sw_Pps+0x88>
 801931c:	a201      	add	r2, pc, #4	@ (adr r2, 8019324 <phpalI14443p4a_Sw_Pps+0x60>)
 801931e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019322:	bf00      	nop
 8019324:	08019335 	.word	0x08019335
 8019328:	0801933b 	.word	0x0801933b
 801932c:	08019341 	.word	0x08019341
 8019330:	08019347 	.word	0x08019347
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8019334:	2300      	movs	r3, #0
 8019336:	83bb      	strh	r3, [r7, #28]
        break;
 8019338:	e00b      	b.n	8019352 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 801933a:	2301      	movs	r3, #1
 801933c:	83bb      	strh	r3, [r7, #28]
        break;
 801933e:	e008      	b.n	8019352 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8019340:	2302      	movs	r3, #2
 8019342:	83bb      	strh	r3, [r7, #28]
        break;
 8019344:	e005      	b.n	8019352 <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 8019346:	2303      	movs	r3, #3
 8019348:	83bb      	strh	r3, [r7, #28]
        break;
 801934a:	e002      	b.n	8019352 <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801934c:	f240 5321 	movw	r3, #1313	@ 0x521
 8019350:	e062      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	7a9b      	ldrb	r3, [r3, #10]
 8019356:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 801935a:	b2db      	uxtb	r3, r3
 801935c:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 801935e:	2311      	movs	r3, #17
 8019360:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 8019362:	78bb      	ldrb	r3, [r7, #2]
 8019364:	009b      	lsls	r3, r3, #2
 8019366:	b2db      	uxtb	r3, r3
 8019368:	f003 030c 	and.w	r3, r3, #12
 801936c:	b2da      	uxtb	r2, r3
 801936e:	78fb      	ldrb	r3, [r7, #3]
 8019370:	f003 0303 	and.w	r3, r3, #3
 8019374:	b2db      	uxtb	r3, r3
 8019376:	4313      	orrs	r3, r2
 8019378:	b2db      	uxtb	r3, r3
 801937a:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	6858      	ldr	r0, [r3, #4]
 8019380:	f107 0214 	add.w	r2, r7, #20
 8019384:	f107 030e 	add.w	r3, r7, #14
 8019388:	9301      	str	r3, [sp, #4]
 801938a:	f107 0310 	add.w	r3, r7, #16
 801938e:	9300      	str	r3, [sp, #0]
 8019390:	2303      	movs	r3, #3
 8019392:	2100      	movs	r1, #0
 8019394:	f7f6 fb5c 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8019398:	4603      	mov	r3, r0
 801939a:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 801939c:	8b7b      	ldrh	r3, [r7, #26]
 801939e:	b2db      	uxtb	r3, r3
 80193a0:	2b73      	cmp	r3, #115	@ 0x73
 80193a2:	d102      	bne.n	80193aa <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80193a4:	f240 5306 	movw	r3, #1286	@ 0x506
 80193a8:	e036      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 80193aa:	8b7b      	ldrh	r3, [r7, #26]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d001      	beq.n	80193b4 <phpalI14443p4a_Sw_Pps+0xf0>
 80193b0:	8b7b      	ldrh	r3, [r7, #26]
 80193b2:	e031      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 80193b4:	89fb      	ldrh	r3, [r7, #14]
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	d108      	bne.n	80193cc <phpalI14443p4a_Sw_Pps+0x108>
 80193ba:	693b      	ldr	r3, [r7, #16]
 80193bc:	781a      	ldrb	r2, [r3, #0]
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	7a9b      	ldrb	r3, [r3, #10]
 80193c2:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d002      	beq.n	80193d2 <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80193cc:	f240 5306 	movw	r3, #1286	@ 0x506
 80193d0:	e022      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	78fa      	ldrb	r2, [r7, #3]
 80193d6:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	78ba      	ldrb	r2, [r7, #2]
 80193dc:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	8bfa      	ldrh	r2, [r7, #30]
 80193e4:	2109      	movs	r1, #9
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7f6 feea 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 80193ec:	4603      	mov	r3, r0
 80193ee:	833b      	strh	r3, [r7, #24]
 80193f0:	8b3b      	ldrh	r3, [r7, #24]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d001      	beq.n	80193fa <phpalI14443p4a_Sw_Pps+0x136>
 80193f6:	8b3b      	ldrh	r3, [r7, #24]
 80193f8:	e00e      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	685b      	ldr	r3, [r3, #4]
 80193fe:	8bba      	ldrh	r2, [r7, #28]
 8019400:	210a      	movs	r1, #10
 8019402:	4618      	mov	r0, r3
 8019404:	f7f6 fedc 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019408:	4603      	mov	r3, r0
 801940a:	833b      	strh	r3, [r7, #24]
 801940c:	8b3b      	ldrh	r3, [r7, #24]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d001      	beq.n	8019416 <phpalI14443p4a_Sw_Pps+0x152>
 8019412:	8b3b      	ldrh	r3, [r7, #24]
 8019414:	e000      	b.n	8019418 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 8019416:	2300      	movs	r3, #0
}
 8019418:	4618      	mov	r0, r3
 801941a:	3720      	adds	r7, #32
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}

08019420 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b084      	sub	sp, #16
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	4608      	mov	r0, r1
 801942a:	4611      	mov	r1, r2
 801942c:	461a      	mov	r2, r3
 801942e:	4603      	mov	r3, r0
 8019430:	70fb      	strb	r3, [r7, #3]
 8019432:	460b      	mov	r3, r1
 8019434:	70bb      	strb	r3, [r7, #2]
 8019436:	4613      	mov	r3, r2
 8019438:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 801943a:	787b      	ldrb	r3, [r7, #1]
 801943c:	2b03      	cmp	r3, #3
 801943e:	d902      	bls.n	8019446 <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8019440:	f240 5321 	movw	r3, #1313	@ 0x521
 8019444:	e0a0      	b.n	8019588 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8019446:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8019448:	7e3b      	ldrb	r3, [r7, #24]
 801944a:	2b03      	cmp	r3, #3
 801944c:	d902      	bls.n	8019454 <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801944e:	f240 5321 	movw	r3, #1313	@ 0x521
 8019452:	e099      	b.n	8019588 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 8019454:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 8019456:	78ba      	ldrb	r2, [r7, #2]
 8019458:	78f9      	ldrb	r1, [r7, #3]
 801945a:	69fb      	ldr	r3, [r7, #28]
 801945c:	6878      	ldr	r0, [r7, #4]
 801945e:	f7ff fc37 	bl	8018cd0 <phpalI14443p4a_Sw_Rats>
 8019462:	4603      	mov	r3, r0
 8019464:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8019466:	89fb      	ldrh	r3, [r7, #14]
 8019468:	b2db      	uxtb	r3, r3
 801946a:	2b00      	cmp	r3, #0
 801946c:	d17c      	bne.n	8019568 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 801946e:	787b      	ldrb	r3, [r7, #1]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d102      	bne.n	801947a <phpalI14443p4a_Sw_ActivateCard+0x5a>
 8019474:	7e3b      	ldrb	r3, [r7, #24]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d076      	beq.n	8019568 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 801947e:	2b00      	cmp	r3, #0
 8019480:	d072      	beq.n	8019568 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	7adb      	ldrb	r3, [r3, #11]
 8019486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801948a:	2b00      	cmp	r3, #0
 801948c:	d002      	beq.n	8019494 <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 801948e:	2303      	movs	r3, #3
 8019490:	737b      	strb	r3, [r7, #13]
 8019492:	e013      	b.n	80194bc <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	7adb      	ldrb	r3, [r3, #11]
 8019498:	f003 0320 	and.w	r3, r3, #32
 801949c:	2b00      	cmp	r3, #0
 801949e:	d002      	beq.n	80194a6 <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 80194a0:	2302      	movs	r3, #2
 80194a2:	737b      	strb	r3, [r7, #13]
 80194a4:	e00a      	b.n	80194bc <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	7adb      	ldrb	r3, [r3, #11]
 80194aa:	f003 0310 	and.w	r3, r3, #16
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d002      	beq.n	80194b8 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 80194b2:	2301      	movs	r3, #1
 80194b4:	737b      	strb	r3, [r7, #13]
 80194b6:	e001      	b.n	80194bc <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 80194b8:	2300      	movs	r3, #0
 80194ba:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	7adb      	ldrb	r3, [r3, #11]
 80194c0:	f003 0304 	and.w	r3, r3, #4
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d002      	beq.n	80194ce <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 80194c8:	2303      	movs	r3, #3
 80194ca:	733b      	strb	r3, [r7, #12]
 80194cc:	e013      	b.n	80194f6 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	7adb      	ldrb	r3, [r3, #11]
 80194d2:	f003 0302 	and.w	r3, r3, #2
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d002      	beq.n	80194e0 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 80194da:	2302      	movs	r3, #2
 80194dc:	733b      	strb	r3, [r7, #12]
 80194de:	e00a      	b.n	80194f6 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	7adb      	ldrb	r3, [r3, #11]
 80194e4:	f003 0301 	and.w	r3, r3, #1
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d002      	beq.n	80194f2 <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 80194ec:	2301      	movs	r3, #1
 80194ee:	733b      	strb	r3, [r7, #12]
 80194f0:	e001      	b.n	80194f6 <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 80194f2:	2300      	movs	r3, #0
 80194f4:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 80194f6:	7e3a      	ldrb	r2, [r7, #24]
 80194f8:	7b7b      	ldrb	r3, [r7, #13]
 80194fa:	429a      	cmp	r2, r3
 80194fc:	d005      	beq.n	801950a <phpalI14443p4a_Sw_ActivateCard+0xea>
 80194fe:	7e3a      	ldrb	r2, [r7, #24]
 8019500:	7b7b      	ldrb	r3, [r7, #13]
 8019502:	429a      	cmp	r2, r3
 8019504:	d901      	bls.n	801950a <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 8019506:	7b7b      	ldrb	r3, [r7, #13]
 8019508:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 801950a:	787a      	ldrb	r2, [r7, #1]
 801950c:	7b3b      	ldrb	r3, [r7, #12]
 801950e:	429a      	cmp	r2, r3
 8019510:	d005      	beq.n	801951e <phpalI14443p4a_Sw_ActivateCard+0xfe>
 8019512:	787a      	ldrb	r2, [r7, #1]
 8019514:	7b3b      	ldrb	r3, [r7, #12]
 8019516:	429a      	cmp	r2, r3
 8019518:	d901      	bls.n	801951e <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 801951a:	7b3b      	ldrb	r3, [r7, #12]
 801951c:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	7adb      	ldrb	r3, [r3, #11]
 8019522:	b25b      	sxtb	r3, r3
 8019524:	2b00      	cmp	r3, #0
 8019526:	da0c      	bge.n	8019542 <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8019528:	7e3a      	ldrb	r2, [r7, #24]
 801952a:	787b      	ldrb	r3, [r7, #1]
 801952c:	429a      	cmp	r2, r3
 801952e:	d008      	beq.n	8019542 <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8019530:	7e3a      	ldrb	r2, [r7, #24]
 8019532:	787b      	ldrb	r3, [r7, #1]
 8019534:	429a      	cmp	r2, r3
 8019536:	d202      	bcs.n	801953e <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8019538:	7e3b      	ldrb	r3, [r7, #24]
 801953a:	707b      	strb	r3, [r7, #1]
 801953c:	e001      	b.n	8019542 <phpalI14443p4a_Sw_ActivateCard+0x122>
 801953e:	787b      	ldrb	r3, [r7, #1]
 8019540:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 8019542:	787b      	ldrb	r3, [r7, #1]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d102      	bne.n	801954e <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8019548:	7e3b      	ldrb	r3, [r7, #24]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d00c      	beq.n	8019568 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 801954e:	7e3a      	ldrb	r2, [r7, #24]
 8019550:	787b      	ldrb	r3, [r7, #1]
 8019552:	4619      	mov	r1, r3
 8019554:	6878      	ldr	r0, [r7, #4]
 8019556:	f7ff feb5 	bl	80192c4 <phpalI14443p4a_Sw_Pps>
 801955a:	4603      	mov	r3, r0
 801955c:	81fb      	strh	r3, [r7, #14]
 801955e:	89fb      	ldrh	r3, [r7, #14]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d001      	beq.n	8019568 <phpalI14443p4a_Sw_ActivateCard+0x148>
 8019564:	89fb      	ldrh	r3, [r7, #14]
 8019566:	e00f      	b.n	8019588 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8019568:	89fb      	ldrh	r3, [r7, #14]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d00b      	beq.n	8019586 <phpalI14443p4a_Sw_ActivateCard+0x166>
 801956e:	89fb      	ldrh	r3, [r7, #14]
 8019570:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8019574:	2b00      	cmp	r3, #0
 8019576:	d106      	bne.n	8019586 <phpalI14443p4a_Sw_ActivateCard+0x166>
 8019578:	89fb      	ldrh	r3, [r7, #14]
 801957a:	b2db      	uxtb	r3, r3
 801957c:	b29b      	uxth	r3, r3
 801957e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8019582:	b29b      	uxth	r3, r3
 8019584:	e000      	b.n	8019588 <phpalI14443p4a_Sw_ActivateCard+0x168>
 8019586:	89fb      	ldrh	r3, [r7, #14]
}
 8019588:	4618      	mov	r0, r3
 801958a:	3710      	adds	r7, #16
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8019590:	b480      	push	{r7}
 8019592:	b085      	sub	sp, #20
 8019594:	af00      	add	r7, sp, #0
 8019596:	60f8      	str	r0, [r7, #12]
 8019598:	60b9      	str	r1, [r7, #8]
 801959a:	607a      	str	r2, [r7, #4]
 801959c:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	7a1a      	ldrb	r2, [r3, #8]
 80195a2:	68bb      	ldr	r3, [r7, #8]
 80195a4:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	7a9a      	ldrb	r2, [r3, #10]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	7a5a      	ldrb	r2, [r3, #9]
 80195b2:	683b      	ldr	r3, [r7, #0]
 80195b4:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	7b1a      	ldrb	r2, [r3, #12]
 80195ba:	69bb      	ldr	r3, [r7, #24]
 80195bc:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	7b9a      	ldrb	r2, [r3, #14]
 80195c2:	69fb      	ldr	r3, [r7, #28]
 80195c4:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	7b5a      	ldrb	r2, [r3, #13]
 80195ca:	6a3b      	ldr	r3, [r7, #32]
 80195cc:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80195ce:	2300      	movs	r3, #0
}
 80195d0:	4618      	mov	r0, r3
 80195d2:	3714      	adds	r7, #20
 80195d4:	46bd      	mov	sp, r7
 80195d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195da:	4770      	bx	lr

080195dc <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b086      	sub	sp, #24
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	60f8      	str	r0, [r7, #12]
 80195e4:	607a      	str	r2, [r7, #4]
 80195e6:	603b      	str	r3, [r7, #0]
 80195e8:	460b      	mov	r3, r1
 80195ea:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80195ec:	2300      	movs	r3, #0
 80195ee:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 80195f0:	897b      	ldrh	r3, [r7, #10]
 80195f2:	2b34      	cmp	r3, #52	@ 0x34
 80195f4:	d002      	beq.n	80195fc <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 80195f6:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80195fa:	e039      	b.n	8019670 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d101      	bne.n	8019606 <phpalI14443p4mC_Sw_Init+0x2a>
 8019602:	2321      	movs	r3, #33	@ 0x21
 8019604:	e034      	b.n	8019670 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d101      	bne.n	8019610 <phpalI14443p4mC_Sw_Init+0x34>
 801960c:	2321      	movs	r3, #33	@ 0x21
 801960e:	e02f      	b.n	8019670 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	f640 7201 	movw	r2, #3841	@ 0xf01
 8019616:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	687a      	ldr	r2, [r7, #4]
 801961c:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	683a      	ldr	r2, [r7, #0]
 8019622:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	2201      	movs	r2, #1
 8019628:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	2200      	movs	r2, #0
 801962e:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	2202      	movs	r2, #2
 8019634:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	2200      	movs	r2, #0
 801963c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	224b      	movs	r2, #75	@ 0x4b
 8019642:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 8019646:	68f8      	ldr	r0, [r7, #12]
 8019648:	f000 f818 	bl	801967c <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	2200      	movs	r2, #0
 8019650:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	4a08      	ldr	r2, [pc, #32]	@ (8019678 <phpalI14443p4mC_Sw_Init+0x9c>)
 8019656:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	f103 0208 	add.w	r2, r3, #8
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	3308      	adds	r3, #8
 8019662:	4619      	mov	r1, r3
 8019664:	4610      	mov	r0, r2
 8019666:	f002 fce7 	bl	801c038 <phOsal_EventCreate>
 801966a:	4603      	mov	r3, r0
 801966c:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 801966e:	8afb      	ldrh	r3, [r7, #22]
}
 8019670:	4618      	mov	r0, r3
 8019672:	3718      	adds	r7, #24
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}
 8019678:	08026dfc 	.word	0x08026dfc

0801967c <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b084      	sub	sp, #16
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8019684:	2300      	movs	r3, #0
 8019686:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2200      	movs	r2, #0
 801968c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	2201      	movs	r2, #1
 8019694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2200      	movs	r2, #0
 801969c:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	2202      	movs	r2, #2
 80196a2:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	2200      	movs	r2, #0
 80196a8:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2200      	movs	r2, #0
 80196ae:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2200      	movs	r2, #0
 80196b4:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	2204      	movs	r2, #4
 80196ba:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2200      	movs	r2, #0
 80196c0:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	2200      	movs	r2, #0
 80196c8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2200      	movs	r2, #0
 80196d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	2200      	movs	r2, #0
 80196d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2200      	movs	r2, #0
 80196e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	2201      	movs	r2, #1
 80196e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	2200      	movs	r2, #0
 80196f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	2200      	movs	r2, #0
 80196f8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2200      	movs	r2, #0
 8019700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	685b      	ldr	r3, [r3, #4]
 8019708:	2200      	movs	r2, #0
 801970a:	2130      	movs	r1, #48	@ 0x30
 801970c:	4618      	mov	r0, r3
 801970e:	f7f6 fd57 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019712:	4603      	mov	r3, r0
 8019714:	81fb      	strh	r3, [r7, #14]
 8019716:	89fb      	ldrh	r3, [r7, #14]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d001      	beq.n	8019720 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 801971c:	89fb      	ldrh	r3, [r7, #14]
 801971e:	e000      	b.n	8019722 <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 8019720:	89fb      	ldrh	r3, [r7, #14]
}
 8019722:	4618      	mov	r0, r3
 8019724:	3710      	adds	r7, #16
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}

0801972a <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 801972a:	b480      	push	{r7}
 801972c:	b085      	sub	sp, #20
 801972e:	af00      	add	r7, sp, #0
 8019730:	60f8      	str	r0, [r7, #12]
 8019732:	460b      	mov	r3, r1
 8019734:	607a      	str	r2, [r7, #4]
 8019736:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8019738:	897b      	ldrh	r3, [r7, #10]
 801973a:	2b0c      	cmp	r3, #12
 801973c:	d002      	beq.n	8019744 <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 801973e:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8019742:	e017      	b.n	8019774 <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d101      	bne.n	801974e <phpalI18000p3m3_Sw_Init+0x24>
 801974a:	2321      	movs	r3, #33	@ 0x21
 801974c:	e012      	b.n	8019774 <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d101      	bne.n	8019758 <phpalI18000p3m3_Sw_Init+0x2e>
 8019754:	2321      	movs	r3, #33	@ 0x21
 8019756:	e00d      	b.n	8019774 <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	f640 3201 	movw	r2, #2817	@ 0xb01
 801975e:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	2200      	movs	r2, #0
 801976a:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	2200      	movs	r2, #0
 8019770:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8019772:	2300      	movs	r3, #0
}
 8019774:	4618      	mov	r0, r3
 8019776:	3714      	adds	r7, #20
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr

08019780 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 8019780:	b480      	push	{r7}
 8019782:	b085      	sub	sp, #20
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	4608      	mov	r0, r1
 801978a:	4611      	mov	r1, r2
 801978c:	461a      	mov	r2, r3
 801978e:	4603      	mov	r3, r0
 8019790:	70fb      	strb	r3, [r7, #3]
 8019792:	460b      	mov	r3, r1
 8019794:	70bb      	strb	r3, [r7, #2]
 8019796:	4613      	mov	r3, r2
 8019798:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 801979a:	2300      	movs	r3, #0
 801979c:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 801979e:	78fb      	ldrb	r3, [r7, #3]
 80197a0:	2b07      	cmp	r3, #7
 80197a2:	d80c      	bhi.n	80197be <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80197a4:	78bb      	ldrb	r3, [r7, #2]
 80197a6:	2b07      	cmp	r3, #7
 80197a8:	d809      	bhi.n	80197be <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80197aa:	787b      	ldrb	r3, [r7, #1]
 80197ac:	2b03      	cmp	r3, #3
 80197ae:	d806      	bhi.n	80197be <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80197b0:	7f3b      	ldrb	r3, [r7, #28]
 80197b2:	2b03      	cmp	r3, #3
 80197b4:	d803      	bhi.n	80197be <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80197b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	d902      	bls.n	80197c4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80197be:	f640 3321 	movw	r3, #2849	@ 0xb21
 80197c2:	e0f0      	b.n	80199a6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 80197c4:	2300      	movs	r3, #0
 80197c6:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 80197c8:	78fb      	ldrb	r3, [r7, #3]
 80197ca:	005b      	lsls	r3, r3, #1
 80197cc:	b2da      	uxtb	r2, r3
 80197ce:	78bb      	ldrb	r3, [r7, #2]
 80197d0:	089b      	lsrs	r3, r3, #2
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	4313      	orrs	r3, r2
 80197d6:	b2da      	uxtb	r2, r3
 80197d8:	7bbb      	ldrb	r3, [r7, #14]
 80197da:	1c59      	adds	r1, r3, #1
 80197dc:	73b9      	strb	r1, [r7, #14]
 80197de:	4619      	mov	r1, r3
 80197e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197e2:	440b      	add	r3, r1
 80197e4:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 80197e8:	b2d2      	uxtb	r2, r2
 80197ea:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 80197ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80197f0:	019b      	lsls	r3, r3, #6
 80197f2:	b25a      	sxtb	r2, r3
 80197f4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80197f8:	011b      	lsls	r3, r3, #4
 80197fa:	b25b      	sxtb	r3, r3
 80197fc:	4313      	orrs	r3, r2
 80197fe:	b25a      	sxtb	r2, r3
 8019800:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8019804:	009b      	lsls	r3, r3, #2
 8019806:	b25b      	sxtb	r3, r3
 8019808:	4313      	orrs	r3, r2
 801980a:	b259      	sxtb	r1, r3
 801980c:	7bbb      	ldrb	r3, [r7, #14]
 801980e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019810:	4413      	add	r3, r2
 8019812:	b2ca      	uxtb	r2, r1
 8019814:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8019816:	2300      	movs	r3, #0
 8019818:	73fb      	strb	r3, [r7, #15]
 801981a:	e01f      	b.n	801985c <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 801981c:	7bbb      	ldrb	r3, [r7, #14]
 801981e:	1c5a      	adds	r2, r3, #1
 8019820:	73ba      	strb	r2, [r7, #14]
 8019822:	4619      	mov	r1, r3
 8019824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019826:	440a      	add	r2, r1
 8019828:	7811      	ldrb	r1, [r2, #0]
 801982a:	7bfa      	ldrb	r2, [r7, #15]
 801982c:	69b8      	ldr	r0, [r7, #24]
 801982e:	4402      	add	r2, r0
 8019830:	7812      	ldrb	r2, [r2, #0]
 8019832:	0992      	lsrs	r2, r2, #6
 8019834:	b2d2      	uxtb	r2, r2
 8019836:	4618      	mov	r0, r3
 8019838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801983a:	4403      	add	r3, r0
 801983c:	430a      	orrs	r2, r1
 801983e:	b2d2      	uxtb	r2, r2
 8019840:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 8019842:	7bfb      	ldrb	r3, [r7, #15]
 8019844:	69ba      	ldr	r2, [r7, #24]
 8019846:	4413      	add	r3, r2
 8019848:	781a      	ldrb	r2, [r3, #0]
 801984a:	7bbb      	ldrb	r3, [r7, #14]
 801984c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801984e:	440b      	add	r3, r1
 8019850:	0092      	lsls	r2, r2, #2
 8019852:	b2d2      	uxtb	r2, r2
 8019854:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 8019856:	7bfb      	ldrb	r3, [r7, #15]
 8019858:	3301      	adds	r3, #1
 801985a:	73fb      	strb	r3, [r7, #15]
 801985c:	7bfa      	ldrb	r2, [r7, #15]
 801985e:	7f3b      	ldrb	r3, [r7, #28]
 8019860:	3301      	adds	r3, #1
 8019862:	429a      	cmp	r2, r3
 8019864:	d3da      	bcc.n	801981c <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 8019866:	7bbb      	ldrb	r3, [r7, #14]
 8019868:	1c5a      	adds	r2, r3, #1
 801986a:	73ba      	strb	r2, [r7, #14]
 801986c:	4619      	mov	r1, r3
 801986e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019870:	440a      	add	r2, r1
 8019872:	7811      	ldrb	r1, [r2, #0]
 8019874:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8019878:	0992      	lsrs	r2, r2, #6
 801987a:	b2d2      	uxtb	r2, r2
 801987c:	4618      	mov	r0, r3
 801987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019880:	4403      	add	r3, r0
 8019882:	430a      	orrs	r2, r1
 8019884:	b2d2      	uxtb	r2, r2
 8019886:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 8019888:	7bbb      	ldrb	r3, [r7, #14]
 801988a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801988c:	4413      	add	r3, r2
 801988e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8019892:	0092      	lsls	r2, r2, #2
 8019894:	b2d2      	uxtb	r2, r2
 8019896:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 8019898:	7bbb      	ldrb	r3, [r7, #14]
 801989a:	b29b      	uxth	r3, r3
 801989c:	00db      	lsls	r3, r3, #3
 801989e:	b29b      	uxth	r3, r3
 80198a0:	3306      	adds	r3, #6
 80198a2:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 80198a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80198a8:	08db      	lsrs	r3, r3, #3
 80198aa:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 80198ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80198b0:	f003 0307 	and.w	r3, r3, #7
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d002      	beq.n	80198be <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 80198b8:	7b3b      	ldrb	r3, [r7, #12]
 80198ba:	3301      	adds	r3, #1
 80198bc:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 80198be:	2300      	movs	r3, #0
 80198c0:	73fb      	strb	r3, [r7, #15]
 80198c2:	e036      	b.n	8019932 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 80198c4:	7bfb      	ldrb	r3, [r7, #15]
 80198c6:	6a3a      	ldr	r2, [r7, #32]
 80198c8:	4413      	add	r3, r2
 80198ca:	781b      	ldrb	r3, [r3, #0]
 80198cc:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 80198ce:	7bfa      	ldrb	r2, [r7, #15]
 80198d0:	7b3b      	ldrb	r3, [r7, #12]
 80198d2:	3b01      	subs	r3, #1
 80198d4:	429a      	cmp	r2, r3
 80198d6:	d112      	bne.n	80198fe <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 80198d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80198dc:	f003 0307 	and.w	r3, r3, #7
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d00c      	beq.n	80198fe <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 80198e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80198e8:	f003 0307 	and.w	r3, r3, #7
 80198ec:	f1c3 0308 	rsb	r3, r3, #8
 80198f0:	22ff      	movs	r2, #255	@ 0xff
 80198f2:	fa02 f303 	lsl.w	r3, r2, r3
 80198f6:	b2da      	uxtb	r2, r3
 80198f8:	7b7b      	ldrb	r3, [r7, #13]
 80198fa:	4013      	ands	r3, r2
 80198fc:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 80198fe:	7bbb      	ldrb	r3, [r7, #14]
 8019900:	1c5a      	adds	r2, r3, #1
 8019902:	73ba      	strb	r2, [r7, #14]
 8019904:	4619      	mov	r1, r3
 8019906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019908:	440a      	add	r2, r1
 801990a:	7811      	ldrb	r1, [r2, #0]
 801990c:	7b7a      	ldrb	r2, [r7, #13]
 801990e:	0992      	lsrs	r2, r2, #6
 8019910:	b2d2      	uxtb	r2, r2
 8019912:	4618      	mov	r0, r3
 8019914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019916:	4403      	add	r3, r0
 8019918:	430a      	orrs	r2, r1
 801991a:	b2d2      	uxtb	r2, r2
 801991c:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 801991e:	7bbb      	ldrb	r3, [r7, #14]
 8019920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019922:	4413      	add	r3, r2
 8019924:	7b7a      	ldrb	r2, [r7, #13]
 8019926:	0092      	lsls	r2, r2, #2
 8019928:	b2d2      	uxtb	r2, r2
 801992a:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 801992c:	7bfb      	ldrb	r3, [r7, #15]
 801992e:	3301      	adds	r3, #1
 8019930:	73fb      	strb	r3, [r7, #15]
 8019932:	7bfa      	ldrb	r2, [r7, #15]
 8019934:	7b3b      	ldrb	r3, [r7, #12]
 8019936:	429a      	cmp	r2, r3
 8019938:	d3c4      	bcc.n	80198c4 <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 801993a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801993e:	b29a      	uxth	r2, r3
 8019940:	897b      	ldrh	r3, [r7, #10]
 8019942:	4413      	add	r3, r2
 8019944:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 8019946:	897b      	ldrh	r3, [r7, #10]
 8019948:	08db      	lsrs	r3, r3, #3
 801994a:	b29a      	uxth	r2, r3
 801994c:	7bbb      	ldrb	r3, [r7, #14]
 801994e:	b29b      	uxth	r3, r3
 8019950:	429a      	cmp	r2, r3
 8019952:	d002      	beq.n	801995a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 8019954:	7bbb      	ldrb	r3, [r7, #14]
 8019956:	3b01      	subs	r3, #1
 8019958:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 801995a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801995e:	2b00      	cmp	r3, #0
 8019960:	d010      	beq.n	8019984 <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 8019962:	7bbb      	ldrb	r3, [r7, #14]
 8019964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019966:	4413      	add	r3, r2
 8019968:	7819      	ldrb	r1, [r3, #0]
 801996a:	897b      	ldrh	r3, [r7, #10]
 801996c:	f003 0307 	and.w	r3, r3, #7
 8019970:	2280      	movs	r2, #128	@ 0x80
 8019972:	fa22 f303 	lsr.w	r3, r2, r3
 8019976:	b2da      	uxtb	r2, r3
 8019978:	7bbb      	ldrb	r3, [r7, #14]
 801997a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801997c:	4403      	add	r3, r0
 801997e:	430a      	orrs	r2, r1
 8019980:	b2d2      	uxtb	r2, r2
 8019982:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 8019984:	7bbb      	ldrb	r3, [r7, #14]
 8019986:	3301      	adds	r3, #1
 8019988:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 801998a:	897b      	ldrh	r3, [r7, #10]
 801998c:	3301      	adds	r3, #1
 801998e:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 8019990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019992:	7bba      	ldrb	r2, [r7, #14]
 8019994:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 8019996:	897b      	ldrh	r3, [r7, #10]
 8019998:	b2db      	uxtb	r3, r3
 801999a:	f003 0307 	and.w	r3, r3, #7
 801999e:	b2da      	uxtb	r2, r3
 80199a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199a2:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80199a4:	2300      	movs	r3, #0
}
 80199a6:	4618      	mov	r0, r3
 80199a8:	3714      	adds	r7, #20
 80199aa:	46bd      	mov	sp, r7
 80199ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b0:	4770      	bx	lr

080199b2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 80199b2:	b580      	push	{r7, lr}
 80199b4:	b084      	sub	sp, #16
 80199b6:	af00      	add	r7, sp, #0
 80199b8:	6078      	str	r0, [r7, #4]
 80199ba:	4608      	mov	r0, r1
 80199bc:	4611      	mov	r1, r2
 80199be:	461a      	mov	r2, r3
 80199c0:	4603      	mov	r3, r0
 80199c2:	70fb      	strb	r3, [r7, #3]
 80199c4:	460b      	mov	r3, r1
 80199c6:	70bb      	strb	r3, [r7, #2]
 80199c8:	4613      	mov	r3, r2
 80199ca:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 80199cc:	2300      	movs	r3, #0
 80199ce:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 80199d0:	78fb      	ldrb	r3, [r7, #3]
 80199d2:	2b01      	cmp	r3, #1
 80199d4:	d816      	bhi.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199d6:	78bb      	ldrb	r3, [r7, #2]
 80199d8:	2b01      	cmp	r3, #1
 80199da:	d913      	bls.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199dc:	78bb      	ldrb	r3, [r7, #2]
 80199de:	2b03      	cmp	r3, #3
 80199e0:	d810      	bhi.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199e2:	787b      	ldrb	r3, [r7, #1]
 80199e4:	2b01      	cmp	r3, #1
 80199e6:	d80d      	bhi.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199e8:	7e3b      	ldrb	r3, [r7, #24]
 80199ea:	2b03      	cmp	r3, #3
 80199ec:	d80a      	bhi.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199ee:	7f3b      	ldrb	r3, [r7, #28]
 80199f0:	2b03      	cmp	r3, #3
 80199f2:	d807      	bhi.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80199f8:	2b01      	cmp	r3, #1
 80199fa:	d803      	bhi.n	8019a04 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80199fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019a00:	2b0f      	cmp	r3, #15
 8019a02:	d902      	bls.n	8019a0a <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 8019a04:	f640 3321 	movw	r3, #2849	@ 0xb21
 8019a08:	e072      	b.n	8019af0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	7f3a      	ldrb	r2, [r7, #28]
 8019a0e:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 8019a10:	787b      	ldrb	r3, [r7, #1]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d002      	beq.n	8019a1c <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 8019a16:	2301      	movs	r3, #1
 8019a18:	707b      	strb	r3, [r7, #1]
 8019a1a:	e001      	b.n	8019a20 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 8019a20:	78fb      	ldrb	r3, [r7, #3]
 8019a22:	00db      	lsls	r3, r3, #3
 8019a24:	b2da      	uxtb	r2, r3
 8019a26:	78bb      	ldrb	r3, [r7, #2]
 8019a28:	005b      	lsls	r3, r3, #1
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	4313      	orrs	r3, r2
 8019a2e:	b2da      	uxtb	r2, r3
 8019a30:	787b      	ldrb	r3, [r7, #1]
 8019a32:	4313      	orrs	r3, r2
 8019a34:	b2db      	uxtb	r3, r3
 8019a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019a3a:	b2da      	uxtb	r2, r3
 8019a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a3e:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8019a40:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8019a44:	019b      	lsls	r3, r3, #6
 8019a46:	b25a      	sxtb	r2, r3
 8019a48:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8019a4c:	011b      	lsls	r3, r3, #4
 8019a4e:	b25b      	sxtb	r3, r3
 8019a50:	4313      	orrs	r3, r2
 8019a52:	b25a      	sxtb	r2, r3
 8019a54:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8019a58:	00db      	lsls	r3, r3, #3
 8019a5a:	b25b      	sxtb	r3, r3
 8019a5c:	4313      	orrs	r3, r2
 8019a5e:	b25a      	sxtb	r2, r3
 8019a60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019a64:	085b      	lsrs	r3, r3, #1
 8019a66:	b2db      	uxtb	r3, r3
 8019a68:	b25b      	sxtb	r3, r3
 8019a6a:	4313      	orrs	r3, r2
 8019a6c:	b25a      	sxtb	r2, r3
 8019a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a70:	3301      	adds	r3, #1
 8019a72:	b2d2      	uxtb	r2, r2
 8019a74:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 8019a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a78:	3302      	adds	r3, #2
 8019a7a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8019a7e:	01d2      	lsls	r2, r2, #7
 8019a80:	b2d2      	uxtb	r2, r2
 8019a82:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 8019a84:	78fb      	ldrb	r3, [r7, #3]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d108      	bne.n	8019a9c <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 8019a8a:	78bb      	ldrb	r3, [r7, #2]
 8019a8c:	2b02      	cmp	r3, #2
 8019a8e:	d102      	bne.n	8019a96 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 8019a90:	2313      	movs	r3, #19
 8019a92:	81fb      	strh	r3, [r7, #14]
 8019a94:	e00a      	b.n	8019aac <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 8019a96:	2315      	movs	r3, #21
 8019a98:	81fb      	strh	r3, [r7, #14]
 8019a9a:	e007      	b.n	8019aac <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 8019a9c:	78bb      	ldrb	r3, [r7, #2]
 8019a9e:	2b02      	cmp	r3, #2
 8019aa0:	d102      	bne.n	8019aa8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 8019aa2:	2314      	movs	r3, #20
 8019aa4:	81fb      	strh	r3, [r7, #14]
 8019aa6:	e001      	b.n	8019aac <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 8019aa8:	2316      	movs	r3, #22
 8019aaa:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	685b      	ldr	r3, [r3, #4]
 8019ab0:	89fa      	ldrh	r2, [r7, #14]
 8019ab2:	210a      	movs	r1, #10
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7f6 fb83 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019aba:	4603      	mov	r3, r0
 8019abc:	81bb      	strh	r3, [r7, #12]
 8019abe:	89bb      	ldrh	r3, [r7, #12]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d001      	beq.n	8019ac8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 8019ac4:	89bb      	ldrh	r3, [r7, #12]
 8019ac6:	e013      	b.n	8019af0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	6858      	ldr	r0, [r3, #4]
 8019acc:	78fb      	ldrb	r3, [r7, #3]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d101      	bne.n	8019ad6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	e000      	b.n	8019ad8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 8019ad6:	2302      	movs	r3, #2
 8019ad8:	461a      	mov	r2, r3
 8019ada:	210f      	movs	r1, #15
 8019adc:	f7f6 fb70 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	81bb      	strh	r3, [r7, #12]
 8019ae4:	89bb      	ldrh	r3, [r7, #12]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d001      	beq.n	8019aee <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 8019aea:	89bb      	ldrh	r3, [r7, #12]
 8019aec:	e000      	b.n	8019af0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 8019aee:	2300      	movs	r3, #0
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	3710      	adds	r7, #16
 8019af4:	46bd      	mov	sp, r7
 8019af6:	bd80      	pop	{r7, pc}

08019af8 <phpalI18092mPI_Sw_Init>:
phStatus_t phpalI18092mPI_Sw_Init(
                                  phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b084      	sub	sp, #16
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	60f8      	str	r0, [r7, #12]
 8019b00:	460b      	mov	r3, r1
 8019b02:	607a      	str	r2, [r7, #4]
 8019b04:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18092mPI_Sw_DataParams_t) != wSizeOfDataParams)
 8019b06:	897b      	ldrh	r3, [r7, #10]
 8019b08:	2b24      	cmp	r3, #36	@ 0x24
 8019b0a:	d002      	beq.n	8019b12 <phpalI18092mPI_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MPI);
 8019b0c:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8019b10:	e014      	b.n	8019b3c <phpalI18092mPI_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d101      	bne.n	8019b1c <phpalI18092mPI_Sw_Init+0x24>
 8019b18:	2321      	movs	r3, #33	@ 0x21
 8019b1a:	e00f      	b.n	8019b3c <phpalI18092mPI_Sw_Init+0x44>
    PH_ASSERT_NULL (pHalDataParams);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d101      	bne.n	8019b26 <phpalI18092mPI_Sw_Init+0x2e>
 8019b22:	2321      	movs	r3, #33	@ 0x21
 8019b24:	e00a      	b.n	8019b3c <phpalI18092mPI_Sw_Init+0x44>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MPI | PHPAL_I18092MPI_SW_ID;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	f640 4201 	movw	r2, #3073	@ 0xc01
 8019b2c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	687a      	ldr	r2, [r7, #4]
 8019b32:	605a      	str	r2, [r3, #4]

    /* Reset protocol to defaults */
    return phpalI18092mPI_Sw_ResetProtocol(pDataParams);
 8019b34:	68f8      	ldr	r0, [r7, #12]
 8019b36:	f000 f805 	bl	8019b44 <phpalI18092mPI_Sw_ResetProtocol>
 8019b3a:	4603      	mov	r3, r0
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	3710      	adds	r7, #16
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bd80      	pop	{r7, pc}

08019b44 <phpalI18092mPI_Sw_ResetProtocol>:

phStatus_t phpalI18092mPI_Sw_ResetProtocol(
    phpalI18092mPI_Sw_DataParams_t * pDataParams
    )
{
 8019b44:	b480      	push	{r7}
 8019b46:	b083      	sub	sp, #12
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bNfcIdValid    = PH_OFF;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	721a      	strb	r2, [r3, #8]
    pDataParams->bStateNow      = PHPAL_I18092MPI_SW_STATE_INFORMATION_PDU_TX;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	2200      	movs	r2, #0
 8019b56:	74da      	strb	r2, [r3, #19]
    pDataParams->bDid           = 0;    /* set DID to 0, i.e. disable usage of DID */
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	751a      	strb	r2, [r3, #20]
    pDataParams->bNadEnabled    = PH_OFF;
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	2200      	movs	r2, #0
 8019b62:	755a      	strb	r2, [r3, #21]
    pDataParams->bNad           = 0;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2200      	movs	r2, #0
 8019b68:	759a      	strb	r2, [r3, #22]
    pDataParams->bWt            = PHPAL_I18092MPI_WT_MAX;
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	220e      	movs	r2, #14
 8019b6e:	75da      	strb	r2, [r3, #23]
    pDataParams->bFsl           = PHPAL_I18092MPI_FRAMESIZE_64;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	2200      	movs	r2, #0
 8019b74:	761a      	strb	r2, [r3, #24]
    pDataParams->bLri           = PHPAL_I18092MPI_FRAMESIZE_64;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	771a      	strb	r2, [r3, #28]
    pDataParams->bLrt           = PHPAL_I18092MPI_FRAMESIZE_64;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2200      	movs	r2, #0
 8019b80:	775a      	strb	r2, [r3, #29]
    pDataParams->bPni           = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	2200      	movs	r2, #0
 8019b86:	765a      	strb	r2, [r3, #25]
    pDataParams->bDsi           = 0;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	769a      	strb	r2, [r3, #26]
    pDataParams->bDri           = 0;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	2200      	movs	r2, #0
 8019b92:	76da      	strb	r2, [r3, #27]
    pDataParams->bMaxRetryCount = PHPAL_I18092MPI_SW_RETRIES_DEFAULT;
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	2202      	movs	r2, #2
 8019b98:	779a      	strb	r2, [r3, #30]
    pDataParams->bAtnDisabled   = 0;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	77da      	strb	r2, [r3, #31]
    pDataParams->bActiveMode    = 0;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	2200      	movs	r2, #0
 8019ba4:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	2202      	movs	r2, #2
 8019bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bPropPSLMode   = PH_OFF;
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    return PH_ERR_SUCCESS;
 8019bb8:	2300      	movs	r3, #0
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	370c      	adds	r7, #12
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc4:	4770      	bx	lr
	...

08019bc8 <phpalI18092mPI_Sw_Atr>:
                                 uint8_t * pGi,
                                 uint8_t bGiLength,
                                 uint8_t * pAtrRes,
                                 uint8_t * pAtrResLength
                                 )
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b098      	sub	sp, #96	@ 0x60
 8019bcc:	af04      	add	r7, sp, #16
 8019bce:	60f8      	str	r0, [r7, #12]
 8019bd0:	60b9      	str	r1, [r7, #8]
 8019bd2:	4611      	mov	r1, r2
 8019bd4:	461a      	mov	r2, r3
 8019bd6:	460b      	mov	r3, r1
 8019bd8:	71fb      	strb	r3, [r7, #7]
 8019bda:	4613      	mov	r3, r2
 8019bdc:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM wPreviousStatus;
    uint8_t     PH_MEMLOC_REM aCmd[14];
    uint8_t     PH_MEMLOC_REM bCmdLen;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8019bde:	2300      	movs	r3, #0
 8019be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 8019be2:	2300      	movs	r3, #0
 8019be4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 8019be6:	2300      	movs	r3, #0
 8019be8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 8019bea:	2300      	movs	r3, #0
 8019bec:	623b      	str	r3, [r7, #32]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 8019bee:	2300      	movs	r3, #0
 8019bf0:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wActiveMode;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bTo;
    uint16_t    PH_MEMLOC_REM wDsi = 0;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wDri;
    uint32_t    PH_MEMLOC_REM dwRwt;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	647b      	str	r3, [r7, #68]	@ 0x44

    wPreviousStatus = 0;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    bRetryCount = 0;
 8019c04:	2300      	movs	r3, #0
 8019c06:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    /* Parameter check */
    if ((bDid > PHPAL_I18092MPI_DID_MAX) ||
 8019c0a:	79fb      	ldrb	r3, [r7, #7]
 8019c0c:	2b0e      	cmp	r3, #14
 8019c0e:	d806      	bhi.n	8019c1e <phpalI18092mPI_Sw_Atr+0x56>
 8019c10:	79bb      	ldrb	r3, [r7, #6]
 8019c12:	2b03      	cmp	r3, #3
 8019c14:	d803      	bhi.n	8019c1e <phpalI18092mPI_Sw_Atr+0x56>
        (bLri > PHPAL_I18092MPI_FRAMESIZE_254) ||
 8019c16:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8019c1a:	2b30      	cmp	r3, #48	@ 0x30
 8019c1c:	d902      	bls.n	8019c24 <phpalI18092mPI_Sw_Atr+0x5c>
        (bGiLength > PHPAL_I18092MPI_MAX_GI_LENGTH))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18092MPI);
 8019c1e:	f640 4321 	movw	r3, #3105	@ 0xc21
 8019c22:	e29f      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	2200      	movs	r2, #0
 8019c28:	721a      	strb	r2, [r3, #8]

    /* Set new DID */
    pDataParams->bDid = bDid;
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	79fa      	ldrb	r2, [r7, #7]
 8019c2e:	751a      	strb	r2, [r3, #20]

    /* Build up frame data. */
    (void)memcpy(aCmd, pNfcid3i, PHPAL_I18092MPI_NFCID3_LENGTH);
 8019c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019c34:	220a      	movs	r2, #10
 8019c36:	68b9      	ldr	r1, [r7, #8]
 8019c38:	4618      	mov	r0, r3
 8019c3a:	f008 fbbe 	bl	80223ba <memcpy>
    bCmdLen = PHPAL_I18092MPI_NFCID3_LENGTH;
 8019c3e:	230a      	movs	r3, #10
 8019c40:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    aCmd[bCmdLen++] = bDid;
 8019c44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019c48:	1c5a      	adds	r2, r3, #1
 8019c4a:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8019c4e:	3350      	adds	r3, #80	@ 0x50
 8019c50:	443b      	add	r3, r7
 8019c52:	79fa      	ldrb	r2, [r7, #7]
 8019c54:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Next two fields (BSi and BRi) only used for active mode, so set them to 0. */
    aCmd[bCmdLen++] = 0x00;
 8019c58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019c5c:	1c5a      	adds	r2, r3, #1
 8019c5e:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8019c62:	3350      	adds	r3, #80	@ 0x50
 8019c64:	443b      	add	r3, r7
 8019c66:	2200      	movs	r2, #0
 8019c68:	f803 2c24 	strb.w	r2, [r3, #-36]
    aCmd[bCmdLen++] = 0x00;
 8019c6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019c70:	1c5a      	adds	r2, r3, #1
 8019c72:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8019c76:	3350      	adds	r3, #80	@ 0x50
 8019c78:	443b      	add	r3, r7
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Configure PPi field */
    aCmd[bCmdLen++] = (bLri << PHPAL_I18092MPI_SW_ATR_PPI_LRI_BIT);
 8019c80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8019c8a:	4619      	mov	r1, r3
 8019c8c:	79bb      	ldrb	r3, [r7, #6]
 8019c8e:	011b      	lsls	r3, r3, #4
 8019c90:	b2da      	uxtb	r2, r3
 8019c92:	f101 0350 	add.w	r3, r1, #80	@ 0x50
 8019c96:	443b      	add	r3, r7
 8019c98:	f803 2c24 	strb.w	r2, [r3, #-36]
    if (0U != (bNadEnabled))
 8019c9c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d010      	beq.n	8019cc6 <phpalI18092mPI_Sw_Atr+0xfe>
    {
        aCmd[bCmdLen - 1U] |= 0x01U;
 8019ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019ca8:	3b01      	subs	r3, #1
 8019caa:	3350      	adds	r3, #80	@ 0x50
 8019cac:	443b      	add	r3, r7
 8019cae:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8019cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019cb6:	3b01      	subs	r3, #1
 8019cb8:	f042 0201 	orr.w	r2, r2, #1
 8019cbc:	b2d2      	uxtb	r2, r2
 8019cbe:	3350      	adds	r3, #80	@ 0x50
 8019cc0:	443b      	add	r3, r7
 8019cc2:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get initial set data rate from HAL since NFC allows starting at different data rates. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wDsi));
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	f107 0216 	add.w	r2, r7, #22
 8019cce:	2109      	movs	r1, #9
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	f7f7 fec3 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d002      	beq.n	8019cea <phpalI18092mPI_Sw_Atr+0x122>
 8019ce4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019ce8:	e23c      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDsi, &pDataParams->bDsi));
 8019cea:	8afa      	ldrh	r2, [r7, #22]
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	331a      	adds	r3, #26
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	4610      	mov	r0, r2
 8019cf4:	f000 fc5e 	bl	801a5b4 <phpalI18092mPI_Sw_ConvertDatarate>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019cfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d002      	beq.n	8019d0c <phpalI18092mPI_Sw_Atr+0x144>
 8019d06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d0a:	e22b      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, &wDri));
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	685b      	ldr	r3, [r3, #4]
 8019d10:	f107 0214 	add.w	r2, r7, #20
 8019d14:	210a      	movs	r1, #10
 8019d16:	4618      	mov	r0, r3
 8019d18:	f7f7 fea0 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8019d1c:	4603      	mov	r3, r0
 8019d1e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d002      	beq.n	8019d30 <phpalI18092mPI_Sw_Atr+0x168>
 8019d2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d2e:	e219      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDri, &pDataParams->bDri));
 8019d30:	8aba      	ldrh	r2, [r7, #20]
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	331b      	adds	r3, #27
 8019d36:	4619      	mov	r1, r3
 8019d38:	4610      	mov	r0, r2
 8019d3a:	f000 fc3b 	bl	801a5b4 <phpalI18092mPI_Sw_ConvertDatarate>
 8019d3e:	4603      	mov	r3, r0
 8019d40:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019d44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d002      	beq.n	8019d52 <phpalI18092mPI_Sw_Atr+0x18a>
 8019d4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d50:	e208      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>

    /* Configure HAL for handling StartByte in case Transmit datarate is 106kbps. */
    if (pDataParams->bDsi == PHHAL_HW_RF_DATARATE_106)
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	7e9b      	ldrb	r3, [r3, #26]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d110      	bne.n	8019d7c <phpalI18092mPI_Sw_Atr+0x1b4>
    {
        /* Configure HAL for NFCIP to enable handling StartByte at 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_ON));
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	685b      	ldr	r3, [r3, #4]
 8019d5e:	2201      	movs	r2, #1
 8019d60:	215c      	movs	r1, #92	@ 0x5c
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7f6 fa2c 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019d68:	4603      	mov	r3, r0
 8019d6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d013      	beq.n	8019d9e <phpalI18092mPI_Sw_Atr+0x1d6>
 8019d76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d7a:	e1f3      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    }
    else
    {
        /* Disabled handling of StartByte if datarate is other than 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_OFF));
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	685b      	ldr	r3, [r3, #4]
 8019d80:	2200      	movs	r2, #0
 8019d82:	215c      	movs	r1, #92	@ 0x5c
 8019d84:	4618      	mov	r0, r3
 8019d86:	f7f6 fa1b 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019d90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d002      	beq.n	8019d9e <phpalI18092mPI_Sw_Atr+0x1d6>
 8019d98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019d9c:	e1e2      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	685b      	ldr	r3, [r3, #4]
 8019da2:	f240 523b 	movw	r2, #1339	@ 0x53b
 8019da6:	210e      	movs	r1, #14
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7f6 fa09 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 8019dae:	4603      	mov	r3, r0
 8019db0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d002      	beq.n	8019dc2 <phpalI18092mPI_Sw_Atr+0x1fa>
 8019dbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019dc0:	e1d0      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        PHPAL_I18092MPI_SW_RWT_ACTIVATION_MS + PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS));

    /* Reset response received flag */
    bResponseReceived = 0;
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 8019dc8:	2300      	movs	r3, #0
 8019dca:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

        /* Write frame header. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams, PH_EXCHANGE_BUFFER_FIRST, PHPAL_I18092MPI_SW_CMD_ATR_REQ, (bCmdLen + bGiLength)));
 8019dce:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8019dd2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8019dd6:	4413      	add	r3, r2
 8019dd8:	b2db      	uxtb	r3, r3
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8019de0:	68f8      	ldr	r0, [r7, #12]
 8019de2:	f000 fab5 	bl	801a350 <phpalI18092mPI_Sw_WriteFrameHeader>
 8019de6:	4603      	mov	r3, r0
 8019de8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d002      	beq.n	8019dfa <phpalI18092mPI_Sw_Atr+0x232>
 8019df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019df8:	e1b4      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>

        /* Append general bytes if present */
        if (bGiLength > 0U)
 8019dfa:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d03e      	beq.n	8019e80 <phpalI18092mPI_Sw_Atr+0x2b8>
        {
            /* Mark that general bytes are present */
            aCmd[bCmdLen - 1U] |= PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE;
 8019e02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019e06:	3b01      	subs	r3, #1
 8019e08:	3350      	adds	r3, #80	@ 0x50
 8019e0a:	443b      	add	r3, r7
 8019e0c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8019e10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019e14:	3b01      	subs	r3, #1
 8019e16:	f042 0202 	orr.w	r2, r2, #2
 8019e1a:	b2d2      	uxtb	r2, r2
 8019e1c:	3350      	adds	r3, #80	@ 0x50
 8019e1e:	443b      	add	r3, r7
 8019e20:	f803 2c24 	strb.w	r2, [r3, #-36]

            /* Write data to internal buffer. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	6858      	ldr	r0, [r3, #4]
 8019e28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8019e32:	2100      	movs	r1, #0
 8019e34:	9101      	str	r1, [sp, #4]
 8019e36:	2100      	movs	r1, #0
 8019e38:	9100      	str	r1, [sp, #0]
 8019e3a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8019e3e:	f7f5 fe07 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8019e42:	4603      	mov	r3, r0
 8019e44:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019e48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d002      	beq.n	8019e56 <phpalI18092mPI_Sw_Atr+0x28e>
 8019e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019e54:	e186      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)bCmdLen,
                NULL,
                NULL));

            /* Write general bytes, transmit the whole buffer and receive response. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	6858      	ldr	r0, [r3, #4]
 8019e5a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8019e64:	9301      	str	r3, [sp, #4]
 8019e66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8019e6a:	9300      	str	r3, [sp, #0]
 8019e6c:	4613      	mov	r3, r2
 8019e6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019e70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8019e74:	f7f5 fdec 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8019e78:	4603      	mov	r3, r0
 8019e7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8019e7e:	e014      	b.n	8019eaa <phpalI18092mPI_Sw_Atr+0x2e2>
                &wResponseLength);
        }
        else
        {
            /* No additional general bytes to be sent so transmit the buffer now. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	6858      	ldr	r0, [r3, #4]
 8019e84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019e88:	b299      	uxth	r1, r3
 8019e8a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8019e8e:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8019e92:	9301      	str	r3, [sp, #4]
 8019e94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8019e98:	9300      	str	r3, [sp, #0]
 8019e9a:	460b      	mov	r3, r1
 8019e9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8019ea0:	f7f5 fdd6 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                &pResp,
                &wResponseLength);
        }

        /* Get the state of activation mode status either indication active/passive mode. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	f107 0218 	add.w	r2, r7, #24
 8019eb2:	2154      	movs	r1, #84	@ 0x54
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7f7 fdd1 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d002      	beq.n	8019ece <phpalI18092mPI_Sw_Atr+0x306>
 8019ec8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019ecc:	e14a      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_ACTIVEMODE,
            &wActiveMode));
        pDataParams->bActiveMode = (uint8_t)wActiveMode;
 8019ece:	8b3b      	ldrh	r3, [r7, #24]
 8019ed0:	b2da      	uxtb	r2, r3
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	f883 2020 	strb.w	r2, [r3, #32]

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8019ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019edc:	b2db      	uxtb	r3, r3
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d102      	bne.n	8019ee8 <phpalI18092mPI_Sw_Atr+0x320>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        }

        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8019ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019eec:	b2db      	uxtb	r3, r3
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	f040 80d0 	bne.w	801a094 <phpalI18092mPI_Sw_Atr+0x4cc>
        {
            /* Check for valid response frame and remove start byte if present. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 8019ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019ef6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019ef8:	f107 031a 	add.w	r3, r7, #26
 8019efc:	9303      	str	r3, [sp, #12]
 8019efe:	f107 031c 	add.w	r3, r7, #28
 8019f02:	9302      	str	r3, [sp, #8]
 8019f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019f08:	9301      	str	r3, [sp, #4]
 8019f0a:	f107 0320 	add.w	r3, r7, #32
 8019f0e:	9300      	str	r3, [sp, #0]
 8019f10:	2301      	movs	r3, #1
 8019f12:	68f8      	ldr	r0, [r7, #12]
 8019f14:	f000 fa60 	bl	801a3d8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 8019f18:	4603      	mov	r3, r0
 8019f1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d002      	beq.n	8019f2c <phpalI18092mPI_Sw_Atr+0x364>
 8019f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019f2a:	e11b      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Ignore length byte */
            ++pFrame;
 8019f2c:	6a3b      	ldr	r3, [r7, #32]
 8019f2e:	3301      	adds	r3, #1
 8019f30:	623b      	str	r3, [r7, #32]
            --wFrameLength;
 8019f32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f34:	3b01      	subs	r3, #1
 8019f36:	b29b      	uxth	r3, r3
 8019f38:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Check for minimum and maximum frame size. NFCForum-TS-DigitalProtocol-1.0 section 14.6.1.3. */
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 8019f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f3c:	2b40      	cmp	r3, #64	@ 0x40
 8019f3e:	d802      	bhi.n	8019f46 <phpalI18092mPI_Sw_Atr+0x37e>
                (wFrameLength < PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH))
 8019f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 8019f42:	2b10      	cmp	r3, #16
 8019f44:	d802      	bhi.n	8019f4c <phpalI18092mPI_Sw_Atr+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019f46:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019f4a:	e10b      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check Gt presence / absence */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE))
 8019f4c:	6a3b      	ldr	r3, [r7, #32]
 8019f4e:	3310      	adds	r3, #16
 8019f50:	781b      	ldrb	r3, [r3, #0]
 8019f52:	f003 0302 	and.w	r3, r3, #2
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d005      	beq.n	8019f66 <phpalI18092mPI_Sw_Atr+0x39e>
            {
                /* Gt should be present */
                if (wFrameLength <= PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 8019f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f5c:	2b11      	cmp	r3, #17
 8019f5e:	d808      	bhi.n	8019f72 <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019f60:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019f64:	e0fe      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }
            else
            {
                /* Gt should be absent */
                if (wFrameLength > PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 8019f66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019f68:	2b11      	cmp	r3, #17
 8019f6a:	d902      	bls.n	8019f72 <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019f6c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019f70:	e0f8      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }

            /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.2. */
            if (pFrame[PHPAL_I18092MPI_SW_ATR_RES_DID_POS] != bDid)
 8019f72:	6a3b      	ldr	r3, [r7, #32]
 8019f74:	330c      	adds	r3, #12
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	79fa      	ldrb	r2, [r7, #7]
 8019f7a:	429a      	cmp	r2, r3
 8019f7c:	d002      	beq.n	8019f84 <phpalI18092mPI_Sw_Atr+0x3bc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019f7e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019f82:	e0ef      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check NadUsed bit */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_NAD_USED))
 8019f84:	6a3b      	ldr	r3, [r7, #32]
 8019f86:	3310      	adds	r3, #16
 8019f88:	781b      	ldrb	r3, [r3, #0]
 8019f8a:	f003 0301 	and.w	r3, r3, #1
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d00e      	beq.n	8019fb0 <phpalI18092mPI_Sw_Atr+0x3e8>
            {
                /* Protocol error if NAD use is requested to be disabled */
                if (bNadEnabled == PH_OFF)
 8019f92:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d102      	bne.n	8019fa0 <phpalI18092mPI_Sw_Atr+0x3d8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8019f9a:	f640 4306 	movw	r3, #3078	@ 0xc06
 8019f9e:	e0e1      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                }

                pDataParams->bNad = bNad;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8019fa6:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_ON;
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	2201      	movs	r2, #1
 8019fac:	755a      	strb	r2, [r3, #21]
 8019fae:	e005      	b.n	8019fbc <phpalI18092mPI_Sw_Atr+0x3f4>
            }
            else
            {
                pDataParams->bNad = 0x00;
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_OFF;
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	2200      	movs	r2, #0
 8019fba:	755a      	strb	r2, [r3, #21]
            }

            /* Copy ATR_RES to response buffer. */
            (void)memcpy(pAtrRes, pFrame, wFrameLength);
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019fc0:	4619      	mov	r1, r3
 8019fc2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019fc4:	f008 f9f9 	bl	80223ba <memcpy>
            *pAtrResLength = (uint8_t)wFrameLength;
 8019fc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019fca:	b2da      	uxtb	r2, r3
 8019fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019fce:	701a      	strb	r2, [r3, #0]

            /* Update LRi */
            pDataParams->bLri = bLri;
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	79ba      	ldrb	r2, [r7, #6]
 8019fd4:	771a      	strb	r2, [r3, #28]

            /* Retrieve TO */
            bTo = pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_TO_POS] & 0xFU;
 8019fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019fd8:	330f      	adds	r3, #15
 8019fda:	781b      	ldrb	r3, [r3, #0]
 8019fdc:	f003 030f 	and.w	r3, r3, #15
 8019fe0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

            /* Adjust timeout field if necessary. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.8. */
            if (bTo > PHPAL_I18092MPI_WT_MAX)
 8019fe4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019fe8:	2b0e      	cmp	r3, #14
 8019fea:	d902      	bls.n	8019ff2 <phpalI18092mPI_Sw_Atr+0x42a>
            {
                bTo = PHPAL_I18092MPI_WT_MAX;
 8019fec:	230e      	movs	r3, #14
 8019fee:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            }

            /* Parse the response to see what frame size the target supports. */
            pDataParams->bLrt = (pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] >> 4U) & 0x3U;
 8019ff2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ff4:	3310      	adds	r3, #16
 8019ff6:	781b      	ldrb	r3, [r3, #0]
 8019ff8:	091b      	lsrs	r3, r3, #4
 8019ffa:	b2db      	uxtb	r3, r3
 8019ffc:	f003 0303 	and.w	r3, r3, #3
 801a000:	b2da      	uxtb	r2, r3
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	775a      	strb	r2, [r3, #29]

            /* Set FSL to the lowest frame size (lowest of LRi and LRt) */
            pDataParams->bFsl = (pDataParams->bLrt < pDataParams->bLri) ? pDataParams->bLrt : pDataParams->bLri;
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	7f1a      	ldrb	r2, [r3, #28]
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	7f5b      	ldrb	r3, [r3, #29]
 801a00e:	4293      	cmp	r3, r2
 801a010:	bf28      	it	cs
 801a012:	4613      	movcs	r3, r2
 801a014:	b2da      	uxtb	r2, r3
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	761a      	strb	r2, [r3, #24]

            /* Store TO */
            pDataParams->bWt = bTo;
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 801a020:	75da      	strb	r2, [r3, #23]

            /* NfcID is now valid */
            pDataParams->bNfcIdValid = PH_ON;
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	2201      	movs	r2, #1
 801a026:	721a      	strb	r2, [r3, #8]
            (void)memcpy(pDataParams->aNfcid3i, &pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_NFCID3_POS], PHPAL_I18092MPI_NFCID3_LENGTH);
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	f103 0009 	add.w	r0, r3, #9
 801a02e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a030:	3302      	adds	r3, #2
 801a032:	220a      	movs	r2, #10
 801a034:	4619      	mov	r1, r3
 801a036:	f008 f9c0 	bl	80223ba <memcpy>

            /* Calculate Response Waiting Time. */
            dwShift = 1U;
 801a03a:	2301      	movs	r3, #1
 801a03c:	647b      	str	r3, [r7, #68]	@ 0x44
            dwRwt = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((dwShift << bTo)));
 801a03e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801a042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a044:	fa02 f303 	lsl.w	r3, r2, r3
 801a048:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801a04c:	fb02 f303 	mul.w	r3, r2, r3
 801a050:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 801a052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a054:	3302      	adds	r3, #2
 801a056:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt /= 1000U;
 801a058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a05a:	4a44      	ldr	r2, [pc, #272]	@ (801a16c <phpalI18092mPI_Sw_Atr+0x5a4>)
 801a05c:	fba2 2303 	umull	r2, r3, r2, r3
 801a060:	099b      	lsrs	r3, r3, #6
 801a062:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += 1U;
 801a064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a066:	3301      	adds	r3, #1
 801a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 801a06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a06c:	3364      	adds	r3, #100	@ 0x64
 801a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Set Response Waiting Time. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	685b      	ldr	r3, [r3, #4]
 801a074:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a076:	b292      	uxth	r2, r2
 801a078:	210e      	movs	r1, #14
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7f6 f8a0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801a080:	4603      	mov	r3, r0
 801a082:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801a086:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d058      	beq.n	801a140 <phpalI18092mPI_Sw_Atr+0x578>
 801a08e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a092:	e067      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)dwRwt));
        }
        else
        {
            /* If HAL returned Integrity Error first time then save and return this status at the end of Retry. */
            if (((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) && (bRetryCount == 0U))
 801a094:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a098:	b2db      	uxtb	r3, r3
 801a09a:	2b02      	cmp	r3, #2
 801a09c:	d107      	bne.n	801a0ae <phpalI18092mPI_Sw_Atr+0x4e6>
 801a09e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d103      	bne.n	801a0ae <phpalI18092mPI_Sw_Atr+0x4e6>
            {
                wPreviousStatus = status;
 801a0a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a0aa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            }

            /* Retransmit in case of timeout or receive error, ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
            if (0u != (PHPAL_I18092MPI_SW_IS_INVALID_BLOCK_STATUS(status)))
 801a0ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a0b2:	b2db      	uxtb	r3, r3
 801a0b4:	2b01      	cmp	r3, #1
 801a0b6:	d00e      	beq.n	801a0d6 <phpalI18092mPI_Sw_Atr+0x50e>
 801a0b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a0bc:	b2db      	uxtb	r3, r3
 801a0be:	2b02      	cmp	r3, #2
 801a0c0:	d009      	beq.n	801a0d6 <phpalI18092mPI_Sw_Atr+0x50e>
 801a0c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a0c6:	b2db      	uxtb	r3, r3
 801a0c8:	2b05      	cmp	r3, #5
 801a0ca:	d004      	beq.n	801a0d6 <phpalI18092mPI_Sw_Atr+0x50e>
 801a0cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a0d0:	b2db      	uxtb	r3, r3
 801a0d2:	2b03      	cmp	r3, #3
 801a0d4:	d134      	bne.n	801a140 <phpalI18092mPI_Sw_Atr+0x578>
            {
                /* Check if we shall perform another retry. */
                if (bRetryCount < pDataParams->bMaxRetryCount)
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	7f9b      	ldrb	r3, [r3, #30]
 801a0da:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 801a0de:	429a      	cmp	r2, r3
 801a0e0:	d21b      	bcs.n	801a11a <phpalI18092mPI_Sw_Atr+0x552>
                {
                    ++bRetryCount;
 801a0e2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801a0e6:	3301      	adds	r3, #1
 801a0e8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    bRetry = PH_ON;
 801a0ec:	2301      	movs	r3, #1
 801a0ee:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

                    if (wActiveMode == PH_ON)
 801a0f2:	8b3b      	ldrh	r3, [r7, #24]
 801a0f4:	2b01      	cmp	r3, #1
 801a0f6:	d123      	bne.n	801a140 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        /* Wait for T_IRFG (Initial RF guard time) before ATR retry. */
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	2205      	movs	r2, #5
 801a0fe:	2101      	movs	r1, #1
 801a100:	4618      	mov	r0, r3
 801a102:	f7f5 ffa1 	bl	8010048 <phhalHw_Pn5180_Wait>
 801a106:	4603      	mov	r3, r0
 801a108:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801a10c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a110:	2b00      	cmp	r3, #0
 801a112:	d015      	beq.n	801a140 <phpalI18092mPI_Sw_Atr+0x578>
 801a114:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a118:	e024      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
                    }
                }
                else
                {
                    /* Deselect target ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
                    statusTmp = phpalI18092mPI_Sw_Deselect(pDataParams, PHPAL_I18092MPI_DESELECT_RLS);
 801a11a:	210a      	movs	r1, #10
 801a11c:	68f8      	ldr	r0, [r7, #12]
 801a11e:	f000 f827 	bl	801a170 <phpalI18092mPI_Sw_Deselect>
 801a122:	4603      	mov	r3, r0
 801a124:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

                    /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                    if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	7f9b      	ldrb	r3, [r3, #30]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d007      	beq.n	801a140 <phpalI18092mPI_Sw_Atr+0x578>
 801a130:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 801a134:	2b00      	cmp	r3, #0
 801a136:	d003      	beq.n	801a140 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 801a138:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 801a13c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 801a140:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801a144:	2b00      	cmp	r3, #0
 801a146:	f47f ae3f 	bne.w	8019dc8 <phpalI18092mPI_Sw_Atr+0x200>

    if ((wPreviousStatus != 0U) && (status != PH_ERR_SUCCESS))
 801a14a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d006      	beq.n	801a160 <phpalI18092mPI_Sw_Atr+0x598>
 801a152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801a156:	2b00      	cmp	r3, #0
 801a158:	d002      	beq.n	801a160 <phpalI18092mPI_Sw_Atr+0x598>
    {
        return wPreviousStatus;
 801a15a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801a15e:	e001      	b.n	801a164 <phpalI18092mPI_Sw_Atr+0x59c>
    }
    return status;
 801a160:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
}
 801a164:	4618      	mov	r0, r3
 801a166:	3750      	adds	r7, #80	@ 0x50
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}
 801a16c:	10624dd3 	.word	0x10624dd3

0801a170 <phpalI18092mPI_Sw_Deselect>:

phStatus_t phpalI18092mPI_Sw_Deselect(
                                      phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                      uint8_t bDeselectCommand
                                      )
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b092      	sub	sp, #72	@ 0x48
 801a174:	af04      	add	r7, sp, #16
 801a176:	6078      	str	r0, [r7, #4]
 801a178:	460b      	mov	r3, r1
 801a17a:	70fb      	strb	r3, [r7, #3]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t     PH_MEMLOC_REM bCmdLen = 0;
 801a17c:	2300      	movs	r3, #0
 801a17e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM bExpectedResponse;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801a182:	2300      	movs	r3, #0
 801a184:	623b      	str	r3, [r7, #32]
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 801a186:	2300      	movs	r3, #0
 801a188:	83fb      	strh	r3, [r7, #30]
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 801a18a:	2300      	movs	r3, #0
 801a18c:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 801a18e:	2300      	movs	r3, #0
 801a190:	82fb      	strh	r3, [r7, #22]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 801a192:	2300      	movs	r3, #0
 801a194:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 801a196:	2300      	movs	r3, #0
 801a198:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_COUNT bRetryCount = 0;
 801a19a:	2300      	movs	r3, #0
 801a19c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2200      	movs	r2, #0
 801a1a8:	721a      	strb	r2, [r3, #8]

    /* Calculate Response Waiting Time. */
    dwShift = 1U;
 801a1aa:	2301      	movs	r3, #1
 801a1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dwTimeout = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((uint32_t)(dwShift << pDataParams->bWt)));
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	7ddb      	ldrb	r3, [r3, #23]
 801a1b2:	461a      	mov	r2, r3
 801a1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1b6:	4093      	lsls	r3, r2
 801a1b8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801a1bc:	fb02 f303 	mul.w	r3, r2, r3
 801a1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 801a1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1c4:	3302      	adds	r3, #2
 801a1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout /= 1000U;
 801a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1ca:	4a60      	ldr	r2, [pc, #384]	@ (801a34c <phpalI18092mPI_Sw_Deselect+0x1dc>)
 801a1cc:	fba2 2303 	umull	r2, r3, r2, r3
 801a1d0:	099b      	lsrs	r3, r3, #6
 801a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += 1U;
 801a1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1d6:	3301      	adds	r3, #1
 801a1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 801a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1dc:	3364      	adds	r3, #100	@ 0x64
 801a1de:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Set Response Waiting Time as per NFCForum-TS-DigitalProtocol-1.1 section 16.11.2.3. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	685b      	ldr	r3, [r3, #4]
 801a1e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a1e6:	b292      	uxth	r2, r2
 801a1e8:	210e      	movs	r1, #14
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7f5 ffe8 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a1f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d001      	beq.n	801a1fe <phpalI18092mPI_Sw_Deselect+0x8e>
 801a1fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a1fc:	e0a1      	b.n	801a342 <phpalI18092mPI_Sw_Deselect+0x1d2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        (uint16_t)dwTimeout));

    /* Append DID if enabled */
    if (pDataParams->bDid > 0U)
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	7d1b      	ldrb	r3, [r3, #20]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d00c      	beq.n	801a220 <phpalI18092mPI_Sw_Deselect+0xb0>
    {
        aCmd[bCmdLen++] = pDataParams->bDid;
 801a206:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a20a:	1c5a      	adds	r2, r3, #1
 801a20c:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 801a210:	4619      	mov	r1, r3
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	7d1a      	ldrb	r2, [r3, #20]
 801a216:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801a21a:	443b      	add	r3, r7
 801a21c:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    /* Reset response received flag */
    bResponseReceived = 0;
 801a220:	2300      	movs	r3, #0
 801a222:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 801a226:	2300      	movs	r3, #0
 801a228:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

        /* Write frame header and update length field. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams,PH_EXCHANGE_BUFFER_FIRST, bDeselectCommand, bCmdLen));
 801a22c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a230:	78fa      	ldrb	r2, [r7, #3]
 801a232:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801a236:	6878      	ldr	r0, [r7, #4]
 801a238:	f000 f88a 	bl	801a350 <phpalI18092mPI_Sw_WriteFrameHeader>
 801a23c:	4603      	mov	r3, r0
 801a23e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a240:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a242:	2b00      	cmp	r3, #0
 801a244:	d001      	beq.n	801a24a <phpalI18092mPI_Sw_Deselect+0xda>
 801a246:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a248:	e07b      	b.n	801a342 <phpalI18092mPI_Sw_Deselect+0x1d2>

        /* Start transmission. */
        status = phhalHw_Exchange(pDataParams->pHalDataParams,
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	6858      	ldr	r0, [r3, #4]
 801a24e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801a252:	b299      	uxth	r1, r3
 801a254:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801a258:	f107 031e 	add.w	r3, r7, #30
 801a25c:	9301      	str	r3, [sp, #4]
 801a25e:	f107 0320 	add.w	r3, r7, #32
 801a262:	9300      	str	r3, [sp, #0]
 801a264:	460b      	mov	r3, r1
 801a266:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801a26a:	f7f5 fbf1 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801a26e:	4603      	mov	r3, r0
 801a270:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)bCmdLen,
            &pResp,
            &wResponseLength);

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801a272:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2b00      	cmp	r3, #0
 801a278:	d102      	bne.n	801a280 <phpalI18092mPI_Sw_Deselect+0x110>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 801a27a:	2301      	movs	r3, #1
 801a27c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801a280:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a282:	b2db      	uxtb	r3, r3
 801a284:	2b00      	cmp	r3, #0
 801a286:	d13c      	bne.n	801a302 <phpalI18092mPI_Sw_Deselect+0x192>
        {
            if (bDeselectCommand == PHPAL_I18092MPI_DESELECT_DSL)
 801a288:	78fb      	ldrb	r3, [r7, #3]
 801a28a:	2b08      	cmp	r3, #8
 801a28c:	d103      	bne.n	801a296 <phpalI18092mPI_Sw_Deselect+0x126>
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_DSL_RES;
 801a28e:	2309      	movs	r3, #9
 801a290:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 801a294:	e002      	b.n	801a29c <phpalI18092mPI_Sw_Deselect+0x12c>
            }
            else
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_RLS_RES;
 801a296:	230b      	movs	r3, #11
 801a298:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            }

            /* Check for valid response frame. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 801a29c:	6a39      	ldr	r1, [r7, #32]
 801a29e:	8bfa      	ldrh	r2, [r7, #30]
 801a2a0:	f897 0034 	ldrb.w	r0, [r7, #52]	@ 0x34
 801a2a4:	f107 030e 	add.w	r3, r7, #14
 801a2a8:	9303      	str	r3, [sp, #12]
 801a2aa:	f107 0310 	add.w	r3, r7, #16
 801a2ae:	9302      	str	r3, [sp, #8]
 801a2b0:	f107 0316 	add.w	r3, r7, #22
 801a2b4:	9301      	str	r3, [sp, #4]
 801a2b6:	f107 0318 	add.w	r3, r7, #24
 801a2ba:	9300      	str	r3, [sp, #0]
 801a2bc:	4603      	mov	r3, r0
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	f000 f88a 	bl	801a3d8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a2c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d001      	beq.n	801a2d2 <phpalI18092mPI_Sw_Deselect+0x162>
 801a2ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a2d0:	e037      	b.n	801a342 <phpalI18092mPI_Sw_Deselect+0x1d2>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Check DID */
            if (pDataParams->bDid > 0U)
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	7d1b      	ldrb	r3, [r3, #20]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d00c      	beq.n	801a2f4 <phpalI18092mPI_Sw_Deselect+0x184>
            {
                /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if ((wPayloadLength != 1U) || (pPayload[0] != pDataParams->bDid))
 801a2da:	89fb      	ldrh	r3, [r7, #14]
 801a2dc:	2b01      	cmp	r3, #1
 801a2de:	d105      	bne.n	801a2ec <phpalI18092mPI_Sw_Deselect+0x17c>
 801a2e0:	693b      	ldr	r3, [r7, #16]
 801a2e2:	781a      	ldrb	r2, [r3, #0]
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	7d1b      	ldrb	r3, [r3, #20]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d024      	beq.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a2ec:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a2f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801a2f2:	e020      	b.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
                }
            }
            else
            {
                /* DID must not be present in response. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if (wPayloadLength != 0U)
 801a2f4:	89fb      	ldrh	r3, [r7, #14]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d01d      	beq.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a2fa:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a2fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801a300:	e019      	b.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
        }
        else
        {
            /* Check if we shall perform a(nother) retry. */
            if (bRetryCount < pDataParams->bMaxRetryCount)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	7f9b      	ldrb	r3, [r3, #30]
 801a306:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801a30a:	429a      	cmp	r2, r3
 801a30c:	d208      	bcs.n	801a320 <phpalI18092mPI_Sw_Deselect+0x1b0>
            {
                ++bRetryCount;
 801a30e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a312:	3301      	adds	r3, #1
 801a314:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                bRetry = PH_ON;
 801a318:	2301      	movs	r3, #1
 801a31a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 801a31e:	e00a      	b.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
            else
            {
                /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	7f9b      	ldrb	r3, [r3, #30]
 801a324:	2b00      	cmp	r3, #0
 801a326:	d006      	beq.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
 801a328:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d002      	beq.n	801a336 <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 801a330:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 801a334:	86fb      	strh	r3, [r7, #54]	@ 0x36
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 801a336:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	f47f af73 	bne.w	801a226 <phpalI18092mPI_Sw_Deselect+0xb6>

    return status;
 801a340:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 801a342:	4618      	mov	r0, r3
 801a344:	3738      	adds	r7, #56	@ 0x38
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	10624dd3 	.word	0x10624dd3

0801a350 <phpalI18092mPI_Sw_WriteFrameHeader>:
        phpalI18092mPI_Sw_DataParams_t * pDataParams,
        uint16_t wOption,
        uint8_t bCommandCode,
        uint8_t bDataLength
)
{
 801a350:	b590      	push	{r4, r7, lr}
 801a352:	b087      	sub	sp, #28
 801a354:	af02      	add	r7, sp, #8
 801a356:	6078      	str	r0, [r7, #4]
 801a358:	4608      	mov	r0, r1
 801a35a:	4611      	mov	r1, r2
 801a35c:	461a      	mov	r2, r3
 801a35e:	4603      	mov	r3, r0
 801a360:	807b      	strh	r3, [r7, #2]
 801a362:	460b      	mov	r3, r1
 801a364:	707b      	strb	r3, [r7, #1]
 801a366:	4613      	mov	r3, r2
 801a368:	703b      	strb	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM aHeader[4];
    uint8_t     PH_MEMLOC_REM bLength = 0;
 801a36a:	2300      	movs	r3, #0
 801a36c:	73fb      	strb	r3, [r7, #15]

    /* Set LEN byte (includes the length itself). */
    aHeader[bLength++] = bDataLength + 3U;
 801a36e:	7bfb      	ldrb	r3, [r7, #15]
 801a370:	1c5a      	adds	r2, r3, #1
 801a372:	73fa      	strb	r2, [r7, #15]
 801a374:	4619      	mov	r1, r3
 801a376:	783b      	ldrb	r3, [r7, #0]
 801a378:	3303      	adds	r3, #3
 801a37a:	b2da      	uxtb	r2, r3
 801a37c:	f101 0310 	add.w	r3, r1, #16
 801a380:	443b      	add	r3, r7
 801a382:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Only NFC initiator mode is supported so only requests are sent. */
    aHeader[bLength++] = PHPAL_I18092MPI_SW_CMD_REQUEST;
 801a386:	7bfb      	ldrb	r3, [r7, #15]
 801a388:	1c5a      	adds	r2, r3, #1
 801a38a:	73fa      	strb	r2, [r7, #15]
 801a38c:	3310      	adds	r3, #16
 801a38e:	443b      	add	r3, r7
 801a390:	22d4      	movs	r2, #212	@ 0xd4
 801a392:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Set the command code. */
    aHeader[bLength++] = bCommandCode;
 801a396:	7bfb      	ldrb	r3, [r7, #15]
 801a398:	1c5a      	adds	r2, r3, #1
 801a39a:	73fa      	strb	r2, [r7, #15]
 801a39c:	3310      	adds	r3, #16
 801a39e:	443b      	add	r3, r7
 801a3a0:	787a      	ldrb	r2, [r7, #1]
 801a3a2:	f803 2c08 	strb.w	r2, [r3, #-8]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Exchange(
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	6858      	ldr	r0, [r3, #4]
 801a3aa:	7bfb      	ldrb	r3, [r7, #15]
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	f107 0208 	add.w	r2, r7, #8
 801a3b2:	8879      	ldrh	r1, [r7, #2]
 801a3b4:	2400      	movs	r4, #0
 801a3b6:	9401      	str	r4, [sp, #4]
 801a3b8:	2400      	movs	r4, #0
 801a3ba:	9400      	str	r4, [sp, #0]
 801a3bc:	f7f5 fb48 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	81bb      	strh	r3, [r7, #12]
 801a3c4:	89bb      	ldrh	r3, [r7, #12]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d001      	beq.n	801a3ce <phpalI18092mPI_Sw_WriteFrameHeader+0x7e>
 801a3ca:	89bb      	ldrh	r3, [r7, #12]
 801a3cc:	e000      	b.n	801a3d0 <phpalI18092mPI_Sw_WriteFrameHeader+0x80>
        aHeader,
        (uint16_t)bLength,
        NULL,
        NULL));

    return PH_ERR_SUCCESS;
 801a3ce:	2300      	movs	r3, #0
}
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	3714      	adds	r7, #20
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	bd90      	pop	{r4, r7, pc}

0801a3d8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>:
    uint8_t ** ppValidatedFrame,
    uint16_t * pValidatedFrameLength,
    uint8_t ** ppPayload,
    uint16_t * pPayloadLength
    )
{
 801a3d8:	b480      	push	{r7}
 801a3da:	b087      	sub	sp, #28
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	4611      	mov	r1, r2
 801a3e4:	461a      	mov	r2, r3
 801a3e6:	460b      	mov	r3, r1
 801a3e8:	80fb      	strh	r3, [r7, #6]
 801a3ea:	4613      	mov	r3, r2
 801a3ec:	717b      	strb	r3, [r7, #5]
    phStatus_t  PH_MEMLOC_REM bOffset = 0;
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bPfb;

    /* Check maximum frame length */
    if (wFrameLength > aI18092_mPI_FsTable[pDataParams->bLri])
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	7f1b      	ldrb	r3, [r3, #28]
 801a3f6:	461a      	mov	r2, r3
 801a3f8:	4b6d      	ldr	r3, [pc, #436]	@ (801a5b0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1d8>)
 801a3fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a3fe:	88fa      	ldrh	r2, [r7, #6]
 801a400:	429a      	cmp	r2, r3
 801a402:	d902      	bls.n	801a40a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x32>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a404:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a408:	e0cb      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check minimum frame length */
    if (wFrameLength < PHPAL_I18092MPI_SW_MIN_FRAMESIZE)
 801a40a:	88fb      	ldrh	r3, [r7, #6]
 801a40c:	2b02      	cmp	r3, #2
 801a40e:	d802      	bhi.n	801a416 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x3e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a410:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a414:	e0c5      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Remove Startbyte if present */
    *ppValidatedFrame = &pFrame[bOffset];
 801a416:	8afb      	ldrh	r3, [r7, #22]
 801a418:	68ba      	ldr	r2, [r7, #8]
 801a41a:	441a      	add	r2, r3
 801a41c:	6a3b      	ldr	r3, [r7, #32]
 801a41e:	601a      	str	r2, [r3, #0]
    *pValidatedFrameLength = wFrameLength - (uint16_t)bOffset;
 801a420:	88fa      	ldrh	r2, [r7, #6]
 801a422:	8afb      	ldrh	r3, [r7, #22]
 801a424:	1ad3      	subs	r3, r2, r3
 801a426:	b29a      	uxth	r2, r3
 801a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a42a:	801a      	strh	r2, [r3, #0]

    /* Compare length field with frame length. */
    if (pFrame[bOffset++] != (uint8_t)*pValidatedFrameLength)
 801a42c:	8afb      	ldrh	r3, [r7, #22]
 801a42e:	1c5a      	adds	r2, r3, #1
 801a430:	82fa      	strh	r2, [r7, #22]
 801a432:	461a      	mov	r2, r3
 801a434:	68bb      	ldr	r3, [r7, #8]
 801a436:	4413      	add	r3, r2
 801a438:	781a      	ldrb	r2, [r3, #0]
 801a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a43c:	881b      	ldrh	r3, [r3, #0]
 801a43e:	b2db      	uxtb	r3, r3
 801a440:	429a      	cmp	r2, r3
 801a442:	d002      	beq.n	801a44a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a444:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a448:	e0ab      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if the received frame is a reponse frame. */
    if (pFrame[bOffset++] != PHPAL_I18092MPI_SW_CMD_RESPONSE)
 801a44a:	8afb      	ldrh	r3, [r7, #22]
 801a44c:	1c5a      	adds	r2, r3, #1
 801a44e:	82fa      	strh	r2, [r7, #22]
 801a450:	461a      	mov	r2, r3
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	4413      	add	r3, r2
 801a456:	781b      	ldrb	r3, [r3, #0]
 801a458:	2bd5      	cmp	r3, #213	@ 0xd5
 801a45a:	d002      	beq.n	801a462 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x8a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a45c:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a460:	e09f      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if expected response code matches the received response code. */
    if (pFrame[bOffset++] != bExpectedResponseCode)
 801a462:	8afb      	ldrh	r3, [r7, #22]
 801a464:	1c5a      	adds	r2, r3, #1
 801a466:	82fa      	strh	r2, [r7, #22]
 801a468:	461a      	mov	r2, r3
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	4413      	add	r3, r2
 801a46e:	781b      	ldrb	r3, [r3, #0]
 801a470:	797a      	ldrb	r2, [r7, #5]
 801a472:	429a      	cmp	r2, r3
 801a474:	d002      	beq.n	801a47c <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xa4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a476:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a47a:	e092      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* In case the response is a DEP PDU also check for presence of DID, NAD and PNI. */
    if (bExpectedResponseCode == PHPAL_I18092MPI_SW_CMD_DEP_RES)
 801a47c:	797b      	ldrb	r3, [r7, #5]
 801a47e:	2b07      	cmp	r3, #7
 801a480:	f040 8083 	bne.w	801a58a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
    {
        /* PFB should be present in frame. */
        if (wFrameLength < (bOffset + /* */ 1U))
 801a484:	88fa      	ldrh	r2, [r7, #6]
 801a486:	8afb      	ldrh	r3, [r7, #22]
 801a488:	3301      	adds	r3, #1
 801a48a:	429a      	cmp	r2, r3
 801a48c:	d202      	bcs.n	801a494 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xbc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a48e:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a492:	e086      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }

        /* Retrieve PFB */
        bPfb = pFrame[bOffset++];
 801a494:	8afb      	ldrh	r3, [r7, #22]
 801a496:	1c5a      	adds	r2, r3, #1
 801a498:	82fa      	strh	r2, [r7, #22]
 801a49a:	461a      	mov	r2, r3
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	4413      	add	r3, r2
 801a4a0:	781b      	ldrb	r3, [r3, #0]
 801a4a2:	757b      	strb	r3, [r7, #21]

        /* DID enabled */
        if (pDataParams->bDid > 0U)
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	7d1b      	ldrb	r3, [r3, #20]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d01d      	beq.n	801a4e8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x110>
        {
            /* DID presence should be indicated. */
            if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))))
 801a4ac:	7d7b      	ldrb	r3, [r7, #21]
 801a4ae:	f003 0304 	and.w	r3, r3, #4
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d102      	bne.n	801a4bc <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a4b6:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a4ba:	e072      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should be present in frame. */
            if (wFrameLength < (bOffset + /* */ 1U))
 801a4bc:	88fa      	ldrh	r2, [r7, #6]
 801a4be:	8afb      	ldrh	r3, [r7, #22]
 801a4c0:	3301      	adds	r3, #1
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	d202      	bcs.n	801a4cc <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xf4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a4c6:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a4ca:	e06a      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should match. */
            if (pFrame[bOffset++] != pDataParams->bDid)
 801a4cc:	8afb      	ldrh	r3, [r7, #22]
 801a4ce:	1c5a      	adds	r2, r3, #1
 801a4d0:	82fa      	strh	r2, [r7, #22]
 801a4d2:	461a      	mov	r2, r3
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	4413      	add	r3, r2
 801a4d8:	781a      	ldrb	r2, [r3, #0]
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	7d1b      	ldrb	r3, [r3, #20]
 801a4de:	429a      	cmp	r2, r3
 801a4e0:	d00a      	beq.n	801a4f8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a4e2:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a4e6:	e05c      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }
        /* DID disabled */
        else
        {
            /* DID presence should not be indicated. */
            if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))
 801a4e8:	7d7b      	ldrb	r3, [r7, #21]
 801a4ea:	f003 0304 	and.w	r3, r3, #4
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d002      	beq.n	801a4f8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a4f2:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a4f6:	e054      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
        }

        /* Check NAD only for first PDU frames. */
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	7cdb      	ldrb	r3, [r3, #19]
 801a4fc:	f003 0320 	and.w	r3, r3, #32
 801a500:	2b00      	cmp	r3, #0
 801a502:	d12e      	bne.n	801a562 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
            (0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_LAST_BIT))))
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	7cdb      	ldrb	r3, [r3, #19]
 801a508:	b25b      	sxtb	r3, r3
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	db29      	blt.n	801a562 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
        {
            /* NAD enabled */
            if (0U != (pDataParams->bNadEnabled))
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	7d5b      	ldrb	r3, [r3, #21]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d01d      	beq.n	801a552 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x17a>
            {
                /* NAD presence should be indicated. */
                if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))))
 801a516:	7d7b      	ldrb	r3, [r7, #21]
 801a518:	f003 0308 	and.w	r3, r3, #8
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d102      	bne.n	801a526 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x14e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a520:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a524:	e03d      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should be present in frame. */
                if (wFrameLength < (bOffset + /* */ 1U))
 801a526:	88fa      	ldrh	r2, [r7, #6]
 801a528:	8afb      	ldrh	r3, [r7, #22]
 801a52a:	3301      	adds	r3, #1
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d202      	bcs.n	801a536 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x15e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a530:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a534:	e035      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should match. */
                if (pFrame[bOffset++] != pDataParams->bNad)
 801a536:	8afb      	ldrh	r3, [r7, #22]
 801a538:	1c5a      	adds	r2, r3, #1
 801a53a:	82fa      	strh	r2, [r7, #22]
 801a53c:	461a      	mov	r2, r3
 801a53e:	68bb      	ldr	r3, [r7, #8]
 801a540:	4413      	add	r3, r2
 801a542:	781a      	ldrb	r2, [r3, #0]
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	7d9b      	ldrb	r3, [r3, #22]
 801a548:	429a      	cmp	r2, r3
 801a54a:	d00a      	beq.n	801a562 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a54c:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a550:	e027      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* NAD disabled */
            else
            {
                /* NAD presence should not be indicated. */
                if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))
 801a552:	7d7b      	ldrb	r3, [r7, #21]
 801a554:	f003 0308 	and.w	r3, r3, #8
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d002      	beq.n	801a562 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a55c:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a560:	e01f      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
            }
        }

        /* For information or ACK PDU also check for PNI. */
        switch (bPfb & PHPAL_I18092MPI_SW_PFB_PDU_TYPE_MASK)
 801a562:	7d7b      	ldrb	r3, [r7, #21]
 801a564:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d001      	beq.n	801a570 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x198>
 801a56c:	2b40      	cmp	r3, #64	@ 0x40
 801a56e:	d109      	bne.n	801a584 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ac>
        {
        case PHPAL_I18092MPI_SW_PFB_INFORMATION_PDU_MASK:
        case PHPAL_I18092MPI_SW_PFB_ACK_PDU_MASK:
            if ((bPfb & PHPAL_I18092MPI_SW_PFB_PNI_MASK) != pDataParams->bPni)
 801a570:	7d7b      	ldrb	r3, [r7, #21]
 801a572:	f003 0303 	and.w	r3, r3, #3
 801a576:	68fa      	ldr	r2, [r7, #12]
 801a578:	7e52      	ldrb	r2, [r2, #25]
 801a57a:	4293      	cmp	r3, r2
 801a57c:	d004      	beq.n	801a588 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801a57e:	f640 4306 	movw	r3, #3078	@ 0xc06
 801a582:	e00e      	b.n	801a5a2 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            break;

        default:
            /* nothing. */
            break;
 801a584:	bf00      	nop
 801a586:	e000      	b.n	801a58a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
            break;
 801a588:	bf00      	nop
        }
    }

    /* Return Payload. */
    *ppPayload = &pFrame[bOffset];
 801a58a:	8afb      	ldrh	r3, [r7, #22]
 801a58c:	68ba      	ldr	r2, [r7, #8]
 801a58e:	441a      	add	r2, r3
 801a590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a592:	601a      	str	r2, [r3, #0]
    *pPayloadLength = wFrameLength - bOffset;
 801a594:	88fa      	ldrh	r2, [r7, #6]
 801a596:	8afb      	ldrh	r3, [r7, #22]
 801a598:	1ad3      	subs	r3, r2, r3
 801a59a:	b29a      	uxth	r2, r3
 801a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a59e:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801a5a0:	2300      	movs	r3, #0
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	371c      	adds	r7, #28
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ac:	4770      	bx	lr
 801a5ae:	bf00      	nop
 801a5b0:	08026e04 	.word	0x08026e04

0801a5b4 <phpalI18092mPI_Sw_ConvertDatarate>:

phStatus_t phpalI18092mPI_Sw_ConvertDatarate(
    uint16_t wHalDatarate,
    uint8_t * pI18092Datarate
    )
{
 801a5b4:	b480      	push	{r7}
 801a5b6:	b083      	sub	sp, #12
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	6039      	str	r1, [r7, #0]
 801a5be:	80fb      	strh	r3, [r7, #6]
    wHalDatarate = wHalDatarate & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 801a5c0:	88fb      	ldrh	r3, [r7, #6]
 801a5c2:	b2db      	uxtb	r3, r3
 801a5c4:	80fb      	strh	r3, [r7, #6]
    switch (wHalDatarate)
 801a5c6:	88fb      	ldrh	r3, [r7, #6]
 801a5c8:	2b02      	cmp	r3, #2
 801a5ca:	d00e      	beq.n	801a5ea <phpalI18092mPI_Sw_ConvertDatarate+0x36>
 801a5cc:	2b02      	cmp	r3, #2
 801a5ce:	dc10      	bgt.n	801a5f2 <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d002      	beq.n	801a5da <phpalI18092mPI_Sw_ConvertDatarate+0x26>
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	d004      	beq.n	801a5e2 <phpalI18092mPI_Sw_ConvertDatarate+0x2e>
 801a5d8:	e00b      	b.n	801a5f2 <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
    {
    case PHHAL_HW_RF_DATARATE_106:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_106;
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	2200      	movs	r2, #0
 801a5de:	701a      	strb	r2, [r3, #0]
        break;
 801a5e0:	e00a      	b.n	801a5f8 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_212:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_212;
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	2201      	movs	r2, #1
 801a5e6:	701a      	strb	r2, [r3, #0]
        break;
 801a5e8:	e006      	b.n	801a5f8 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_424:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_424;
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	2202      	movs	r2, #2
 801a5ee:	701a      	strb	r2, [r3, #0]
        break;
 801a5f0:	e002      	b.n	801a5f8 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_I18092MPI);
 801a5f2:	f640 4325 	movw	r3, #3109	@ 0xc25
 801a5f6:	e000      	b.n	801a5fa <phpalI18092mPI_Sw_ConvertDatarate+0x46>
    }

    return PH_ERR_SUCCESS;
 801a5f8:	2300      	movs	r3, #0
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	370c      	adds	r7, #12
 801a5fe:	46bd      	mov	sp, r7
 801a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a604:	4770      	bx	lr
	...

0801a608 <phpalI18092mT_Sw_Init>:
    phpalI18092mT_Sw_DataParams_t * pDataParams,
    uint16_t wSizeOfDataParams,
    void * pHalDataParams,
    pRtoxTimerCallback pRtoxCallback
    )
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b086      	sub	sp, #24
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	60f8      	str	r0, [r7, #12]
 801a610:	607a      	str	r2, [r7, #4]
 801a612:	603b      	str	r3, [r7, #0]
 801a614:	460b      	mov	r3, r1
 801a616:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_SUCCESS;
 801a618:	2300      	movs	r3, #0
 801a61a:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI18092mT_Sw_DataParams_t) != wSizeOfDataParams)
 801a61c:	897b      	ldrh	r3, [r7, #10]
 801a61e:	2b4c      	cmp	r3, #76	@ 0x4c
 801a620:	d002      	beq.n	801a628 <phpalI18092mT_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MT);
 801a622:	f44f 6352 	mov.w	r3, #3360	@ 0xd20
 801a626:	e02c      	b.n	801a682 <phpalI18092mT_Sw_Init+0x7a>
    }
    PH_ASSERT_NULL (pDataParams);
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d101      	bne.n	801a632 <phpalI18092mT_Sw_Init+0x2a>
 801a62e:	2321      	movs	r3, #33	@ 0x21
 801a630:	e027      	b.n	801a682 <phpalI18092mT_Sw_Init+0x7a>
    PH_ASSERT_NULL (pHalDataParams);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d101      	bne.n	801a63c <phpalI18092mT_Sw_Init+0x34>
 801a638:	2321      	movs	r3, #33	@ 0x21
 801a63a:	e022      	b.n	801a682 <phpalI18092mT_Sw_Init+0x7a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MT | PHPAL_I18092MT_SW_ID;
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	f640 5201 	movw	r2, #3329	@ 0xd01
 801a642:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	687a      	ldr	r2, [r7, #4]
 801a648:	605a      	str	r2, [r3, #4]
    pDataParams->pRtoxCallback  = pRtoxCallback;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	683a      	ldr	r2, [r7, #0]
 801a64e:	60da      	str	r2, [r3, #12]
    pDataParams->bCmdtype       = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	220a      	movs	r2, #10
 801a654:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

    /* Reset protocol to defaults */
    (void)phpalI18092mT_Sw_ResetProtocol(pDataParams);
 801a658:	68f8      	ldr	r0, [r7, #12]
 801a65a:	f000 f819 	bl	801a690 <phpalI18092mT_Sw_ResetProtocol>

    /* Check whether event is already created. */
    pDataParams->Pal18092mTEventObj.pEvtName = (uint8_t *)bmtEventName;
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	4a0a      	ldr	r2, [pc, #40]	@ (801a68c <phpalI18092mT_Sw_Init+0x84>)
 801a662:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->Pal18092mTEventObj.intialValue = 0;
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	2200      	movs	r2, #0
 801a668:	645a      	str	r2, [r3, #68]	@ 0x44
    wStatus = phOsal_EventCreate(&pDataParams->Pal18092mTEventObj.EventHandle, &pDataParams->Pal18092mTEventObj);
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	333c      	adds	r3, #60	@ 0x3c
 801a674:	4619      	mov	r1, r3
 801a676:	4610      	mov	r0, r2
 801a678:	f001 fcde 	bl	801c038 <phOsal_EventCreate>
 801a67c:	4603      	mov	r3, r0
 801a67e:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 801a680:	8afb      	ldrh	r3, [r7, #22]
}
 801a682:	4618      	mov	r0, r3
 801a684:	3718      	adds	r7, #24
 801a686:	46bd      	mov	sp, r7
 801a688:	bd80      	pop	{r7, pc}
 801a68a:	bf00      	nop
 801a68c:	08026e0c 	.word	0x08026e0c

0801a690 <phpalI18092mT_Sw_ResetProtocol>:
}

phStatus_t phpalI18092mT_Sw_ResetProtocol(
    phpalI18092mT_Sw_DataParams_t * pDataParams
    )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b082      	sub	sp, #8
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bStateNow          = PHPAL_I18092MT_SW_STATE_INFORMATION_PDU_TX;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2200      	movs	r2, #0
 801a69c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bDid               = 0;    /* set DID to 0, i.e. disable usage of DID */
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    pDataParams->bNadEnabled        = PH_OFF;
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bNadVal            = 0;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bFsl               = PHPAL_I18092MT_FRAMESIZE_64;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    pDataParams->bPni               = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    pDataParams->bDst               = PHPAL_I18092MT_DATARATE_106;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    pDataParams->bDrt               = PHPAL_I18092MT_DATARATE_106;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    pDataParams->bBsi               = 0;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2200      	movs	r2, #0
 801a6dc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bBri               = 0;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    pDataParams->bLri               = PHPAL_I18092MT_FRAMESIZE_64;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pDataParams->bBst               = 0;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    pDataParams->bBrt               = 0;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    pDataParams->bLrt               = PHPAL_I18092MT_FRAMESIZE_64;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	2200      	movs	r2, #0
 801a704:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pDataParams->bTo                = 0;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	2200      	movs	r2, #0
 801a70c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pDataParams->bRtoxDisabled      = PH_OFF;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	2200      	movs	r2, #0
 801a714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    pDataParams->ovrTask            = NULL;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	2200      	movs	r2, #0
 801a71c:	609a      	str	r2, [r3, #8]
    pDataParams->bCmdtype           = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	220a      	movs	r2, #10
 801a722:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    pDataParams->bRtoxExtnVal       = PHPAL_I18092MT_SW_MIN_RTOX_VALUE;
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	2201      	movs	r2, #1
 801a72a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    pDataParams->wLastTxLen         = 0;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	2200      	movs	r2, #0
 801a732:	821a      	strh	r2, [r3, #16]
    pDataParams->bOpeMode           = RD_LIB_MODE_NFC;
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	2202      	movs	r2, #2
 801a738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bPropPSLMode       = PH_OFF;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	2200      	movs	r2, #0
 801a740:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    (void)memset(pDataParams->aNfcid3i, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	3312      	adds	r3, #18
 801a748:	220a      	movs	r2, #10
 801a74a:	2100      	movs	r1, #0
 801a74c:	4618      	mov	r0, r3
 801a74e:	f007 fdb5 	bl	80222bc <memset>
    (void)memset(pDataParams->aNfcid3t, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	331c      	adds	r3, #28
 801a756:	220a      	movs	r2, #10
 801a758:	2100      	movs	r1, #0
 801a75a:	4618      	mov	r0, r3
 801a75c:	f007 fdae 	bl	80222bc <memset>

    return PH_ERR_SUCCESS;
 801a760:	2300      	movs	r3, #0
}
 801a762:	4618      	mov	r0, r3
 801a764:	3708      	adds	r7, #8
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}

0801a76a <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 801a76a:	b480      	push	{r7}
 801a76c:	b085      	sub	sp, #20
 801a76e:	af00      	add	r7, sp, #0
 801a770:	60f8      	str	r0, [r7, #12]
 801a772:	607a      	str	r2, [r7, #4]
 801a774:	603b      	str	r3, [r7, #0]
 801a776:	460b      	mov	r3, r1
 801a778:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 801a77a:	897b      	ldrh	r3, [r7, #10]
 801a77c:	2b0c      	cmp	r3, #12
 801a77e:	d002      	beq.n	801a786 <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 801a780:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 801a784:	e014      	b.n	801a7b0 <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d101      	bne.n	801a790 <phpalMifare_Sw_Init+0x26>
 801a78c:	2321      	movs	r3, #33	@ 0x21
 801a78e:	e00f      	b.n	801a7b0 <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d101      	bne.n	801a79a <phpalMifare_Sw_Init+0x30>
 801a796:	2321      	movs	r3, #33	@ 0x21
 801a798:	e00a      	b.n	801a7b0 <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	f240 7202 	movw	r2, #1794	@ 0x702
 801a7a0:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	687a      	ldr	r2, [r7, #4]
 801a7a6:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	683a      	ldr	r2, [r7, #0]
 801a7ac:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 801a7ae:	2300      	movs	r3, #0
}
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	3714      	adds	r7, #20
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr

0801a7bc <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 801a7bc:	b480      	push	{r7}
 801a7be:	b085      	sub	sp, #20
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	60f8      	str	r0, [r7, #12]
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	607a      	str	r2, [r7, #4]
 801a7c8:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d101      	bne.n	801a7d4 <phpalSli15693_Sw_Init+0x18>
 801a7d0:	2321      	movs	r3, #33	@ 0x21
 801a7d2:	e02d      	b.n	801a830 <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d101      	bne.n	801a7de <phpalSli15693_Sw_Init+0x22>
 801a7da:	2321      	movs	r3, #33	@ 0x21
 801a7dc:	e028      	b.n	801a830 <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 801a7de:	897b      	ldrh	r3, [r7, #10]
 801a7e0:	2b1c      	cmp	r3, #28
 801a7e2:	d002      	beq.n	801a7ea <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 801a7e4:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 801a7e8:	e022      	b.n	801a830 <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	f640 2201 	movw	r2, #2561	@ 0xa01
 801a7f0:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	687a      	ldr	r2, [r7, #4]
 801a7f6:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	2206      	movs	r2, #6
 801a802:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	2200      	movs	r2, #0
 801a808:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	2200      	movs	r2, #0
 801a80e:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	2203      	movs	r2, #3
 801a814:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	2200      	movs	r2, #0
 801a81a:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	2202      	movs	r2, #2
 801a820:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	2204      	movs	r2, #4
 801a826:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	2200      	movs	r2, #0
 801a82c:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 801a82e:	2300      	movs	r3, #0
}
 801a830:	4618      	mov	r0, r3
 801a832:	3714      	adds	r7, #20
 801a834:	46bd      	mov	sp, r7
 801a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a83a:	4770      	bx	lr

0801a83c <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b08e      	sub	sp, #56	@ 0x38
 801a840:	af08      	add	r7, sp, #32
 801a842:	60f8      	str	r0, [r7, #12]
 801a844:	607b      	str	r3, [r7, #4]
 801a846:	460b      	mov	r3, r1
 801a848:	72fb      	strb	r3, [r7, #11]
 801a84a:	4613      	mov	r3, r2
 801a84c:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 801a84e:	2300      	movs	r3, #0
 801a850:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 801a852:	7ab9      	ldrb	r1, [r7, #10]
 801a854:	7afa      	ldrb	r2, [r7, #11]
 801a856:	f107 0314 	add.w	r3, r7, #20
 801a85a:	9307      	str	r3, [sp, #28]
 801a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a85e:	9306      	str	r3, [sp, #24]
 801a860:	f107 0317 	add.w	r3, r7, #23
 801a864:	9305      	str	r3, [sp, #20]
 801a866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a868:	9304      	str	r3, [sp, #16]
 801a86a:	2300      	movs	r3, #0
 801a86c:	9303      	str	r3, [sp, #12]
 801a86e:	2300      	movs	r3, #0
 801a870:	9302      	str	r3, [sp, #8]
 801a872:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a876:	9301      	str	r3, [sp, #4]
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	9300      	str	r3, [sp, #0]
 801a87c:	460b      	mov	r3, r1
 801a87e:	2101      	movs	r1, #1
 801a880:	68f8      	ldr	r0, [r7, #12]
 801a882:	f000 fe63 	bl	801b54c <phpalSli15693_Sw_InventoryEx>
 801a886:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 801a888:	4618      	mov	r0, r3
 801a88a:	3718      	adds	r7, #24
 801a88c:	46bd      	mov	sp, r7
 801a88e:	bd80      	pop	{r7, pc}

0801a890 <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b08a      	sub	sp, #40	@ 0x28
 801a894:	af02      	add	r7, sp, #8
 801a896:	60f8      	str	r0, [r7, #12]
 801a898:	607a      	str	r2, [r7, #4]
 801a89a:	603b      	str	r3, [r7, #0]
 801a89c:	460b      	mov	r3, r1
 801a89e:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 801a8a8:	7afb      	ldrb	r3, [r7, #11]
 801a8aa:	2b03      	cmp	r3, #3
 801a8ac:	d902      	bls.n	801a8b4 <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801a8ae:	f640 2321 	movw	r3, #2593	@ 0xa21
 801a8b2:	e1c1      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 801a8b4:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 801a8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8be:	2200      	movs	r2, #0
 801a8c0:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 801a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 801a8c8:	7afb      	ldrb	r3, [r7, #11]
 801a8ca:	2b03      	cmp	r3, #3
 801a8cc:	d10e      	bne.n	801a8ec <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	685b      	ldr	r3, [r3, #4]
 801a8d2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801a8d6:	2100      	movs	r1, #0
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f7f5 fbb5 	bl	8010048 <phhalHw_Pn5180_Wait>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	83bb      	strh	r3, [r7, #28]
 801a8e2:	8bbb      	ldrh	r3, [r7, #28]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d001      	beq.n	801a8ec <phpalSli15693_Sw_SendEof+0x5c>
 801a8e8:	8bbb      	ldrh	r3, [r7, #28]
 801a8ea:	e1a5      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	685b      	ldr	r3, [r3, #4]
 801a8f0:	f107 0210 	add.w	r2, r7, #16
 801a8f4:	210c      	movs	r1, #12
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	f7f7 f8b0 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	83bb      	strh	r3, [r7, #28]
 801a900:	8bbb      	ldrh	r3, [r7, #28]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d001      	beq.n	801a90a <phpalSli15693_Sw_SendEof+0x7a>
 801a906:	8bbb      	ldrh	r3, [r7, #28]
 801a908:	e196      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 801a90a:	7afb      	ldrb	r3, [r7, #11]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d12a      	bne.n	801a966 <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 801a910:	8a3b      	ldrh	r3, [r7, #16]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d00d      	beq.n	801a932 <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	7a9b      	ldrb	r3, [r3, #10]
 801a91a:	f003 0302 	and.w	r3, r3, #2
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d003      	beq.n	801a92a <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 801a922:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801a926:	83fb      	strh	r3, [r7, #30]
 801a928:	e010      	b.n	801a94c <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 801a92a:	f240 33a1 	movw	r3, #929	@ 0x3a1
 801a92e:	83fb      	strh	r3, [r7, #30]
 801a930:	e00c      	b.n	801a94c <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	7a9b      	ldrb	r3, [r3, #10]
 801a936:	f003 0302 	and.w	r3, r3, #2
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d003      	beq.n	801a946 <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 801a93e:	f241 039c 	movw	r3, #4252	@ 0x109c
 801a942:	83fb      	strh	r3, [r7, #30]
 801a944:	e002      	b.n	801a94c <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 801a946:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 801a94a:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a94c:	8bfb      	ldrh	r3, [r7, #30]
 801a94e:	461a      	mov	r2, r3
 801a950:	2102      	movs	r1, #2
 801a952:	68f8      	ldr	r0, [r7, #12]
 801a954:	f000 faf8 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801a958:	4603      	mov	r3, r0
 801a95a:	83bb      	strh	r3, [r7, #28]
 801a95c:	8bbb      	ldrh	r3, [r7, #28]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d04b      	beq.n	801a9fa <phpalSli15693_Sw_SendEof+0x16a>
 801a962:	8bbb      	ldrh	r3, [r7, #28]
 801a964:	e168      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 801a966:	7afb      	ldrb	r3, [r7, #11]
 801a968:	2b01      	cmp	r3, #1
 801a96a:	d12a      	bne.n	801a9c2 <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 801a96c:	8a3b      	ldrh	r3, [r7, #16]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d00d      	beq.n	801a98e <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	7a9b      	ldrb	r3, [r3, #10]
 801a976:	f003 0302 	and.w	r3, r3, #2
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d003      	beq.n	801a986 <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 801a97e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801a982:	83fb      	strh	r3, [r7, #30]
 801a984:	e010      	b.n	801a9a8 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 801a986:	f240 2373 	movw	r3, #627	@ 0x273
 801a98a:	83fb      	strh	r3, [r7, #30]
 801a98c:	e00c      	b.n	801a9a8 <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	7a9b      	ldrb	r3, [r3, #10]
 801a992:	f003 0302 	and.w	r3, r3, #2
 801a996:	2b00      	cmp	r3, #0
 801a998:	d003      	beq.n	801a9a2 <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 801a99a:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 801a99e:	83fb      	strh	r3, [r7, #30]
 801a9a0:	e002      	b.n	801a9a8 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801a9a2:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801a9a6:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a9a8:	8bfb      	ldrh	r3, [r7, #30]
 801a9aa:	461a      	mov	r2, r3
 801a9ac:	2102      	movs	r1, #2
 801a9ae:	68f8      	ldr	r0, [r7, #12]
 801a9b0:	f000 faca 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801a9b4:	4603      	mov	r3, r0
 801a9b6:	83bb      	strh	r3, [r7, #28]
 801a9b8:	8bbb      	ldrh	r3, [r7, #28]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d01d      	beq.n	801a9fa <phpalSli15693_Sw_SendEof+0x16a>
 801a9be:	8bbb      	ldrh	r3, [r7, #28]
 801a9c0:	e13a      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	7d9b      	ldrb	r3, [r3, #22]
 801a9c6:	2b02      	cmp	r3, #2
 801a9c8:	d10b      	bne.n	801a9e2 <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a9ca:	2246      	movs	r2, #70	@ 0x46
 801a9cc:	2103      	movs	r1, #3
 801a9ce:	68f8      	ldr	r0, [r7, #12]
 801a9d0:	f000 faba 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801a9d4:	4603      	mov	r3, r0
 801a9d6:	83bb      	strh	r3, [r7, #28]
 801a9d8:	8bbb      	ldrh	r3, [r7, #28]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d00d      	beq.n	801a9fa <phpalSli15693_Sw_SendEof+0x16a>
 801a9de:	8bbb      	ldrh	r3, [r7, #28]
 801a9e0:	e12a      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801a9e2:	2214      	movs	r2, #20
 801a9e4:	2103      	movs	r1, #3
 801a9e6:	68f8      	ldr	r0, [r7, #12]
 801a9e8:	f000 faae 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	83bb      	strh	r3, [r7, #28]
 801a9f0:	8bbb      	ldrh	r3, [r7, #28]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d001      	beq.n	801a9fa <phpalSli15693_Sw_SendEof+0x16a>
 801a9f6:	8bbb      	ldrh	r3, [r7, #28]
 801a9f8:	e11e      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	2200      	movs	r2, #0
 801aa00:	2115      	movs	r1, #21
 801aa02:	4618      	mov	r0, r3
 801aa04:	f7f5 fbdc 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	83bb      	strh	r3, [r7, #28]
 801aa0c:	8bbb      	ldrh	r3, [r7, #28]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d001      	beq.n	801aa16 <phpalSli15693_Sw_SendEof+0x186>
 801aa12:	8bbb      	ldrh	r3, [r7, #28]
 801aa14:	e110      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	6858      	ldr	r0, [r3, #4]
 801aa1a:	f107 0312 	add.w	r3, r7, #18
 801aa1e:	9301      	str	r3, [sp, #4]
 801aa20:	f107 0314 	add.w	r3, r7, #20
 801aa24:	9300      	str	r3, [sp, #0]
 801aa26:	2300      	movs	r3, #0
 801aa28:	2200      	movs	r2, #0
 801aa2a:	2100      	movs	r1, #0
 801aa2c:	f7f5 f810 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801aa30:	4603      	mov	r3, r0
 801aa32:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	685b      	ldr	r3, [r3, #4]
 801aa38:	2205      	movs	r2, #5
 801aa3a:	2115      	movs	r1, #21
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f7f5 fbbf 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801aa42:	4603      	mov	r3, r0
 801aa44:	83bb      	strh	r3, [r7, #28]
 801aa46:	8bbb      	ldrh	r3, [r7, #28]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d001      	beq.n	801aa50 <phpalSli15693_Sw_SendEof+0x1c0>
 801aa4c:	8bbb      	ldrh	r3, [r7, #28]
 801aa4e:	e0f3      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 801aa50:	8b7b      	ldrh	r3, [r7, #26]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d001      	beq.n	801aa5a <phpalSli15693_Sw_SendEof+0x1ca>
 801aa56:	8b7b      	ldrh	r3, [r7, #26]
 801aa58:	e0ee      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 801aa5a:	8a7b      	ldrh	r3, [r7, #18]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d102      	bne.n	801aa66 <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801aa60:	f640 2306 	movw	r3, #2566	@ 0xa06
 801aa64:	e0e8      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 801aa66:	697b      	ldr	r3, [r7, #20]
 801aa68:	781b      	ldrb	r3, [r3, #0]
 801aa6a:	f003 0301 	and.w	r3, r3, #1
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d00e      	beq.n	801aa90 <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 801aa72:	8a7b      	ldrh	r3, [r7, #18]
 801aa74:	2b02      	cmp	r3, #2
 801aa76:	d002      	beq.n	801aa7e <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801aa78:	f640 2306 	movw	r3, #2566	@ 0xa06
 801aa7c:	e0dc      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 801aa7e:	697b      	ldr	r3, [r7, #20]
 801aa80:	3301      	adds	r3, #1
 801aa82:	781b      	ldrb	r3, [r3, #0]
 801aa84:	461a      	mov	r2, r3
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 801aa8a:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 801aa8e:	e0d3      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 801aa90:	7afb      	ldrb	r3, [r7, #11]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d13d      	bne.n	801ab12 <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 801aa96:	697b      	ldr	r3, [r7, #20]
 801aa98:	3301      	adds	r3, #1
 801aa9a:	617b      	str	r3, [r7, #20]
        --wRespLength;
 801aa9c:	8a7b      	ldrh	r3, [r7, #18]
 801aa9e:	3b01      	subs	r3, #1
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 801aaa4:	8a7b      	ldrh	r3, [r7, #18]
 801aaa6:	2b09      	cmp	r3, #9
 801aaa8:	d002      	beq.n	801aab0 <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801aaaa:	f640 2306 	movw	r3, #2566	@ 0xa06
 801aaae:	e0c3      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	685b      	ldr	r3, [r3, #4]
 801aab4:	f44f 729b 	mov.w	r2, #310	@ 0x136
 801aab8:	2100      	movs	r1, #0
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7f5 fac4 	bl	8010048 <phhalHw_Pn5180_Wait>
 801aac0:	4603      	mov	r3, r0
 801aac2:	83bb      	strh	r3, [r7, #28]
 801aac4:	8bbb      	ldrh	r3, [r7, #28]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d001      	beq.n	801aace <phpalSli15693_Sw_SendEof+0x23e>
 801aaca:	8bbb      	ldrh	r3, [r7, #28]
 801aacc:	e0b4      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	781a      	ldrb	r2, [r3, #0]
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	f103 000c 	add.w	r0, r3, #12
 801aadc:	697b      	ldr	r3, [r7, #20]
 801aade:	3301      	adds	r3, #1
 801aae0:	2208      	movs	r2, #8
 801aae2:	4619      	mov	r1, r3
 801aae4:	f007 fc69 	bl	80223ba <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	2240      	movs	r2, #64	@ 0x40
 801aaec:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801aaee:	697b      	ldr	r3, [r7, #20]
 801aaf0:	3301      	adds	r3, #1
 801aaf2:	2208      	movs	r2, #8
 801aaf4:	4619      	mov	r1, r3
 801aaf6:	6838      	ldr	r0, [r7, #0]
 801aaf8:	f007 fc5f 	bl	80223ba <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801aafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aafe:	2208      	movs	r2, #8
 801ab00:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	7a9b      	ldrb	r3, [r3, #10]
 801ab06:	f043 0320 	orr.w	r3, r3, #32
 801ab0a:	b2da      	uxtb	r2, r3
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	729a      	strb	r2, [r3, #10]
 801ab10:	e091      	b.n	801ac36 <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 801ab12:	7afb      	ldrb	r3, [r7, #11]
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	f040 8088 	bne.w	801ac2a <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 801ab1a:	697b      	ldr	r3, [r7, #20]
 801ab1c:	3301      	adds	r3, #1
 801ab1e:	617b      	str	r3, [r7, #20]
        --wRespLength;
 801ab20:	8a7b      	ldrh	r3, [r7, #18]
 801ab22:	3b01      	subs	r3, #1
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	7a9b      	ldrb	r3, [r3, #10]
 801ab2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d05b      	beq.n	801abec <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	7d1b      	ldrb	r3, [r3, #20]
 801ab38:	08db      	lsrs	r3, r3, #3
 801ab3a:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801ab3c:	7e7b      	ldrb	r3, [r7, #25]
 801ab3e:	f1c3 0308 	rsb	r3, r3, #8
 801ab42:	b2da      	uxtb	r2, r3
 801ab44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab46:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 801ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab4a:	781b      	ldrb	r3, [r3, #0]
 801ab4c:	461a      	mov	r2, r3
 801ab4e:	8a7b      	ldrh	r3, [r7, #18]
 801ab50:	429a      	cmp	r2, r3
 801ab52:	d902      	bls.n	801ab5a <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801ab54:	f640 2306 	movw	r3, #2566	@ 0xa06
 801ab58:	e06e      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 801ab5a:	7e7b      	ldrb	r3, [r7, #25]
 801ab5c:	2b07      	cmp	r3, #7
 801ab5e:	d837      	bhi.n	801abd0 <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	7d1b      	ldrb	r3, [r3, #20]
 801ab64:	f003 0307 	and.w	r3, r3, #7
 801ab68:	b2db      	uxtb	r3, r3
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d01e      	beq.n	801abac <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 801ab6e:	7e7b      	ldrb	r3, [r7, #25]
 801ab70:	2b06      	cmp	r3, #6
 801ab72:	d80d      	bhi.n	801ab90 <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 801ab74:	7e7b      	ldrb	r3, [r7, #25]
 801ab76:	3301      	adds	r3, #1
 801ab78:	3308      	adds	r3, #8
 801ab7a:	68fa      	ldr	r2, [r7, #12]
 801ab7c:	4413      	add	r3, r2
 801ab7e:	1d18      	adds	r0, r3, #4
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	1c59      	adds	r1, r3, #1
 801ab84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	3b01      	subs	r3, #1
 801ab8a:	461a      	mov	r2, r3
 801ab8c:	f007 fc15 	bl	80223ba <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 801ab90:	7e7b      	ldrb	r3, [r7, #25]
 801ab92:	68fa      	ldr	r2, [r7, #12]
 801ab94:	4413      	add	r3, r2
 801ab96:	7b19      	ldrb	r1, [r3, #12]
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	781a      	ldrb	r2, [r3, #0]
 801ab9c:	7e7b      	ldrb	r3, [r7, #25]
 801ab9e:	430a      	orrs	r2, r1
 801aba0:	b2d1      	uxtb	r1, r2
 801aba2:	68fa      	ldr	r2, [r7, #12]
 801aba4:	4413      	add	r3, r2
 801aba6:	460a      	mov	r2, r1
 801aba8:	731a      	strb	r2, [r3, #12]
 801abaa:	e00a      	b.n	801abc2 <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 801abac:	7e7b      	ldrb	r3, [r7, #25]
 801abae:	3308      	adds	r3, #8
 801abb0:	68fa      	ldr	r2, [r7, #12]
 801abb2:	4413      	add	r3, r2
 801abb4:	1d18      	adds	r0, r3, #4
 801abb6:	6979      	ldr	r1, [r7, #20]
 801abb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abba:	781b      	ldrb	r3, [r3, #0]
 801abbc:	461a      	mov	r2, r3
 801abbe:	f007 fbfc 	bl	80223ba <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 801abc2:	6979      	ldr	r1, [r7, #20]
 801abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abc6:	781b      	ldrb	r3, [r3, #0]
 801abc8:	461a      	mov	r2, r3
 801abca:	6838      	ldr	r0, [r7, #0]
 801abcc:	f007 fbf5 	bl	80223ba <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	2240      	movs	r2, #64	@ 0x40
 801abd4:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 801abd6:	697b      	ldr	r3, [r7, #20]
 801abd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801abda:	7812      	ldrb	r2, [r2, #0]
 801abdc:	4413      	add	r3, r2
 801abde:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 801abe0:	8a7b      	ldrh	r3, [r7, #18]
 801abe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801abe4:	7812      	ldrb	r2, [r2, #0]
 801abe6:	1a9b      	subs	r3, r3, r2
 801abe8:	b29b      	uxth	r3, r3
 801abea:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	8a7a      	ldrh	r2, [r7, #18]
 801abf0:	4619      	mov	r1, r3
 801abf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801abf4:	f007 fbe1 	bl	80223ba <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 801abf8:	8a7a      	ldrh	r2, [r7, #18]
 801abfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abfc:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	7a9b      	ldrb	r3, [r3, #10]
 801ac02:	f043 0320 	orr.w	r3, r3, #32
 801ac06:	b2da      	uxtb	r2, r3
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	685b      	ldr	r3, [r3, #4]
 801ac10:	f44f 729b 	mov.w	r2, #310	@ 0x136
 801ac14:	2100      	movs	r1, #0
 801ac16:	4618      	mov	r0, r3
 801ac18:	f7f5 fa16 	bl	8010048 <phhalHw_Pn5180_Wait>
 801ac1c:	4603      	mov	r3, r0
 801ac1e:	83bb      	strh	r3, [r7, #28]
 801ac20:	8bbb      	ldrh	r3, [r7, #28]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d007      	beq.n	801ac36 <phpalSli15693_Sw_SendEof+0x3a6>
 801ac26:	8bbb      	ldrh	r3, [r7, #28]
 801ac28:	e006      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 801ac2a:	8a7b      	ldrh	r3, [r7, #18]
 801ac2c:	2b01      	cmp	r3, #1
 801ac2e:	d002      	beq.n	801ac36 <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801ac30:	f640 2306 	movw	r3, #2566	@ 0xa06
 801ac34:	e000      	b.n	801ac38 <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 801ac36:	2300      	movs	r3, #0
}
 801ac38:	4618      	mov	r0, r3
 801ac3a:	3720      	adds	r7, #32
 801ac3c:	46bd      	mov	sp, r7
 801ac3e:	bd80      	pop	{r7, pc}

0801ac40 <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b088      	sub	sp, #32
 801ac44:	af02      	add	r7, sp, #8
 801ac46:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	7a9b      	ldrb	r3, [r3, #10]
 801ac54:	f023 0310 	bic.w	r3, r3, #16
 801ac58:	b2da      	uxtb	r2, r3
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	7a9b      	ldrb	r3, [r3, #10]
 801ac62:	f043 0320 	orr.w	r3, r3, #32
 801ac66:	b2da      	uxtb	r2, r3
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 801ac6c:	2325      	movs	r3, #37	@ 0x25
 801ac6e:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801ac70:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801ac74:	2102      	movs	r1, #2
 801ac76:	6878      	ldr	r0, [r7, #4]
 801ac78:	f000 f966 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801ac7c:	4603      	mov	r3, r0
 801ac7e:	82fb      	strh	r3, [r7, #22]
 801ac80:	8afb      	ldrh	r3, [r7, #22]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d001      	beq.n	801ac8a <phpalSli15693_Sw_Select+0x4a>
 801ac86:	8afb      	ldrh	r3, [r7, #22]
 801ac88:	e028      	b.n	801acdc <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 801ac8a:	f107 0214 	add.w	r2, r7, #20
 801ac8e:	f107 030e 	add.w	r3, r7, #14
 801ac92:	9301      	str	r3, [sp, #4]
 801ac94:	f107 0310 	add.w	r3, r7, #16
 801ac98:	9300      	str	r3, [sp, #0]
 801ac9a:	2301      	movs	r3, #1
 801ac9c:	2100      	movs	r1, #0
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	f000 f820 	bl	801ace4 <phpalSli15693_Sw_Exchange>
 801aca4:	4603      	mov	r3, r0
 801aca6:	82fb      	strh	r3, [r7, #22]
 801aca8:	8afb      	ldrh	r3, [r7, #22]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d001      	beq.n	801acb2 <phpalSli15693_Sw_Select+0x72>
 801acae:	8afb      	ldrh	r3, [r7, #22]
 801acb0:	e014      	b.n	801acdc <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 801acb2:	89fb      	ldrh	r3, [r7, #14]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d002      	beq.n	801acbe <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801acb8:	f640 2306 	movw	r3, #2566	@ 0xa06
 801acbc:	e00e      	b.n	801acdc <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	7a9b      	ldrb	r3, [r3, #10]
 801acc2:	f023 0320 	bic.w	r3, r3, #32
 801acc6:	b2da      	uxtb	r2, r3
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	7a9b      	ldrb	r3, [r3, #10]
 801acd0:	f043 0310 	orr.w	r3, r3, #16
 801acd4:	b2da      	uxtb	r2, r3
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 801acda:	2300      	movs	r3, #0
}
 801acdc:	4618      	mov	r0, r3
 801acde:	3718      	adds	r7, #24
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd80      	pop	{r7, pc}

0801ace4 <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b08a      	sub	sp, #40	@ 0x28
 801ace8:	af02      	add	r7, sp, #8
 801acea:	60f8      	str	r0, [r7, #12]
 801acec:	607a      	str	r2, [r7, #4]
 801acee:	461a      	mov	r2, r3
 801acf0:	460b      	mov	r3, r1
 801acf2:	817b      	strh	r3, [r7, #10]
 801acf4:	4613      	mov	r3, r2
 801acf6:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 801acf8:	2300      	movs	r3, #0
 801acfa:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 801acfc:	2300      	movs	r3, #0
 801acfe:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	7a9b      	ldrb	r3, [r3, #10]
 801ad04:	f003 0304 	and.w	r3, r3, #4
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d10c      	bne.n	801ad26 <phpalSli15693_Sw_Exchange+0x42>
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	7a9b      	ldrb	r3, [r3, #10]
 801ad10:	f003 0320 	and.w	r3, r3, #32
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d006      	beq.n	801ad26 <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	7d1b      	ldrb	r3, [r3, #20]
 801ad1c:	2b40      	cmp	r3, #64	@ 0x40
 801ad1e:	d002      	beq.n	801ad26 <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 801ad20:	f640 2325 	movw	r3, #2597	@ 0xa25
 801ad24:	e0f0      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 801ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d102      	bne.n	801ad32 <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 801ad2c:	f107 0310 	add.w	r3, r7, #16
 801ad30:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 801ad32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d102      	bne.n	801ad3e <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 801ad38:	f107 0316 	add.w	r3, r7, #22
 801ad3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 801ad3e:	897b      	ldrh	r3, [r7, #10]
 801ad40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	f040 8086 	bne.w	801ae56 <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 801ad4a:	8bfb      	ldrh	r3, [r7, #30]
 801ad4c:	1c5a      	adds	r2, r3, #1
 801ad4e:	83fa      	strh	r2, [r7, #30]
 801ad50:	4619      	mov	r1, r3
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	7a9a      	ldrb	r2, [r3, #10]
 801ad56:	f101 0320 	add.w	r3, r1, #32
 801ad5a:	443b      	add	r3, r7
 801ad5c:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 801ad60:	8bfb      	ldrh	r3, [r7, #30]
 801ad62:	1c5a      	adds	r2, r3, #1
 801ad64:	83fa      	strh	r2, [r7, #30]
 801ad66:	4619      	mov	r1, r3
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	781a      	ldrb	r2, [r3, #0]
 801ad6c:	f101 0320 	add.w	r3, r1, #32
 801ad70:	443b      	add	r3, r7
 801ad72:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	2b9f      	cmp	r3, #159	@ 0x9f
 801ad7c:	d90f      	bls.n	801ad9e <phpalSli15693_Sw_Exchange+0xba>
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	781b      	ldrb	r3, [r3, #0]
 801ad82:	2bdf      	cmp	r3, #223	@ 0xdf
 801ad84:	d80b      	bhi.n	801ad9e <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 801ad86:	8bfb      	ldrh	r3, [r7, #30]
 801ad88:	1c5a      	adds	r2, r3, #1
 801ad8a:	83fa      	strh	r2, [r7, #30]
 801ad8c:	4619      	mov	r1, r3
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	7e5a      	ldrb	r2, [r3, #25]
 801ad92:	f101 0320 	add.w	r3, r1, #32
 801ad96:	443b      	add	r3, r7
 801ad98:	f803 2c08 	strb.w	r2, [r3, #-8]
 801ad9c:	e017      	b.n	801adce <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	781b      	ldrb	r3, [r3, #0]
 801ada2:	2b3b      	cmp	r3, #59	@ 0x3b
 801ada4:	d113      	bne.n	801adce <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 801ada6:	893b      	ldrh	r3, [r7, #8]
 801ada8:	2b01      	cmp	r3, #1
 801adaa:	d910      	bls.n	801adce <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 801adac:	8bfb      	ldrh	r3, [r7, #30]
 801adae:	1c5a      	adds	r2, r3, #1
 801adb0:	83fa      	strh	r2, [r7, #30]
 801adb2:	4619      	mov	r1, r3
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	785a      	ldrb	r2, [r3, #1]
 801adb8:	f101 0320 	add.w	r3, r1, #32
 801adbc:	443b      	add	r3, r7
 801adbe:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	3301      	adds	r3, #1
 801adc6:	607b      	str	r3, [r7, #4]
               --wTxLength;
 801adc8:	893b      	ldrh	r3, [r7, #8]
 801adca:	3b01      	subs	r3, #1
 801adcc:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	6858      	ldr	r0, [r3, #4]
 801add2:	8bf9      	ldrh	r1, [r7, #30]
 801add4:	f107 0218 	add.w	r2, r7, #24
 801add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adda:	9301      	str	r3, [sp, #4]
 801addc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adde:	9300      	str	r3, [sp, #0]
 801ade0:	460b      	mov	r3, r1
 801ade2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801ade6:	f7f4 fe33 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801adea:	4603      	mov	r3, r0
 801adec:	83bb      	strh	r3, [r7, #28]
 801adee:	8bbb      	ldrh	r3, [r7, #28]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d001      	beq.n	801adf8 <phpalSli15693_Sw_Exchange+0x114>
 801adf4:	8bbb      	ldrh	r3, [r7, #28]
 801adf6:	e087      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	3301      	adds	r3, #1
 801adfc:	607b      	str	r3, [r7, #4]
        --wTxLength;
 801adfe:	893b      	ldrh	r3, [r7, #8]
 801ae00:	3b01      	subs	r3, #1
 801ae02:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	7a9b      	ldrb	r3, [r3, #10]
 801ae08:	f003 0304 	and.w	r3, r3, #4
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d11e      	bne.n	801ae4e <phpalSli15693_Sw_Exchange+0x16a>
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	7a9b      	ldrb	r3, [r3, #10]
 801ae14:	f003 0320 	and.w	r3, r3, #32
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d018      	beq.n	801ae4e <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	7d5b      	ldrb	r3, [r3, #21]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d114      	bne.n	801ae4e <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	6858      	ldr	r0, [r3, #4]
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	f103 020c 	add.w	r2, r3, #12
 801ae2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae30:	9301      	str	r3, [sp, #4]
 801ae32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae34:	9300      	str	r3, [sp, #0]
 801ae36:	2308      	movs	r3, #8
 801ae38:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 801ae3c:	f7f4 fe08 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801ae40:	4603      	mov	r3, r0
 801ae42:	83bb      	strh	r3, [r7, #28]
 801ae44:	8bbb      	ldrh	r3, [r7, #28]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d001      	beq.n	801ae4e <phpalSli15693_Sw_Exchange+0x16a>
 801ae4a:	8bbb      	ldrh	r3, [r7, #28]
 801ae4c:	e05c      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 801ae4e:	897b      	ldrh	r3, [r7, #10]
 801ae50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801ae54:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	6858      	ldr	r0, [r3, #4]
 801ae5a:	893a      	ldrh	r2, [r7, #8]
 801ae5c:	8979      	ldrh	r1, [r7, #10]
 801ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae60:	9301      	str	r3, [sp, #4]
 801ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae64:	9300      	str	r3, [sp, #0]
 801ae66:	4613      	mov	r3, r2
 801ae68:	687a      	ldr	r2, [r7, #4]
 801ae6a:	f7f4 fdf1 	bl	800fa50 <phhalHw_Pn5180_Exchange>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	83bb      	strh	r3, [r7, #28]
 801ae72:	8bbb      	ldrh	r3, [r7, #28]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d001      	beq.n	801ae7c <phpalSli15693_Sw_Exchange+0x198>
 801ae78:	8bbb      	ldrh	r3, [r7, #28]
 801ae7a:	e045      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 801ae7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	db40      	blt.n	801af06 <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 801ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae86:	881b      	ldrh	r3, [r3, #0]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d102      	bne.n	801ae92 <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801ae8c:	f640 2306 	movw	r3, #2566	@ 0xa06
 801ae90:	e03a      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	2200      	movs	r2, #0
 801ae96:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 801ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	781b      	ldrb	r3, [r3, #0]
 801ae9e:	f003 0301 	and.w	r3, r3, #1
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d019      	beq.n	801aeda <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	2201      	movs	r2, #1
 801aeaa:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 801aeac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aeae:	881b      	ldrh	r3, [r3, #0]
 801aeb0:	2b02      	cmp	r3, #2
 801aeb2:	d002      	beq.n	801aeba <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801aeb4:	f640 2306 	movw	r3, #2566	@ 0xa06
 801aeb8:	e026      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 801aeba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	3301      	adds	r3, #1
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	461a      	mov	r2, r3
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 801aec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeca:	2200      	movs	r2, #0
 801aecc:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 801aece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aed0:	2200      	movs	r2, #0
 801aed2:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 801aed4:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 801aed8:	e016      	b.n	801af08 <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 801aeda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	461a      	mov	r2, r3
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 801aee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	781a      	ldrb	r2, [r3, #0]
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 801aef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	1c5a      	adds	r2, r3, #1
 801aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aef8:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 801aefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aefc:	881b      	ldrh	r3, [r3, #0]
 801aefe:	3b01      	subs	r3, #1
 801af00:	b29a      	uxth	r2, r3
 801af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af04:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 801af06:	2300      	movs	r3, #0
}
 801af08:	4618      	mov	r0, r3
 801af0a:	3720      	adds	r7, #32
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}

0801af10 <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b084      	sub	sp, #16
 801af14:	af00      	add	r7, sp, #0
 801af16:	60f8      	str	r0, [r7, #12]
 801af18:	60b9      	str	r1, [r7, #8]
 801af1a:	4613      	mov	r3, r2
 801af1c:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 801af1e:	79fb      	ldrb	r3, [r7, #7]
 801af20:	2b08      	cmp	r3, #8
 801af22:	d002      	beq.n	801af2a <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801af24:	f640 2321 	movw	r3, #2593	@ 0xa21
 801af28:	e00a      	b.n	801af40 <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	330c      	adds	r3, #12
 801af2e:	2208      	movs	r2, #8
 801af30:	68b9      	ldr	r1, [r7, #8]
 801af32:	4618      	mov	r0, r3
 801af34:	f007 fa41 	bl	80223ba <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	2240      	movs	r2, #64	@ 0x40
 801af3c:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 801af3e:	2300      	movs	r3, #0
}
 801af40:	4618      	mov	r0, r3
 801af42:	3710      	adds	r7, #16
 801af44:	46bd      	mov	sp, r7
 801af46:	bd80      	pop	{r7, pc}

0801af48 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 801af48:	b580      	push	{r7, lr}
 801af4a:	b084      	sub	sp, #16
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
 801af50:	460b      	mov	r3, r1
 801af52:	807b      	strh	r3, [r7, #2]
 801af54:	4613      	mov	r3, r2
 801af56:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 801af58:	887b      	ldrh	r3, [r7, #2]
 801af5a:	2b0a      	cmp	r3, #10
 801af5c:	f200 81b9 	bhi.w	801b2d2 <phpalSli15693_Sw_SetConfig+0x38a>
 801af60:	a201      	add	r2, pc, #4	@ (adr r2, 801af68 <phpalSli15693_Sw_SetConfig+0x20>)
 801af62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af66:	bf00      	nop
 801af68:	0801af95 	.word	0x0801af95
 801af6c:	0801b2d3 	.word	0x0801b2d3
 801af70:	0801b093 	.word	0x0801b093
 801af74:	0801b0ff 	.word	0x0801b0ff
 801af78:	0801b1cb 	.word	0x0801b1cb
 801af7c:	0801b23f 	.word	0x0801b23f
 801af80:	0801b145 	.word	0x0801b145
 801af84:	0801b1c1 	.word	0x0801b1c1
 801af88:	0801b2a7 	.word	0x0801b2a7
 801af8c:	0801b2bf 	.word	0x0801b2bf
 801af90:	0801b2c9 	.word	0x0801b2c9
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	f107 020c 	add.w	r2, r7, #12
 801af9c:	210f      	movs	r1, #15
 801af9e:	4618      	mov	r0, r3
 801afa0:	f7f6 fd5c 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801afa4:	4603      	mov	r3, r0
 801afa6:	81fb      	strh	r3, [r7, #14]
 801afa8:	89fb      	ldrh	r3, [r7, #14]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d001      	beq.n	801afb2 <phpalSli15693_Sw_SetConfig+0x6a>
 801afae:	89fb      	ldrh	r3, [r7, #14]
 801afb0:	e19c      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 801afb2:	883b      	ldrh	r3, [r7, #0]
 801afb4:	f003 0301 	and.w	r3, r3, #1
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d017      	beq.n	801afec <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	7d9b      	ldrb	r3, [r3, #22]
 801afc0:	2b02      	cmp	r3, #2
 801afc2:	d102      	bne.n	801afca <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801afc4:	f640 2321 	movw	r3, #2593	@ 0xa21
 801afc8:	e190      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 801afca:	89bb      	ldrh	r3, [r7, #12]
 801afcc:	2b01      	cmp	r3, #1
 801afce:	d01e      	beq.n	801b00e <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	685b      	ldr	r3, [r3, #4]
 801afd4:	2201      	movs	r2, #1
 801afd6:	210f      	movs	r1, #15
 801afd8:	4618      	mov	r0, r3
 801afda:	f7f5 f8f1 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801afde:	4603      	mov	r3, r0
 801afe0:	81fb      	strh	r3, [r7, #14]
 801afe2:	89fb      	ldrh	r3, [r7, #14]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d012      	beq.n	801b00e <phpalSli15693_Sw_SetConfig+0xc6>
 801afe8:	89fb      	ldrh	r3, [r7, #14]
 801afea:	e17f      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 801afec:	89bb      	ldrh	r3, [r7, #12]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d00d      	beq.n	801b00e <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	685b      	ldr	r3, [r3, #4]
 801aff6:	2200      	movs	r2, #0
 801aff8:	210f      	movs	r1, #15
 801affa:	4618      	mov	r0, r3
 801affc:	f7f5 f8e0 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b000:	4603      	mov	r3, r0
 801b002:	81fb      	strh	r3, [r7, #14]
 801b004:	89fb      	ldrh	r3, [r7, #14]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d001      	beq.n	801b00e <phpalSli15693_Sw_SetConfig+0xc6>
 801b00a:	89fb      	ldrh	r3, [r7, #14]
 801b00c:	e16e      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	685b      	ldr	r3, [r3, #4]
 801b012:	f107 020c 	add.w	r2, r7, #12
 801b016:	210a      	movs	r1, #10
 801b018:	4618      	mov	r0, r3
 801b01a:	f7f6 fd1f 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b01e:	4603      	mov	r3, r0
 801b020:	81fb      	strh	r3, [r7, #14]
 801b022:	89fb      	ldrh	r3, [r7, #14]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d001      	beq.n	801b02c <phpalSli15693_Sw_SetConfig+0xe4>
 801b028:	89fb      	ldrh	r3, [r7, #14]
 801b02a:	e15f      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b02c:	883b      	ldrh	r3, [r7, #0]
 801b02e:	f003 0302 	and.w	r3, r3, #2
 801b032:	2b00      	cmp	r3, #0
 801b034:	d117      	bne.n	801b066 <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	7d9b      	ldrb	r3, [r3, #22]
 801b03a:	2b02      	cmp	r3, #2
 801b03c:	d102      	bne.n	801b044 <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b03e:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b042:	e153      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 801b044:	89bb      	ldrh	r3, [r7, #12]
 801b046:	2b0c      	cmp	r3, #12
 801b048:	d01e      	beq.n	801b088 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	685b      	ldr	r3, [r3, #4]
 801b04e:	220c      	movs	r2, #12
 801b050:	210a      	movs	r1, #10
 801b052:	4618      	mov	r0, r3
 801b054:	f7f5 f8b4 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b058:	4603      	mov	r3, r0
 801b05a:	81fb      	strh	r3, [r7, #14]
 801b05c:	89fb      	ldrh	r3, [r7, #14]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d012      	beq.n	801b088 <phpalSli15693_Sw_SetConfig+0x140>
 801b062:	89fb      	ldrh	r3, [r7, #14]
 801b064:	e142      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 801b066:	89bb      	ldrh	r3, [r7, #12]
 801b068:	2b0d      	cmp	r3, #13
 801b06a:	d00d      	beq.n	801b088 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	685b      	ldr	r3, [r3, #4]
 801b070:	220d      	movs	r2, #13
 801b072:	210a      	movs	r1, #10
 801b074:	4618      	mov	r0, r3
 801b076:	f7f5 f8a3 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b07a:	4603      	mov	r3, r0
 801b07c:	81fb      	strh	r3, [r7, #14]
 801b07e:	89fb      	ldrh	r3, [r7, #14]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d001      	beq.n	801b088 <phpalSli15693_Sw_SetConfig+0x140>
 801b084:	89fb      	ldrh	r3, [r7, #14]
 801b086:	e131      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 801b088:	883b      	ldrh	r3, [r7, #0]
 801b08a:	b2da      	uxtb	r2, r3
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	729a      	strb	r2, [r3, #10]

        break;
 801b090:	e12b      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 801b092:	883b      	ldrh	r3, [r7, #0]
 801b094:	333c      	adds	r3, #60	@ 0x3c
 801b096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b09a:	d302      	bcc.n	801b0a2 <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 801b09c:	f640 2322 	movw	r3, #2594	@ 0xa22
 801b0a0:	e124      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 801b0a2:	883b      	ldrh	r3, [r7, #0]
 801b0a4:	333c      	adds	r3, #60	@ 0x3c
 801b0a6:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	685b      	ldr	r3, [r3, #4]
 801b0ac:	f107 020c 	add.w	r2, r7, #12
 801b0b0:	210d      	movs	r1, #13
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7f6 fcd2 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 801b0bc:	89fb      	ldrh	r3, [r7, #14]
 801b0be:	b2db      	uxtb	r3, r3
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d103      	bne.n	801b0cc <phpalSli15693_Sw_SetConfig+0x184>
 801b0c4:	89bb      	ldrh	r3, [r7, #12]
 801b0c6:	883a      	ldrh	r2, [r7, #0]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d103      	bne.n	801b0d4 <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 801b0cc:	89fb      	ldrh	r3, [r7, #14]
 801b0ce:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 801b0d0:	2b22      	cmp	r3, #34	@ 0x22
 801b0d2:	d10d      	bne.n	801b0f0 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	883a      	ldrh	r2, [r7, #0]
 801b0da:	210d      	movs	r1, #13
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7f5 f86f 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	81fb      	strh	r3, [r7, #14]
 801b0e6:	89fb      	ldrh	r3, [r7, #14]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d007      	beq.n	801b0fc <phpalSli15693_Sw_SetConfig+0x1b4>
 801b0ec:	89fb      	ldrh	r3, [r7, #14]
 801b0ee:	e0fd      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 801b0f0:	89fb      	ldrh	r3, [r7, #14]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	f000 80f0 	beq.w	801b2d8 <phpalSli15693_Sw_SetConfig+0x390>
 801b0f8:	89fb      	ldrh	r3, [r7, #14]
 801b0fa:	e0f7      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 801b0fc:	e0ec      	b.n	801b2d8 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	685b      	ldr	r3, [r3, #4]
 801b102:	f107 020c 	add.w	r2, r7, #12
 801b106:	210e      	movs	r1, #14
 801b108:	4618      	mov	r0, r3
 801b10a:	f7f6 fca7 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b10e:	4603      	mov	r3, r0
 801b110:	81fb      	strh	r3, [r7, #14]
 801b112:	89fb      	ldrh	r3, [r7, #14]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d001      	beq.n	801b11c <phpalSli15693_Sw_SetConfig+0x1d4>
 801b118:	89fb      	ldrh	r3, [r7, #14]
 801b11a:	e0e7      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 801b11c:	89bb      	ldrh	r3, [r7, #12]
 801b11e:	883a      	ldrh	r2, [r7, #0]
 801b120:	429a      	cmp	r2, r3
 801b122:	f000 80db 	beq.w	801b2dc <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	685b      	ldr	r3, [r3, #4]
 801b12a:	883a      	ldrh	r2, [r7, #0]
 801b12c:	210e      	movs	r1, #14
 801b12e:	4618      	mov	r0, r3
 801b130:	f7f5 f846 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b134:	4603      	mov	r3, r0
 801b136:	81fb      	strh	r3, [r7, #14]
 801b138:	89fb      	ldrh	r3, [r7, #14]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	f000 80ce 	beq.w	801b2dc <phpalSli15693_Sw_SetConfig+0x394>
 801b140:	89fb      	ldrh	r3, [r7, #14]
 801b142:	e0d3      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 801b144:	883b      	ldrh	r3, [r7, #0]
 801b146:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 801b14a:	d006      	beq.n	801b15a <phpalSli15693_Sw_SetConfig+0x212>
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	7d9b      	ldrb	r3, [r3, #22]
 801b150:	2b02      	cmp	r3, #2
 801b152:	d102      	bne.n	801b15a <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b154:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b158:	e0c8      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	685b      	ldr	r3, [r3, #4]
 801b15e:	f107 020c 	add.w	r2, r7, #12
 801b162:	210d      	movs	r1, #13
 801b164:	4618      	mov	r0, r3
 801b166:	f7f6 fc79 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b16a:	4603      	mov	r3, r0
 801b16c:	81fb      	strh	r3, [r7, #14]
 801b16e:	89fb      	ldrh	r3, [r7, #14]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d001      	beq.n	801b178 <phpalSli15693_Sw_SetConfig+0x230>
 801b174:	89fb      	ldrh	r3, [r7, #14]
 801b176:	e0b9      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 801b178:	89bb      	ldrh	r3, [r7, #12]
 801b17a:	883a      	ldrh	r2, [r7, #0]
 801b17c:	429a      	cmp	r2, r3
 801b17e:	f000 80af 	beq.w	801b2e0 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6858      	ldr	r0, [r3, #4]
 801b186:	883b      	ldrh	r3, [r7, #0]
 801b188:	3b0a      	subs	r3, #10
 801b18a:	b29b      	uxth	r3, r3
 801b18c:	461a      	mov	r2, r3
 801b18e:	2106      	movs	r1, #6
 801b190:	f7f5 f816 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b194:	4603      	mov	r3, r0
 801b196:	81fb      	strh	r3, [r7, #14]
 801b198:	89fb      	ldrh	r3, [r7, #14]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d001      	beq.n	801b1a2 <phpalSli15693_Sw_SetConfig+0x25a>
 801b19e:	89fb      	ldrh	r3, [r7, #14]
 801b1a0:	e0a4      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	883a      	ldrh	r2, [r7, #0]
 801b1a8:	210d      	movs	r1, #13
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f7f5 f808 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	81fb      	strh	r3, [r7, #14]
 801b1b4:	89fb      	ldrh	r3, [r7, #14]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	f000 8092 	beq.w	801b2e0 <phpalSli15693_Sw_SetConfig+0x398>
 801b1bc:	89fb      	ldrh	r3, [r7, #14]
 801b1be:	e095      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 801b1c0:	883b      	ldrh	r3, [r7, #0]
 801b1c2:	b2da      	uxtb	r2, r3
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	75da      	strb	r2, [r3, #23]
        break;
 801b1c8:	e08f      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	7d9b      	ldrb	r3, [r3, #22]
 801b1ce:	2b02      	cmp	r3, #2
 801b1d0:	d105      	bne.n	801b1de <phpalSli15693_Sw_SetConfig+0x296>
 801b1d2:	883b      	ldrh	r3, [r7, #0]
 801b1d4:	2b1a      	cmp	r3, #26
 801b1d6:	d002      	beq.n	801b1de <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b1d8:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b1dc:	e086      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 801b1de:	883b      	ldrh	r3, [r7, #0]
 801b1e0:	2b1d      	cmp	r3, #29
 801b1e2:	d902      	bls.n	801b1ea <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801b1e4:	f640 2323 	movw	r3, #2595	@ 0xa23
 801b1e8:	e080      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 801b1ea:	883b      	ldrh	r3, [r7, #0]
 801b1ec:	3b1a      	subs	r3, #26
 801b1ee:	2b03      	cmp	r3, #3
 801b1f0:	d816      	bhi.n	801b220 <phpalSli15693_Sw_SetConfig+0x2d8>
 801b1f2:	a201      	add	r2, pc, #4	@ (adr r2, 801b1f8 <phpalSli15693_Sw_SetConfig+0x2b0>)
 801b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1f8:	0801b209 	.word	0x0801b209
 801b1fc:	0801b20f 	.word	0x0801b20f
 801b200:	0801b215 	.word	0x0801b215
 801b204:	0801b21b 	.word	0x0801b21b
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 801b208:	230b      	movs	r3, #11
 801b20a:	803b      	strh	r3, [r7, #0]
            break;
 801b20c:	e009      	b.n	801b222 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 801b20e:	231b      	movs	r3, #27
 801b210:	803b      	strh	r3, [r7, #0]
            break;
 801b212:	e006      	b.n	801b222 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801b214:	2300      	movs	r3, #0
 801b216:	803b      	strh	r3, [r7, #0]
            break;
 801b218:	e003      	b.n	801b222 <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 801b21a:	2301      	movs	r3, #1
 801b21c:	803b      	strh	r3, [r7, #0]
            break;
 801b21e:	e000      	b.n	801b222 <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 801b220:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	685b      	ldr	r3, [r3, #4]
 801b226:	883a      	ldrh	r2, [r7, #0]
 801b228:	2109      	movs	r1, #9
 801b22a:	4618      	mov	r0, r3
 801b22c:	f7f4 ffc8 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b230:	4603      	mov	r3, r0
 801b232:	81fb      	strh	r3, [r7, #14]
 801b234:	89fb      	ldrh	r3, [r7, #14]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d054      	beq.n	801b2e4 <phpalSli15693_Sw_SetConfig+0x39c>
 801b23a:	89fb      	ldrh	r3, [r7, #14]
 801b23c:	e056      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	7d9b      	ldrb	r3, [r3, #22]
 801b242:	2b02      	cmp	r3, #2
 801b244:	d105      	bne.n	801b252 <phpalSli15693_Sw_SetConfig+0x30a>
 801b246:	883b      	ldrh	r3, [r7, #0]
 801b248:	2b1a      	cmp	r3, #26
 801b24a:	d002      	beq.n	801b252 <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b24c:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b250:	e04c      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 801b252:	883b      	ldrh	r3, [r7, #0]
 801b254:	3b1a      	subs	r3, #26
 801b256:	2b03      	cmp	r3, #3
 801b258:	d816      	bhi.n	801b288 <phpalSli15693_Sw_SetConfig+0x340>
 801b25a:	a201      	add	r2, pc, #4	@ (adr r2, 801b260 <phpalSli15693_Sw_SetConfig+0x318>)
 801b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b260:	0801b271 	.word	0x0801b271
 801b264:	0801b277 	.word	0x0801b277
 801b268:	0801b27d 	.word	0x0801b27d
 801b26c:	0801b283 	.word	0x0801b283
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 801b270:	230d      	movs	r3, #13
 801b272:	803b      	strh	r3, [r7, #0]
            break;
 801b274:	e009      	b.n	801b28a <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 801b276:	230f      	movs	r3, #15
 801b278:	803b      	strh	r3, [r7, #0]
            break;
 801b27a:	e006      	b.n	801b28a <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801b27c:	2300      	movs	r3, #0
 801b27e:	803b      	strh	r3, [r7, #0]
            break;
 801b280:	e003      	b.n	801b28a <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 801b282:	2301      	movs	r3, #1
 801b284:	803b      	strh	r3, [r7, #0]
            break;
 801b286:	e000      	b.n	801b28a <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 801b288:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	685b      	ldr	r3, [r3, #4]
 801b28e:	883a      	ldrh	r2, [r7, #0]
 801b290:	210a      	movs	r1, #10
 801b292:	4618      	mov	r0, r3
 801b294:	f7f4 ff94 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b298:	4603      	mov	r3, r0
 801b29a:	81fb      	strh	r3, [r7, #14]
 801b29c:	89fb      	ldrh	r3, [r7, #14]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d022      	beq.n	801b2e8 <phpalSli15693_Sw_SetConfig+0x3a0>
 801b2a2:	89fb      	ldrh	r3, [r7, #14]
 801b2a4:	e022      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	7e1b      	ldrb	r3, [r3, #24]
 801b2aa:	2b05      	cmp	r3, #5
 801b2ac:	d902      	bls.n	801b2b4 <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b2ae:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b2b2:	e01b      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 801b2b4:	883b      	ldrh	r3, [r7, #0]
 801b2b6:	b2da      	uxtb	r2, r3
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	761a      	strb	r2, [r3, #24]
            break;
 801b2bc:	e015      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 801b2be:	883b      	ldrh	r3, [r7, #0]
 801b2c0:	b2da      	uxtb	r2, r3
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	765a      	strb	r2, [r3, #25]
            break;
 801b2c6:	e010      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 801b2c8:	883b      	ldrh	r3, [r7, #0]
 801b2ca:	b2da      	uxtb	r2, r3
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	759a      	strb	r2, [r3, #22]
            break;
 801b2d0:	e00b      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801b2d2:	f640 2323 	movw	r3, #2595	@ 0xa23
 801b2d6:	e009      	b.n	801b2ec <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 801b2d8:	bf00      	nop
 801b2da:	e006      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801b2dc:	bf00      	nop
 801b2de:	e004      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801b2e0:	bf00      	nop
 801b2e2:	e002      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801b2e4:	bf00      	nop
 801b2e6:	e000      	b.n	801b2ea <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801b2e8:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801b2ea:	2300      	movs	r3, #0
}
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3710      	adds	r7, #16
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}

0801b2f4 <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b086      	sub	sp, #24
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	60f8      	str	r0, [r7, #12]
 801b2fc:	460b      	mov	r3, r1
 801b2fe:	607a      	str	r2, [r7, #4]
 801b300:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 801b302:	897b      	ldrh	r3, [r7, #10]
 801b304:	2b0a      	cmp	r3, #10
 801b306:	f200 8115 	bhi.w	801b534 <phpalSli15693_Sw_GetConfig+0x240>
 801b30a:	a201      	add	r2, pc, #4	@ (adr r2, 801b310 <phpalSli15693_Sw_GetConfig+0x1c>)
 801b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b310:	0801b33d 	.word	0x0801b33d
 801b314:	0801b349 	.word	0x0801b349
 801b318:	0801b353 	.word	0x0801b353
 801b31c:	0801b37d 	.word	0x0801b37d
 801b320:	0801b39b 	.word	0x0801b39b
 801b324:	0801b459 	.word	0x0801b459
 801b328:	0801b4e9 	.word	0x0801b4e9
 801b32c:	0801b505 	.word	0x0801b505
 801b330:	0801b511 	.word	0x0801b511
 801b334:	0801b51d 	.word	0x0801b51d
 801b338:	0801b529 	.word	0x0801b529
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	7a9b      	ldrb	r3, [r3, #10]
 801b340:	461a      	mov	r2, r3
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	801a      	strh	r2, [r3, #0]
        break;
 801b346:	e0fb      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	891a      	ldrh	r2, [r3, #8]
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	801a      	strh	r2, [r3, #0]
        break;
 801b350:	e0f6      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	685b      	ldr	r3, [r3, #4]
 801b356:	687a      	ldr	r2, [r7, #4]
 801b358:	210d      	movs	r1, #13
 801b35a:	4618      	mov	r0, r3
 801b35c:	f7f6 fb7e 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b360:	4603      	mov	r3, r0
 801b362:	82fb      	strh	r3, [r7, #22]
 801b364:	8afb      	ldrh	r3, [r7, #22]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d001      	beq.n	801b36e <phpalSli15693_Sw_GetConfig+0x7a>
 801b36a:	8afb      	ldrh	r3, [r7, #22]
 801b36c:	e0e9      	b.n	801b542 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	881b      	ldrh	r3, [r3, #0]
 801b372:	3b3c      	subs	r3, #60	@ 0x3c
 801b374:	b29a      	uxth	r2, r3
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	801a      	strh	r2, [r3, #0]
        break;
 801b37a:	e0e1      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	685b      	ldr	r3, [r3, #4]
 801b380:	687a      	ldr	r2, [r7, #4]
 801b382:	210e      	movs	r1, #14
 801b384:	4618      	mov	r0, r3
 801b386:	f7f6 fb69 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b38a:	4603      	mov	r3, r0
 801b38c:	82fb      	strh	r3, [r7, #22]
 801b38e:	8afb      	ldrh	r3, [r7, #22]
 801b390:	2b00      	cmp	r3, #0
 801b392:	f000 80d2 	beq.w	801b53a <phpalSli15693_Sw_GetConfig+0x246>
 801b396:	8afb      	ldrh	r3, [r7, #22]
 801b398:	e0d3      	b.n	801b542 <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	685b      	ldr	r3, [r3, #4]
 801b39e:	687a      	ldr	r2, [r7, #4]
 801b3a0:	2109      	movs	r1, #9
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f7f6 fb5a 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b3a8:	4603      	mov	r3, r0
 801b3aa:	82fb      	strh	r3, [r7, #22]
 801b3ac:	8afb      	ldrh	r3, [r7, #22]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d001      	beq.n	801b3b6 <phpalSli15693_Sw_GetConfig+0xc2>
 801b3b2:	8afb      	ldrh	r3, [r7, #22]
 801b3b4:	e0c5      	b.n	801b542 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	881b      	ldrh	r3, [r3, #0]
 801b3ba:	2b1b      	cmp	r3, #27
 801b3bc:	d84a      	bhi.n	801b454 <phpalSli15693_Sw_GetConfig+0x160>
 801b3be:	a201      	add	r2, pc, #4	@ (adr r2, 801b3c4 <phpalSli15693_Sw_GetConfig+0xd0>)
 801b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3c4:	0801b445 	.word	0x0801b445
 801b3c8:	0801b44d 	.word	0x0801b44d
 801b3cc:	0801b455 	.word	0x0801b455
 801b3d0:	0801b455 	.word	0x0801b455
 801b3d4:	0801b455 	.word	0x0801b455
 801b3d8:	0801b455 	.word	0x0801b455
 801b3dc:	0801b455 	.word	0x0801b455
 801b3e0:	0801b455 	.word	0x0801b455
 801b3e4:	0801b455 	.word	0x0801b455
 801b3e8:	0801b455 	.word	0x0801b455
 801b3ec:	0801b455 	.word	0x0801b455
 801b3f0:	0801b435 	.word	0x0801b435
 801b3f4:	0801b455 	.word	0x0801b455
 801b3f8:	0801b455 	.word	0x0801b455
 801b3fc:	0801b455 	.word	0x0801b455
 801b400:	0801b455 	.word	0x0801b455
 801b404:	0801b455 	.word	0x0801b455
 801b408:	0801b455 	.word	0x0801b455
 801b40c:	0801b455 	.word	0x0801b455
 801b410:	0801b455 	.word	0x0801b455
 801b414:	0801b455 	.word	0x0801b455
 801b418:	0801b455 	.word	0x0801b455
 801b41c:	0801b455 	.word	0x0801b455
 801b420:	0801b455 	.word	0x0801b455
 801b424:	0801b455 	.word	0x0801b455
 801b428:	0801b455 	.word	0x0801b455
 801b42c:	0801b455 	.word	0x0801b455
 801b430:	0801b43d 	.word	0x0801b43d
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	221a      	movs	r2, #26
 801b438:	801a      	strh	r2, [r3, #0]
            break;
 801b43a:	e00c      	b.n	801b456 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	221b      	movs	r2, #27
 801b440:	801a      	strh	r2, [r3, #0]
            break;
 801b442:	e008      	b.n	801b456 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	221c      	movs	r2, #28
 801b448:	801a      	strh	r2, [r3, #0]
            break;
 801b44a:	e004      	b.n	801b456 <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	221d      	movs	r2, #29
 801b450:	801a      	strh	r2, [r3, #0]
            break;
 801b452:	e000      	b.n	801b456 <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 801b454:	bf00      	nop
        }
        break;
 801b456:	e073      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	685b      	ldr	r3, [r3, #4]
 801b45c:	687a      	ldr	r2, [r7, #4]
 801b45e:	210a      	movs	r1, #10
 801b460:	4618      	mov	r0, r3
 801b462:	f7f6 fafb 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b466:	4603      	mov	r3, r0
 801b468:	82fb      	strh	r3, [r7, #22]
 801b46a:	8afb      	ldrh	r3, [r7, #22]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d001      	beq.n	801b474 <phpalSli15693_Sw_GetConfig+0x180>
 801b470:	8afb      	ldrh	r3, [r7, #22]
 801b472:	e066      	b.n	801b542 <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	881b      	ldrh	r3, [r3, #0]
 801b478:	2b0f      	cmp	r3, #15
 801b47a:	d833      	bhi.n	801b4e4 <phpalSli15693_Sw_GetConfig+0x1f0>
 801b47c:	a201      	add	r2, pc, #4	@ (adr r2, 801b484 <phpalSli15693_Sw_GetConfig+0x190>)
 801b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b482:	bf00      	nop
 801b484:	0801b4d5 	.word	0x0801b4d5
 801b488:	0801b4dd 	.word	0x0801b4dd
 801b48c:	0801b4e5 	.word	0x0801b4e5
 801b490:	0801b4e5 	.word	0x0801b4e5
 801b494:	0801b4e5 	.word	0x0801b4e5
 801b498:	0801b4e5 	.word	0x0801b4e5
 801b49c:	0801b4e5 	.word	0x0801b4e5
 801b4a0:	0801b4e5 	.word	0x0801b4e5
 801b4a4:	0801b4e5 	.word	0x0801b4e5
 801b4a8:	0801b4e5 	.word	0x0801b4e5
 801b4ac:	0801b4e5 	.word	0x0801b4e5
 801b4b0:	0801b4e5 	.word	0x0801b4e5
 801b4b4:	0801b4e5 	.word	0x0801b4e5
 801b4b8:	0801b4c5 	.word	0x0801b4c5
 801b4bc:	0801b4e5 	.word	0x0801b4e5
 801b4c0:	0801b4cd 	.word	0x0801b4cd
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	221a      	movs	r2, #26
 801b4c8:	801a      	strh	r2, [r3, #0]
            break;
 801b4ca:	e00c      	b.n	801b4e6 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	221b      	movs	r2, #27
 801b4d0:	801a      	strh	r2, [r3, #0]
            break;
 801b4d2:	e008      	b.n	801b4e6 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	221c      	movs	r2, #28
 801b4d8:	801a      	strh	r2, [r3, #0]
            break;
 801b4da:	e004      	b.n	801b4e6 <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	221d      	movs	r2, #29
 801b4e0:	801a      	strh	r2, [r3, #0]
            break;
 801b4e2:	e000      	b.n	801b4e6 <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 801b4e4:	bf00      	nop
        }
        break;
 801b4e6:	e02b      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	685b      	ldr	r3, [r3, #4]
 801b4ec:	687a      	ldr	r2, [r7, #4]
 801b4ee:	210d      	movs	r1, #13
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7f6 fab3 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	82fb      	strh	r3, [r7, #22]
 801b4fa:	8afb      	ldrh	r3, [r7, #22]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d01e      	beq.n	801b53e <phpalSli15693_Sw_GetConfig+0x24a>
 801b500:	8afb      	ldrh	r3, [r7, #22]
 801b502:	e01e      	b.n	801b542 <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	7ddb      	ldrb	r3, [r3, #23]
 801b508:	461a      	mov	r2, r3
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	801a      	strh	r2, [r3, #0]
        break;
 801b50e:	e017      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	7e1b      	ldrb	r3, [r3, #24]
 801b514:	461a      	mov	r2, r3
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	801a      	strh	r2, [r3, #0]
        break;
 801b51a:	e011      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	7e5b      	ldrb	r3, [r3, #25]
 801b520:	461a      	mov	r2, r3
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	801a      	strh	r2, [r3, #0]
        break;
 801b526:	e00b      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	7d9b      	ldrb	r3, [r3, #22]
 801b52c:	461a      	mov	r2, r3
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	801a      	strh	r2, [r3, #0]
        break;
 801b532:	e005      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801b534:	f640 2323 	movw	r3, #2595	@ 0xa23
 801b538:	e003      	b.n	801b542 <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 801b53a:	bf00      	nop
 801b53c:	e000      	b.n	801b540 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 801b53e:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801b540:	2300      	movs	r3, #0
}
 801b542:	4618      	mov	r0, r3
 801b544:	3718      	adds	r7, #24
 801b546:	46bd      	mov	sp, r7
 801b548:	bd80      	pop	{r7, pc}
 801b54a:	bf00      	nop

0801b54c <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b08e      	sub	sp, #56	@ 0x38
 801b550:	af0c      	add	r7, sp, #48	@ 0x30
 801b552:	6078      	str	r0, [r7, #4]
 801b554:	4608      	mov	r0, r1
 801b556:	4611      	mov	r1, r2
 801b558:	461a      	mov	r2, r3
 801b55a:	4603      	mov	r3, r0
 801b55c:	70fb      	strb	r3, [r7, #3]
 801b55e:	460b      	mov	r3, r1
 801b560:	70bb      	strb	r3, [r7, #2]
 801b562:	4613      	mov	r3, r2
 801b564:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 801b566:	7878      	ldrb	r0, [r7, #1]
 801b568:	78ba      	ldrb	r2, [r7, #2]
 801b56a:	78f9      	ldrb	r1, [r7, #3]
 801b56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b56e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b572:	930a      	str	r3, [sp, #40]	@ 0x28
 801b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b576:	9309      	str	r3, [sp, #36]	@ 0x24
 801b578:	6a3b      	ldr	r3, [r7, #32]
 801b57a:	9308      	str	r3, [sp, #32]
 801b57c:	2300      	movs	r3, #0
 801b57e:	9307      	str	r3, [sp, #28]
 801b580:	8bbb      	ldrh	r3, [r7, #28]
 801b582:	9306      	str	r3, [sp, #24]
 801b584:	7e3b      	ldrb	r3, [r7, #24]
 801b586:	9305      	str	r3, [sp, #20]
 801b588:	7d3b      	ldrb	r3, [r7, #20]
 801b58a:	9304      	str	r3, [sp, #16]
 801b58c:	693b      	ldr	r3, [r7, #16]
 801b58e:	9303      	str	r3, [sp, #12]
 801b590:	2300      	movs	r3, #0
 801b592:	9302      	str	r3, [sp, #8]
 801b594:	2300      	movs	r3, #0
 801b596:	9301      	str	r3, [sp, #4]
 801b598:	2300      	movs	r3, #0
 801b59a:	9300      	str	r3, [sp, #0]
 801b59c:	4603      	mov	r3, r0
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f000 f805 	bl	801b5ae <phpalSli15693_Sw_InventoryExt>
 801b5a4:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	3708      	adds	r7, #8
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	bd80      	pop	{r7, pc}

0801b5ae <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 801b5ae:	b580      	push	{r7, lr}
 801b5b0:	b090      	sub	sp, #64	@ 0x40
 801b5b2:	af02      	add	r7, sp, #8
 801b5b4:	6078      	str	r0, [r7, #4]
 801b5b6:	4608      	mov	r0, r1
 801b5b8:	4611      	mov	r1, r2
 801b5ba:	461a      	mov	r2, r3
 801b5bc:	4603      	mov	r3, r0
 801b5be:	70fb      	strb	r3, [r7, #3]
 801b5c0:	460b      	mov	r3, r1
 801b5c2:	70bb      	strb	r3, [r7, #2]
 801b5c4:	4613      	mov	r3, r2
 801b5c6:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801b5d8:	2300      	movs	r3, #0
 801b5da:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 801b5dc:	2300      	movs	r3, #0
 801b5de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	2200      	movs	r2, #0
 801b606:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 801b608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d00e      	beq.n	801b62c <phpalSli15693_Sw_InventoryExt+0x7e>
 801b60e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b610:	2b00      	cmp	r3, #0
 801b612:	d00b      	beq.n	801b62c <phpalSli15693_Sw_InventoryExt+0x7e>
 801b614:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b618:	f003 0310 	and.w	r3, r3, #16
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d008      	beq.n	801b632 <phpalSli15693_Sw_InventoryExt+0x84>
 801b620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b622:	2b00      	cmp	r3, #0
 801b624:	d002      	beq.n	801b62c <phpalSli15693_Sw_InventoryExt+0x7e>
 801b626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d102      	bne.n	801b632 <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b62c:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b630:	e334      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 801b632:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b636:	f003 0304 	and.w	r3, r3, #4
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d005      	beq.n	801b64a <phpalSli15693_Sw_InventoryExt+0x9c>
 801b63e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b640:	2b00      	cmp	r3, #0
 801b642:	d102      	bne.n	801b64a <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b644:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b648:	e328      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 801b64a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b64e:	f003 0308 	and.w	r3, r3, #8
 801b652:	2b00      	cmp	r3, #0
 801b654:	d005      	beq.n	801b662 <phpalSli15693_Sw_InventoryExt+0xb4>
 801b656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d102      	bne.n	801b662 <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b65c:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b660:	e31c      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 801b662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b664:	2200      	movs	r2, #0
 801b666:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 801b668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b66a:	2200      	movs	r2, #0
 801b66c:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 801b66e:	78bb      	ldrb	r3, [r7, #2]
 801b670:	f003 0320 	and.w	r3, r3, #32
 801b674:	2b00      	cmp	r3, #0
 801b676:	d003      	beq.n	801b680 <phpalSli15693_Sw_InventoryExt+0xd2>
 801b678:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b67c:	2b40      	cmp	r3, #64	@ 0x40
 801b67e:	d808      	bhi.n	801b692 <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 801b680:	78bb      	ldrb	r3, [r7, #2]
 801b682:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 801b686:	2b00      	cmp	r3, #0
 801b688:	d106      	bne.n	801b698 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 801b68a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b68e:	2b3c      	cmp	r3, #60	@ 0x3c
 801b690:	d902      	bls.n	801b698 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b692:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b696:	e301      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 801b698:	78fb      	ldrb	r3, [r7, #3]
 801b69a:	2b01      	cmp	r3, #1
 801b69c:	d010      	beq.n	801b6c0 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 801b69e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d102      	bne.n	801b6ac <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b6a6:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b6aa:	e2f7      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 801b6ac:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801b6b0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b6b4:	4413      	add	r3, r2
 801b6b6:	2bff      	cmp	r3, #255	@ 0xff
 801b6b8:	d902      	bls.n	801b6c0 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801b6ba:	f640 2321 	movw	r3, #2593	@ 0xa21
 801b6be:	e2ed      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 801b6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b6c4:	1c5a      	adds	r2, r3, #1
 801b6c6:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b6ca:	3338      	adds	r3, #56	@ 0x38
 801b6cc:	443b      	add	r3, r7
 801b6ce:	78fa      	ldrb	r2, [r7, #3]
 801b6d0:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801b6d4:	78bb      	ldrb	r3, [r7, #2]
 801b6d6:	b29b      	uxth	r3, r3
 801b6d8:	461a      	mov	r2, r3
 801b6da:	2100      	movs	r1, #0
 801b6dc:	6878      	ldr	r0, [r7, #4]
 801b6de:	f7ff fc33 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801b6e2:	4603      	mov	r3, r0
 801b6e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 801b6e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d001      	beq.n	801b6f0 <phpalSli15693_Sw_InventoryExt+0x142>
 801b6ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b6ee:	e2d5      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801b6f0:	78fb      	ldrb	r3, [r7, #3]
 801b6f2:	2ba1      	cmp	r3, #161	@ 0xa1
 801b6f4:	d002      	beq.n	801b6fc <phpalSli15693_Sw_InventoryExt+0x14e>
 801b6f6:	78fb      	ldrb	r3, [r7, #3]
 801b6f8:	2bb1      	cmp	r3, #177	@ 0xb1
 801b6fa:	d120      	bne.n	801b73e <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b6fc:	78bb      	ldrb	r3, [r7, #2]
 801b6fe:	f003 0302 	and.w	r3, r3, #2
 801b702:	2b00      	cmp	r3, #0
 801b704:	d00d      	beq.n	801b722 <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	685b      	ldr	r3, [r3, #4]
 801b70a:	220f      	movs	r2, #15
 801b70c:	210a      	movs	r1, #10
 801b70e:	4618      	mov	r0, r3
 801b710:	f7f4 fd56 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b714:	4603      	mov	r3, r0
 801b716:	853b      	strh	r3, [r7, #40]	@ 0x28
 801b718:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d00f      	beq.n	801b73e <phpalSli15693_Sw_InventoryExt+0x190>
 801b71e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b720:	e2bc      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	685b      	ldr	r3, [r3, #4]
 801b726:	220e      	movs	r2, #14
 801b728:	210a      	movs	r1, #10
 801b72a:	4618      	mov	r0, r3
 801b72c:	f7f4 fd48 	bl	80101c0 <phhalHw_Pn5180_SetConfig>
 801b730:	4603      	mov	r3, r0
 801b732:	853b      	strh	r3, [r7, #40]	@ 0x28
 801b734:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b736:	2b00      	cmp	r3, #0
 801b738:	d001      	beq.n	801b73e <phpalSli15693_Sw_InventoryExt+0x190>
 801b73a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b73c:	e2ae      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 801b73e:	78bb      	ldrb	r3, [r7, #2]
 801b740:	f003 0310 	and.w	r3, r3, #16
 801b744:	2b00      	cmp	r3, #0
 801b746:	d00e      	beq.n	801b766 <phpalSli15693_Sw_InventoryExt+0x1b8>
 801b748:	78bb      	ldrb	r3, [r7, #2]
 801b74a:	f003 0304 	and.w	r3, r3, #4
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d009      	beq.n	801b766 <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 801b752:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b756:	1c5a      	adds	r2, r3, #1
 801b758:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b75c:	3338      	adds	r3, #56	@ 0x38
 801b75e:	443b      	add	r3, r7
 801b760:	787a      	ldrb	r2, [r7, #1]
 801b762:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 801b766:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d03b      	beq.n	801b7e6 <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 801b76e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b772:	1c5a      	adds	r2, r3, #1
 801b774:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b778:	4619      	mov	r1, r3
 801b77a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b77e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b782:	b2da      	uxtb	r2, r3
 801b784:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801b788:	443b      	add	r3, r7
 801b78a:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 801b78e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b792:	1c5a      	adds	r2, r3, #1
 801b794:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b798:	3338      	adds	r3, #56	@ 0x38
 801b79a:	443b      	add	r3, r7
 801b79c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801b7a0:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 801b7a4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b7a8:	f003 0304 	and.w	r3, r3, #4
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d025      	beq.n	801b7fc <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 801b7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b7b4:	1c5a      	adds	r2, r3, #1
 801b7b6:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b7ba:	4619      	mov	r1, r3
 801b7bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b7be:	781a      	ldrb	r2, [r3, #0]
 801b7c0:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801b7c4:	443b      	add	r3, r7
 801b7c6:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 801b7ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b7ce:	1c5a      	adds	r2, r3, #1
 801b7d0:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b7d4:	4619      	mov	r1, r3
 801b7d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b7d8:	785a      	ldrb	r2, [r3, #1]
 801b7da:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801b7de:	443b      	add	r3, r7
 801b7e0:	f803 2c24 	strb.w	r2, [r3, #-36]
 801b7e4:	e00a      	b.n	801b7fc <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 801b7e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b7ea:	1c5a      	adds	r2, r3, #1
 801b7ec:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801b7f0:	3338      	adds	r3, #56	@ 0x38
 801b7f2:	443b      	add	r3, r7
 801b7f4:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801b7f8:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 801b7fc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b800:	f003 0307 	and.w	r3, r3, #7
 801b804:	b2db      	uxtb	r3, r3
 801b806:	2b00      	cmp	r3, #0
 801b808:	d006      	beq.n	801b818 <phpalSli15693_Sw_InventoryExt+0x26a>
 801b80a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b80e:	08db      	lsrs	r3, r3, #3
 801b810:	b2db      	uxtb	r3, r3
 801b812:	3301      	adds	r3, #1
 801b814:	b2db      	uxtb	r3, r3
 801b816:	e003      	b.n	801b820 <phpalSli15693_Sw_InventoryExt+0x272>
 801b818:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b81c:	08db      	lsrs	r3, r3, #3
 801b81e:	b2db      	uxtb	r3, r3
 801b820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	330c      	adds	r3, #12
 801b828:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b82c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801b82e:	4618      	mov	r0, r3
 801b830:	f006 fdc3 	bl	80223ba <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801b83a:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 801b83c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b840:	f107 0214 	add.w	r2, r7, #20
 801b844:	4413      	add	r3, r2
 801b846:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b84a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801b84c:	4618      	mov	r0, r3
 801b84e:	f006 fdb4 	bl	80223ba <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 801b852:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801b856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b85a:	4413      	add	r3, r2
 801b85c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 801b860:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b864:	f003 0307 	and.w	r3, r3, #7
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d019      	beq.n	801b8a0 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 801b86c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b870:	3b01      	subs	r3, #1
 801b872:	3338      	adds	r3, #56	@ 0x38
 801b874:	443b      	add	r3, r7
 801b876:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 801b87a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801b87e:	f003 0307 	and.w	r3, r3, #7
 801b882:	f1c3 0308 	rsb	r3, r3, #8
 801b886:	22ff      	movs	r2, #255	@ 0xff
 801b888:	fa22 f303 	lsr.w	r3, r2, r3
 801b88c:	b2da      	uxtb	r2, r3
 801b88e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b892:	3b01      	subs	r3, #1
 801b894:	400a      	ands	r2, r1
 801b896:	b2d2      	uxtb	r2, r2
 801b898:	3338      	adds	r3, #56	@ 0x38
 801b89a:	443b      	add	r3, r7
 801b89c:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	685b      	ldr	r3, [r3, #4]
 801b8a4:	f107 020c 	add.w	r2, r7, #12
 801b8a8:	210c      	movs	r1, #12
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f7f6 f8d6 	bl	8011a5c <phhalHw_Pn5180_GetConfig>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 801b8b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d001      	beq.n	801b8be <phpalSli15693_Sw_InventoryExt+0x310>
 801b8ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b8bc:	e1ee      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 801b8be:	89bb      	ldrh	r3, [r7, #12]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d01f      	beq.n	801b904 <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801b8c4:	78fb      	ldrb	r3, [r7, #3]
 801b8c6:	2ba1      	cmp	r3, #161	@ 0xa1
 801b8c8:	d002      	beq.n	801b8d0 <phpalSli15693_Sw_InventoryExt+0x322>
 801b8ca:	78fb      	ldrb	r3, [r7, #3]
 801b8cc:	2bb1      	cmp	r3, #177	@ 0xb1
 801b8ce:	d10c      	bne.n	801b8ea <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b8d0:	78bb      	ldrb	r3, [r7, #2]
 801b8d2:	f003 0302 	and.w	r3, r3, #2
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d003      	beq.n	801b8e2 <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 801b8da:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801b8de:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b8e0:	e02f      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 801b8e2:	f240 2373 	movw	r3, #627	@ 0x273
 801b8e6:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b8e8:	e02b      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b8ea:	78bb      	ldrb	r3, [r7, #2]
 801b8ec:	f003 0302 	and.w	r3, r3, #2
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d003      	beq.n	801b8fc <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 801b8f4:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801b8f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 801b8fa:	e022      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 801b8fc:	f240 33a1 	movw	r3, #929	@ 0x3a1
 801b900:	867b      	strh	r3, [r7, #50]	@ 0x32
 801b902:	e01e      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801b904:	78fb      	ldrb	r3, [r7, #3]
 801b906:	2ba1      	cmp	r3, #161	@ 0xa1
 801b908:	d002      	beq.n	801b910 <phpalSli15693_Sw_InventoryExt+0x362>
 801b90a:	78fb      	ldrb	r3, [r7, #3]
 801b90c:	2bb1      	cmp	r3, #177	@ 0xb1
 801b90e:	d10c      	bne.n	801b92a <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b910:	78bb      	ldrb	r3, [r7, #2]
 801b912:	f003 0302 	and.w	r3, r3, #2
 801b916:	2b00      	cmp	r3, #0
 801b918:	d003      	beq.n	801b922 <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 801b91a:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 801b91e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b920:	e00f      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801b922:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801b926:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b928:	e00b      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801b92a:	78bb      	ldrb	r3, [r7, #2]
 801b92c:	f003 0302 	and.w	r3, r3, #2
 801b930:	2b00      	cmp	r3, #0
 801b932:	d003      	beq.n	801b93c <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 801b934:	f241 039c 	movw	r3, #4252	@ 0x109c
 801b938:	867b      	strh	r3, [r7, #50]	@ 0x32
 801b93a:	e002      	b.n	801b942 <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 801b93c:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 801b940:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801b942:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801b944:	461a      	mov	r2, r3
 801b946:	2102      	movs	r1, #2
 801b948:	6878      	ldr	r0, [r7, #4]
 801b94a:	f7ff fafd 	bl	801af48 <phpalSli15693_Sw_SetConfig>
 801b94e:	4603      	mov	r3, r0
 801b950:	853b      	strh	r3, [r7, #40]	@ 0x28
 801b952:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b954:	2b00      	cmp	r3, #0
 801b956:	d001      	beq.n	801b95c <phpalSli15693_Sw_InventoryExt+0x3ae>
 801b958:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b95a:	e19f      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 801b95c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b960:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	7ddb      	ldrb	r3, [r3, #23]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d016      	beq.n	801b99a <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 801b96c:	78bb      	ldrb	r3, [r7, #2]
 801b96e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b972:	2b00      	cmp	r3, #0
 801b974:	d001      	beq.n	801b97a <phpalSli15693_Sw_InventoryExt+0x3cc>
 801b976:	2328      	movs	r3, #40	@ 0x28
 801b978:	e000      	b.n	801b97c <phpalSli15693_Sw_InventoryExt+0x3ce>
 801b97a:	233c      	movs	r3, #60	@ 0x3c
 801b97c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 801b97e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b980:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 801b982:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801b986:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b988:	429a      	cmp	r2, r3
 801b98a:	d20c      	bcs.n	801b9a6 <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 801b98c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b990:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 801b992:	2301      	movs	r3, #1
 801b994:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801b998:	e005      	b.n	801b9a6 <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 801b99a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801b99e:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 801b9a0:	2301      	movs	r3, #1
 801b9a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	7a9b      	ldrb	r3, [r3, #10]
 801b9aa:	f003 0304 	and.w	r3, r3, #4
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d107      	bne.n	801b9c2 <phpalSli15693_Sw_InventoryExt+0x414>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	7a9b      	ldrb	r3, [r3, #10]
 801b9b6:	f003 0320 	and.w	r3, r3, #32
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d001      	beq.n	801b9c2 <phpalSli15693_Sw_InventoryExt+0x414>
 801b9be:	2301      	movs	r3, #1
 801b9c0:	e000      	b.n	801b9c4 <phpalSli15693_Sw_InventoryExt+0x416>
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d002      	beq.n	801b9ce <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	2201      	movs	r2, #1
 801b9cc:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 801b9d4:	78fb      	ldrb	r3, [r7, #3]
 801b9d6:	2b01      	cmp	r3, #1
 801b9d8:	d028      	beq.n	801ba2c <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 801b9da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b9dc:	3b01      	subs	r3, #1
 801b9de:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 801b9e0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d005      	beq.n	801b9f4 <phpalSli15693_Sw_InventoryExt+0x446>
 801b9e8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b9ec:	f003 0310 	and.w	r3, r3, #16
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d11b      	bne.n	801ba2c <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 801b9f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b9f6:	b2da      	uxtb	r2, r3
 801b9f8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801b9fc:	1c59      	adds	r1, r3, #1
 801b9fe:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801ba02:	4619      	mov	r1, r3
 801ba04:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801ba08:	4413      	add	r3, r2
 801ba0a:	b2da      	uxtb	r2, r3
 801ba0c:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801ba10:	443b      	add	r3, r7
 801ba12:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 801ba16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801ba1a:	1c5a      	adds	r2, r3, #1
 801ba1c:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 801ba20:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801ba22:	b2d2      	uxtb	r2, r2
 801ba24:	3338      	adds	r3, #56	@ 0x38
 801ba26:	443b      	add	r3, r7
 801ba28:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 801ba2c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801ba30:	b299      	uxth	r1, r3
 801ba32:	f107 0214 	add.w	r2, r7, #20
 801ba36:	f107 030e 	add.w	r3, r7, #14
 801ba3a:	9301      	str	r3, [sp, #4]
 801ba3c:	f107 0310 	add.w	r3, r7, #16
 801ba40:	9300      	str	r3, [sp, #0]
 801ba42:	460b      	mov	r3, r1
 801ba44:	2100      	movs	r1, #0
 801ba46:	6878      	ldr	r0, [r7, #4]
 801ba48:	f7ff f94c 	bl	801ace4 <phpalSli15693_Sw_Exchange>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 801ba50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ba52:	b2db      	uxtb	r3, r3
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d006      	beq.n	801ba66 <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	7a9b      	ldrb	r3, [r3, #10]
 801ba5c:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 801ba60:	b2da      	uxtb	r2, r3
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 801ba66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d001      	beq.n	801ba70 <phpalSli15693_Sw_InventoryExt+0x4c2>
 801ba6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ba6e:	e115      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 801ba70:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d011      	beq.n	801ba9c <phpalSli15693_Sw_InventoryExt+0x4ee>
 801ba78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801ba7c:	f003 0308 	and.w	r3, r3, #8
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d00b      	beq.n	801ba9c <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 801ba84:	693b      	ldr	r3, [r7, #16]
 801ba86:	881b      	ldrh	r3, [r3, #0]
 801ba88:	b29a      	uxth	r2, r3
 801ba8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba8c:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 801ba8e:	693b      	ldr	r3, [r7, #16]
 801ba90:	3302      	adds	r3, #2
 801ba92:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 801ba94:	89fb      	ldrh	r3, [r7, #14]
 801ba96:	3b02      	subs	r3, #2
 801ba98:	b29b      	uxth	r3, r3
 801ba9a:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 801ba9c:	78fb      	ldrb	r3, [r7, #3]
 801ba9e:	2b01      	cmp	r3, #1
 801baa0:	d123      	bne.n	801baea <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 801baa2:	89fb      	ldrh	r3, [r7, #14]
 801baa4:	2b09      	cmp	r3, #9
 801baa6:	d002      	beq.n	801baae <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801baa8:	f640 2306 	movw	r3, #2566	@ 0xa06
 801baac:	e0f6      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 801baae:	693b      	ldr	r3, [r7, #16]
 801bab0:	781a      	ldrb	r2, [r3, #0]
 801bab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bab4:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 801bab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bab8:	2201      	movs	r2, #1
 801baba:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	f103 000c 	add.w	r0, r3, #12
 801bac2:	693b      	ldr	r3, [r7, #16]
 801bac4:	3301      	adds	r3, #1
 801bac6:	2208      	movs	r2, #8
 801bac8:	4619      	mov	r1, r3
 801baca:	f006 fc76 	bl	80223ba <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	2240      	movs	r2, #64	@ 0x40
 801bad2:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	330c      	adds	r3, #12
 801bad8:	2208      	movs	r2, #8
 801bada:	4619      	mov	r1, r3
 801badc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801bade:	f006 fc6c 	bl	80223ba <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801bae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bae4:	2208      	movs	r2, #8
 801bae6:	701a      	strb	r2, [r3, #0]
 801bae8:	e099      	b.n	801bc1e <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 801baea:	78bb      	ldrb	r3, [r7, #2]
 801baec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	f000 8083 	beq.w	801bbfc <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801baf6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bafa:	f1c3 0308 	rsb	r3, r3, #8
 801bafe:	b2da      	uxtb	r2, r3
 801bb00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb02:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 801bb04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d018      	beq.n	801bb3e <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	7d1b      	ldrb	r3, [r3, #20]
 801bb10:	08db      	lsrs	r3, r3, #3
 801bb12:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 801bb16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bb1a:	f1c3 0308 	rsb	r3, r3, #8
 801bb1e:	b2da      	uxtb	r2, r3
 801bb20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb22:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 801bb24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d008      	beq.n	801bb3e <phpalSli15693_Sw_InventoryExt+0x590>
 801bb2c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801bb30:	f003 0302 	and.w	r3, r3, #2
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d002      	beq.n	801bb3e <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 801bb38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb3a:	2208      	movs	r2, #8
 801bb3c:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 801bb3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb40:	781b      	ldrb	r3, [r3, #0]
 801bb42:	461a      	mov	r2, r3
 801bb44:	89fb      	ldrh	r3, [r7, #14]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d902      	bls.n	801bb50 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801bb4a:	f640 2306 	movw	r3, #2566	@ 0xa06
 801bb4e:	e0a5      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 801bb50:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bb54:	2b07      	cmp	r3, #7
 801bb56:	d843      	bhi.n	801bbe0 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 801bb58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb5a:	781b      	ldrb	r3, [r3, #0]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d102      	bne.n	801bb66 <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 801bb60:	f640 2306 	movw	r3, #2566	@ 0xa06
 801bb64:	e09a      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 801bb66:	6939      	ldr	r1, [r7, #16]
 801bb68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb6a:	781b      	ldrb	r3, [r3, #0]
 801bb6c:	461a      	mov	r2, r3
 801bb6e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801bb70:	f006 fc23 	bl	80223ba <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 801bb74:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801bb78:	f003 0307 	and.w	r3, r3, #7
 801bb7c:	b2db      	uxtb	r3, r3
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d022      	beq.n	801bbc8 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 801bb82:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bb86:	2b06      	cmp	r3, #6
 801bb88:	d80e      	bhi.n	801bba8 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 801bb8a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bb8e:	3301      	adds	r3, #1
 801bb90:	3308      	adds	r3, #8
 801bb92:	687a      	ldr	r2, [r7, #4]
 801bb94:	4413      	add	r3, r2
 801bb96:	1d18      	adds	r0, r3, #4
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	1c59      	adds	r1, r3, #1
 801bb9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb9e:	781b      	ldrb	r3, [r3, #0]
 801bba0:	3b01      	subs	r3, #1
 801bba2:	461a      	mov	r2, r3
 801bba4:	f006 fc09 	bl	80223ba <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 801bba8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bbac:	687a      	ldr	r2, [r7, #4]
 801bbae:	4413      	add	r3, r2
 801bbb0:	7b19      	ldrb	r1, [r3, #12]
 801bbb2:	693b      	ldr	r3, [r7, #16]
 801bbb4:	781a      	ldrb	r2, [r3, #0]
 801bbb6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bbba:	430a      	orrs	r2, r1
 801bbbc:	b2d1      	uxtb	r1, r2
 801bbbe:	687a      	ldr	r2, [r7, #4]
 801bbc0:	4413      	add	r3, r2
 801bbc2:	460a      	mov	r2, r1
 801bbc4:	731a      	strb	r2, [r3, #12]
 801bbc6:	e00b      	b.n	801bbe0 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 801bbc8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801bbcc:	3308      	adds	r3, #8
 801bbce:	687a      	ldr	r2, [r7, #4]
 801bbd0:	4413      	add	r3, r2
 801bbd2:	1d18      	adds	r0, r3, #4
 801bbd4:	6939      	ldr	r1, [r7, #16]
 801bbd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bbd8:	781b      	ldrb	r3, [r3, #0]
 801bbda:	461a      	mov	r2, r3
 801bbdc:	f006 fbed 	bl	80223ba <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	2240      	movs	r2, #64	@ 0x40
 801bbe4:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 801bbe6:	693b      	ldr	r3, [r7, #16]
 801bbe8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801bbea:	7812      	ldrb	r2, [r2, #0]
 801bbec:	4413      	add	r3, r2
 801bbee:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 801bbf0:	89fb      	ldrh	r3, [r7, #14]
 801bbf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801bbf4:	7812      	ldrb	r2, [r2, #0]
 801bbf6:	1a9b      	subs	r3, r3, r2
 801bbf8:	b29b      	uxth	r3, r3
 801bbfa:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 801bbfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bbfe:	881b      	ldrh	r3, [r3, #0]
 801bc00:	461a      	mov	r2, r3
 801bc02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc04:	4413      	add	r3, r2
 801bc06:	6939      	ldr	r1, [r7, #16]
 801bc08:	89fa      	ldrh	r2, [r7, #14]
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	f006 fbd5 	bl	80223ba <memcpy>
            *pDataLength += wRespLength;
 801bc10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bc12:	881a      	ldrh	r2, [r3, #0]
 801bc14:	89fb      	ldrh	r3, [r7, #14]
 801bc16:	4413      	add	r3, r2
 801bc18:	b29a      	uxth	r2, r3
 801bc1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bc1c:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 801bc1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bc20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bc22:	4413      	add	r3, r2
 801bc24:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 801bc26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bc28:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 801bc2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bc2e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 801bc32:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801bc36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bc38:	1ad2      	subs	r2, r2, r3
 801bc3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bc3c:	429a      	cmp	r2, r3
 801bc3e:	da04      	bge.n	801bc4a <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 801bc40:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801bc44:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bc46:	1ad3      	subs	r3, r2, r3
 801bc48:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 801bc4a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801bc52:	8812      	ldrh	r2, [r2, #0]
 801bc54:	4293      	cmp	r3, r2
 801bc56:	d102      	bne.n	801bc5e <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 801bc58:	2301      	movs	r3, #1
 801bc5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 801bc5e:	2300      	movs	r3, #0
 801bc60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 801bc64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	f43f aeb3 	beq.w	801b9d4 <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	7a9b      	ldrb	r3, [r3, #10]
 801bc72:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 801bc76:	b2da      	uxtb	r2, r3
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2200      	movs	r2, #0
 801bc80:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 801bc82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d001      	beq.n	801bc8c <phpalSli15693_Sw_InventoryExt+0x6de>
 801bc88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bc8a:	e007      	b.n	801bc9c <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	7a9b      	ldrb	r3, [r3, #10]
 801bc90:	f043 0320 	orr.w	r3, r3, #32
 801bc94:	b2da      	uxtb	r2, r3
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 801bc9a:	2300      	movs	r3, #0
}
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	3738      	adds	r7, #56	@ 0x38
 801bca0:	46bd      	mov	sp, r7
 801bca2:	bd80      	pop	{r7, pc}

0801bca4 <phDriver_PinConfig>:
 * PORT/GPIO PIN API's
 *******************************************************************************/

/* GPIO FUNC_1:配置GPIO引脚的功能和属性 */
phStatus_t phDriver_PinConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc, phDriver_Pin_Config_t *pPinConfig)
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b08a      	sub	sp, #40	@ 0x28
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	60f8      	str	r0, [r7, #12]
 801bcac:	607b      	str	r3, [r7, #4]
 801bcae:	460b      	mov	r3, r1
 801bcb0:	817b      	strh	r3, [r7, #10]
 801bcb2:	4613      	mov	r3, r2
 801bcb4:	727b      	strb	r3, [r7, #9]
	uint32_t mode;

	// 空指针保护
	if (pPinConfig == NULL)
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d101      	bne.n	801bcc0 <phDriver_PinConfig+0x1c>
	    return PH_DRIVER_ERROR;
 801bcbc:	2380      	movs	r3, #128	@ 0x80
 801bcbe:	e039      	b.n	801bd34 <phDriver_PinConfig+0x90>

	if(GPIO_Pin == PN5180_IRQ_Pin)
 801bcc0:	897b      	ldrh	r3, [r7, #10]
 801bcc2:	2b10      	cmp	r3, #16
 801bcc4:	d135      	bne.n	801bd32 <phDriver_PinConfig+0x8e>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bcc6:	f107 0310 	add.w	r3, r7, #16
 801bcca:	2200      	movs	r2, #0
 801bccc:	601a      	str	r2, [r3, #0]
 801bcce:	605a      	str	r2, [r3, #4]
 801bcd0:	609a      	str	r2, [r3, #8]
 801bcd2:	60da      	str	r2, [r3, #12]
 801bcd4:	611a      	str	r2, [r3, #16]

		HAL_GPIO_DeInit(PN5180_IRQ_GPIO_Port, PN5180_IRQ_Pin);
 801bcd6:	2110      	movs	r1, #16
 801bcd8:	4818      	ldr	r0, [pc, #96]	@ (801bd3c <phDriver_PinConfig+0x98>)
 801bcda:	f000 fe91 	bl	801ca00 <HAL_GPIO_DeInit>

		mode = (pPinConfig->bPullSelect == PH_DRIVER_PULL_DOWN)?GPIO_PULLDOWN:GPIO_PULLUP;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	781b      	ldrb	r3, [r3, #0]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d101      	bne.n	801bcea <phDriver_PinConfig+0x46>
 801bce6:	2302      	movs	r3, #2
 801bce8:	e000      	b.n	801bcec <phDriver_PinConfig+0x48>
 801bcea:	2301      	movs	r3, #1
 801bcec:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Pull = mode;
 801bcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcf0:	61bb      	str	r3, [r7, #24]

		switch(pPinConfig->eInterruptConfig)
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	789b      	ldrb	r3, [r3, #2]
 801bcf6:	2b05      	cmp	r3, #5
 801bcf8:	d00e      	beq.n	801bd18 <phDriver_PinConfig+0x74>
 801bcfa:	2b05      	cmp	r3, #5
 801bcfc:	dc10      	bgt.n	801bd20 <phDriver_PinConfig+0x7c>
 801bcfe:	2b03      	cmp	r3, #3
 801bd00:	d002      	beq.n	801bd08 <phDriver_PinConfig+0x64>
 801bd02:	2b04      	cmp	r3, #4
 801bd04:	d004      	beq.n	801bd10 <phDriver_PinConfig+0x6c>
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
			    break;

			default:
				/* Do Nothing. */
				break;
 801bd06:	e00b      	b.n	801bd20 <phDriver_PinConfig+0x7c>
				GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801bd08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 801bd0c:	617b      	str	r3, [r7, #20]
				break;
 801bd0e:	e008      	b.n	801bd22 <phDriver_PinConfig+0x7e>
				GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801bd10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 801bd14:	617b      	str	r3, [r7, #20]
				break;
 801bd16:	e004      	b.n	801bd22 <phDriver_PinConfig+0x7e>
			    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801bd18:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 801bd1c:	617b      	str	r3, [r7, #20]
			    break;
 801bd1e:	e000      	b.n	801bd22 <phDriver_PinConfig+0x7e>
				break;
 801bd20:	bf00      	nop
	    }
		GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 801bd22:	2310      	movs	r3, #16
 801bd24:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 801bd26:	f107 0310 	add.w	r3, r7, #16
 801bd2a:	4619      	mov	r1, r3
 801bd2c:	4803      	ldr	r0, [pc, #12]	@ (801bd3c <phDriver_PinConfig+0x98>)
 801bd2e:	f000 fced 	bl	801c70c <HAL_GPIO_Init>
	}

    /* 其他GPIO已经在GPIO_INIT实现 */
    return PH_DRIVER_SUCCESS;
 801bd32:	2300      	movs	r3, #0
}
 801bd34:	4618      	mov	r0, r3
 801bd36:	3728      	adds	r7, #40	@ 0x28
 801bd38:	46bd      	mov	sp, r7
 801bd3a:	bd80      	pop	{r7, pc}
 801bd3c:	48000400 	.word	0x48000400

0801bd40 <phDriver_PinRead>:

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 801bd40:	b580      	push	{r7, lr}
 801bd42:	b082      	sub	sp, #8
 801bd44:	af00      	add	r7, sp, #0
 801bd46:	6078      	str	r0, [r7, #4]
 801bd48:	460b      	mov	r3, r1
 801bd4a:	807b      	strh	r3, [r7, #2]
 801bd4c:	4613      	mov	r3, r2
 801bd4e:	707b      	strb	r3, [r7, #1]
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 801bd50:	887b      	ldrh	r3, [r7, #2]
 801bd52:	4619      	mov	r1, r3
 801bd54:	6878      	ldr	r0, [r7, #4]
 801bd56:	f000 ff2d 	bl	801cbb4 <HAL_GPIO_ReadPin>
 801bd5a:	4603      	mov	r3, r0
}
 801bd5c:	4618      	mov	r0, r3
 801bd5e:	3708      	adds	r7, #8
 801bd60:	46bd      	mov	sp, r7
 801bd62:	bd80      	pop	{r7, pc}

0801bd64 <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b082      	sub	sp, #8
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
 801bd6c:	460b      	mov	r3, r1
 801bd6e:	807b      	strh	r3, [r7, #2]
 801bd70:	4613      	mov	r3, r2
 801bd72:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 801bd74:	787a      	ldrb	r2, [r7, #1]
 801bd76:	887b      	ldrh	r3, [r7, #2]
 801bd78:	4619      	mov	r1, r3
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	f000 ff32 	bl	801cbe4 <HAL_GPIO_WritePin>
}
 801bd80:	bf00      	nop
 801bd82:	3708      	adds	r7, #8
 801bd84:	46bd      	mov	sp, r7
 801bd86:	bd80      	pop	{r7, pc}

0801bd88 <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b084      	sub	sp, #16
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	60f8      	str	r0, [r7, #12]
 801bd90:	60b9      	str	r1, [r7, #8]
 801bd92:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d11d      	bne.n	801bdd6 <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	2b01      	cmp	r3, #1
 801bd9e:	d108      	bne.n	801bdb2 <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801bda6:	fb02 f303 	mul.w	r3, r2, r3
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f000 fafa 	bl	801c3a4 <HAL_Delay>
 801bdb0:	e029      	b.n	801be06 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bdb8:	d103      	bne.n	801bdc2 <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 801bdba:	68b8      	ldr	r0, [r7, #8]
 801bdbc:	f000 faf2 	bl	801c3a4 <HAL_Delay>
 801bdc0:	e021      	b.n	801be06 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	4a12      	ldr	r2, [pc, #72]	@ (801be10 <phDriver_TimerStart+0x88>)
 801bdc6:	4293      	cmp	r3, r2
 801bdc8:	d11d      	bne.n	801be06 <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 801bdca:	68bb      	ldr	r3, [r7, #8]
 801bdcc:	b29b      	uxth	r3, r3
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7e6 fe4e 	bl	8002a70 <delay_us>
 801bdd4:	e017      	b.n	801be06 <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 801bdd6:	4a0f      	ldr	r2, [pc, #60]	@ (801be14 <phDriver_TimerStart+0x8c>)
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 801bddc:	4b0e      	ldr	r3, [pc, #56]	@ (801be18 <phDriver_TimerStart+0x90>)
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	68ba      	ldr	r2, [r7, #8]
 801bde2:	3a01      	subs	r2, #1
 801bde4:	62da      	str	r2, [r3, #44]	@ 0x2c
 801bde6:	68bb      	ldr	r3, [r7, #8]
 801bde8:	3b01      	subs	r3, #1
 801bdea:	4a0b      	ldr	r2, [pc, #44]	@ (801be18 <phDriver_TimerStart+0x90>)
 801bdec:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 801bdee:	4b0a      	ldr	r3, [pc, #40]	@ (801be18 <phDriver_TimerStart+0x90>)
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	2200      	movs	r2, #0
 801bdf4:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 801bdf6:	4b08      	ldr	r3, [pc, #32]	@ (801be18 <phDriver_TimerStart+0x90>)
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	f06f 0201 	mvn.w	r2, #1
 801bdfe:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 801be00:	4805      	ldr	r0, [pc, #20]	@ (801be18 <phDriver_TimerStart+0x90>)
 801be02:	f002 fdc3 	bl	801e98c <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 801be06:	2300      	movs	r3, #0
}
 801be08:	4618      	mov	r0, r3
 801be0a:	3710      	adds	r7, #16
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd80      	pop	{r7, pc}
 801be10:	000f4240 	.word	0x000f4240
 801be14:	20001be4 	.word	0x20001be4
 801be18:	20000310 	.word	0x20000310

0801be1c <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 801be1c:	b480      	push	{r7}
 801be1e:	af00      	add	r7, sp, #0

    /* 清除回调函数和标志 */
    pTimerIsrCallBack = NULL;
    dwTimerExp = 0;
#endif
    return PH_DRIVER_SUCCESS;
 801be20:	2300      	movs	r3, #0
}
 801be22:	4618      	mov	r0, r3
 801be24:	46bd      	mov	sp, r7
 801be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be2a:	4770      	bx	lr

0801be2c <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 801be2c:	b480      	push	{r7}
 801be2e:	b085      	sub	sp, #20
 801be30:	af00      	add	r7, sp, #0
 801be32:	6078      	str	r0, [r7, #4]
 801be34:	460b      	mov	r3, r1
 801be36:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d002      	beq.n	801be44 <phbalReg_Init+0x18>
 801be3e:	887b      	ldrh	r3, [r7, #2]
 801be40:	2b04      	cmp	r3, #4
 801be42:	d002      	beq.n	801be4a <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 801be44:	f24f 1380 	movw	r3, #61824	@ 0xf180
 801be48:	e007      	b.n	801be5a <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 801be50:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	2201      	movs	r2, #1
 801be56:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 801be58:	2300      	movs	r3, #0
}
 801be5a:	4618      	mov	r0, r3
 801be5c:	3714      	adds	r7, #20
 801be5e:	46bd      	mov	sp, r7
 801be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be64:	4770      	bx	lr
	...

0801be68 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 801be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be6c:	b095      	sub	sp, #84	@ 0x54
 801be6e:	af02      	add	r7, sp, #8
 801be70:	6178      	str	r0, [r7, #20]
 801be72:	60fa      	str	r2, [r7, #12]
 801be74:	461a      	mov	r2, r3
 801be76:	460b      	mov	r3, r1
 801be78:	827b      	strh	r3, [r7, #18]
 801be7a:	4613      	mov	r3, r2
 801be7c:	823b      	strh	r3, [r7, #16]
 801be7e:	466b      	mov	r3, sp
 801be80:	461e      	mov	r6, r3
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
	}

	return PH_DRIVER_SUCCESS;
#endif
	uint8_t *pRxBuf = NULL;
 801be82:	2300      	movs	r3, #0
 801be84:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t dummyTxByte = 0xFF;
 801be86:	23ff      	movs	r3, #255	@ 0xff
 801be88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// 只发送不接收
	if (pRxBuffer == NULL)
 801be8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d102      	bne.n	801be98 <phbalReg_Exchange+0x30>
	{
		pRxBuf = NULL;
 801be92:	2300      	movs	r3, #0
 801be94:	647b      	str	r3, [r7, #68]	@ 0x44
 801be96:	e001      	b.n	801be9c <phbalReg_Exchange+0x34>
	}
	else // 接收
	{
		pRxBuf = pRxBuffer;
 801be98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801be9a:	647b      	str	r3, [r7, #68]	@ 0x44
	}

//	printf("SPITX>> ");
	for (int i = 0; i < wTxLength; i++)
 801be9c:	2300      	movs	r3, #0
 801be9e:	643b      	str	r3, [r7, #64]	@ 0x40
 801bea0:	e00d      	b.n	801bebe <phbalReg_Exchange+0x56>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d004      	beq.n	801beb2 <phbalReg_Exchange+0x4a>
 801bea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801beaa:	68fa      	ldr	r2, [r7, #12]
 801beac:	4413      	add	r3, r2
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	e001      	b.n	801beb6 <phbalReg_Exchange+0x4e>
 801beb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801beb6:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < wTxLength; i++)
 801beb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801beba:	3301      	adds	r3, #1
 801bebc:	643b      	str	r3, [r7, #64]	@ 0x40
 801bebe:	8a3b      	ldrh	r3, [r7, #16]
 801bec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bec2:	429a      	cmp	r2, r3
 801bec4:	dbed      	blt.n	801bea2 <phbalReg_Exchange+0x3a>
//		printf("%02X ", txByte); // 打印发送内容
	}
//	printf("\n");

	// 定义临时 buffer
	uint8_t txBuf[wTxLength];
 801bec6:	8a39      	ldrh	r1, [r7, #16]
 801bec8:	460b      	mov	r3, r1
 801beca:	3b01      	subs	r3, #1
 801becc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bece:	b28b      	uxth	r3, r1
 801bed0:	2200      	movs	r2, #0
 801bed2:	603b      	str	r3, [r7, #0]
 801bed4:	607a      	str	r2, [r7, #4]
 801bed6:	f04f 0200 	mov.w	r2, #0
 801beda:	f04f 0300 	mov.w	r3, #0
 801bede:	6878      	ldr	r0, [r7, #4]
 801bee0:	00c3      	lsls	r3, r0, #3
 801bee2:	6838      	ldr	r0, [r7, #0]
 801bee4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801bee8:	6838      	ldr	r0, [r7, #0]
 801beea:	00c2      	lsls	r2, r0, #3
 801beec:	b28b      	uxth	r3, r1
 801beee:	2200      	movs	r2, #0
 801bef0:	469a      	mov	sl, r3
 801bef2:	4693      	mov	fp, r2
 801bef4:	f04f 0200 	mov.w	r2, #0
 801bef8:	f04f 0300 	mov.w	r3, #0
 801befc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801bf00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801bf04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801bf08:	460b      	mov	r3, r1
 801bf0a:	3307      	adds	r3, #7
 801bf0c:	08db      	lsrs	r3, r3, #3
 801bf0e:	00db      	lsls	r3, r3, #3
 801bf10:	ebad 0d03 	sub.w	sp, sp, r3
 801bf14:	ab02      	add	r3, sp, #8
 801bf16:	3300      	adds	r3, #0
 801bf18:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rxBuf[wTxLength];
 801bf1a:	8a39      	ldrh	r1, [r7, #16]
 801bf1c:	460b      	mov	r3, r1
 801bf1e:	3b01      	subs	r3, #1
 801bf20:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf22:	b28b      	uxth	r3, r1
 801bf24:	2200      	movs	r2, #0
 801bf26:	4698      	mov	r8, r3
 801bf28:	4691      	mov	r9, r2
 801bf2a:	f04f 0200 	mov.w	r2, #0
 801bf2e:	f04f 0300 	mov.w	r3, #0
 801bf32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801bf36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801bf3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801bf3e:	b28b      	uxth	r3, r1
 801bf40:	2200      	movs	r2, #0
 801bf42:	461c      	mov	r4, r3
 801bf44:	4615      	mov	r5, r2
 801bf46:	f04f 0200 	mov.w	r2, #0
 801bf4a:	f04f 0300 	mov.w	r3, #0
 801bf4e:	00eb      	lsls	r3, r5, #3
 801bf50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801bf54:	00e2      	lsls	r2, r4, #3
 801bf56:	460b      	mov	r3, r1
 801bf58:	3307      	adds	r3, #7
 801bf5a:	08db      	lsrs	r3, r3, #3
 801bf5c:	00db      	lsls	r3, r3, #3
 801bf5e:	ebad 0d03 	sub.w	sp, sp, r3
 801bf62:	ab02      	add	r3, sp, #8
 801bf64:	3300      	adds	r3, #0
 801bf66:	623b      	str	r3, [r7, #32]

	// 填充 txBuf
	for (int i = 0; i < wTxLength; i++)
 801bf68:	2300      	movs	r3, #0
 801bf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bf6c:	e010      	b.n	801bf90 <phbalReg_Exchange+0x128>
	{
		txBuf[i] = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;
 801bf6e:	68fb      	ldr	r3, [r7, #12]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d004      	beq.n	801bf7e <phbalReg_Exchange+0x116>
 801bf74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf76:	68fa      	ldr	r2, [r7, #12]
 801bf78:	4413      	add	r3, r2
 801bf7a:	781b      	ldrb	r3, [r3, #0]
 801bf7c:	e001      	b.n	801bf82 <phbalReg_Exchange+0x11a>
 801bf7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801bf82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bf84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bf86:	440a      	add	r2, r1
 801bf88:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < wTxLength; i++)
 801bf8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf8c:	3301      	adds	r3, #1
 801bf8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bf90:	8a3b      	ldrh	r3, [r7, #16]
 801bf92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bf94:	429a      	cmp	r2, r3
 801bf96:	dbea      	blt.n	801bf6e <phbalReg_Exchange+0x106>
	}

	// 一次性全双工发送接收
	if (HAL_SPI_TransmitReceive(&hspi3, txBuf, rxBuf, wTxLength, 1000) != HAL_OK)
 801bf98:	8a3b      	ldrh	r3, [r7, #16]
 801bf9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801bf9e:	9200      	str	r2, [sp, #0]
 801bfa0:	6a3a      	ldr	r2, [r7, #32]
 801bfa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bfa4:	4823      	ldr	r0, [pc, #140]	@ (801c034 <phbalReg_Exchange+0x1cc>)
 801bfa6:	f002 f8a2 	bl	801e0ee <HAL_SPI_TransmitReceive>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d002      	beq.n	801bfb6 <phbalReg_Exchange+0x14e>
	{
		return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 801bfb0:	f24f 1381 	movw	r3, #61825	@ 0xf181
 801bfb4:	e037      	b.n	801c026 <phbalReg_Exchange+0x1be>
	}

	// 拷贝接收到的内容到 pRxBuf
	if (pRxBuf != NULL)
 801bfb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d016      	beq.n	801bfea <phbalReg_Exchange+0x182>
	{
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bfc0:	e00a      	b.n	801bfd8 <phbalReg_Exchange+0x170>
		{
			pRxBuf[i] = rxBuf[i];
 801bfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bfc6:	4413      	add	r3, r2
 801bfc8:	6a39      	ldr	r1, [r7, #32]
 801bfca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bfcc:	440a      	add	r2, r1
 801bfce:	7812      	ldrb	r2, [r2, #0]
 801bfd0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801bfd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfd4:	3301      	adds	r3, #1
 801bfd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bfd8:	8a3b      	ldrh	r3, [r7, #16]
 801bfda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	da04      	bge.n	801bfea <phbalReg_Exchange+0x182>
 801bfe0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 801bfe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bfe6:	429a      	cmp	r2, r3
 801bfe8:	dbeb      	blt.n	801bfc2 <phbalReg_Exchange+0x15a>
		}
	}

	// 打印接收内容
	if (pRxBuf != NULL)
 801bfea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d00e      	beq.n	801c00e <phbalReg_Exchange+0x1a6>
	{
//		printf("SPIRX<< ");
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 801bff0:	2300      	movs	r3, #0
 801bff2:	637b      	str	r3, [r7, #52]	@ 0x34
 801bff4:	e002      	b.n	801bffc <phbalReg_Exchange+0x194>
 801bff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bff8:	3301      	adds	r3, #1
 801bffa:	637b      	str	r3, [r7, #52]	@ 0x34
 801bffc:	8a3b      	ldrh	r3, [r7, #16]
 801bffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c000:	429a      	cmp	r2, r3
 801c002:	da04      	bge.n	801c00e <phbalReg_Exchange+0x1a6>
 801c004:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 801c008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c00a:	429a      	cmp	r2, r3
 801c00c:	dbf3      	blt.n	801bff6 <phbalReg_Exchange+0x18e>
		}
//		printf("\n");
	}

	// 返回接收长度
	if (pRxLength != NULL)
 801c00e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c010:	2b00      	cmp	r3, #0
 801c012:	d007      	beq.n	801c024 <phbalReg_Exchange+0x1bc>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 801c014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c016:	2b00      	cmp	r3, #0
 801c018:	d001      	beq.n	801c01e <phbalReg_Exchange+0x1b6>
 801c01a:	8a3a      	ldrh	r2, [r7, #16]
 801c01c:	e000      	b.n	801c020 <phbalReg_Exchange+0x1b8>
 801c01e:	2200      	movs	r2, #0
 801c020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c022:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 801c024:	2300      	movs	r3, #0
 801c026:	46b5      	mov	sp, r6
}
 801c028:	4618      	mov	r0, r3
 801c02a:	374c      	adds	r7, #76	@ 0x4c
 801c02c:	46bd      	mov	sp, r7
 801c02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c032:	bf00      	nop
 801c034:	2000025c 	.word	0x2000025c

0801c038 <phOsal_EventCreate>:
//1    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
    return HAL_InitTick(1);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b084      	sub	sp, #16
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 801c042:	2300      	movs	r3, #0
 801c044:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d002      	beq.n	801c052 <phOsal_EventCreate+0x1a>
 801c04c:	683b      	ldr	r3, [r7, #0]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d102      	bne.n	801c058 <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801c052:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801c056:	e033      	b.n	801c0c0 <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 801c058:	4b1b      	ldr	r3, [pc, #108]	@ (801c0c8 <phOsal_EventCreate+0x90>)
 801c05a:	6819      	ldr	r1, [r3, #0]
 801c05c:	f107 030c 	add.w	r3, r7, #12
 801c060:	2205      	movs	r2, #5
 801c062:	4618      	mov	r0, r3
 801c064:	f000 f8e2 	bl	801c22c <phOsal_NullOs_GetFreeIndex>
 801c068:	4603      	mov	r3, r0
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d009      	beq.n	801c082 <phOsal_EventCreate+0x4a>
 801c06e:	4b16      	ldr	r3, [pc, #88]	@ (801c0c8 <phOsal_EventCreate+0x90>)
 801c070:	6819      	ldr	r1, [r3, #0]
 801c072:	f107 030c 	add.w	r3, r7, #12
 801c076:	2205      	movs	r2, #5
 801c078:	4618      	mov	r0, r3
 801c07a:	f000 f8d7 	bl	801c22c <phOsal_NullOs_GetFreeIndex>
 801c07e:	4603      	mov	r3, r0
 801c080:	e01e      	b.n	801c0c0 <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	4a11      	ldr	r2, [pc, #68]	@ (801c0cc <phOsal_EventCreate+0x94>)
 801c086:	2100      	movs	r1, #0
 801c088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	2201      	movs	r2, #1
 801c090:	fa02 f303 	lsl.w	r3, r2, r3
 801c094:	461a      	mov	r2, r3
 801c096:	4b0c      	ldr	r3, [pc, #48]	@ (801c0c8 <phOsal_EventCreate+0x90>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	4313      	orrs	r3, r2
 801c09c:	4a0a      	ldr	r2, [pc, #40]	@ (801c0c8 <phOsal_EventCreate+0x90>)
 801c09e:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	009b      	lsls	r3, r3, #2
 801c0a4:	4a09      	ldr	r2, [pc, #36]	@ (801c0cc <phOsal_EventCreate+0x94>)
 801c0a6:	441a      	add	r2, r3
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	009b      	lsls	r3, r3, #2
 801c0b0:	4a06      	ldr	r2, [pc, #24]	@ (801c0cc <phOsal_EventCreate+0x94>)
 801c0b2:	441a      	add	r2, r3
 801c0b4:	683b      	ldr	r3, [r7, #0]
 801c0b6:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 801c0b8:	68fa      	ldr	r2, [r7, #12]
 801c0ba:	683b      	ldr	r3, [r7, #0]
 801c0bc:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 801c0be:	2300      	movs	r3, #0
}
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	3710      	adds	r7, #16
 801c0c4:	46bd      	mov	sp, r7
 801c0c6:	bd80      	pop	{r7, pc}
 801c0c8:	20001c00 	.word	0x20001c00
 801c0cc:	20001bec 	.word	0x20001bec

0801c0d0 <phOsal_EventPend>:

// 事件挂起函数：等待特定事件标志位被设置，类似于RTOS中的事件等待机制
phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 801c0d0:	b480      	push	{r7}
 801c0d2:	b087      	sub	sp, #28
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	60f8      	str	r0, [r7, #12]
 801c0d8:	607a      	str	r2, [r7, #4]
 801c0da:	603b      	str	r3, [r7, #0]
 801c0dc:	460b      	mov	r3, r1
 801c0de:	72fb      	strb	r3, [r7, #11]
	phStatus_t status;

	/* 检查事件句柄是否有效 */
	if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d003      	beq.n	801c0ee <phOsal_EventPend+0x1e>
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d102      	bne.n	801c0f4 <phOsal_EventPend+0x24>
	{
	    return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801c0ee:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801c0f2:	e02e      	b.n	801c152 <phOsal_EventPend+0x82>
	}

	status = PH_OSAL_IO_TIMEOUT; // 默认设置为超时状态
 801c0f4:	2301      	movs	r3, #1
 801c0f6:	82fb      	strh	r3, [r7, #22]
	    /* Wait for interrupts/events to occur */
	    phOsal_Sleep();
	}
#endif
	//dd1    phOsal_StopTickTimer();
	gbWaitTimedOut = 0;		// 清除超时标志
 801c0f8:	4b19      	ldr	r3, [pc, #100]	@ (801c160 <phOsal_EventPend+0x90>)
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	701a      	strb	r2, [r3, #0]

	//dd1    phOsal_EnterCriticalSection();

	/* 返回当前标志位 */
	if (pCurrFlags != NULL)
 801c0fe:	6a3b      	ldr	r3, [r7, #32]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d004      	beq.n	801c10e <phOsal_EventPend+0x3e>
	{
	    *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	6a3b      	ldr	r3, [r7, #32]
 801c10c:	601a      	str	r2, [r3, #0]
	}

	/* 清除指定标志位 */
	if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 801c10e:	7afb      	ldrb	r3, [r7, #11]
 801c110:	f003 0304 	and.w	r3, r3, #4
 801c114:	2b00      	cmp	r3, #0
 801c116:	d00a      	beq.n	801c12e <phOsal_EventPend+0x5e>
	{
	    (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	683b      	ldr	r3, [r7, #0]
 801c120:	4013      	ands	r3, r2
 801c122:	43d9      	mvns	r1, r3
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	681a      	ldr	r2, [r3, #0]
 801c12a:	400a      	ands	r2, r1
 801c12c:	601a      	str	r2, [r3, #0]
	}
	//dd1    phOsal_ExitCriticalSection();

	return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 801c12e:	8afb      	ldrh	r3, [r7, #22]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d00d      	beq.n	801c150 <phOsal_EventPend+0x80>
 801c134:	8afb      	ldrh	r3, [r7, #22]
 801c136:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d108      	bne.n	801c150 <phOsal_EventPend+0x80>
 801c13e:	8afb      	ldrh	r3, [r7, #22]
 801c140:	b2db      	uxtb	r3, r3
 801c142:	b29b      	uxth	r3, r3
 801c144:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c148:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c14c:	b29b      	uxth	r3, r3
 801c14e:	e000      	b.n	801c152 <phOsal_EventPend+0x82>
 801c150:	8afb      	ldrh	r3, [r7, #22]
}
 801c152:	4618      	mov	r0, r3
 801c154:	371c      	adds	r7, #28
 801c156:	46bd      	mov	sp, r7
 801c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15c:	4770      	bx	lr
 801c15e:	bf00      	nop
 801c160:	20001be8 	.word	0x20001be8

0801c164 <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b084      	sub	sp, #16
 801c168:	af00      	add	r7, sp, #0
 801c16a:	60f8      	str	r0, [r7, #12]
 801c16c:	607a      	str	r2, [r7, #4]
 801c16e:	603b      	str	r3, [r7, #0]
 801c170:	460b      	mov	r3, r1
 801c172:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08lX\r\n", FlagsToPost);  // 添加这行
 801c174:	6879      	ldr	r1, [r7, #4]
 801c176:	4815      	ldr	r0, [pc, #84]	@ (801c1cc <phOsal_EventPost+0x68>)
 801c178:	f005 ff40 	bl	8021ffc <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d003      	beq.n	801c18a <phOsal_EventPost+0x26>
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d105      	bne.n	801c196 <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 801c18a:	4811      	ldr	r0, [pc, #68]	@ (801c1d0 <phOsal_EventPost+0x6c>)
 801c18c:	f005 ffa6 	bl	80220dc <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801c190:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801c194:	e016      	b.n	801c1c4 <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801c196:	f000 f879 	bl	801c28c <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	6819      	ldr	r1, [r3, #0]
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	687a      	ldr	r2, [r7, #4]
 801c1a6:	430a      	orrs	r2, r1
 801c1a8:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 801c1aa:	683b      	ldr	r3, [r7, #0]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d004      	beq.n	801c1ba <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	681a      	ldr	r2, [r3, #0]
 801c1b6:	683b      	ldr	r3, [r7, #0]
 801c1b8:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 801c1ba:	f000 f86f 	bl	801c29c <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 801c1be:	f000 f875 	bl	801c2ac <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 801c1c2:	2300      	movs	r3, #0

}
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	3710      	adds	r7, #16
 801c1c8:	46bd      	mov	sp, r7
 801c1ca:	bd80      	pop	{r7, pc}
 801c1cc:	08026404 	.word	0x08026404
 801c1d0:	08026414 	.word	0x08026414

0801c1d4 <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b084      	sub	sp, #16
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	60f8      	str	r0, [r7, #12]
 801c1dc:	607a      	str	r2, [r7, #4]
 801c1de:	603b      	str	r3, [r7, #0]
 801c1e0:	460b      	mov	r3, r1
 801c1e2:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d003      	beq.n	801c1f2 <phOsal_EventClear+0x1e>
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d102      	bne.n	801c1f8 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801c1f2:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801c1f6:	e015      	b.n	801c224 <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801c1f8:	f000 f848 	bl	801c28c <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 801c1fc:	683b      	ldr	r3, [r7, #0]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d004      	beq.n	801c20c <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	681a      	ldr	r2, [r3, #0]
 801c208:	683b      	ldr	r3, [r7, #0]
 801c20a:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	6819      	ldr	r1, [r3, #0]
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	43da      	mvns	r2, r3
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	400a      	ands	r2, r1
 801c21c:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 801c21e:	f000 f83d 	bl	801c29c <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 801c222:	2300      	movs	r3, #0
}
 801c224:	4618      	mov	r0, r3
 801c226:	3710      	adds	r7, #16
 801c228:	46bd      	mov	sp, r7
 801c22a:	bd80      	pop	{r7, pc}

0801c22c <phOsal_NullOs_GetFreeIndex>:
{
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
}

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 801c22c:	b480      	push	{r7}
 801c22e:	b087      	sub	sp, #28
 801c230:	af00      	add	r7, sp, #0
 801c232:	60f8      	str	r0, [r7, #12]
 801c234:	60b9      	str	r1, [r7, #8]
 801c236:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	2200      	movs	r2, #0
 801c23c:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801c23e:	e004      	b.n	801c24a <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	1c5a      	adds	r2, r3, #1
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	2201      	movs	r2, #1
 801c250:	fa02 f303 	lsl.w	r3, r2, r3
 801c254:	461a      	mov	r2, r3
 801c256:	68bb      	ldr	r3, [r7, #8]
 801c258:	4013      	ands	r3, r2
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d004      	beq.n	801c268 <phOsal_NullOs_GetFreeIndex+0x3c>
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	429a      	cmp	r2, r3
 801c266:	d8eb      	bhi.n	801c240 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	687a      	ldr	r2, [r7, #4]
 801c26e:	429a      	cmp	r2, r3
 801c270:	d103      	bne.n	801c27a <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 801c272:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801c276:	82fb      	strh	r3, [r7, #22]
 801c278:	e001      	b.n	801c27e <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 801c27a:	2300      	movs	r3, #0
 801c27c:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 801c27e:	8afb      	ldrh	r3, [r7, #22]
}
 801c280:	4618      	mov	r0, r3
 801c282:	371c      	adds	r7, #28
 801c284:	46bd      	mov	sp, r7
 801c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28a:	4770      	bx	lr

0801c28c <phOsal_EnterCriticalSection>:

    return PH_OSAL_SUCCESS;
}

void phOsal_EnterCriticalSection(void)
{
 801c28c:	b480      	push	{r7}
 801c28e:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 801c290:	b672      	cpsid	i
}
 801c292:	bf00      	nop
 801c294:	46bd      	mov	sp, r7
 801c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c29a:	4770      	bx	lr

0801c29c <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 801c29c:	b480      	push	{r7}
 801c29e:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 801c2a0:	b662      	cpsie	i
}
 801c2a2:	bf00      	nop
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2aa:	4770      	bx	lr

0801c2ac <phOsal_WakeUp>:
{
     __WFE();
}

void phOsal_WakeUp(void)
{
 801c2ac:	b480      	push	{r7}
 801c2ae:	af00      	add	r7, sp, #0
    __SEV();
 801c2b0:	bf40      	sev
}
 801c2b2:	bf00      	nop
 801c2b4:	46bd      	mov	sp, r7
 801c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ba:	4770      	bx	lr

0801c2bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b082      	sub	sp, #8
 801c2c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801c2c6:	2003      	movs	r0, #3
 801c2c8:	f000 f960 	bl	801c58c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801c2cc:	2001      	movs	r0, #1
 801c2ce:	f000 f80d 	bl	801c2ec <HAL_InitTick>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d002      	beq.n	801c2de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 801c2d8:	2301      	movs	r3, #1
 801c2da:	71fb      	strb	r3, [r7, #7]
 801c2dc:	e001      	b.n	801c2e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801c2de:	f7e6 f8df 	bl	80024a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801c2e2:	79fb      	ldrb	r3, [r7, #7]
}
 801c2e4:	4618      	mov	r0, r3
 801c2e6:	3708      	adds	r7, #8
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}

0801c2ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801c2ec:	b580      	push	{r7, lr}
 801c2ee:	b084      	sub	sp, #16
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 801c2f8:	4b17      	ldr	r3, [pc, #92]	@ (801c358 <HAL_InitTick+0x6c>)
 801c2fa:	781b      	ldrb	r3, [r3, #0]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d023      	beq.n	801c348 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801c300:	4b16      	ldr	r3, [pc, #88]	@ (801c35c <HAL_InitTick+0x70>)
 801c302:	681a      	ldr	r2, [r3, #0]
 801c304:	4b14      	ldr	r3, [pc, #80]	@ (801c358 <HAL_InitTick+0x6c>)
 801c306:	781b      	ldrb	r3, [r3, #0]
 801c308:	4619      	mov	r1, r3
 801c30a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c30e:	fbb3 f3f1 	udiv	r3, r3, r1
 801c312:	fbb2 f3f3 	udiv	r3, r2, r3
 801c316:	4618      	mov	r0, r3
 801c318:	f000 f96d 	bl	801c5f6 <HAL_SYSTICK_Config>
 801c31c:	4603      	mov	r3, r0
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d10f      	bne.n	801c342 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	2b0f      	cmp	r3, #15
 801c326:	d809      	bhi.n	801c33c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801c328:	2200      	movs	r2, #0
 801c32a:	6879      	ldr	r1, [r7, #4]
 801c32c:	f04f 30ff 	mov.w	r0, #4294967295
 801c330:	f000 f937 	bl	801c5a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801c334:	4a0a      	ldr	r2, [pc, #40]	@ (801c360 <HAL_InitTick+0x74>)
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	6013      	str	r3, [r2, #0]
 801c33a:	e007      	b.n	801c34c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801c33c:	2301      	movs	r3, #1
 801c33e:	73fb      	strb	r3, [r7, #15]
 801c340:	e004      	b.n	801c34c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 801c342:	2301      	movs	r3, #1
 801c344:	73fb      	strb	r3, [r7, #15]
 801c346:	e001      	b.n	801c34c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 801c348:	2301      	movs	r3, #1
 801c34a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801c34c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c34e:	4618      	mov	r0, r3
 801c350:	3710      	adds	r7, #16
 801c352:	46bd      	mov	sp, r7
 801c354:	bd80      	pop	{r7, pc}
 801c356:	bf00      	nop
 801c358:	20000074 	.word	0x20000074
 801c35c:	20000000 	.word	0x20000000
 801c360:	20000070 	.word	0x20000070

0801c364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801c364:	b480      	push	{r7}
 801c366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801c368:	4b06      	ldr	r3, [pc, #24]	@ (801c384 <HAL_IncTick+0x20>)
 801c36a:	781b      	ldrb	r3, [r3, #0]
 801c36c:	461a      	mov	r2, r3
 801c36e:	4b06      	ldr	r3, [pc, #24]	@ (801c388 <HAL_IncTick+0x24>)
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	4413      	add	r3, r2
 801c374:	4a04      	ldr	r2, [pc, #16]	@ (801c388 <HAL_IncTick+0x24>)
 801c376:	6013      	str	r3, [r2, #0]
}
 801c378:	bf00      	nop
 801c37a:	46bd      	mov	sp, r7
 801c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c380:	4770      	bx	lr
 801c382:	bf00      	nop
 801c384:	20000074 	.word	0x20000074
 801c388:	20001c04 	.word	0x20001c04

0801c38c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801c38c:	b480      	push	{r7}
 801c38e:	af00      	add	r7, sp, #0
  return uwTick;
 801c390:	4b03      	ldr	r3, [pc, #12]	@ (801c3a0 <HAL_GetTick+0x14>)
 801c392:	681b      	ldr	r3, [r3, #0]
}
 801c394:	4618      	mov	r0, r3
 801c396:	46bd      	mov	sp, r7
 801c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39c:	4770      	bx	lr
 801c39e:	bf00      	nop
 801c3a0:	20001c04 	.word	0x20001c04

0801c3a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b084      	sub	sp, #16
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801c3ac:	f7ff ffee 	bl	801c38c <HAL_GetTick>
 801c3b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3bc:	d005      	beq.n	801c3ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801c3be:	4b0a      	ldr	r3, [pc, #40]	@ (801c3e8 <HAL_Delay+0x44>)
 801c3c0:	781b      	ldrb	r3, [r3, #0]
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	4413      	add	r3, r2
 801c3c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801c3ca:	bf00      	nop
 801c3cc:	f7ff ffde 	bl	801c38c <HAL_GetTick>
 801c3d0:	4602      	mov	r2, r0
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	1ad3      	subs	r3, r2, r3
 801c3d6:	68fa      	ldr	r2, [r7, #12]
 801c3d8:	429a      	cmp	r2, r3
 801c3da:	d8f7      	bhi.n	801c3cc <HAL_Delay+0x28>
  {
  }
}
 801c3dc:	bf00      	nop
 801c3de:	bf00      	nop
 801c3e0:	3710      	adds	r7, #16
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	bd80      	pop	{r7, pc}
 801c3e6:	bf00      	nop
 801c3e8:	20000074 	.word	0x20000074

0801c3ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c3ec:	b480      	push	{r7}
 801c3ee:	b085      	sub	sp, #20
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f003 0307 	and.w	r3, r3, #7
 801c3fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c3fc:	4b0c      	ldr	r3, [pc, #48]	@ (801c430 <__NVIC_SetPriorityGrouping+0x44>)
 801c3fe:	68db      	ldr	r3, [r3, #12]
 801c400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c402:	68ba      	ldr	r2, [r7, #8]
 801c404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801c408:	4013      	ands	r3, r2
 801c40a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c410:	68bb      	ldr	r3, [r7, #8]
 801c412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801c418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c41c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801c41e:	4a04      	ldr	r2, [pc, #16]	@ (801c430 <__NVIC_SetPriorityGrouping+0x44>)
 801c420:	68bb      	ldr	r3, [r7, #8]
 801c422:	60d3      	str	r3, [r2, #12]
}
 801c424:	bf00      	nop
 801c426:	3714      	adds	r7, #20
 801c428:	46bd      	mov	sp, r7
 801c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c42e:	4770      	bx	lr
 801c430:	e000ed00 	.word	0xe000ed00

0801c434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801c434:	b480      	push	{r7}
 801c436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c438:	4b04      	ldr	r3, [pc, #16]	@ (801c44c <__NVIC_GetPriorityGrouping+0x18>)
 801c43a:	68db      	ldr	r3, [r3, #12]
 801c43c:	0a1b      	lsrs	r3, r3, #8
 801c43e:	f003 0307 	and.w	r3, r3, #7
}
 801c442:	4618      	mov	r0, r3
 801c444:	46bd      	mov	sp, r7
 801c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44a:	4770      	bx	lr
 801c44c:	e000ed00 	.word	0xe000ed00

0801c450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c450:	b480      	push	{r7}
 801c452:	b083      	sub	sp, #12
 801c454:	af00      	add	r7, sp, #0
 801c456:	4603      	mov	r3, r0
 801c458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c45a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	db0b      	blt.n	801c47a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c462:	79fb      	ldrb	r3, [r7, #7]
 801c464:	f003 021f 	and.w	r2, r3, #31
 801c468:	4907      	ldr	r1, [pc, #28]	@ (801c488 <__NVIC_EnableIRQ+0x38>)
 801c46a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c46e:	095b      	lsrs	r3, r3, #5
 801c470:	2001      	movs	r0, #1
 801c472:	fa00 f202 	lsl.w	r2, r0, r2
 801c476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801c47a:	bf00      	nop
 801c47c:	370c      	adds	r7, #12
 801c47e:	46bd      	mov	sp, r7
 801c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c484:	4770      	bx	lr
 801c486:	bf00      	nop
 801c488:	e000e100 	.word	0xe000e100

0801c48c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801c48c:	b480      	push	{r7}
 801c48e:	b083      	sub	sp, #12
 801c490:	af00      	add	r7, sp, #0
 801c492:	4603      	mov	r3, r0
 801c494:	6039      	str	r1, [r7, #0]
 801c496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	db0a      	blt.n	801c4b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c4a0:	683b      	ldr	r3, [r7, #0]
 801c4a2:	b2da      	uxtb	r2, r3
 801c4a4:	490c      	ldr	r1, [pc, #48]	@ (801c4d8 <__NVIC_SetPriority+0x4c>)
 801c4a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c4aa:	0112      	lsls	r2, r2, #4
 801c4ac:	b2d2      	uxtb	r2, r2
 801c4ae:	440b      	add	r3, r1
 801c4b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801c4b4:	e00a      	b.n	801c4cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	b2da      	uxtb	r2, r3
 801c4ba:	4908      	ldr	r1, [pc, #32]	@ (801c4dc <__NVIC_SetPriority+0x50>)
 801c4bc:	79fb      	ldrb	r3, [r7, #7]
 801c4be:	f003 030f 	and.w	r3, r3, #15
 801c4c2:	3b04      	subs	r3, #4
 801c4c4:	0112      	lsls	r2, r2, #4
 801c4c6:	b2d2      	uxtb	r2, r2
 801c4c8:	440b      	add	r3, r1
 801c4ca:	761a      	strb	r2, [r3, #24]
}
 801c4cc:	bf00      	nop
 801c4ce:	370c      	adds	r7, #12
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4d6:	4770      	bx	lr
 801c4d8:	e000e100 	.word	0xe000e100
 801c4dc:	e000ed00 	.word	0xe000ed00

0801c4e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c4e0:	b480      	push	{r7}
 801c4e2:	b089      	sub	sp, #36	@ 0x24
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	60f8      	str	r0, [r7, #12]
 801c4e8:	60b9      	str	r1, [r7, #8]
 801c4ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	f003 0307 	and.w	r3, r3, #7
 801c4f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c4f4:	69fb      	ldr	r3, [r7, #28]
 801c4f6:	f1c3 0307 	rsb	r3, r3, #7
 801c4fa:	2b04      	cmp	r3, #4
 801c4fc:	bf28      	it	cs
 801c4fe:	2304      	movcs	r3, #4
 801c500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c502:	69fb      	ldr	r3, [r7, #28]
 801c504:	3304      	adds	r3, #4
 801c506:	2b06      	cmp	r3, #6
 801c508:	d902      	bls.n	801c510 <NVIC_EncodePriority+0x30>
 801c50a:	69fb      	ldr	r3, [r7, #28]
 801c50c:	3b03      	subs	r3, #3
 801c50e:	e000      	b.n	801c512 <NVIC_EncodePriority+0x32>
 801c510:	2300      	movs	r3, #0
 801c512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c514:	f04f 32ff 	mov.w	r2, #4294967295
 801c518:	69bb      	ldr	r3, [r7, #24]
 801c51a:	fa02 f303 	lsl.w	r3, r2, r3
 801c51e:	43da      	mvns	r2, r3
 801c520:	68bb      	ldr	r3, [r7, #8]
 801c522:	401a      	ands	r2, r3
 801c524:	697b      	ldr	r3, [r7, #20]
 801c526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c528:	f04f 31ff 	mov.w	r1, #4294967295
 801c52c:	697b      	ldr	r3, [r7, #20]
 801c52e:	fa01 f303 	lsl.w	r3, r1, r3
 801c532:	43d9      	mvns	r1, r3
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c538:	4313      	orrs	r3, r2
         );
}
 801c53a:	4618      	mov	r0, r3
 801c53c:	3724      	adds	r7, #36	@ 0x24
 801c53e:	46bd      	mov	sp, r7
 801c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c544:	4770      	bx	lr
	...

0801c548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b082      	sub	sp, #8
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	3b01      	subs	r3, #1
 801c554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c558:	d301      	bcc.n	801c55e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c55a:	2301      	movs	r3, #1
 801c55c:	e00f      	b.n	801c57e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c55e:	4a0a      	ldr	r2, [pc, #40]	@ (801c588 <SysTick_Config+0x40>)
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	3b01      	subs	r3, #1
 801c564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c566:	210f      	movs	r1, #15
 801c568:	f04f 30ff 	mov.w	r0, #4294967295
 801c56c:	f7ff ff8e 	bl	801c48c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c570:	4b05      	ldr	r3, [pc, #20]	@ (801c588 <SysTick_Config+0x40>)
 801c572:	2200      	movs	r2, #0
 801c574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c576:	4b04      	ldr	r3, [pc, #16]	@ (801c588 <SysTick_Config+0x40>)
 801c578:	2207      	movs	r2, #7
 801c57a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c57c:	2300      	movs	r3, #0
}
 801c57e:	4618      	mov	r0, r3
 801c580:	3708      	adds	r7, #8
 801c582:	46bd      	mov	sp, r7
 801c584:	bd80      	pop	{r7, pc}
 801c586:	bf00      	nop
 801c588:	e000e010 	.word	0xe000e010

0801c58c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b082      	sub	sp, #8
 801c590:	af00      	add	r7, sp, #0
 801c592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c594:	6878      	ldr	r0, [r7, #4]
 801c596:	f7ff ff29 	bl	801c3ec <__NVIC_SetPriorityGrouping>
}
 801c59a:	bf00      	nop
 801c59c:	3708      	adds	r7, #8
 801c59e:	46bd      	mov	sp, r7
 801c5a0:	bd80      	pop	{r7, pc}

0801c5a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c5a2:	b580      	push	{r7, lr}
 801c5a4:	b086      	sub	sp, #24
 801c5a6:	af00      	add	r7, sp, #0
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	60b9      	str	r1, [r7, #8]
 801c5ac:	607a      	str	r2, [r7, #4]
 801c5ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801c5b4:	f7ff ff3e 	bl	801c434 <__NVIC_GetPriorityGrouping>
 801c5b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801c5ba:	687a      	ldr	r2, [r7, #4]
 801c5bc:	68b9      	ldr	r1, [r7, #8]
 801c5be:	6978      	ldr	r0, [r7, #20]
 801c5c0:	f7ff ff8e 	bl	801c4e0 <NVIC_EncodePriority>
 801c5c4:	4602      	mov	r2, r0
 801c5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c5ca:	4611      	mov	r1, r2
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f7ff ff5d 	bl	801c48c <__NVIC_SetPriority>
}
 801c5d2:	bf00      	nop
 801c5d4:	3718      	adds	r7, #24
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}

0801c5da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c5da:	b580      	push	{r7, lr}
 801c5dc:	b082      	sub	sp, #8
 801c5de:	af00      	add	r7, sp, #0
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801c5e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c5e8:	4618      	mov	r0, r3
 801c5ea:	f7ff ff31 	bl	801c450 <__NVIC_EnableIRQ>
}
 801c5ee:	bf00      	nop
 801c5f0:	3708      	adds	r7, #8
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}

0801c5f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801c5f6:	b580      	push	{r7, lr}
 801c5f8:	b082      	sub	sp, #8
 801c5fa:	af00      	add	r7, sp, #0
 801c5fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801c5fe:	6878      	ldr	r0, [r7, #4]
 801c600:	f7ff ffa2 	bl	801c548 <SysTick_Config>
 801c604:	4603      	mov	r3, r0
}
 801c606:	4618      	mov	r0, r3
 801c608:	3708      	adds	r7, #8
 801c60a:	46bd      	mov	sp, r7
 801c60c:	bd80      	pop	{r7, pc}

0801c60e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c60e:	b480      	push	{r7}
 801c610:	b085      	sub	sp, #20
 801c612:	af00      	add	r7, sp, #0
 801c614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c616:	2300      	movs	r3, #0
 801c618:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801c620:	b2db      	uxtb	r3, r3
 801c622:	2b02      	cmp	r3, #2
 801c624:	d008      	beq.n	801c638 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	2204      	movs	r2, #4
 801c62a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	2200      	movs	r2, #0
 801c630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801c634:	2301      	movs	r3, #1
 801c636:	e022      	b.n	801c67e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	681a      	ldr	r2, [r3, #0]
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	f022 020e 	bic.w	r2, r2, #14
 801c646:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	681a      	ldr	r2, [r3, #0]
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	f022 0201 	bic.w	r2, r2, #1
 801c656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c65c:	f003 021c 	and.w	r2, r3, #28
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c664:	2101      	movs	r1, #1
 801c666:	fa01 f202 	lsl.w	r2, r1, r2
 801c66a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	2201      	movs	r2, #1
 801c670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	2200      	movs	r2, #0
 801c678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 801c67c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801c67e:	4618      	mov	r0, r3
 801c680:	3714      	adds	r7, #20
 801c682:	46bd      	mov	sp, r7
 801c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c688:	4770      	bx	lr

0801c68a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801c68a:	b580      	push	{r7, lr}
 801c68c:	b084      	sub	sp, #16
 801c68e:	af00      	add	r7, sp, #0
 801c690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c692:	2300      	movs	r3, #0
 801c694:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801c69c:	b2db      	uxtb	r3, r3
 801c69e:	2b02      	cmp	r3, #2
 801c6a0:	d005      	beq.n	801c6ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	2204      	movs	r2, #4
 801c6a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801c6a8:	2301      	movs	r3, #1
 801c6aa:	73fb      	strb	r3, [r7, #15]
 801c6ac:	e029      	b.n	801c702 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	681a      	ldr	r2, [r3, #0]
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	f022 020e 	bic.w	r2, r2, #14
 801c6bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	681a      	ldr	r2, [r3, #0]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	f022 0201 	bic.w	r2, r2, #1
 801c6cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c6d2:	f003 021c 	and.w	r2, r3, #28
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c6da:	2101      	movs	r1, #1
 801c6dc:	fa01 f202 	lsl.w	r2, r1, r2
 801c6e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	2201      	movs	r2, #1
 801c6e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d003      	beq.n	801c702 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6fe:	6878      	ldr	r0, [r7, #4]
 801c700:	4798      	blx	r3
    }
  }
  return status;
 801c702:	7bfb      	ldrb	r3, [r7, #15]
}
 801c704:	4618      	mov	r0, r3
 801c706:	3710      	adds	r7, #16
 801c708:	46bd      	mov	sp, r7
 801c70a:	bd80      	pop	{r7, pc}

0801c70c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c70c:	b480      	push	{r7}
 801c70e:	b087      	sub	sp, #28
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
 801c714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801c716:	2300      	movs	r3, #0
 801c718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801c71a:	e154      	b.n	801c9c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801c71c:	683b      	ldr	r3, [r7, #0]
 801c71e:	681a      	ldr	r2, [r3, #0]
 801c720:	2101      	movs	r1, #1
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	fa01 f303 	lsl.w	r3, r1, r3
 801c728:	4013      	ands	r3, r2
 801c72a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	f000 8146 	beq.w	801c9c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c734:	683b      	ldr	r3, [r7, #0]
 801c736:	685b      	ldr	r3, [r3, #4]
 801c738:	f003 0303 	and.w	r3, r3, #3
 801c73c:	2b01      	cmp	r3, #1
 801c73e:	d005      	beq.n	801c74c <HAL_GPIO_Init+0x40>
 801c740:	683b      	ldr	r3, [r7, #0]
 801c742:	685b      	ldr	r3, [r3, #4]
 801c744:	f003 0303 	and.w	r3, r3, #3
 801c748:	2b02      	cmp	r3, #2
 801c74a:	d130      	bne.n	801c7ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	689b      	ldr	r3, [r3, #8]
 801c750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801c752:	697b      	ldr	r3, [r7, #20]
 801c754:	005b      	lsls	r3, r3, #1
 801c756:	2203      	movs	r2, #3
 801c758:	fa02 f303 	lsl.w	r3, r2, r3
 801c75c:	43db      	mvns	r3, r3
 801c75e:	693a      	ldr	r2, [r7, #16]
 801c760:	4013      	ands	r3, r2
 801c762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801c764:	683b      	ldr	r3, [r7, #0]
 801c766:	68da      	ldr	r2, [r3, #12]
 801c768:	697b      	ldr	r3, [r7, #20]
 801c76a:	005b      	lsls	r3, r3, #1
 801c76c:	fa02 f303 	lsl.w	r3, r2, r3
 801c770:	693a      	ldr	r2, [r7, #16]
 801c772:	4313      	orrs	r3, r2
 801c774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	693a      	ldr	r2, [r7, #16]
 801c77a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	685b      	ldr	r3, [r3, #4]
 801c780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c782:	2201      	movs	r2, #1
 801c784:	697b      	ldr	r3, [r7, #20]
 801c786:	fa02 f303 	lsl.w	r3, r2, r3
 801c78a:	43db      	mvns	r3, r3
 801c78c:	693a      	ldr	r2, [r7, #16]
 801c78e:	4013      	ands	r3, r2
 801c790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c792:	683b      	ldr	r3, [r7, #0]
 801c794:	685b      	ldr	r3, [r3, #4]
 801c796:	091b      	lsrs	r3, r3, #4
 801c798:	f003 0201 	and.w	r2, r3, #1
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	fa02 f303 	lsl.w	r3, r2, r3
 801c7a2:	693a      	ldr	r2, [r7, #16]
 801c7a4:	4313      	orrs	r3, r2
 801c7a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	693a      	ldr	r2, [r7, #16]
 801c7ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c7ae:	683b      	ldr	r3, [r7, #0]
 801c7b0:	685b      	ldr	r3, [r3, #4]
 801c7b2:	f003 0303 	and.w	r3, r3, #3
 801c7b6:	2b03      	cmp	r3, #3
 801c7b8:	d017      	beq.n	801c7ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	68db      	ldr	r3, [r3, #12]
 801c7be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c7c0:	697b      	ldr	r3, [r7, #20]
 801c7c2:	005b      	lsls	r3, r3, #1
 801c7c4:	2203      	movs	r2, #3
 801c7c6:	fa02 f303 	lsl.w	r3, r2, r3
 801c7ca:	43db      	mvns	r3, r3
 801c7cc:	693a      	ldr	r2, [r7, #16]
 801c7ce:	4013      	ands	r3, r2
 801c7d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c7d2:	683b      	ldr	r3, [r7, #0]
 801c7d4:	689a      	ldr	r2, [r3, #8]
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	005b      	lsls	r3, r3, #1
 801c7da:	fa02 f303 	lsl.w	r3, r2, r3
 801c7de:	693a      	ldr	r2, [r7, #16]
 801c7e0:	4313      	orrs	r3, r2
 801c7e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	693a      	ldr	r2, [r7, #16]
 801c7e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	685b      	ldr	r3, [r3, #4]
 801c7ee:	f003 0303 	and.w	r3, r3, #3
 801c7f2:	2b02      	cmp	r3, #2
 801c7f4:	d123      	bne.n	801c83e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	08da      	lsrs	r2, r3, #3
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	3208      	adds	r2, #8
 801c7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801c804:	697b      	ldr	r3, [r7, #20]
 801c806:	f003 0307 	and.w	r3, r3, #7
 801c80a:	009b      	lsls	r3, r3, #2
 801c80c:	220f      	movs	r2, #15
 801c80e:	fa02 f303 	lsl.w	r3, r2, r3
 801c812:	43db      	mvns	r3, r3
 801c814:	693a      	ldr	r2, [r7, #16]
 801c816:	4013      	ands	r3, r2
 801c818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801c81a:	683b      	ldr	r3, [r7, #0]
 801c81c:	691a      	ldr	r2, [r3, #16]
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	f003 0307 	and.w	r3, r3, #7
 801c824:	009b      	lsls	r3, r3, #2
 801c826:	fa02 f303 	lsl.w	r3, r2, r3
 801c82a:	693a      	ldr	r2, [r7, #16]
 801c82c:	4313      	orrs	r3, r2
 801c82e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	08da      	lsrs	r2, r3, #3
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	3208      	adds	r2, #8
 801c838:	6939      	ldr	r1, [r7, #16]
 801c83a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801c844:	697b      	ldr	r3, [r7, #20]
 801c846:	005b      	lsls	r3, r3, #1
 801c848:	2203      	movs	r2, #3
 801c84a:	fa02 f303 	lsl.w	r3, r2, r3
 801c84e:	43db      	mvns	r3, r3
 801c850:	693a      	ldr	r2, [r7, #16]
 801c852:	4013      	ands	r3, r2
 801c854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801c856:	683b      	ldr	r3, [r7, #0]
 801c858:	685b      	ldr	r3, [r3, #4]
 801c85a:	f003 0203 	and.w	r2, r3, #3
 801c85e:	697b      	ldr	r3, [r7, #20]
 801c860:	005b      	lsls	r3, r3, #1
 801c862:	fa02 f303 	lsl.w	r3, r2, r3
 801c866:	693a      	ldr	r2, [r7, #16]
 801c868:	4313      	orrs	r3, r2
 801c86a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	693a      	ldr	r2, [r7, #16]
 801c870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801c872:	683b      	ldr	r3, [r7, #0]
 801c874:	685b      	ldr	r3, [r3, #4]
 801c876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	f000 80a0 	beq.w	801c9c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c880:	4b58      	ldr	r3, [pc, #352]	@ (801c9e4 <HAL_GPIO_Init+0x2d8>)
 801c882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c884:	4a57      	ldr	r2, [pc, #348]	@ (801c9e4 <HAL_GPIO_Init+0x2d8>)
 801c886:	f043 0301 	orr.w	r3, r3, #1
 801c88a:	6613      	str	r3, [r2, #96]	@ 0x60
 801c88c:	4b55      	ldr	r3, [pc, #340]	@ (801c9e4 <HAL_GPIO_Init+0x2d8>)
 801c88e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c890:	f003 0301 	and.w	r3, r3, #1
 801c894:	60bb      	str	r3, [r7, #8]
 801c896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801c898:	4a53      	ldr	r2, [pc, #332]	@ (801c9e8 <HAL_GPIO_Init+0x2dc>)
 801c89a:	697b      	ldr	r3, [r7, #20]
 801c89c:	089b      	lsrs	r3, r3, #2
 801c89e:	3302      	adds	r3, #2
 801c8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c8a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	f003 0303 	and.w	r3, r3, #3
 801c8ac:	009b      	lsls	r3, r3, #2
 801c8ae:	220f      	movs	r2, #15
 801c8b0:	fa02 f303 	lsl.w	r3, r2, r3
 801c8b4:	43db      	mvns	r3, r3
 801c8b6:	693a      	ldr	r2, [r7, #16]
 801c8b8:	4013      	ands	r3, r2
 801c8ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801c8c2:	d019      	beq.n	801c8f8 <HAL_GPIO_Init+0x1ec>
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	4a49      	ldr	r2, [pc, #292]	@ (801c9ec <HAL_GPIO_Init+0x2e0>)
 801c8c8:	4293      	cmp	r3, r2
 801c8ca:	d013      	beq.n	801c8f4 <HAL_GPIO_Init+0x1e8>
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	4a48      	ldr	r2, [pc, #288]	@ (801c9f0 <HAL_GPIO_Init+0x2e4>)
 801c8d0:	4293      	cmp	r3, r2
 801c8d2:	d00d      	beq.n	801c8f0 <HAL_GPIO_Init+0x1e4>
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	4a47      	ldr	r2, [pc, #284]	@ (801c9f4 <HAL_GPIO_Init+0x2e8>)
 801c8d8:	4293      	cmp	r3, r2
 801c8da:	d007      	beq.n	801c8ec <HAL_GPIO_Init+0x1e0>
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	4a46      	ldr	r2, [pc, #280]	@ (801c9f8 <HAL_GPIO_Init+0x2ec>)
 801c8e0:	4293      	cmp	r3, r2
 801c8e2:	d101      	bne.n	801c8e8 <HAL_GPIO_Init+0x1dc>
 801c8e4:	2304      	movs	r3, #4
 801c8e6:	e008      	b.n	801c8fa <HAL_GPIO_Init+0x1ee>
 801c8e8:	2307      	movs	r3, #7
 801c8ea:	e006      	b.n	801c8fa <HAL_GPIO_Init+0x1ee>
 801c8ec:	2303      	movs	r3, #3
 801c8ee:	e004      	b.n	801c8fa <HAL_GPIO_Init+0x1ee>
 801c8f0:	2302      	movs	r3, #2
 801c8f2:	e002      	b.n	801c8fa <HAL_GPIO_Init+0x1ee>
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	e000      	b.n	801c8fa <HAL_GPIO_Init+0x1ee>
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	697a      	ldr	r2, [r7, #20]
 801c8fc:	f002 0203 	and.w	r2, r2, #3
 801c900:	0092      	lsls	r2, r2, #2
 801c902:	4093      	lsls	r3, r2
 801c904:	693a      	ldr	r2, [r7, #16]
 801c906:	4313      	orrs	r3, r2
 801c908:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801c90a:	4937      	ldr	r1, [pc, #220]	@ (801c9e8 <HAL_GPIO_Init+0x2dc>)
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	089b      	lsrs	r3, r3, #2
 801c910:	3302      	adds	r3, #2
 801c912:	693a      	ldr	r2, [r7, #16]
 801c914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c918:	4b38      	ldr	r3, [pc, #224]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c91a:	689b      	ldr	r3, [r3, #8]
 801c91c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	43db      	mvns	r3, r3
 801c922:	693a      	ldr	r2, [r7, #16]
 801c924:	4013      	ands	r3, r2
 801c926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801c928:	683b      	ldr	r3, [r7, #0]
 801c92a:	685b      	ldr	r3, [r3, #4]
 801c92c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c930:	2b00      	cmp	r3, #0
 801c932:	d003      	beq.n	801c93c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801c934:	693a      	ldr	r2, [r7, #16]
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	4313      	orrs	r3, r2
 801c93a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c93c:	4a2f      	ldr	r2, [pc, #188]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c93e:	693b      	ldr	r3, [r7, #16]
 801c940:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c942:	4b2e      	ldr	r3, [pc, #184]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c944:	68db      	ldr	r3, [r3, #12]
 801c946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	43db      	mvns	r3, r3
 801c94c:	693a      	ldr	r2, [r7, #16]
 801c94e:	4013      	ands	r3, r2
 801c950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801c952:	683b      	ldr	r3, [r7, #0]
 801c954:	685b      	ldr	r3, [r3, #4]
 801c956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d003      	beq.n	801c966 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801c95e:	693a      	ldr	r2, [r7, #16]
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	4313      	orrs	r3, r2
 801c964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c966:	4a25      	ldr	r2, [pc, #148]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c968:	693b      	ldr	r3, [r7, #16]
 801c96a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801c96c:	4b23      	ldr	r3, [pc, #140]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c96e:	685b      	ldr	r3, [r3, #4]
 801c970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	43db      	mvns	r3, r3
 801c976:	693a      	ldr	r2, [r7, #16]
 801c978:	4013      	ands	r3, r2
 801c97a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801c97c:	683b      	ldr	r3, [r7, #0]
 801c97e:	685b      	ldr	r3, [r3, #4]
 801c980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c984:	2b00      	cmp	r3, #0
 801c986:	d003      	beq.n	801c990 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 801c988:	693a      	ldr	r2, [r7, #16]
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	4313      	orrs	r3, r2
 801c98e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c990:	4a1a      	ldr	r2, [pc, #104]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c992:	693b      	ldr	r3, [r7, #16]
 801c994:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 801c996:	4b19      	ldr	r3, [pc, #100]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	43db      	mvns	r3, r3
 801c9a0:	693a      	ldr	r2, [r7, #16]
 801c9a2:	4013      	ands	r3, r2
 801c9a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801c9a6:	683b      	ldr	r3, [r7, #0]
 801c9a8:	685b      	ldr	r3, [r3, #4]
 801c9aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d003      	beq.n	801c9ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c9b2:	693a      	ldr	r2, [r7, #16]
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	4313      	orrs	r3, r2
 801c9b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c9ba:	4a10      	ldr	r2, [pc, #64]	@ (801c9fc <HAL_GPIO_Init+0x2f0>)
 801c9bc:	693b      	ldr	r3, [r7, #16]
 801c9be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c9c0:	697b      	ldr	r3, [r7, #20]
 801c9c2:	3301      	adds	r3, #1
 801c9c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801c9c6:	683b      	ldr	r3, [r7, #0]
 801c9c8:	681a      	ldr	r2, [r3, #0]
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	fa22 f303 	lsr.w	r3, r2, r3
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	f47f aea3 	bne.w	801c71c <HAL_GPIO_Init+0x10>
  }
}
 801c9d6:	bf00      	nop
 801c9d8:	bf00      	nop
 801c9da:	371c      	adds	r7, #28
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e2:	4770      	bx	lr
 801c9e4:	40021000 	.word	0x40021000
 801c9e8:	40010000 	.word	0x40010000
 801c9ec:	48000400 	.word	0x48000400
 801c9f0:	48000800 	.word	0x48000800
 801c9f4:	48000c00 	.word	0x48000c00
 801c9f8:	48001000 	.word	0x48001000
 801c9fc:	40010400 	.word	0x40010400

0801ca00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801ca00:	b480      	push	{r7}
 801ca02:	b087      	sub	sp, #28
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
 801ca08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801ca0e:	e0b7      	b.n	801cb80 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801ca10:	2201      	movs	r2, #1
 801ca12:	697b      	ldr	r3, [r7, #20]
 801ca14:	fa02 f303 	lsl.w	r3, r2, r3
 801ca18:	683a      	ldr	r2, [r7, #0]
 801ca1a:	4013      	ands	r3, r2
 801ca1c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801ca1e:	693b      	ldr	r3, [r7, #16]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	f000 80aa 	beq.w	801cb7a <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801ca26:	4a5d      	ldr	r2, [pc, #372]	@ (801cb9c <HAL_GPIO_DeInit+0x19c>)
 801ca28:	697b      	ldr	r3, [r7, #20]
 801ca2a:	089b      	lsrs	r3, r3, #2
 801ca2c:	3302      	adds	r3, #2
 801ca2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca32:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 801ca34:	697b      	ldr	r3, [r7, #20]
 801ca36:	f003 0303 	and.w	r3, r3, #3
 801ca3a:	009b      	lsls	r3, r3, #2
 801ca3c:	220f      	movs	r2, #15
 801ca3e:	fa02 f303 	lsl.w	r3, r2, r3
 801ca42:	68fa      	ldr	r2, [r7, #12]
 801ca44:	4013      	ands	r3, r2
 801ca46:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801ca4e:	d019      	beq.n	801ca84 <HAL_GPIO_DeInit+0x84>
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	4a53      	ldr	r2, [pc, #332]	@ (801cba0 <HAL_GPIO_DeInit+0x1a0>)
 801ca54:	4293      	cmp	r3, r2
 801ca56:	d013      	beq.n	801ca80 <HAL_GPIO_DeInit+0x80>
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	4a52      	ldr	r2, [pc, #328]	@ (801cba4 <HAL_GPIO_DeInit+0x1a4>)
 801ca5c:	4293      	cmp	r3, r2
 801ca5e:	d00d      	beq.n	801ca7c <HAL_GPIO_DeInit+0x7c>
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	4a51      	ldr	r2, [pc, #324]	@ (801cba8 <HAL_GPIO_DeInit+0x1a8>)
 801ca64:	4293      	cmp	r3, r2
 801ca66:	d007      	beq.n	801ca78 <HAL_GPIO_DeInit+0x78>
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	4a50      	ldr	r2, [pc, #320]	@ (801cbac <HAL_GPIO_DeInit+0x1ac>)
 801ca6c:	4293      	cmp	r3, r2
 801ca6e:	d101      	bne.n	801ca74 <HAL_GPIO_DeInit+0x74>
 801ca70:	2304      	movs	r3, #4
 801ca72:	e008      	b.n	801ca86 <HAL_GPIO_DeInit+0x86>
 801ca74:	2307      	movs	r3, #7
 801ca76:	e006      	b.n	801ca86 <HAL_GPIO_DeInit+0x86>
 801ca78:	2303      	movs	r3, #3
 801ca7a:	e004      	b.n	801ca86 <HAL_GPIO_DeInit+0x86>
 801ca7c:	2302      	movs	r3, #2
 801ca7e:	e002      	b.n	801ca86 <HAL_GPIO_DeInit+0x86>
 801ca80:	2301      	movs	r3, #1
 801ca82:	e000      	b.n	801ca86 <HAL_GPIO_DeInit+0x86>
 801ca84:	2300      	movs	r3, #0
 801ca86:	697a      	ldr	r2, [r7, #20]
 801ca88:	f002 0203 	and.w	r2, r2, #3
 801ca8c:	0092      	lsls	r2, r2, #2
 801ca8e:	4093      	lsls	r3, r2
 801ca90:	68fa      	ldr	r2, [r7, #12]
 801ca92:	429a      	cmp	r2, r3
 801ca94:	d132      	bne.n	801cafc <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801ca96:	4b46      	ldr	r3, [pc, #280]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801ca98:	681a      	ldr	r2, [r3, #0]
 801ca9a:	693b      	ldr	r3, [r7, #16]
 801ca9c:	43db      	mvns	r3, r3
 801ca9e:	4944      	ldr	r1, [pc, #272]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801caa0:	4013      	ands	r3, r2
 801caa2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 801caa4:	4b42      	ldr	r3, [pc, #264]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801caa6:	685a      	ldr	r2, [r3, #4]
 801caa8:	693b      	ldr	r3, [r7, #16]
 801caaa:	43db      	mvns	r3, r3
 801caac:	4940      	ldr	r1, [pc, #256]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801caae:	4013      	ands	r3, r2
 801cab0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801cab2:	4b3f      	ldr	r3, [pc, #252]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801cab4:	68da      	ldr	r2, [r3, #12]
 801cab6:	693b      	ldr	r3, [r7, #16]
 801cab8:	43db      	mvns	r3, r3
 801caba:	493d      	ldr	r1, [pc, #244]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801cabc:	4013      	ands	r3, r2
 801cabe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 801cac0:	4b3b      	ldr	r3, [pc, #236]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801cac2:	689a      	ldr	r2, [r3, #8]
 801cac4:	693b      	ldr	r3, [r7, #16]
 801cac6:	43db      	mvns	r3, r3
 801cac8:	4939      	ldr	r1, [pc, #228]	@ (801cbb0 <HAL_GPIO_DeInit+0x1b0>)
 801caca:	4013      	ands	r3, r2
 801cacc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	f003 0303 	and.w	r3, r3, #3
 801cad4:	009b      	lsls	r3, r3, #2
 801cad6:	220f      	movs	r2, #15
 801cad8:	fa02 f303 	lsl.w	r3, r2, r3
 801cadc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 801cade:	4a2f      	ldr	r2, [pc, #188]	@ (801cb9c <HAL_GPIO_DeInit+0x19c>)
 801cae0:	697b      	ldr	r3, [r7, #20]
 801cae2:	089b      	lsrs	r3, r3, #2
 801cae4:	3302      	adds	r3, #2
 801cae6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	43da      	mvns	r2, r3
 801caee:	482b      	ldr	r0, [pc, #172]	@ (801cb9c <HAL_GPIO_DeInit+0x19c>)
 801caf0:	697b      	ldr	r3, [r7, #20]
 801caf2:	089b      	lsrs	r3, r3, #2
 801caf4:	400a      	ands	r2, r1
 801caf6:	3302      	adds	r3, #2
 801caf8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681a      	ldr	r2, [r3, #0]
 801cb00:	697b      	ldr	r3, [r7, #20]
 801cb02:	005b      	lsls	r3, r3, #1
 801cb04:	2103      	movs	r1, #3
 801cb06:	fa01 f303 	lsl.w	r3, r1, r3
 801cb0a:	431a      	orrs	r2, r3
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801cb10:	697b      	ldr	r3, [r7, #20]
 801cb12:	08da      	lsrs	r2, r3, #3
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	3208      	adds	r2, #8
 801cb18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	f003 0307 	and.w	r3, r3, #7
 801cb22:	009b      	lsls	r3, r3, #2
 801cb24:	220f      	movs	r2, #15
 801cb26:	fa02 f303 	lsl.w	r3, r2, r3
 801cb2a:	43db      	mvns	r3, r3
 801cb2c:	697a      	ldr	r2, [r7, #20]
 801cb2e:	08d2      	lsrs	r2, r2, #3
 801cb30:	4019      	ands	r1, r3
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	3208      	adds	r2, #8
 801cb36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	689a      	ldr	r2, [r3, #8]
 801cb3e:	697b      	ldr	r3, [r7, #20]
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	2103      	movs	r1, #3
 801cb44:	fa01 f303 	lsl.w	r3, r1, r3
 801cb48:	43db      	mvns	r3, r3
 801cb4a:	401a      	ands	r2, r3
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	685a      	ldr	r2, [r3, #4]
 801cb54:	2101      	movs	r1, #1
 801cb56:	697b      	ldr	r3, [r7, #20]
 801cb58:	fa01 f303 	lsl.w	r3, r1, r3
 801cb5c:	43db      	mvns	r3, r3
 801cb5e:	401a      	ands	r2, r3
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	68da      	ldr	r2, [r3, #12]
 801cb68:	697b      	ldr	r3, [r7, #20]
 801cb6a:	005b      	lsls	r3, r3, #1
 801cb6c:	2103      	movs	r1, #3
 801cb6e:	fa01 f303 	lsl.w	r3, r1, r3
 801cb72:	43db      	mvns	r3, r3
 801cb74:	401a      	ands	r2, r3
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 801cb7a:	697b      	ldr	r3, [r7, #20]
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801cb80:	683a      	ldr	r2, [r7, #0]
 801cb82:	697b      	ldr	r3, [r7, #20]
 801cb84:	fa22 f303 	lsr.w	r3, r2, r3
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	f47f af41 	bne.w	801ca10 <HAL_GPIO_DeInit+0x10>
  }
}
 801cb8e:	bf00      	nop
 801cb90:	bf00      	nop
 801cb92:	371c      	adds	r7, #28
 801cb94:	46bd      	mov	sp, r7
 801cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb9a:	4770      	bx	lr
 801cb9c:	40010000 	.word	0x40010000
 801cba0:	48000400 	.word	0x48000400
 801cba4:	48000800 	.word	0x48000800
 801cba8:	48000c00 	.word	0x48000c00
 801cbac:	48001000 	.word	0x48001000
 801cbb0:	40010400 	.word	0x40010400

0801cbb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801cbb4:	b480      	push	{r7}
 801cbb6:	b085      	sub	sp, #20
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
 801cbbc:	460b      	mov	r3, r1
 801cbbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	691a      	ldr	r2, [r3, #16]
 801cbc4:	887b      	ldrh	r3, [r7, #2]
 801cbc6:	4013      	ands	r3, r2
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d002      	beq.n	801cbd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801cbcc:	2301      	movs	r3, #1
 801cbce:	73fb      	strb	r3, [r7, #15]
 801cbd0:	e001      	b.n	801cbd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801cbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbd8:	4618      	mov	r0, r3
 801cbda:	3714      	adds	r7, #20
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe2:	4770      	bx	lr

0801cbe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801cbe4:	b480      	push	{r7}
 801cbe6:	b083      	sub	sp, #12
 801cbe8:	af00      	add	r7, sp, #0
 801cbea:	6078      	str	r0, [r7, #4]
 801cbec:	460b      	mov	r3, r1
 801cbee:	807b      	strh	r3, [r7, #2]
 801cbf0:	4613      	mov	r3, r2
 801cbf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801cbf4:	787b      	ldrb	r3, [r7, #1]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d003      	beq.n	801cc02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801cbfa:	887a      	ldrh	r2, [r7, #2]
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801cc00:	e002      	b.n	801cc08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801cc02:	887a      	ldrh	r2, [r7, #2]
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801cc08:	bf00      	nop
 801cc0a:	370c      	adds	r7, #12
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc12:	4770      	bx	lr

0801cc14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b082      	sub	sp, #8
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	4603      	mov	r3, r0
 801cc1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801cc1e:	4b08      	ldr	r3, [pc, #32]	@ (801cc40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801cc20:	695a      	ldr	r2, [r3, #20]
 801cc22:	88fb      	ldrh	r3, [r7, #6]
 801cc24:	4013      	ands	r3, r2
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d006      	beq.n	801cc38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801cc2a:	4a05      	ldr	r2, [pc, #20]	@ (801cc40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801cc2c:	88fb      	ldrh	r3, [r7, #6]
 801cc2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801cc30:	88fb      	ldrh	r3, [r7, #6]
 801cc32:	4618      	mov	r0, r3
 801cc34:	f000 f806 	bl	801cc44 <HAL_GPIO_EXTI_Callback>
  }
}
 801cc38:	bf00      	nop
 801cc3a:	3708      	adds	r7, #8
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	bd80      	pop	{r7, pc}
 801cc40:	40010400 	.word	0x40010400

0801cc44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801cc44:	b480      	push	{r7}
 801cc46:	b083      	sub	sp, #12
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	4603      	mov	r3, r0
 801cc4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801cc4e:	bf00      	nop
 801cc50:	370c      	adds	r7, #12
 801cc52:	46bd      	mov	sp, r7
 801cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc58:	4770      	bx	lr
	...

0801cc5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801cc5c:	b480      	push	{r7}
 801cc5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 801cc60:	4b04      	ldr	r3, [pc, #16]	@ (801cc74 <HAL_PWREx_GetVoltageRange+0x18>)
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 801cc68:	4618      	mov	r0, r3
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc70:	4770      	bx	lr
 801cc72:	bf00      	nop
 801cc74:	40007000 	.word	0x40007000

0801cc78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801cc78:	b480      	push	{r7}
 801cc7a:	b085      	sub	sp, #20
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cc86:	d130      	bne.n	801ccea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801cc88:	4b23      	ldr	r3, [pc, #140]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801cc90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cc94:	d038      	beq.n	801cd08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801cc96:	4b20      	ldr	r3, [pc, #128]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801cc9e:	4a1e      	ldr	r2, [pc, #120]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801cca0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801cca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801cca6:	4b1d      	ldr	r3, [pc, #116]	@ (801cd1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2232      	movs	r2, #50	@ 0x32
 801ccac:	fb02 f303 	mul.w	r3, r2, r3
 801ccb0:	4a1b      	ldr	r2, [pc, #108]	@ (801cd20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801ccb2:	fba2 2303 	umull	r2, r3, r2, r3
 801ccb6:	0c9b      	lsrs	r3, r3, #18
 801ccb8:	3301      	adds	r3, #1
 801ccba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ccbc:	e002      	b.n	801ccc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	3b01      	subs	r3, #1
 801ccc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ccc4:	4b14      	ldr	r3, [pc, #80]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801ccc6:	695b      	ldr	r3, [r3, #20]
 801ccc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801cccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ccd0:	d102      	bne.n	801ccd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d1f2      	bne.n	801ccbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ccd8:	4b0f      	ldr	r3, [pc, #60]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801ccda:	695b      	ldr	r3, [r3, #20]
 801ccdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801cce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cce4:	d110      	bne.n	801cd08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801cce6:	2303      	movs	r3, #3
 801cce8:	e00f      	b.n	801cd0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801ccea:	4b0b      	ldr	r3, [pc, #44]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801ccf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ccf6:	d007      	beq.n	801cd08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801ccf8:	4b07      	ldr	r3, [pc, #28]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801cd00:	4a05      	ldr	r2, [pc, #20]	@ (801cd18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801cd02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801cd06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801cd08:	2300      	movs	r3, #0
}
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	3714      	adds	r7, #20
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd14:	4770      	bx	lr
 801cd16:	bf00      	nop
 801cd18:	40007000 	.word	0x40007000
 801cd1c:	20000000 	.word	0x20000000
 801cd20:	431bde83 	.word	0x431bde83

0801cd24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b088      	sub	sp, #32
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d102      	bne.n	801cd38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801cd32:	2301      	movs	r3, #1
 801cd34:	f000 bc02 	b.w	801d53c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cd38:	4b96      	ldr	r3, [pc, #600]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cd3a:	689b      	ldr	r3, [r3, #8]
 801cd3c:	f003 030c 	and.w	r3, r3, #12
 801cd40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801cd42:	4b94      	ldr	r3, [pc, #592]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cd44:	68db      	ldr	r3, [r3, #12]
 801cd46:	f003 0303 	and.w	r3, r3, #3
 801cd4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	f003 0310 	and.w	r3, r3, #16
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	f000 80e4 	beq.w	801cf22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801cd5a:	69bb      	ldr	r3, [r7, #24]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d007      	beq.n	801cd70 <HAL_RCC_OscConfig+0x4c>
 801cd60:	69bb      	ldr	r3, [r7, #24]
 801cd62:	2b0c      	cmp	r3, #12
 801cd64:	f040 808b 	bne.w	801ce7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801cd68:	697b      	ldr	r3, [r7, #20]
 801cd6a:	2b01      	cmp	r3, #1
 801cd6c:	f040 8087 	bne.w	801ce7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801cd70:	4b88      	ldr	r3, [pc, #544]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	f003 0302 	and.w	r3, r3, #2
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d005      	beq.n	801cd88 <HAL_RCC_OscConfig+0x64>
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	699b      	ldr	r3, [r3, #24]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d101      	bne.n	801cd88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801cd84:	2301      	movs	r3, #1
 801cd86:	e3d9      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	6a1a      	ldr	r2, [r3, #32]
 801cd8c:	4b81      	ldr	r3, [pc, #516]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	f003 0308 	and.w	r3, r3, #8
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d004      	beq.n	801cda2 <HAL_RCC_OscConfig+0x7e>
 801cd98:	4b7e      	ldr	r3, [pc, #504]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cda0:	e005      	b.n	801cdae <HAL_RCC_OscConfig+0x8a>
 801cda2:	4b7c      	ldr	r3, [pc, #496]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cda4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801cda8:	091b      	lsrs	r3, r3, #4
 801cdaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cdae:	4293      	cmp	r3, r2
 801cdb0:	d223      	bcs.n	801cdfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	6a1b      	ldr	r3, [r3, #32]
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	f000 fd8c 	bl	801d8d4 <RCC_SetFlashLatencyFromMSIRange>
 801cdbc:	4603      	mov	r3, r0
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d001      	beq.n	801cdc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 801cdc2:	2301      	movs	r3, #1
 801cdc4:	e3ba      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801cdc6:	4b73      	ldr	r3, [pc, #460]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	4a72      	ldr	r2, [pc, #456]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cdcc:	f043 0308 	orr.w	r3, r3, #8
 801cdd0:	6013      	str	r3, [r2, #0]
 801cdd2:	4b70      	ldr	r3, [pc, #448]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	6a1b      	ldr	r3, [r3, #32]
 801cdde:	496d      	ldr	r1, [pc, #436]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cde0:	4313      	orrs	r3, r2
 801cde2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801cde4:	4b6b      	ldr	r3, [pc, #428]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cde6:	685b      	ldr	r3, [r3, #4]
 801cde8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	69db      	ldr	r3, [r3, #28]
 801cdf0:	021b      	lsls	r3, r3, #8
 801cdf2:	4968      	ldr	r1, [pc, #416]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cdf4:	4313      	orrs	r3, r2
 801cdf6:	604b      	str	r3, [r1, #4]
 801cdf8:	e025      	b.n	801ce46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801cdfa:	4b66      	ldr	r3, [pc, #408]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	4a65      	ldr	r2, [pc, #404]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce00:	f043 0308 	orr.w	r3, r3, #8
 801ce04:	6013      	str	r3, [r2, #0]
 801ce06:	4b63      	ldr	r3, [pc, #396]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	6a1b      	ldr	r3, [r3, #32]
 801ce12:	4960      	ldr	r1, [pc, #384]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce14:	4313      	orrs	r3, r2
 801ce16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801ce18:	4b5e      	ldr	r3, [pc, #376]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce1a:	685b      	ldr	r3, [r3, #4]
 801ce1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	69db      	ldr	r3, [r3, #28]
 801ce24:	021b      	lsls	r3, r3, #8
 801ce26:	495b      	ldr	r1, [pc, #364]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce28:	4313      	orrs	r3, r2
 801ce2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801ce2c:	69bb      	ldr	r3, [r7, #24]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d109      	bne.n	801ce46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	6a1b      	ldr	r3, [r3, #32]
 801ce36:	4618      	mov	r0, r3
 801ce38:	f000 fd4c 	bl	801d8d4 <RCC_SetFlashLatencyFromMSIRange>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d001      	beq.n	801ce46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 801ce42:	2301      	movs	r3, #1
 801ce44:	e37a      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801ce46:	f000 fc81 	bl	801d74c <HAL_RCC_GetSysClockFreq>
 801ce4a:	4602      	mov	r2, r0
 801ce4c:	4b51      	ldr	r3, [pc, #324]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce4e:	689b      	ldr	r3, [r3, #8]
 801ce50:	091b      	lsrs	r3, r3, #4
 801ce52:	f003 030f 	and.w	r3, r3, #15
 801ce56:	4950      	ldr	r1, [pc, #320]	@ (801cf98 <HAL_RCC_OscConfig+0x274>)
 801ce58:	5ccb      	ldrb	r3, [r1, r3]
 801ce5a:	f003 031f 	and.w	r3, r3, #31
 801ce5e:	fa22 f303 	lsr.w	r3, r2, r3
 801ce62:	4a4e      	ldr	r2, [pc, #312]	@ (801cf9c <HAL_RCC_OscConfig+0x278>)
 801ce64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801ce66:	4b4e      	ldr	r3, [pc, #312]	@ (801cfa0 <HAL_RCC_OscConfig+0x27c>)
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7ff fa3e 	bl	801c2ec <HAL_InitTick>
 801ce70:	4603      	mov	r3, r0
 801ce72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801ce74:	7bfb      	ldrb	r3, [r7, #15]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d052      	beq.n	801cf20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 801ce7a:	7bfb      	ldrb	r3, [r7, #15]
 801ce7c:	e35e      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	699b      	ldr	r3, [r3, #24]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d032      	beq.n	801ceec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801ce86:	4b43      	ldr	r3, [pc, #268]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	4a42      	ldr	r2, [pc, #264]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ce8c:	f043 0301 	orr.w	r3, r3, #1
 801ce90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801ce92:	f7ff fa7b 	bl	801c38c <HAL_GetTick>
 801ce96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801ce98:	e008      	b.n	801ceac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801ce9a:	f7ff fa77 	bl	801c38c <HAL_GetTick>
 801ce9e:	4602      	mov	r2, r0
 801cea0:	693b      	ldr	r3, [r7, #16]
 801cea2:	1ad3      	subs	r3, r2, r3
 801cea4:	2b02      	cmp	r3, #2
 801cea6:	d901      	bls.n	801ceac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 801cea8:	2303      	movs	r3, #3
 801ceaa:	e347      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801ceac:	4b39      	ldr	r3, [pc, #228]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	f003 0302 	and.w	r3, r3, #2
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d0f0      	beq.n	801ce9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801ceb8:	4b36      	ldr	r3, [pc, #216]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	4a35      	ldr	r2, [pc, #212]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cebe:	f043 0308 	orr.w	r3, r3, #8
 801cec2:	6013      	str	r3, [r2, #0]
 801cec4:	4b33      	ldr	r3, [pc, #204]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	6a1b      	ldr	r3, [r3, #32]
 801ced0:	4930      	ldr	r1, [pc, #192]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ced2:	4313      	orrs	r3, r2
 801ced4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801ced6:	4b2f      	ldr	r3, [pc, #188]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	69db      	ldr	r3, [r3, #28]
 801cee2:	021b      	lsls	r3, r3, #8
 801cee4:	492b      	ldr	r1, [pc, #172]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cee6:	4313      	orrs	r3, r2
 801cee8:	604b      	str	r3, [r1, #4]
 801ceea:	e01a      	b.n	801cf22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801ceec:	4b29      	ldr	r3, [pc, #164]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	4a28      	ldr	r2, [pc, #160]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cef2:	f023 0301 	bic.w	r3, r3, #1
 801cef6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801cef8:	f7ff fa48 	bl	801c38c <HAL_GetTick>
 801cefc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801cefe:	e008      	b.n	801cf12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801cf00:	f7ff fa44 	bl	801c38c <HAL_GetTick>
 801cf04:	4602      	mov	r2, r0
 801cf06:	693b      	ldr	r3, [r7, #16]
 801cf08:	1ad3      	subs	r3, r2, r3
 801cf0a:	2b02      	cmp	r3, #2
 801cf0c:	d901      	bls.n	801cf12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 801cf0e:	2303      	movs	r3, #3
 801cf10:	e314      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801cf12:	4b20      	ldr	r3, [pc, #128]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	f003 0302 	and.w	r3, r3, #2
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d1f0      	bne.n	801cf00 <HAL_RCC_OscConfig+0x1dc>
 801cf1e:	e000      	b.n	801cf22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801cf20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	f003 0301 	and.w	r3, r3, #1
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d073      	beq.n	801d016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801cf2e:	69bb      	ldr	r3, [r7, #24]
 801cf30:	2b08      	cmp	r3, #8
 801cf32:	d005      	beq.n	801cf40 <HAL_RCC_OscConfig+0x21c>
 801cf34:	69bb      	ldr	r3, [r7, #24]
 801cf36:	2b0c      	cmp	r3, #12
 801cf38:	d10e      	bne.n	801cf58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801cf3a:	697b      	ldr	r3, [r7, #20]
 801cf3c:	2b03      	cmp	r3, #3
 801cf3e:	d10b      	bne.n	801cf58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cf40:	4b14      	ldr	r3, [pc, #80]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	d063      	beq.n	801d014 <HAL_RCC_OscConfig+0x2f0>
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	685b      	ldr	r3, [r3, #4]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d15f      	bne.n	801d014 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801cf54:	2301      	movs	r3, #1
 801cf56:	e2f1      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	685b      	ldr	r3, [r3, #4]
 801cf5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cf60:	d106      	bne.n	801cf70 <HAL_RCC_OscConfig+0x24c>
 801cf62:	4b0c      	ldr	r3, [pc, #48]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	4a0b      	ldr	r2, [pc, #44]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cf6c:	6013      	str	r3, [r2, #0]
 801cf6e:	e025      	b.n	801cfbc <HAL_RCC_OscConfig+0x298>
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	685b      	ldr	r3, [r3, #4]
 801cf74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cf78:	d114      	bne.n	801cfa4 <HAL_RCC_OscConfig+0x280>
 801cf7a:	4b06      	ldr	r3, [pc, #24]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	4a05      	ldr	r2, [pc, #20]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cf84:	6013      	str	r3, [r2, #0]
 801cf86:	4b03      	ldr	r3, [pc, #12]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	4a02      	ldr	r2, [pc, #8]	@ (801cf94 <HAL_RCC_OscConfig+0x270>)
 801cf8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cf90:	6013      	str	r3, [r2, #0]
 801cf92:	e013      	b.n	801cfbc <HAL_RCC_OscConfig+0x298>
 801cf94:	40021000 	.word	0x40021000
 801cf98:	08026420 	.word	0x08026420
 801cf9c:	20000000 	.word	0x20000000
 801cfa0:	20000070 	.word	0x20000070
 801cfa4:	4ba0      	ldr	r3, [pc, #640]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	4a9f      	ldr	r2, [pc, #636]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801cfaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cfae:	6013      	str	r3, [r2, #0]
 801cfb0:	4b9d      	ldr	r3, [pc, #628]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	4a9c      	ldr	r2, [pc, #624]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801cfb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cfba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	685b      	ldr	r3, [r3, #4]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d013      	beq.n	801cfec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cfc4:	f7ff f9e2 	bl	801c38c <HAL_GetTick>
 801cfc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cfca:	e008      	b.n	801cfde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cfcc:	f7ff f9de 	bl	801c38c <HAL_GetTick>
 801cfd0:	4602      	mov	r2, r0
 801cfd2:	693b      	ldr	r3, [r7, #16]
 801cfd4:	1ad3      	subs	r3, r2, r3
 801cfd6:	2b64      	cmp	r3, #100	@ 0x64
 801cfd8:	d901      	bls.n	801cfde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801cfda:	2303      	movs	r3, #3
 801cfdc:	e2ae      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cfde:	4b92      	ldr	r3, [pc, #584]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d0f0      	beq.n	801cfcc <HAL_RCC_OscConfig+0x2a8>
 801cfea:	e014      	b.n	801d016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cfec:	f7ff f9ce 	bl	801c38c <HAL_GetTick>
 801cff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801cff2:	e008      	b.n	801d006 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cff4:	f7ff f9ca 	bl	801c38c <HAL_GetTick>
 801cff8:	4602      	mov	r2, r0
 801cffa:	693b      	ldr	r3, [r7, #16]
 801cffc:	1ad3      	subs	r3, r2, r3
 801cffe:	2b64      	cmp	r3, #100	@ 0x64
 801d000:	d901      	bls.n	801d006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801d002:	2303      	movs	r3, #3
 801d004:	e29a      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801d006:	4b88      	ldr	r3, [pc, #544]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d1f0      	bne.n	801cff4 <HAL_RCC_OscConfig+0x2d0>
 801d012:	e000      	b.n	801d016 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	f003 0302 	and.w	r3, r3, #2
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d060      	beq.n	801d0e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801d022:	69bb      	ldr	r3, [r7, #24]
 801d024:	2b04      	cmp	r3, #4
 801d026:	d005      	beq.n	801d034 <HAL_RCC_OscConfig+0x310>
 801d028:	69bb      	ldr	r3, [r7, #24]
 801d02a:	2b0c      	cmp	r3, #12
 801d02c:	d119      	bne.n	801d062 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801d02e:	697b      	ldr	r3, [r7, #20]
 801d030:	2b02      	cmp	r3, #2
 801d032:	d116      	bne.n	801d062 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d034:	4b7c      	ldr	r3, [pc, #496]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d005      	beq.n	801d04c <HAL_RCC_OscConfig+0x328>
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	68db      	ldr	r3, [r3, #12]
 801d044:	2b00      	cmp	r3, #0
 801d046:	d101      	bne.n	801d04c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801d048:	2301      	movs	r3, #1
 801d04a:	e277      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d04c:	4b76      	ldr	r3, [pc, #472]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d04e:	685b      	ldr	r3, [r3, #4]
 801d050:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	691b      	ldr	r3, [r3, #16]
 801d058:	061b      	lsls	r3, r3, #24
 801d05a:	4973      	ldr	r1, [pc, #460]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d05c:	4313      	orrs	r3, r2
 801d05e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d060:	e040      	b.n	801d0e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	68db      	ldr	r3, [r3, #12]
 801d066:	2b00      	cmp	r3, #0
 801d068:	d023      	beq.n	801d0b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801d06a:	4b6f      	ldr	r3, [pc, #444]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	4a6e      	ldr	r2, [pc, #440]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d076:	f7ff f989 	bl	801c38c <HAL_GetTick>
 801d07a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d07c:	e008      	b.n	801d090 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d07e:	f7ff f985 	bl	801c38c <HAL_GetTick>
 801d082:	4602      	mov	r2, r0
 801d084:	693b      	ldr	r3, [r7, #16]
 801d086:	1ad3      	subs	r3, r2, r3
 801d088:	2b02      	cmp	r3, #2
 801d08a:	d901      	bls.n	801d090 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 801d08c:	2303      	movs	r3, #3
 801d08e:	e255      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d090:	4b65      	ldr	r3, [pc, #404]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d0f0      	beq.n	801d07e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d09c:	4b62      	ldr	r3, [pc, #392]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d09e:	685b      	ldr	r3, [r3, #4]
 801d0a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	691b      	ldr	r3, [r3, #16]
 801d0a8:	061b      	lsls	r3, r3, #24
 801d0aa:	495f      	ldr	r1, [pc, #380]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d0ac:	4313      	orrs	r3, r2
 801d0ae:	604b      	str	r3, [r1, #4]
 801d0b0:	e018      	b.n	801d0e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d0b2:	4b5d      	ldr	r3, [pc, #372]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	4a5c      	ldr	r2, [pc, #368]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d0b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d0bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0be:	f7ff f965 	bl	801c38c <HAL_GetTick>
 801d0c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801d0c4:	e008      	b.n	801d0d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d0c6:	f7ff f961 	bl	801c38c <HAL_GetTick>
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	693b      	ldr	r3, [r7, #16]
 801d0ce:	1ad3      	subs	r3, r2, r3
 801d0d0:	2b02      	cmp	r3, #2
 801d0d2:	d901      	bls.n	801d0d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801d0d4:	2303      	movs	r3, #3
 801d0d6:	e231      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801d0d8:	4b53      	ldr	r3, [pc, #332]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d1f0      	bne.n	801d0c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	f003 0308 	and.w	r3, r3, #8
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d03c      	beq.n	801d16a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	695b      	ldr	r3, [r3, #20]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d01c      	beq.n	801d132 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d0f8:	4b4b      	ldr	r3, [pc, #300]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d0fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d0fe:	4a4a      	ldr	r2, [pc, #296]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d100:	f043 0301 	orr.w	r3, r3, #1
 801d104:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d108:	f7ff f940 	bl	801c38c <HAL_GetTick>
 801d10c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801d10e:	e008      	b.n	801d122 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d110:	f7ff f93c 	bl	801c38c <HAL_GetTick>
 801d114:	4602      	mov	r2, r0
 801d116:	693b      	ldr	r3, [r7, #16]
 801d118:	1ad3      	subs	r3, r2, r3
 801d11a:	2b02      	cmp	r3, #2
 801d11c:	d901      	bls.n	801d122 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801d11e:	2303      	movs	r3, #3
 801d120:	e20c      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801d122:	4b41      	ldr	r3, [pc, #260]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d128:	f003 0302 	and.w	r3, r3, #2
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d0ef      	beq.n	801d110 <HAL_RCC_OscConfig+0x3ec>
 801d130:	e01b      	b.n	801d16a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d132:	4b3d      	ldr	r3, [pc, #244]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d138:	4a3b      	ldr	r2, [pc, #236]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d13a:	f023 0301 	bic.w	r3, r3, #1
 801d13e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d142:	f7ff f923 	bl	801c38c <HAL_GetTick>
 801d146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801d148:	e008      	b.n	801d15c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d14a:	f7ff f91f 	bl	801c38c <HAL_GetTick>
 801d14e:	4602      	mov	r2, r0
 801d150:	693b      	ldr	r3, [r7, #16]
 801d152:	1ad3      	subs	r3, r2, r3
 801d154:	2b02      	cmp	r3, #2
 801d156:	d901      	bls.n	801d15c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801d158:	2303      	movs	r3, #3
 801d15a:	e1ef      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801d15c:	4b32      	ldr	r3, [pc, #200]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d15e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d162:	f003 0302 	and.w	r3, r3, #2
 801d166:	2b00      	cmp	r3, #0
 801d168:	d1ef      	bne.n	801d14a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	f003 0304 	and.w	r3, r3, #4
 801d172:	2b00      	cmp	r3, #0
 801d174:	f000 80a6 	beq.w	801d2c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d178:	2300      	movs	r3, #0
 801d17a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801d17c:	4b2a      	ldr	r3, [pc, #168]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d17e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d184:	2b00      	cmp	r3, #0
 801d186:	d10d      	bne.n	801d1a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d188:	4b27      	ldr	r3, [pc, #156]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d18c:	4a26      	ldr	r2, [pc, #152]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d18e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d192:	6593      	str	r3, [r2, #88]	@ 0x58
 801d194:	4b24      	ldr	r3, [pc, #144]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d19c:	60bb      	str	r3, [r7, #8]
 801d19e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d1a0:	2301      	movs	r3, #1
 801d1a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d1a4:	4b21      	ldr	r3, [pc, #132]	@ (801d22c <HAL_RCC_OscConfig+0x508>)
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d118      	bne.n	801d1e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d1b0:	4b1e      	ldr	r3, [pc, #120]	@ (801d22c <HAL_RCC_OscConfig+0x508>)
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	4a1d      	ldr	r2, [pc, #116]	@ (801d22c <HAL_RCC_OscConfig+0x508>)
 801d1b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d1ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801d1bc:	f7ff f8e6 	bl	801c38c <HAL_GetTick>
 801d1c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d1c2:	e008      	b.n	801d1d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d1c4:	f7ff f8e2 	bl	801c38c <HAL_GetTick>
 801d1c8:	4602      	mov	r2, r0
 801d1ca:	693b      	ldr	r3, [r7, #16]
 801d1cc:	1ad3      	subs	r3, r2, r3
 801d1ce:	2b02      	cmp	r3, #2
 801d1d0:	d901      	bls.n	801d1d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801d1d2:	2303      	movs	r3, #3
 801d1d4:	e1b2      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d1d6:	4b15      	ldr	r3, [pc, #84]	@ (801d22c <HAL_RCC_OscConfig+0x508>)
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d0f0      	beq.n	801d1c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	689b      	ldr	r3, [r3, #8]
 801d1e6:	2b01      	cmp	r3, #1
 801d1e8:	d108      	bne.n	801d1fc <HAL_RCC_OscConfig+0x4d8>
 801d1ea:	4b0f      	ldr	r3, [pc, #60]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d1f0:	4a0d      	ldr	r2, [pc, #52]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d1f2:	f043 0301 	orr.w	r3, r3, #1
 801d1f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801d1fa:	e029      	b.n	801d250 <HAL_RCC_OscConfig+0x52c>
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	689b      	ldr	r3, [r3, #8]
 801d200:	2b05      	cmp	r3, #5
 801d202:	d115      	bne.n	801d230 <HAL_RCC_OscConfig+0x50c>
 801d204:	4b08      	ldr	r3, [pc, #32]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d20a:	4a07      	ldr	r2, [pc, #28]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d20c:	f043 0304 	orr.w	r3, r3, #4
 801d210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801d214:	4b04      	ldr	r3, [pc, #16]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d21a:	4a03      	ldr	r2, [pc, #12]	@ (801d228 <HAL_RCC_OscConfig+0x504>)
 801d21c:	f043 0301 	orr.w	r3, r3, #1
 801d220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801d224:	e014      	b.n	801d250 <HAL_RCC_OscConfig+0x52c>
 801d226:	bf00      	nop
 801d228:	40021000 	.word	0x40021000
 801d22c:	40007000 	.word	0x40007000
 801d230:	4b9a      	ldr	r3, [pc, #616]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d236:	4a99      	ldr	r2, [pc, #612]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d238:	f023 0301 	bic.w	r3, r3, #1
 801d23c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801d240:	4b96      	ldr	r3, [pc, #600]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d246:	4a95      	ldr	r2, [pc, #596]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d248:	f023 0304 	bic.w	r3, r3, #4
 801d24c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	689b      	ldr	r3, [r3, #8]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d016      	beq.n	801d286 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d258:	f7ff f898 	bl	801c38c <HAL_GetTick>
 801d25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d25e:	e00a      	b.n	801d276 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d260:	f7ff f894 	bl	801c38c <HAL_GetTick>
 801d264:	4602      	mov	r2, r0
 801d266:	693b      	ldr	r3, [r7, #16]
 801d268:	1ad3      	subs	r3, r2, r3
 801d26a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d26e:	4293      	cmp	r3, r2
 801d270:	d901      	bls.n	801d276 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801d272:	2303      	movs	r3, #3
 801d274:	e162      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d276:	4b89      	ldr	r3, [pc, #548]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d27c:	f003 0302 	and.w	r3, r3, #2
 801d280:	2b00      	cmp	r3, #0
 801d282:	d0ed      	beq.n	801d260 <HAL_RCC_OscConfig+0x53c>
 801d284:	e015      	b.n	801d2b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d286:	f7ff f881 	bl	801c38c <HAL_GetTick>
 801d28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801d28c:	e00a      	b.n	801d2a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d28e:	f7ff f87d 	bl	801c38c <HAL_GetTick>
 801d292:	4602      	mov	r2, r0
 801d294:	693b      	ldr	r3, [r7, #16]
 801d296:	1ad3      	subs	r3, r2, r3
 801d298:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d29c:	4293      	cmp	r3, r2
 801d29e:	d901      	bls.n	801d2a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801d2a0:	2303      	movs	r3, #3
 801d2a2:	e14b      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801d2a4:	4b7d      	ldr	r3, [pc, #500]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d2aa:	f003 0302 	and.w	r3, r3, #2
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d1ed      	bne.n	801d28e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801d2b2:	7ffb      	ldrb	r3, [r7, #31]
 801d2b4:	2b01      	cmp	r3, #1
 801d2b6:	d105      	bne.n	801d2c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d2b8:	4b78      	ldr	r3, [pc, #480]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d2ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d2bc:	4a77      	ldr	r2, [pc, #476]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d2be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d2c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	f003 0320 	and.w	r3, r3, #32
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	d03c      	beq.n	801d34a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d01c      	beq.n	801d312 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d2d8:	4b70      	ldr	r3, [pc, #448]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d2da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d2de:	4a6f      	ldr	r2, [pc, #444]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d2e0:	f043 0301 	orr.w	r3, r3, #1
 801d2e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d2e8:	f7ff f850 	bl	801c38c <HAL_GetTick>
 801d2ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801d2ee:	e008      	b.n	801d302 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d2f0:	f7ff f84c 	bl	801c38c <HAL_GetTick>
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	693b      	ldr	r3, [r7, #16]
 801d2f8:	1ad3      	subs	r3, r2, r3
 801d2fa:	2b02      	cmp	r3, #2
 801d2fc:	d901      	bls.n	801d302 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 801d2fe:	2303      	movs	r3, #3
 801d300:	e11c      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801d302:	4b66      	ldr	r3, [pc, #408]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d308:	f003 0302 	and.w	r3, r3, #2
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	d0ef      	beq.n	801d2f0 <HAL_RCC_OscConfig+0x5cc>
 801d310:	e01b      	b.n	801d34a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d312:	4b62      	ldr	r3, [pc, #392]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d318:	4a60      	ldr	r2, [pc, #384]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d31a:	f023 0301 	bic.w	r3, r3, #1
 801d31e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d322:	f7ff f833 	bl	801c38c <HAL_GetTick>
 801d326:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801d328:	e008      	b.n	801d33c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d32a:	f7ff f82f 	bl	801c38c <HAL_GetTick>
 801d32e:	4602      	mov	r2, r0
 801d330:	693b      	ldr	r3, [r7, #16]
 801d332:	1ad3      	subs	r3, r2, r3
 801d334:	2b02      	cmp	r3, #2
 801d336:	d901      	bls.n	801d33c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 801d338:	2303      	movs	r3, #3
 801d33a:	e0ff      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801d33c:	4b57      	ldr	r3, [pc, #348]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d33e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d342:	f003 0302 	and.w	r3, r3, #2
 801d346:	2b00      	cmp	r3, #0
 801d348:	d1ef      	bne.n	801d32a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d34e:	2b00      	cmp	r3, #0
 801d350:	f000 80f3 	beq.w	801d53a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d358:	2b02      	cmp	r3, #2
 801d35a:	f040 80c9 	bne.w	801d4f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801d35e:	4b4f      	ldr	r3, [pc, #316]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d360:	68db      	ldr	r3, [r3, #12]
 801d362:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801d364:	697b      	ldr	r3, [r7, #20]
 801d366:	f003 0203 	and.w	r2, r3, #3
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d36e:	429a      	cmp	r2, r3
 801d370:	d12c      	bne.n	801d3cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d372:	697b      	ldr	r3, [r7, #20]
 801d374:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d37c:	3b01      	subs	r3, #1
 801d37e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801d380:	429a      	cmp	r2, r3
 801d382:	d123      	bne.n	801d3cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d384:	697b      	ldr	r3, [r7, #20]
 801d386:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d38e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d390:	429a      	cmp	r2, r3
 801d392:	d11b      	bne.n	801d3cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d394:	697b      	ldr	r3, [r7, #20]
 801d396:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d39e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d3a0:	429a      	cmp	r2, r3
 801d3a2:	d113      	bne.n	801d3cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d3a4:	697b      	ldr	r3, [r7, #20]
 801d3a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d3ae:	085b      	lsrs	r3, r3, #1
 801d3b0:	3b01      	subs	r3, #1
 801d3b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	d109      	bne.n	801d3cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d3c2:	085b      	lsrs	r3, r3, #1
 801d3c4:	3b01      	subs	r3, #1
 801d3c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d3c8:	429a      	cmp	r2, r3
 801d3ca:	d06b      	beq.n	801d4a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801d3cc:	69bb      	ldr	r3, [r7, #24]
 801d3ce:	2b0c      	cmp	r3, #12
 801d3d0:	d062      	beq.n	801d498 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801d3d2:	4b32      	ldr	r3, [pc, #200]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d001      	beq.n	801d3e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 801d3de:	2301      	movs	r3, #1
 801d3e0:	e0ac      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801d3e2:	4b2e      	ldr	r3, [pc, #184]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	4a2d      	ldr	r2, [pc, #180]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d3e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d3ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801d3ee:	f7fe ffcd 	bl	801c38c <HAL_GetTick>
 801d3f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d3f4:	e008      	b.n	801d408 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d3f6:	f7fe ffc9 	bl	801c38c <HAL_GetTick>
 801d3fa:	4602      	mov	r2, r0
 801d3fc:	693b      	ldr	r3, [r7, #16]
 801d3fe:	1ad3      	subs	r3, r2, r3
 801d400:	2b02      	cmp	r3, #2
 801d402:	d901      	bls.n	801d408 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 801d404:	2303      	movs	r3, #3
 801d406:	e099      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d408:	4b24      	ldr	r3, [pc, #144]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d410:	2b00      	cmp	r3, #0
 801d412:	d1f0      	bne.n	801d3f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d414:	4b21      	ldr	r3, [pc, #132]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d416:	68da      	ldr	r2, [r3, #12]
 801d418:	4b21      	ldr	r3, [pc, #132]	@ (801d4a0 <HAL_RCC_OscConfig+0x77c>)
 801d41a:	4013      	ands	r3, r2
 801d41c:	687a      	ldr	r2, [r7, #4]
 801d41e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 801d420:	687a      	ldr	r2, [r7, #4]
 801d422:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d424:	3a01      	subs	r2, #1
 801d426:	0112      	lsls	r2, r2, #4
 801d428:	4311      	orrs	r1, r2
 801d42a:	687a      	ldr	r2, [r7, #4]
 801d42c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801d42e:	0212      	lsls	r2, r2, #8
 801d430:	4311      	orrs	r1, r2
 801d432:	687a      	ldr	r2, [r7, #4]
 801d434:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801d436:	0852      	lsrs	r2, r2, #1
 801d438:	3a01      	subs	r2, #1
 801d43a:	0552      	lsls	r2, r2, #21
 801d43c:	4311      	orrs	r1, r2
 801d43e:	687a      	ldr	r2, [r7, #4]
 801d440:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801d442:	0852      	lsrs	r2, r2, #1
 801d444:	3a01      	subs	r2, #1
 801d446:	0652      	lsls	r2, r2, #25
 801d448:	4311      	orrs	r1, r2
 801d44a:	687a      	ldr	r2, [r7, #4]
 801d44c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801d44e:	06d2      	lsls	r2, r2, #27
 801d450:	430a      	orrs	r2, r1
 801d452:	4912      	ldr	r1, [pc, #72]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d454:	4313      	orrs	r3, r2
 801d456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801d458:	4b10      	ldr	r3, [pc, #64]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	4a0f      	ldr	r2, [pc, #60]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d45e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801d464:	4b0d      	ldr	r3, [pc, #52]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d466:	68db      	ldr	r3, [r3, #12]
 801d468:	4a0c      	ldr	r2, [pc, #48]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d46a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d46e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801d470:	f7fe ff8c 	bl	801c38c <HAL_GetTick>
 801d474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d476:	e008      	b.n	801d48a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d478:	f7fe ff88 	bl	801c38c <HAL_GetTick>
 801d47c:	4602      	mov	r2, r0
 801d47e:	693b      	ldr	r3, [r7, #16]
 801d480:	1ad3      	subs	r3, r2, r3
 801d482:	2b02      	cmp	r3, #2
 801d484:	d901      	bls.n	801d48a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 801d486:	2303      	movs	r3, #3
 801d488:	e058      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d48a:	4b04      	ldr	r3, [pc, #16]	@ (801d49c <HAL_RCC_OscConfig+0x778>)
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d492:	2b00      	cmp	r3, #0
 801d494:	d0f0      	beq.n	801d478 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801d496:	e050      	b.n	801d53a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801d498:	2301      	movs	r3, #1
 801d49a:	e04f      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
 801d49c:	40021000 	.word	0x40021000
 801d4a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d4a4:	4b27      	ldr	r3, [pc, #156]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d144      	bne.n	801d53a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801d4b0:	4b24      	ldr	r3, [pc, #144]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	4a23      	ldr	r2, [pc, #140]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d4ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801d4bc:	4b21      	ldr	r3, [pc, #132]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4be:	68db      	ldr	r3, [r3, #12]
 801d4c0:	4a20      	ldr	r2, [pc, #128]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d4c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d4c8:	f7fe ff60 	bl	801c38c <HAL_GetTick>
 801d4cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d4ce:	e008      	b.n	801d4e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d4d0:	f7fe ff5c 	bl	801c38c <HAL_GetTick>
 801d4d4:	4602      	mov	r2, r0
 801d4d6:	693b      	ldr	r3, [r7, #16]
 801d4d8:	1ad3      	subs	r3, r2, r3
 801d4da:	2b02      	cmp	r3, #2
 801d4dc:	d901      	bls.n	801d4e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 801d4de:	2303      	movs	r3, #3
 801d4e0:	e02c      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d4e2:	4b18      	ldr	r3, [pc, #96]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d0f0      	beq.n	801d4d0 <HAL_RCC_OscConfig+0x7ac>
 801d4ee:	e024      	b.n	801d53a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801d4f0:	69bb      	ldr	r3, [r7, #24]
 801d4f2:	2b0c      	cmp	r3, #12
 801d4f4:	d01f      	beq.n	801d536 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d4f6:	4b13      	ldr	r3, [pc, #76]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	4a12      	ldr	r2, [pc, #72]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d4fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d502:	f7fe ff43 	bl	801c38c <HAL_GetTick>
 801d506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d508:	e008      	b.n	801d51c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d50a:	f7fe ff3f 	bl	801c38c <HAL_GetTick>
 801d50e:	4602      	mov	r2, r0
 801d510:	693b      	ldr	r3, [r7, #16]
 801d512:	1ad3      	subs	r3, r2, r3
 801d514:	2b02      	cmp	r3, #2
 801d516:	d901      	bls.n	801d51c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 801d518:	2303      	movs	r3, #3
 801d51a:	e00f      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d51c:	4b09      	ldr	r3, [pc, #36]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d524:	2b00      	cmp	r3, #0
 801d526:	d1f0      	bne.n	801d50a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801d528:	4b06      	ldr	r3, [pc, #24]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d52a:	68da      	ldr	r2, [r3, #12]
 801d52c:	4905      	ldr	r1, [pc, #20]	@ (801d544 <HAL_RCC_OscConfig+0x820>)
 801d52e:	4b06      	ldr	r3, [pc, #24]	@ (801d548 <HAL_RCC_OscConfig+0x824>)
 801d530:	4013      	ands	r3, r2
 801d532:	60cb      	str	r3, [r1, #12]
 801d534:	e001      	b.n	801d53a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801d536:	2301      	movs	r3, #1
 801d538:	e000      	b.n	801d53c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 801d53a:	2300      	movs	r3, #0
}
 801d53c:	4618      	mov	r0, r3
 801d53e:	3720      	adds	r7, #32
 801d540:	46bd      	mov	sp, r7
 801d542:	bd80      	pop	{r7, pc}
 801d544:	40021000 	.word	0x40021000
 801d548:	feeefffc 	.word	0xfeeefffc

0801d54c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b084      	sub	sp, #16
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
 801d554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d101      	bne.n	801d560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d55c:	2301      	movs	r3, #1
 801d55e:	e0e7      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801d560:	4b75      	ldr	r3, [pc, #468]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	f003 0307 	and.w	r3, r3, #7
 801d568:	683a      	ldr	r2, [r7, #0]
 801d56a:	429a      	cmp	r2, r3
 801d56c:	d910      	bls.n	801d590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d56e:	4b72      	ldr	r3, [pc, #456]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	f023 0207 	bic.w	r2, r3, #7
 801d576:	4970      	ldr	r1, [pc, #448]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d578:	683b      	ldr	r3, [r7, #0]
 801d57a:	4313      	orrs	r3, r2
 801d57c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801d57e:	4b6e      	ldr	r3, [pc, #440]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	f003 0307 	and.w	r3, r3, #7
 801d586:	683a      	ldr	r2, [r7, #0]
 801d588:	429a      	cmp	r2, r3
 801d58a:	d001      	beq.n	801d590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d58c:	2301      	movs	r3, #1
 801d58e:	e0cf      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	f003 0302 	and.w	r3, r3, #2
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d010      	beq.n	801d5be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	689a      	ldr	r2, [r3, #8]
 801d5a0:	4b66      	ldr	r3, [pc, #408]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d5a2:	689b      	ldr	r3, [r3, #8]
 801d5a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d5a8:	429a      	cmp	r2, r3
 801d5aa:	d908      	bls.n	801d5be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d5ac:	4b63      	ldr	r3, [pc, #396]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d5ae:	689b      	ldr	r3, [r3, #8]
 801d5b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	689b      	ldr	r3, [r3, #8]
 801d5b8:	4960      	ldr	r1, [pc, #384]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d5ba:	4313      	orrs	r3, r2
 801d5bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	f003 0301 	and.w	r3, r3, #1
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d04c      	beq.n	801d664 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	685b      	ldr	r3, [r3, #4]
 801d5ce:	2b03      	cmp	r3, #3
 801d5d0:	d107      	bne.n	801d5e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d5d2:	4b5a      	ldr	r3, [pc, #360]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d121      	bne.n	801d622 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801d5de:	2301      	movs	r3, #1
 801d5e0:	e0a6      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	685b      	ldr	r3, [r3, #4]
 801d5e6:	2b02      	cmp	r3, #2
 801d5e8:	d107      	bne.n	801d5fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801d5ea:	4b54      	ldr	r3, [pc, #336]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d115      	bne.n	801d622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801d5f6:	2301      	movs	r3, #1
 801d5f8:	e09a      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	685b      	ldr	r3, [r3, #4]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d107      	bne.n	801d612 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801d602:	4b4e      	ldr	r3, [pc, #312]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	f003 0302 	and.w	r3, r3, #2
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d109      	bne.n	801d622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801d60e:	2301      	movs	r3, #1
 801d610:	e08e      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d612:	4b4a      	ldr	r3, [pc, #296]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d101      	bne.n	801d622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801d61e:	2301      	movs	r3, #1
 801d620:	e086      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d622:	4b46      	ldr	r3, [pc, #280]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d624:	689b      	ldr	r3, [r3, #8]
 801d626:	f023 0203 	bic.w	r2, r3, #3
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	685b      	ldr	r3, [r3, #4]
 801d62e:	4943      	ldr	r1, [pc, #268]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d630:	4313      	orrs	r3, r2
 801d632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d634:	f7fe feaa 	bl	801c38c <HAL_GetTick>
 801d638:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d63a:	e00a      	b.n	801d652 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d63c:	f7fe fea6 	bl	801c38c <HAL_GetTick>
 801d640:	4602      	mov	r2, r0
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	1ad3      	subs	r3, r2, r3
 801d646:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d64a:	4293      	cmp	r3, r2
 801d64c:	d901      	bls.n	801d652 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801d64e:	2303      	movs	r3, #3
 801d650:	e06e      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d652:	4b3a      	ldr	r3, [pc, #232]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d654:	689b      	ldr	r3, [r3, #8]
 801d656:	f003 020c 	and.w	r2, r3, #12
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	685b      	ldr	r3, [r3, #4]
 801d65e:	009b      	lsls	r3, r3, #2
 801d660:	429a      	cmp	r2, r3
 801d662:	d1eb      	bne.n	801d63c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	f003 0302 	and.w	r3, r3, #2
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d010      	beq.n	801d692 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	689a      	ldr	r2, [r3, #8]
 801d674:	4b31      	ldr	r3, [pc, #196]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d676:	689b      	ldr	r3, [r3, #8]
 801d678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d208      	bcs.n	801d692 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d680:	4b2e      	ldr	r3, [pc, #184]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d682:	689b      	ldr	r3, [r3, #8]
 801d684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	689b      	ldr	r3, [r3, #8]
 801d68c:	492b      	ldr	r1, [pc, #172]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d68e:	4313      	orrs	r3, r2
 801d690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801d692:	4b29      	ldr	r3, [pc, #164]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	f003 0307 	and.w	r3, r3, #7
 801d69a:	683a      	ldr	r2, [r7, #0]
 801d69c:	429a      	cmp	r2, r3
 801d69e:	d210      	bcs.n	801d6c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d6a0:	4b25      	ldr	r3, [pc, #148]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	f023 0207 	bic.w	r2, r3, #7
 801d6a8:	4923      	ldr	r1, [pc, #140]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d6aa:	683b      	ldr	r3, [r7, #0]
 801d6ac:	4313      	orrs	r3, r2
 801d6ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801d6b0:	4b21      	ldr	r3, [pc, #132]	@ (801d738 <HAL_RCC_ClockConfig+0x1ec>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	f003 0307 	and.w	r3, r3, #7
 801d6b8:	683a      	ldr	r2, [r7, #0]
 801d6ba:	429a      	cmp	r2, r3
 801d6bc:	d001      	beq.n	801d6c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801d6be:	2301      	movs	r3, #1
 801d6c0:	e036      	b.n	801d730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	f003 0304 	and.w	r3, r3, #4
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d008      	beq.n	801d6e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d6ce:	4b1b      	ldr	r3, [pc, #108]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d6d0:	689b      	ldr	r3, [r3, #8]
 801d6d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	68db      	ldr	r3, [r3, #12]
 801d6da:	4918      	ldr	r1, [pc, #96]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d6dc:	4313      	orrs	r3, r2
 801d6de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	f003 0308 	and.w	r3, r3, #8
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d009      	beq.n	801d700 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801d6ec:	4b13      	ldr	r3, [pc, #76]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d6ee:	689b      	ldr	r3, [r3, #8]
 801d6f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	691b      	ldr	r3, [r3, #16]
 801d6f8:	00db      	lsls	r3, r3, #3
 801d6fa:	4910      	ldr	r1, [pc, #64]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d6fc:	4313      	orrs	r3, r2
 801d6fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801d700:	f000 f824 	bl	801d74c <HAL_RCC_GetSysClockFreq>
 801d704:	4602      	mov	r2, r0
 801d706:	4b0d      	ldr	r3, [pc, #52]	@ (801d73c <HAL_RCC_ClockConfig+0x1f0>)
 801d708:	689b      	ldr	r3, [r3, #8]
 801d70a:	091b      	lsrs	r3, r3, #4
 801d70c:	f003 030f 	and.w	r3, r3, #15
 801d710:	490b      	ldr	r1, [pc, #44]	@ (801d740 <HAL_RCC_ClockConfig+0x1f4>)
 801d712:	5ccb      	ldrb	r3, [r1, r3]
 801d714:	f003 031f 	and.w	r3, r3, #31
 801d718:	fa22 f303 	lsr.w	r3, r2, r3
 801d71c:	4a09      	ldr	r2, [pc, #36]	@ (801d744 <HAL_RCC_ClockConfig+0x1f8>)
 801d71e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801d720:	4b09      	ldr	r3, [pc, #36]	@ (801d748 <HAL_RCC_ClockConfig+0x1fc>)
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	4618      	mov	r0, r3
 801d726:	f7fe fde1 	bl	801c2ec <HAL_InitTick>
 801d72a:	4603      	mov	r3, r0
 801d72c:	72fb      	strb	r3, [r7, #11]

  return status;
 801d72e:	7afb      	ldrb	r3, [r7, #11]
}
 801d730:	4618      	mov	r0, r3
 801d732:	3710      	adds	r7, #16
 801d734:	46bd      	mov	sp, r7
 801d736:	bd80      	pop	{r7, pc}
 801d738:	40022000 	.word	0x40022000
 801d73c:	40021000 	.word	0x40021000
 801d740:	08026420 	.word	0x08026420
 801d744:	20000000 	.word	0x20000000
 801d748:	20000070 	.word	0x20000070

0801d74c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d74c:	b480      	push	{r7}
 801d74e:	b089      	sub	sp, #36	@ 0x24
 801d750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801d752:	2300      	movs	r3, #0
 801d754:	61fb      	str	r3, [r7, #28]
 801d756:	2300      	movs	r3, #0
 801d758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d75a:	4b3e      	ldr	r3, [pc, #248]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d75c:	689b      	ldr	r3, [r3, #8]
 801d75e:	f003 030c 	and.w	r3, r3, #12
 801d762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801d764:	4b3b      	ldr	r3, [pc, #236]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d766:	68db      	ldr	r3, [r3, #12]
 801d768:	f003 0303 	and.w	r3, r3, #3
 801d76c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801d76e:	693b      	ldr	r3, [r7, #16]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d005      	beq.n	801d780 <HAL_RCC_GetSysClockFreq+0x34>
 801d774:	693b      	ldr	r3, [r7, #16]
 801d776:	2b0c      	cmp	r3, #12
 801d778:	d121      	bne.n	801d7be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	2b01      	cmp	r3, #1
 801d77e:	d11e      	bne.n	801d7be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801d780:	4b34      	ldr	r3, [pc, #208]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	f003 0308 	and.w	r3, r3, #8
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d107      	bne.n	801d79c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801d78c:	4b31      	ldr	r3, [pc, #196]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d792:	0a1b      	lsrs	r3, r3, #8
 801d794:	f003 030f 	and.w	r3, r3, #15
 801d798:	61fb      	str	r3, [r7, #28]
 801d79a:	e005      	b.n	801d7a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801d79c:	4b2d      	ldr	r3, [pc, #180]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	091b      	lsrs	r3, r3, #4
 801d7a2:	f003 030f 	and.w	r3, r3, #15
 801d7a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801d7a8:	4a2b      	ldr	r2, [pc, #172]	@ (801d858 <HAL_RCC_GetSysClockFreq+0x10c>)
 801d7aa:	69fb      	ldr	r3, [r7, #28]
 801d7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d7b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801d7b2:	693b      	ldr	r3, [r7, #16]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d10d      	bne.n	801d7d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801d7b8:	69fb      	ldr	r3, [r7, #28]
 801d7ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801d7bc:	e00a      	b.n	801d7d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801d7be:	693b      	ldr	r3, [r7, #16]
 801d7c0:	2b04      	cmp	r3, #4
 801d7c2:	d102      	bne.n	801d7ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801d7c4:	4b25      	ldr	r3, [pc, #148]	@ (801d85c <HAL_RCC_GetSysClockFreq+0x110>)
 801d7c6:	61bb      	str	r3, [r7, #24]
 801d7c8:	e004      	b.n	801d7d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801d7ca:	693b      	ldr	r3, [r7, #16]
 801d7cc:	2b08      	cmp	r3, #8
 801d7ce:	d101      	bne.n	801d7d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801d7d0:	4b23      	ldr	r3, [pc, #140]	@ (801d860 <HAL_RCC_GetSysClockFreq+0x114>)
 801d7d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801d7d4:	693b      	ldr	r3, [r7, #16]
 801d7d6:	2b0c      	cmp	r3, #12
 801d7d8:	d134      	bne.n	801d844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d7da:	4b1e      	ldr	r3, [pc, #120]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d7dc:	68db      	ldr	r3, [r3, #12]
 801d7de:	f003 0303 	and.w	r3, r3, #3
 801d7e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801d7e4:	68bb      	ldr	r3, [r7, #8]
 801d7e6:	2b02      	cmp	r3, #2
 801d7e8:	d003      	beq.n	801d7f2 <HAL_RCC_GetSysClockFreq+0xa6>
 801d7ea:	68bb      	ldr	r3, [r7, #8]
 801d7ec:	2b03      	cmp	r3, #3
 801d7ee:	d003      	beq.n	801d7f8 <HAL_RCC_GetSysClockFreq+0xac>
 801d7f0:	e005      	b.n	801d7fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801d7f2:	4b1a      	ldr	r3, [pc, #104]	@ (801d85c <HAL_RCC_GetSysClockFreq+0x110>)
 801d7f4:	617b      	str	r3, [r7, #20]
      break;
 801d7f6:	e005      	b.n	801d804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801d7f8:	4b19      	ldr	r3, [pc, #100]	@ (801d860 <HAL_RCC_GetSysClockFreq+0x114>)
 801d7fa:	617b      	str	r3, [r7, #20]
      break;
 801d7fc:	e002      	b.n	801d804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801d7fe:	69fb      	ldr	r3, [r7, #28]
 801d800:	617b      	str	r3, [r7, #20]
      break;
 801d802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d804:	4b13      	ldr	r3, [pc, #76]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d806:	68db      	ldr	r3, [r3, #12]
 801d808:	091b      	lsrs	r3, r3, #4
 801d80a:	f003 0307 	and.w	r3, r3, #7
 801d80e:	3301      	adds	r3, #1
 801d810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801d812:	4b10      	ldr	r3, [pc, #64]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d814:	68db      	ldr	r3, [r3, #12]
 801d816:	0a1b      	lsrs	r3, r3, #8
 801d818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d81c:	697a      	ldr	r2, [r7, #20]
 801d81e:	fb03 f202 	mul.w	r2, r3, r2
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	fbb2 f3f3 	udiv	r3, r2, r3
 801d828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d82a:	4b0a      	ldr	r3, [pc, #40]	@ (801d854 <HAL_RCC_GetSysClockFreq+0x108>)
 801d82c:	68db      	ldr	r3, [r3, #12]
 801d82e:	0e5b      	lsrs	r3, r3, #25
 801d830:	f003 0303 	and.w	r3, r3, #3
 801d834:	3301      	adds	r3, #1
 801d836:	005b      	lsls	r3, r3, #1
 801d838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801d83a:	697a      	ldr	r2, [r7, #20]
 801d83c:	683b      	ldr	r3, [r7, #0]
 801d83e:	fbb2 f3f3 	udiv	r3, r2, r3
 801d842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801d844:	69bb      	ldr	r3, [r7, #24]
}
 801d846:	4618      	mov	r0, r3
 801d848:	3724      	adds	r7, #36	@ 0x24
 801d84a:	46bd      	mov	sp, r7
 801d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d850:	4770      	bx	lr
 801d852:	bf00      	nop
 801d854:	40021000 	.word	0x40021000
 801d858:	08026438 	.word	0x08026438
 801d85c:	00f42400 	.word	0x00f42400
 801d860:	007a1200 	.word	0x007a1200

0801d864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d864:	b480      	push	{r7}
 801d866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801d868:	4b03      	ldr	r3, [pc, #12]	@ (801d878 <HAL_RCC_GetHCLKFreq+0x14>)
 801d86a:	681b      	ldr	r3, [r3, #0]
}
 801d86c:	4618      	mov	r0, r3
 801d86e:	46bd      	mov	sp, r7
 801d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d874:	4770      	bx	lr
 801d876:	bf00      	nop
 801d878:	20000000 	.word	0x20000000

0801d87c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801d880:	f7ff fff0 	bl	801d864 <HAL_RCC_GetHCLKFreq>
 801d884:	4602      	mov	r2, r0
 801d886:	4b06      	ldr	r3, [pc, #24]	@ (801d8a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d888:	689b      	ldr	r3, [r3, #8]
 801d88a:	0a1b      	lsrs	r3, r3, #8
 801d88c:	f003 0307 	and.w	r3, r3, #7
 801d890:	4904      	ldr	r1, [pc, #16]	@ (801d8a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d892:	5ccb      	ldrb	r3, [r1, r3]
 801d894:	f003 031f 	and.w	r3, r3, #31
 801d898:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d89c:	4618      	mov	r0, r3
 801d89e:	bd80      	pop	{r7, pc}
 801d8a0:	40021000 	.word	0x40021000
 801d8a4:	08026430 	.word	0x08026430

0801d8a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801d8ac:	f7ff ffda 	bl	801d864 <HAL_RCC_GetHCLKFreq>
 801d8b0:	4602      	mov	r2, r0
 801d8b2:	4b06      	ldr	r3, [pc, #24]	@ (801d8cc <HAL_RCC_GetPCLK2Freq+0x24>)
 801d8b4:	689b      	ldr	r3, [r3, #8]
 801d8b6:	0adb      	lsrs	r3, r3, #11
 801d8b8:	f003 0307 	and.w	r3, r3, #7
 801d8bc:	4904      	ldr	r1, [pc, #16]	@ (801d8d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d8be:	5ccb      	ldrb	r3, [r1, r3]
 801d8c0:	f003 031f 	and.w	r3, r3, #31
 801d8c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d8c8:	4618      	mov	r0, r3
 801d8ca:	bd80      	pop	{r7, pc}
 801d8cc:	40021000 	.word	0x40021000
 801d8d0:	08026430 	.word	0x08026430

0801d8d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b086      	sub	sp, #24
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801d8dc:	2300      	movs	r3, #0
 801d8de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801d8e0:	4b2a      	ldr	r3, [pc, #168]	@ (801d98c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d8e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d8e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d003      	beq.n	801d8f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801d8ec:	f7ff f9b6 	bl	801cc5c <HAL_PWREx_GetVoltageRange>
 801d8f0:	6178      	str	r0, [r7, #20]
 801d8f2:	e014      	b.n	801d91e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801d8f4:	4b25      	ldr	r3, [pc, #148]	@ (801d98c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d8f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d8f8:	4a24      	ldr	r2, [pc, #144]	@ (801d98c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d8fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d8fe:	6593      	str	r3, [r2, #88]	@ 0x58
 801d900:	4b22      	ldr	r3, [pc, #136]	@ (801d98c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d908:	60fb      	str	r3, [r7, #12]
 801d90a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801d90c:	f7ff f9a6 	bl	801cc5c <HAL_PWREx_GetVoltageRange>
 801d910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801d912:	4b1e      	ldr	r3, [pc, #120]	@ (801d98c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d916:	4a1d      	ldr	r2, [pc, #116]	@ (801d98c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801d918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d91c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801d91e:	697b      	ldr	r3, [r7, #20]
 801d920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d924:	d10b      	bne.n	801d93e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	2b80      	cmp	r3, #128	@ 0x80
 801d92a:	d919      	bls.n	801d960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	2ba0      	cmp	r3, #160	@ 0xa0
 801d930:	d902      	bls.n	801d938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801d932:	2302      	movs	r3, #2
 801d934:	613b      	str	r3, [r7, #16]
 801d936:	e013      	b.n	801d960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801d938:	2301      	movs	r3, #1
 801d93a:	613b      	str	r3, [r7, #16]
 801d93c:	e010      	b.n	801d960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	2b80      	cmp	r3, #128	@ 0x80
 801d942:	d902      	bls.n	801d94a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801d944:	2303      	movs	r3, #3
 801d946:	613b      	str	r3, [r7, #16]
 801d948:	e00a      	b.n	801d960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	2b80      	cmp	r3, #128	@ 0x80
 801d94e:	d102      	bne.n	801d956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801d950:	2302      	movs	r3, #2
 801d952:	613b      	str	r3, [r7, #16]
 801d954:	e004      	b.n	801d960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	2b70      	cmp	r3, #112	@ 0x70
 801d95a:	d101      	bne.n	801d960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801d95c:	2301      	movs	r3, #1
 801d95e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801d960:	4b0b      	ldr	r3, [pc, #44]	@ (801d990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	f023 0207 	bic.w	r2, r3, #7
 801d968:	4909      	ldr	r1, [pc, #36]	@ (801d990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801d96a:	693b      	ldr	r3, [r7, #16]
 801d96c:	4313      	orrs	r3, r2
 801d96e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801d970:	4b07      	ldr	r3, [pc, #28]	@ (801d990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801d972:	681b      	ldr	r3, [r3, #0]
 801d974:	f003 0307 	and.w	r3, r3, #7
 801d978:	693a      	ldr	r2, [r7, #16]
 801d97a:	429a      	cmp	r2, r3
 801d97c:	d001      	beq.n	801d982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801d97e:	2301      	movs	r3, #1
 801d980:	e000      	b.n	801d984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801d982:	2300      	movs	r3, #0
}
 801d984:	4618      	mov	r0, r3
 801d986:	3718      	adds	r7, #24
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}
 801d98c:	40021000 	.word	0x40021000
 801d990:	40022000 	.word	0x40022000

0801d994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d994:	b580      	push	{r7, lr}
 801d996:	b086      	sub	sp, #24
 801d998:	af00      	add	r7, sp, #0
 801d99a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d99c:	2300      	movs	r3, #0
 801d99e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d031      	beq.n	801da14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d9b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801d9b8:	d01a      	beq.n	801d9f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 801d9ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801d9be:	d814      	bhi.n	801d9ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d009      	beq.n	801d9d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801d9c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d9c8:	d10f      	bne.n	801d9ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 801d9ca:	4b5d      	ldr	r3, [pc, #372]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d9cc:	68db      	ldr	r3, [r3, #12]
 801d9ce:	4a5c      	ldr	r2, [pc, #368]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d9d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d9d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801d9d6:	e00c      	b.n	801d9f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	3304      	adds	r3, #4
 801d9dc:	2100      	movs	r1, #0
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f000 f9f0 	bl	801ddc4 <RCCEx_PLLSAI1_Config>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801d9e8:	e003      	b.n	801d9f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801d9ea:	2301      	movs	r3, #1
 801d9ec:	74fb      	strb	r3, [r7, #19]
      break;
 801d9ee:	e000      	b.n	801d9f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 801d9f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 801d9f2:	7cfb      	ldrb	r3, [r7, #19]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d10b      	bne.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d9f8:	4b51      	ldr	r3, [pc, #324]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801d9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d9fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801da06:	494e      	ldr	r1, [pc, #312]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801da08:	4313      	orrs	r3, r2
 801da0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801da0e:	e001      	b.n	801da14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da10:	7cfb      	ldrb	r3, [r7, #19]
 801da12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	f000 809e 	beq.w	801db5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 801da22:	2300      	movs	r3, #0
 801da24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801da26:	4b46      	ldr	r3, [pc, #280]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801da28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d101      	bne.n	801da36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801da32:	2301      	movs	r3, #1
 801da34:	e000      	b.n	801da38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801da36:	2300      	movs	r3, #0
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d00d      	beq.n	801da58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801da3c:	4b40      	ldr	r3, [pc, #256]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801da3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da40:	4a3f      	ldr	r2, [pc, #252]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801da42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801da46:	6593      	str	r3, [r2, #88]	@ 0x58
 801da48:	4b3d      	ldr	r3, [pc, #244]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801da4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801da50:	60bb      	str	r3, [r7, #8]
 801da52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801da54:	2301      	movs	r3, #1
 801da56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801da58:	4b3a      	ldr	r3, [pc, #232]	@ (801db44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	4a39      	ldr	r2, [pc, #228]	@ (801db44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801da5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801da62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801da64:	f7fe fc92 	bl	801c38c <HAL_GetTick>
 801da68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801da6a:	e009      	b.n	801da80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801da6c:	f7fe fc8e 	bl	801c38c <HAL_GetTick>
 801da70:	4602      	mov	r2, r0
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	1ad3      	subs	r3, r2, r3
 801da76:	2b02      	cmp	r3, #2
 801da78:	d902      	bls.n	801da80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 801da7a:	2303      	movs	r3, #3
 801da7c:	74fb      	strb	r3, [r7, #19]
        break;
 801da7e:	e005      	b.n	801da8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801da80:	4b30      	ldr	r3, [pc, #192]	@ (801db44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d0ef      	beq.n	801da6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 801da8c:	7cfb      	ldrb	r3, [r7, #19]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d15a      	bne.n	801db48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801da92:	4b2b      	ldr	r3, [pc, #172]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801da94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801da98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801da9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801da9e:	697b      	ldr	r3, [r7, #20]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d01e      	beq.n	801dae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801daa8:	697a      	ldr	r2, [r7, #20]
 801daaa:	429a      	cmp	r2, r3
 801daac:	d019      	beq.n	801dae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801daae:	4b24      	ldr	r3, [pc, #144]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801dab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801dab8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801daba:	4b21      	ldr	r3, [pc, #132]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801dabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dac0:	4a1f      	ldr	r2, [pc, #124]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801dac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801dac6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801daca:	4b1d      	ldr	r3, [pc, #116]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801dacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dad0:	4a1b      	ldr	r2, [pc, #108]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801dad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801dad6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801dada:	4a19      	ldr	r2, [pc, #100]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801dadc:	697b      	ldr	r3, [r7, #20]
 801dade:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801dae2:	697b      	ldr	r3, [r7, #20]
 801dae4:	f003 0301 	and.w	r3, r3, #1
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d016      	beq.n	801db1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801daec:	f7fe fc4e 	bl	801c38c <HAL_GetTick>
 801daf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801daf2:	e00b      	b.n	801db0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801daf4:	f7fe fc4a 	bl	801c38c <HAL_GetTick>
 801daf8:	4602      	mov	r2, r0
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	1ad3      	subs	r3, r2, r3
 801dafe:	f241 3288 	movw	r2, #5000	@ 0x1388
 801db02:	4293      	cmp	r3, r2
 801db04:	d902      	bls.n	801db0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801db06:	2303      	movs	r3, #3
 801db08:	74fb      	strb	r3, [r7, #19]
            break;
 801db0a:	e006      	b.n	801db1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801db0c:	4b0c      	ldr	r3, [pc, #48]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801db0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801db12:	f003 0302 	and.w	r3, r3, #2
 801db16:	2b00      	cmp	r3, #0
 801db18:	d0ec      	beq.n	801daf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801db1a:	7cfb      	ldrb	r3, [r7, #19]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d10b      	bne.n	801db38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801db20:	4b07      	ldr	r3, [pc, #28]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801db22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801db26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801db2e:	4904      	ldr	r1, [pc, #16]	@ (801db40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801db30:	4313      	orrs	r3, r2
 801db32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801db36:	e009      	b.n	801db4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801db38:	7cfb      	ldrb	r3, [r7, #19]
 801db3a:	74bb      	strb	r3, [r7, #18]
 801db3c:	e006      	b.n	801db4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 801db3e:	bf00      	nop
 801db40:	40021000 	.word	0x40021000
 801db44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db48:	7cfb      	ldrb	r3, [r7, #19]
 801db4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801db4c:	7c7b      	ldrb	r3, [r7, #17]
 801db4e:	2b01      	cmp	r3, #1
 801db50:	d105      	bne.n	801db5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801db52:	4b9b      	ldr	r3, [pc, #620]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801db54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801db56:	4a9a      	ldr	r2, [pc, #616]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801db58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801db5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	f003 0301 	and.w	r3, r3, #1
 801db66:	2b00      	cmp	r3, #0
 801db68:	d00a      	beq.n	801db80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801db6a:	4b95      	ldr	r3, [pc, #596]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801db6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801db70:	f023 0203 	bic.w	r2, r3, #3
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	6a1b      	ldr	r3, [r3, #32]
 801db78:	4991      	ldr	r1, [pc, #580]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801db7a:	4313      	orrs	r3, r2
 801db7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	f003 0302 	and.w	r3, r3, #2
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d00a      	beq.n	801dba2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801db8c:	4b8c      	ldr	r3, [pc, #560]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801db8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801db92:	f023 020c 	bic.w	r2, r3, #12
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801db9a:	4989      	ldr	r1, [pc, #548]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801db9c:	4313      	orrs	r3, r2
 801db9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	f003 0304 	and.w	r3, r3, #4
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d00a      	beq.n	801dbc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801dbae:	4b84      	ldr	r3, [pc, #528]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dbb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dbb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbbc:	4980      	ldr	r1, [pc, #512]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dbbe:	4313      	orrs	r3, r2
 801dbc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	f003 0320 	and.w	r3, r3, #32
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d00a      	beq.n	801dbe6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801dbd0:	4b7b      	ldr	r3, [pc, #492]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dbd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbde:	4978      	ldr	r1, [pc, #480]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dbe0:	4313      	orrs	r3, r2
 801dbe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d00a      	beq.n	801dc08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801dbf2:	4b73      	ldr	r3, [pc, #460]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dbf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dbf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801dc00:	496f      	ldr	r1, [pc, #444]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc02:	4313      	orrs	r3, r2
 801dc04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d00a      	beq.n	801dc2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801dc14:	4b6a      	ldr	r3, [pc, #424]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dc1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dc22:	4967      	ldr	r1, [pc, #412]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc24:	4313      	orrs	r3, r2
 801dc26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d00a      	beq.n	801dc4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801dc36:	4b62      	ldr	r3, [pc, #392]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dc3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc44:	495e      	ldr	r1, [pc, #376]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc46:	4313      	orrs	r3, r2
 801dc48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d00a      	beq.n	801dc6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801dc58:	4b59      	ldr	r3, [pc, #356]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dc5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dc66:	4956      	ldr	r1, [pc, #344]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc68:	4313      	orrs	r3, r2
 801dc6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d00a      	beq.n	801dc90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801dc7a:	4b51      	ldr	r3, [pc, #324]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dc80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc88:	494d      	ldr	r1, [pc, #308]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc8a:	4313      	orrs	r3, r2
 801dc8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d028      	beq.n	801dcee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801dc9c:	4b48      	ldr	r3, [pc, #288]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dca2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dcaa:	4945      	ldr	r1, [pc, #276]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dcac:	4313      	orrs	r3, r2
 801dcae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dcb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801dcba:	d106      	bne.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801dcbc:	4b40      	ldr	r3, [pc, #256]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dcbe:	68db      	ldr	r3, [r3, #12]
 801dcc0:	4a3f      	ldr	r2, [pc, #252]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dcc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dcc6:	60d3      	str	r3, [r2, #12]
 801dcc8:	e011      	b.n	801dcee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dcce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801dcd2:	d10c      	bne.n	801dcee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	3304      	adds	r3, #4
 801dcd8:	2101      	movs	r1, #1
 801dcda:	4618      	mov	r0, r3
 801dcdc:	f000 f872 	bl	801ddc4 <RCCEx_PLLSAI1_Config>
 801dce0:	4603      	mov	r3, r0
 801dce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801dce4:	7cfb      	ldrb	r3, [r7, #19]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d001      	beq.n	801dcee <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 801dcea:	7cfb      	ldrb	r3, [r7, #19]
 801dcec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d028      	beq.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801dcfa:	4b31      	ldr	r3, [pc, #196]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dcfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd08:	492d      	ldr	r1, [pc, #180]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dd0a:	4313      	orrs	r3, r2
 801dd0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801dd18:	d106      	bne.n	801dd28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801dd1a:	4b29      	ldr	r3, [pc, #164]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dd1c:	68db      	ldr	r3, [r3, #12]
 801dd1e:	4a28      	ldr	r2, [pc, #160]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dd20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dd24:	60d3      	str	r3, [r2, #12]
 801dd26:	e011      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801dd30:	d10c      	bne.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	3304      	adds	r3, #4
 801dd36:	2101      	movs	r1, #1
 801dd38:	4618      	mov	r0, r3
 801dd3a:	f000 f843 	bl	801ddc4 <RCCEx_PLLSAI1_Config>
 801dd3e:	4603      	mov	r3, r0
 801dd40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801dd42:	7cfb      	ldrb	r3, [r7, #19]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d001      	beq.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 801dd48:	7cfb      	ldrb	r3, [r7, #19]
 801dd4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d01c      	beq.n	801dd92 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801dd58:	4b19      	ldr	r3, [pc, #100]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dd5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801dd62:	687b      	ldr	r3, [r7, #4]
 801dd64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd66:	4916      	ldr	r1, [pc, #88]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dd68:	4313      	orrs	r3, r2
 801dd6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dd76:	d10c      	bne.n	801dd92 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	3304      	adds	r3, #4
 801dd7c:	2102      	movs	r1, #2
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f000 f820 	bl	801ddc4 <RCCEx_PLLSAI1_Config>
 801dd84:	4603      	mov	r3, r0
 801dd86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801dd88:	7cfb      	ldrb	r3, [r7, #19]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d001      	beq.n	801dd92 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 801dd8e:	7cfb      	ldrb	r3, [r7, #19]
 801dd90:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d00a      	beq.n	801ddb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801dd9e:	4b08      	ldr	r3, [pc, #32]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801dda0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dda4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ddac:	4904      	ldr	r1, [pc, #16]	@ (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801ddae:	4313      	orrs	r3, r2
 801ddb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801ddb4:	7cbb      	ldrb	r3, [r7, #18]
}
 801ddb6:	4618      	mov	r0, r3
 801ddb8:	3718      	adds	r7, #24
 801ddba:	46bd      	mov	sp, r7
 801ddbc:	bd80      	pop	{r7, pc}
 801ddbe:	bf00      	nop
 801ddc0:	40021000 	.word	0x40021000

0801ddc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b084      	sub	sp, #16
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	6078      	str	r0, [r7, #4]
 801ddcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ddce:	2300      	movs	r3, #0
 801ddd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801ddd2:	4b74      	ldr	r3, [pc, #464]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ddd4:	68db      	ldr	r3, [r3, #12]
 801ddd6:	f003 0303 	and.w	r3, r3, #3
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d018      	beq.n	801de10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801ddde:	4b71      	ldr	r3, [pc, #452]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801dde0:	68db      	ldr	r3, [r3, #12]
 801dde2:	f003 0203 	and.w	r2, r3, #3
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	429a      	cmp	r2, r3
 801ddec:	d10d      	bne.n	801de0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	681b      	ldr	r3, [r3, #0]
       ||
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d009      	beq.n	801de0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801ddf6:	4b6b      	ldr	r3, [pc, #428]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ddf8:	68db      	ldr	r3, [r3, #12]
 801ddfa:	091b      	lsrs	r3, r3, #4
 801ddfc:	f003 0307 	and.w	r3, r3, #7
 801de00:	1c5a      	adds	r2, r3, #1
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	685b      	ldr	r3, [r3, #4]
       ||
 801de06:	429a      	cmp	r2, r3
 801de08:	d047      	beq.n	801de9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801de0a:	2301      	movs	r3, #1
 801de0c:	73fb      	strb	r3, [r7, #15]
 801de0e:	e044      	b.n	801de9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	2b03      	cmp	r3, #3
 801de16:	d018      	beq.n	801de4a <RCCEx_PLLSAI1_Config+0x86>
 801de18:	2b03      	cmp	r3, #3
 801de1a:	d825      	bhi.n	801de68 <RCCEx_PLLSAI1_Config+0xa4>
 801de1c:	2b01      	cmp	r3, #1
 801de1e:	d002      	beq.n	801de26 <RCCEx_PLLSAI1_Config+0x62>
 801de20:	2b02      	cmp	r3, #2
 801de22:	d009      	beq.n	801de38 <RCCEx_PLLSAI1_Config+0x74>
 801de24:	e020      	b.n	801de68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801de26:	4b5f      	ldr	r3, [pc, #380]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	f003 0302 	and.w	r3, r3, #2
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d11d      	bne.n	801de6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801de32:	2301      	movs	r3, #1
 801de34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801de36:	e01a      	b.n	801de6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801de38:	4b5a      	ldr	r3, [pc, #360]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801de40:	2b00      	cmp	r3, #0
 801de42:	d116      	bne.n	801de72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801de44:	2301      	movs	r3, #1
 801de46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801de48:	e013      	b.n	801de72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801de4a:	4b56      	ldr	r3, [pc, #344]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801de52:	2b00      	cmp	r3, #0
 801de54:	d10f      	bne.n	801de76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801de56:	4b53      	ldr	r3, [pc, #332]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d109      	bne.n	801de76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801de62:	2301      	movs	r3, #1
 801de64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801de66:	e006      	b.n	801de76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801de68:	2301      	movs	r3, #1
 801de6a:	73fb      	strb	r3, [r7, #15]
      break;
 801de6c:	e004      	b.n	801de78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801de6e:	bf00      	nop
 801de70:	e002      	b.n	801de78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801de72:	bf00      	nop
 801de74:	e000      	b.n	801de78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801de76:	bf00      	nop
    }

    if(status == HAL_OK)
 801de78:	7bfb      	ldrb	r3, [r7, #15]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	d10d      	bne.n	801de9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801de7e:	4b49      	ldr	r3, [pc, #292]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801de80:	68db      	ldr	r3, [r3, #12]
 801de82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	6819      	ldr	r1, [r3, #0]
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	685b      	ldr	r3, [r3, #4]
 801de8e:	3b01      	subs	r3, #1
 801de90:	011b      	lsls	r3, r3, #4
 801de92:	430b      	orrs	r3, r1
 801de94:	4943      	ldr	r1, [pc, #268]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801de96:	4313      	orrs	r3, r2
 801de98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801de9a:	7bfb      	ldrb	r3, [r7, #15]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d17c      	bne.n	801df9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801dea0:	4b40      	ldr	r3, [pc, #256]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	4a3f      	ldr	r2, [pc, #252]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801dea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801deaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801deac:	f7fe fa6e 	bl	801c38c <HAL_GetTick>
 801deb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801deb2:	e009      	b.n	801dec8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801deb4:	f7fe fa6a 	bl	801c38c <HAL_GetTick>
 801deb8:	4602      	mov	r2, r0
 801deba:	68bb      	ldr	r3, [r7, #8]
 801debc:	1ad3      	subs	r3, r2, r3
 801debe:	2b02      	cmp	r3, #2
 801dec0:	d902      	bls.n	801dec8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801dec2:	2303      	movs	r3, #3
 801dec4:	73fb      	strb	r3, [r7, #15]
        break;
 801dec6:	e005      	b.n	801ded4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801dec8:	4b36      	ldr	r3, [pc, #216]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d1ef      	bne.n	801deb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801ded4:	7bfb      	ldrb	r3, [r7, #15]
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d15f      	bne.n	801df9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801deda:	683b      	ldr	r3, [r7, #0]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d110      	bne.n	801df02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801dee0:	4b30      	ldr	r3, [pc, #192]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801dee2:	691b      	ldr	r3, [r3, #16]
 801dee4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 801dee8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801deec:	687a      	ldr	r2, [r7, #4]
 801deee:	6892      	ldr	r2, [r2, #8]
 801def0:	0211      	lsls	r1, r2, #8
 801def2:	687a      	ldr	r2, [r7, #4]
 801def4:	68d2      	ldr	r2, [r2, #12]
 801def6:	06d2      	lsls	r2, r2, #27
 801def8:	430a      	orrs	r2, r1
 801defa:	492a      	ldr	r1, [pc, #168]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801defc:	4313      	orrs	r3, r2
 801defe:	610b      	str	r3, [r1, #16]
 801df00:	e027      	b.n	801df52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801df02:	683b      	ldr	r3, [r7, #0]
 801df04:	2b01      	cmp	r3, #1
 801df06:	d112      	bne.n	801df2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801df08:	4b26      	ldr	r3, [pc, #152]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df0a:	691b      	ldr	r3, [r3, #16]
 801df0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801df10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801df14:	687a      	ldr	r2, [r7, #4]
 801df16:	6892      	ldr	r2, [r2, #8]
 801df18:	0211      	lsls	r1, r2, #8
 801df1a:	687a      	ldr	r2, [r7, #4]
 801df1c:	6912      	ldr	r2, [r2, #16]
 801df1e:	0852      	lsrs	r2, r2, #1
 801df20:	3a01      	subs	r2, #1
 801df22:	0552      	lsls	r2, r2, #21
 801df24:	430a      	orrs	r2, r1
 801df26:	491f      	ldr	r1, [pc, #124]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df28:	4313      	orrs	r3, r2
 801df2a:	610b      	str	r3, [r1, #16]
 801df2c:	e011      	b.n	801df52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801df2e:	4b1d      	ldr	r3, [pc, #116]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df30:	691b      	ldr	r3, [r3, #16]
 801df32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 801df36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801df3a:	687a      	ldr	r2, [r7, #4]
 801df3c:	6892      	ldr	r2, [r2, #8]
 801df3e:	0211      	lsls	r1, r2, #8
 801df40:	687a      	ldr	r2, [r7, #4]
 801df42:	6952      	ldr	r2, [r2, #20]
 801df44:	0852      	lsrs	r2, r2, #1
 801df46:	3a01      	subs	r2, #1
 801df48:	0652      	lsls	r2, r2, #25
 801df4a:	430a      	orrs	r2, r1
 801df4c:	4915      	ldr	r1, [pc, #84]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df4e:	4313      	orrs	r3, r2
 801df50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801df52:	4b14      	ldr	r3, [pc, #80]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	4a13      	ldr	r2, [pc, #76]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801df5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801df5e:	f7fe fa15 	bl	801c38c <HAL_GetTick>
 801df62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801df64:	e009      	b.n	801df7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801df66:	f7fe fa11 	bl	801c38c <HAL_GetTick>
 801df6a:	4602      	mov	r2, r0
 801df6c:	68bb      	ldr	r3, [r7, #8]
 801df6e:	1ad3      	subs	r3, r2, r3
 801df70:	2b02      	cmp	r3, #2
 801df72:	d902      	bls.n	801df7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 801df74:	2303      	movs	r3, #3
 801df76:	73fb      	strb	r3, [r7, #15]
          break;
 801df78:	e005      	b.n	801df86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801df7a:	4b0a      	ldr	r3, [pc, #40]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801df82:	2b00      	cmp	r3, #0
 801df84:	d0ef      	beq.n	801df66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801df86:	7bfb      	ldrb	r3, [r7, #15]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d106      	bne.n	801df9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801df8c:	4b05      	ldr	r3, [pc, #20]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df8e:	691a      	ldr	r2, [r3, #16]
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	699b      	ldr	r3, [r3, #24]
 801df94:	4903      	ldr	r1, [pc, #12]	@ (801dfa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 801df96:	4313      	orrs	r3, r2
 801df98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801df9a:	7bfb      	ldrb	r3, [r7, #15]
}
 801df9c:	4618      	mov	r0, r3
 801df9e:	3710      	adds	r7, #16
 801dfa0:	46bd      	mov	sp, r7
 801dfa2:	bd80      	pop	{r7, pc}
 801dfa4:	40021000 	.word	0x40021000

0801dfa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801dfa8:	b580      	push	{r7, lr}
 801dfaa:	b084      	sub	sp, #16
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d101      	bne.n	801dfba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801dfb6:	2301      	movs	r3, #1
 801dfb8:	e095      	b.n	801e0e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d108      	bne.n	801dfd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	685b      	ldr	r3, [r3, #4]
 801dfc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801dfca:	d009      	beq.n	801dfe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	2200      	movs	r2, #0
 801dfd0:	61da      	str	r2, [r3, #28]
 801dfd2:	e005      	b.n	801dfe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	2200      	movs	r2, #0
 801dfd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	2200      	movs	r2, #0
 801dfde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801dfec:	b2db      	uxtb	r3, r3
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d106      	bne.n	801e000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	2200      	movs	r2, #0
 801dff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801dffa:	6878      	ldr	r0, [r7, #4]
 801dffc:	f7e4 fa0c 	bl	8002418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	2202      	movs	r2, #2
 801e004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	681a      	ldr	r2, [r3, #0]
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801e016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	68db      	ldr	r3, [r3, #12]
 801e01c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801e020:	d902      	bls.n	801e028 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801e022:	2300      	movs	r3, #0
 801e024:	60fb      	str	r3, [r7, #12]
 801e026:	e002      	b.n	801e02e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801e028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801e02c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	68db      	ldr	r3, [r3, #12]
 801e032:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801e036:	d007      	beq.n	801e048 <HAL_SPI_Init+0xa0>
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	68db      	ldr	r3, [r3, #12]
 801e03c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801e040:	d002      	beq.n	801e048 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	2200      	movs	r2, #0
 801e046:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	685b      	ldr	r3, [r3, #4]
 801e04c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	689b      	ldr	r3, [r3, #8]
 801e054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801e058:	431a      	orrs	r2, r3
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	691b      	ldr	r3, [r3, #16]
 801e05e:	f003 0302 	and.w	r3, r3, #2
 801e062:	431a      	orrs	r2, r3
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	695b      	ldr	r3, [r3, #20]
 801e068:	f003 0301 	and.w	r3, r3, #1
 801e06c:	431a      	orrs	r2, r3
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	699b      	ldr	r3, [r3, #24]
 801e072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801e076:	431a      	orrs	r2, r3
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	69db      	ldr	r3, [r3, #28]
 801e07c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801e080:	431a      	orrs	r2, r3
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	6a1b      	ldr	r3, [r3, #32]
 801e086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e08a:	ea42 0103 	orr.w	r1, r2, r3
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e092:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	430a      	orrs	r2, r1
 801e09c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	699b      	ldr	r3, [r3, #24]
 801e0a2:	0c1b      	lsrs	r3, r3, #16
 801e0a4:	f003 0204 	and.w	r2, r3, #4
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e0ac:	f003 0310 	and.w	r3, r3, #16
 801e0b0:	431a      	orrs	r2, r3
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e0b6:	f003 0308 	and.w	r3, r3, #8
 801e0ba:	431a      	orrs	r2, r3
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	68db      	ldr	r3, [r3, #12]
 801e0c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801e0c4:	ea42 0103 	orr.w	r1, r2, r3
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	430a      	orrs	r2, r1
 801e0d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	2200      	movs	r2, #0
 801e0da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	2201      	movs	r2, #1
 801e0e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801e0e4:	2300      	movs	r3, #0
}
 801e0e6:	4618      	mov	r0, r3
 801e0e8:	3710      	adds	r7, #16
 801e0ea:	46bd      	mov	sp, r7
 801e0ec:	bd80      	pop	{r7, pc}

0801e0ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801e0ee:	b580      	push	{r7, lr}
 801e0f0:	b08a      	sub	sp, #40	@ 0x28
 801e0f2:	af00      	add	r7, sp, #0
 801e0f4:	60f8      	str	r0, [r7, #12]
 801e0f6:	60b9      	str	r1, [r7, #8]
 801e0f8:	607a      	str	r2, [r7, #4]
 801e0fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801e0fc:	2301      	movs	r3, #1
 801e0fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e100:	f7fe f944 	bl	801c38c <HAL_GetTick>
 801e104:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801e10c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	685b      	ldr	r3, [r3, #4]
 801e112:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 801e114:	887b      	ldrh	r3, [r7, #2]
 801e116:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 801e118:	887b      	ldrh	r3, [r7, #2]
 801e11a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e11c:	7ffb      	ldrb	r3, [r7, #31]
 801e11e:	2b01      	cmp	r3, #1
 801e120:	d00c      	beq.n	801e13c <HAL_SPI_TransmitReceive+0x4e>
 801e122:	69bb      	ldr	r3, [r7, #24]
 801e124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801e128:	d106      	bne.n	801e138 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	689b      	ldr	r3, [r3, #8]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d102      	bne.n	801e138 <HAL_SPI_TransmitReceive+0x4a>
 801e132:	7ffb      	ldrb	r3, [r7, #31]
 801e134:	2b04      	cmp	r3, #4
 801e136:	d001      	beq.n	801e13c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 801e138:	2302      	movs	r3, #2
 801e13a:	e1f3      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e13c:	68bb      	ldr	r3, [r7, #8]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d005      	beq.n	801e14e <HAL_SPI_TransmitReceive+0x60>
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	2b00      	cmp	r3, #0
 801e146:	d002      	beq.n	801e14e <HAL_SPI_TransmitReceive+0x60>
 801e148:	887b      	ldrh	r3, [r7, #2]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d101      	bne.n	801e152 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 801e14e:	2301      	movs	r3, #1
 801e150:	e1e8      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801e158:	2b01      	cmp	r3, #1
 801e15a:	d101      	bne.n	801e160 <HAL_SPI_TransmitReceive+0x72>
 801e15c:	2302      	movs	r3, #2
 801e15e:	e1e1      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	2201      	movs	r2, #1
 801e164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801e16e:	b2db      	uxtb	r3, r3
 801e170:	2b04      	cmp	r3, #4
 801e172:	d003      	beq.n	801e17c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e174:	68fb      	ldr	r3, [r7, #12]
 801e176:	2205      	movs	r2, #5
 801e178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e17c:	68fb      	ldr	r3, [r7, #12]
 801e17e:	2200      	movs	r2, #0
 801e180:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e182:	68fb      	ldr	r3, [r7, #12]
 801e184:	687a      	ldr	r2, [r7, #4]
 801e186:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	887a      	ldrh	r2, [r7, #2]
 801e18c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	887a      	ldrh	r2, [r7, #2]
 801e194:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	68ba      	ldr	r2, [r7, #8]
 801e19c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	887a      	ldrh	r2, [r7, #2]
 801e1a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	887a      	ldrh	r2, [r7, #2]
 801e1a8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801e1b0:	68fb      	ldr	r3, [r7, #12]
 801e1b2:	2200      	movs	r2, #0
 801e1b4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	68db      	ldr	r3, [r3, #12]
 801e1ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801e1be:	d802      	bhi.n	801e1c6 <HAL_SPI_TransmitReceive+0xd8>
 801e1c0:	8abb      	ldrh	r3, [r7, #20]
 801e1c2:	2b01      	cmp	r3, #1
 801e1c4:	d908      	bls.n	801e1d8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e1c6:	68fb      	ldr	r3, [r7, #12]
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	685a      	ldr	r2, [r3, #4]
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801e1d4:	605a      	str	r2, [r3, #4]
 801e1d6:	e007      	b.n	801e1e8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	685a      	ldr	r2, [r3, #4]
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801e1e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e1f2:	2b40      	cmp	r3, #64	@ 0x40
 801e1f4:	d007      	beq.n	801e206 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	681a      	ldr	r2, [r3, #0]
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e204:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	68db      	ldr	r3, [r3, #12]
 801e20a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801e20e:	f240 8083 	bls.w	801e318 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	2b00      	cmp	r3, #0
 801e218:	d002      	beq.n	801e220 <HAL_SPI_TransmitReceive+0x132>
 801e21a:	8afb      	ldrh	r3, [r7, #22]
 801e21c:	2b01      	cmp	r3, #1
 801e21e:	d16f      	bne.n	801e300 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e224:	881a      	ldrh	r2, [r3, #0]
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e22c:	68fb      	ldr	r3, [r7, #12]
 801e22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e230:	1c9a      	adds	r2, r3, #2
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e23a:	b29b      	uxth	r3, r3
 801e23c:	3b01      	subs	r3, #1
 801e23e:	b29a      	uxth	r2, r3
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e244:	e05c      	b.n	801e300 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	689b      	ldr	r3, [r3, #8]
 801e24c:	f003 0302 	and.w	r3, r3, #2
 801e250:	2b02      	cmp	r3, #2
 801e252:	d11b      	bne.n	801e28c <HAL_SPI_TransmitReceive+0x19e>
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e258:	b29b      	uxth	r3, r3
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d016      	beq.n	801e28c <HAL_SPI_TransmitReceive+0x19e>
 801e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e260:	2b01      	cmp	r3, #1
 801e262:	d113      	bne.n	801e28c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801e264:	68fb      	ldr	r3, [r7, #12]
 801e266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e268:	881a      	ldrh	r2, [r3, #0]
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e274:	1c9a      	adds	r2, r3, #2
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e27e:	b29b      	uxth	r3, r3
 801e280:	3b01      	subs	r3, #1
 801e282:	b29a      	uxth	r2, r3
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e288:	2300      	movs	r3, #0
 801e28a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e28c:	68fb      	ldr	r3, [r7, #12]
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	689b      	ldr	r3, [r3, #8]
 801e292:	f003 0301 	and.w	r3, r3, #1
 801e296:	2b01      	cmp	r3, #1
 801e298:	d11c      	bne.n	801e2d4 <HAL_SPI_TransmitReceive+0x1e6>
 801e29a:	68fb      	ldr	r3, [r7, #12]
 801e29c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e2a0:	b29b      	uxth	r3, r3
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d016      	beq.n	801e2d4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	68da      	ldr	r2, [r3, #12]
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e2b0:	b292      	uxth	r2, r2
 801e2b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e2b8:	1c9a      	adds	r2, r3, #2
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e2c4:	b29b      	uxth	r3, r3
 801e2c6:	3b01      	subs	r3, #1
 801e2c8:	b29a      	uxth	r2, r3
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e2d0:	2301      	movs	r3, #1
 801e2d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e2d4:	f7fe f85a 	bl	801c38c <HAL_GetTick>
 801e2d8:	4602      	mov	r2, r0
 801e2da:	6a3b      	ldr	r3, [r7, #32]
 801e2dc:	1ad3      	subs	r3, r2, r3
 801e2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e2e0:	429a      	cmp	r2, r3
 801e2e2:	d80d      	bhi.n	801e300 <HAL_SPI_TransmitReceive+0x212>
 801e2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e2ea:	d009      	beq.n	801e300 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	2201      	movs	r2, #1
 801e2f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	2200      	movs	r2, #0
 801e2f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801e2fc:	2303      	movs	r3, #3
 801e2fe:	e111      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e300:	68fb      	ldr	r3, [r7, #12]
 801e302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e304:	b29b      	uxth	r3, r3
 801e306:	2b00      	cmp	r3, #0
 801e308:	d19d      	bne.n	801e246 <HAL_SPI_TransmitReceive+0x158>
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e310:	b29b      	uxth	r3, r3
 801e312:	2b00      	cmp	r3, #0
 801e314:	d197      	bne.n	801e246 <HAL_SPI_TransmitReceive+0x158>
 801e316:	e0e5      	b.n	801e4e4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e318:	68fb      	ldr	r3, [r7, #12]
 801e31a:	685b      	ldr	r3, [r3, #4]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d003      	beq.n	801e328 <HAL_SPI_TransmitReceive+0x23a>
 801e320:	8afb      	ldrh	r3, [r7, #22]
 801e322:	2b01      	cmp	r3, #1
 801e324:	f040 80d1 	bne.w	801e4ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e32c:	b29b      	uxth	r3, r3
 801e32e:	2b01      	cmp	r3, #1
 801e330:	d912      	bls.n	801e358 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e336:	881a      	ldrh	r2, [r3, #0]
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e33e:	68fb      	ldr	r3, [r7, #12]
 801e340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e342:	1c9a      	adds	r2, r3, #2
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e34c:	b29b      	uxth	r3, r3
 801e34e:	3b02      	subs	r3, #2
 801e350:	b29a      	uxth	r2, r3
 801e352:	68fb      	ldr	r3, [r7, #12]
 801e354:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801e356:	e0b8      	b.n	801e4ca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	330c      	adds	r3, #12
 801e362:	7812      	ldrb	r2, [r2, #0]
 801e364:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e36a:	1c5a      	adds	r2, r3, #1
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e374:	b29b      	uxth	r3, r3
 801e376:	3b01      	subs	r3, #1
 801e378:	b29a      	uxth	r2, r3
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e37e:	e0a4      	b.n	801e4ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	689b      	ldr	r3, [r3, #8]
 801e386:	f003 0302 	and.w	r3, r3, #2
 801e38a:	2b02      	cmp	r3, #2
 801e38c:	d134      	bne.n	801e3f8 <HAL_SPI_TransmitReceive+0x30a>
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e392:	b29b      	uxth	r3, r3
 801e394:	2b00      	cmp	r3, #0
 801e396:	d02f      	beq.n	801e3f8 <HAL_SPI_TransmitReceive+0x30a>
 801e398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e39a:	2b01      	cmp	r3, #1
 801e39c:	d12c      	bne.n	801e3f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e3a2:	b29b      	uxth	r3, r3
 801e3a4:	2b01      	cmp	r3, #1
 801e3a6:	d912      	bls.n	801e3ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3ac:	881a      	ldrh	r2, [r3, #0]
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3b8:	1c9a      	adds	r2, r3, #2
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	3b02      	subs	r3, #2
 801e3c6:	b29a      	uxth	r2, r3
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801e3cc:	e012      	b.n	801e3f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	330c      	adds	r3, #12
 801e3d8:	7812      	ldrb	r2, [r2, #0]
 801e3da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3e0:	1c5a      	adds	r2, r3, #1
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e3ea:	b29b      	uxth	r3, r3
 801e3ec:	3b01      	subs	r3, #1
 801e3ee:	b29a      	uxth	r2, r3
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	689b      	ldr	r3, [r3, #8]
 801e3fe:	f003 0301 	and.w	r3, r3, #1
 801e402:	2b01      	cmp	r3, #1
 801e404:	d148      	bne.n	801e498 <HAL_SPI_TransmitReceive+0x3aa>
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e40c:	b29b      	uxth	r3, r3
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d042      	beq.n	801e498 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e418:	b29b      	uxth	r3, r3
 801e41a:	2b01      	cmp	r3, #1
 801e41c:	d923      	bls.n	801e466 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	68da      	ldr	r2, [r3, #12]
 801e424:	68fb      	ldr	r3, [r7, #12]
 801e426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e428:	b292      	uxth	r2, r2
 801e42a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e430:	1c9a      	adds	r2, r3, #2
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e43c:	b29b      	uxth	r3, r3
 801e43e:	3b02      	subs	r3, #2
 801e440:	b29a      	uxth	r2, r3
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e44e:	b29b      	uxth	r3, r3
 801e450:	2b01      	cmp	r3, #1
 801e452:	d81f      	bhi.n	801e494 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	685a      	ldr	r2, [r3, #4]
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801e462:	605a      	str	r2, [r3, #4]
 801e464:	e016      	b.n	801e494 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	f103 020c 	add.w	r2, r3, #12
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e472:	7812      	ldrb	r2, [r2, #0]
 801e474:	b2d2      	uxtb	r2, r2
 801e476:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e47c:	1c5a      	adds	r2, r3, #1
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e488:	b29b      	uxth	r3, r3
 801e48a:	3b01      	subs	r3, #1
 801e48c:	b29a      	uxth	r2, r3
 801e48e:	68fb      	ldr	r3, [r7, #12]
 801e490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e494:	2301      	movs	r3, #1
 801e496:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e498:	f7fd ff78 	bl	801c38c <HAL_GetTick>
 801e49c:	4602      	mov	r2, r0
 801e49e:	6a3b      	ldr	r3, [r7, #32]
 801e4a0:	1ad3      	subs	r3, r2, r3
 801e4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e4a4:	429a      	cmp	r2, r3
 801e4a6:	d803      	bhi.n	801e4b0 <HAL_SPI_TransmitReceive+0x3c2>
 801e4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e4ae:	d102      	bne.n	801e4b6 <HAL_SPI_TransmitReceive+0x3c8>
 801e4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d109      	bne.n	801e4ca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	2201      	movs	r2, #1
 801e4ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	2200      	movs	r2, #0
 801e4c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801e4c6:	2303      	movs	r3, #3
 801e4c8:	e02c      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e4ca:	68fb      	ldr	r3, [r7, #12]
 801e4cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801e4ce:	b29b      	uxth	r3, r3
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	f47f af55 	bne.w	801e380 <HAL_SPI_TransmitReceive+0x292>
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e4dc:	b29b      	uxth	r3, r3
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	f47f af4e 	bne.w	801e380 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e4e4:	6a3a      	ldr	r2, [r7, #32]
 801e4e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e4e8:	68f8      	ldr	r0, [r7, #12]
 801e4ea:	f000 f93d 	bl	801e768 <SPI_EndRxTxTransaction>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d008      	beq.n	801e506 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	2220      	movs	r2, #32
 801e4f8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	2200      	movs	r2, #0
 801e4fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 801e502:	2301      	movs	r3, #1
 801e504:	e00e      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	2201      	movs	r2, #1
 801e50a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	2200      	movs	r2, #0
 801e512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d001      	beq.n	801e522 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 801e51e:	2301      	movs	r3, #1
 801e520:	e000      	b.n	801e524 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 801e522:	2300      	movs	r3, #0
  }
}
 801e524:	4618      	mov	r0, r3
 801e526:	3728      	adds	r7, #40	@ 0x28
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd80      	pop	{r7, pc}

0801e52c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b088      	sub	sp, #32
 801e530:	af00      	add	r7, sp, #0
 801e532:	60f8      	str	r0, [r7, #12]
 801e534:	60b9      	str	r1, [r7, #8]
 801e536:	603b      	str	r3, [r7, #0]
 801e538:	4613      	mov	r3, r2
 801e53a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e53c:	f7fd ff26 	bl	801c38c <HAL_GetTick>
 801e540:	4602      	mov	r2, r0
 801e542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e544:	1a9b      	subs	r3, r3, r2
 801e546:	683a      	ldr	r2, [r7, #0]
 801e548:	4413      	add	r3, r2
 801e54a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e54c:	f7fd ff1e 	bl	801c38c <HAL_GetTick>
 801e550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e552:	4b39      	ldr	r3, [pc, #228]	@ (801e638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	015b      	lsls	r3, r3, #5
 801e558:	0d1b      	lsrs	r3, r3, #20
 801e55a:	69fa      	ldr	r2, [r7, #28]
 801e55c:	fb02 f303 	mul.w	r3, r2, r3
 801e560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e562:	e054      	b.n	801e60e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e564:	683b      	ldr	r3, [r7, #0]
 801e566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e56a:	d050      	beq.n	801e60e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e56c:	f7fd ff0e 	bl	801c38c <HAL_GetTick>
 801e570:	4602      	mov	r2, r0
 801e572:	69bb      	ldr	r3, [r7, #24]
 801e574:	1ad3      	subs	r3, r2, r3
 801e576:	69fa      	ldr	r2, [r7, #28]
 801e578:	429a      	cmp	r2, r3
 801e57a:	d902      	bls.n	801e582 <SPI_WaitFlagStateUntilTimeout+0x56>
 801e57c:	69fb      	ldr	r3, [r7, #28]
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d13d      	bne.n	801e5fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	685a      	ldr	r2, [r3, #4]
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801e590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	685b      	ldr	r3, [r3, #4]
 801e596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801e59a:	d111      	bne.n	801e5c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	689b      	ldr	r3, [r3, #8]
 801e5a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e5a4:	d004      	beq.n	801e5b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e5a6:	68fb      	ldr	r3, [r7, #12]
 801e5a8:	689b      	ldr	r3, [r3, #8]
 801e5aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e5ae:	d107      	bne.n	801e5c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	681a      	ldr	r2, [r3, #0]
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801e5be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e5c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e5c8:	d10f      	bne.n	801e5ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e5ca:	68fb      	ldr	r3, [r7, #12]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	681a      	ldr	r2, [r3, #0]
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801e5d8:	601a      	str	r2, [r3, #0]
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	681a      	ldr	r2, [r3, #0]
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801e5e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	2201      	movs	r2, #1
 801e5ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801e5fa:	2303      	movs	r3, #3
 801e5fc:	e017      	b.n	801e62e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e5fe:	697b      	ldr	r3, [r7, #20]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d101      	bne.n	801e608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e604:	2300      	movs	r3, #0
 801e606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e608:	697b      	ldr	r3, [r7, #20]
 801e60a:	3b01      	subs	r3, #1
 801e60c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	689a      	ldr	r2, [r3, #8]
 801e614:	68bb      	ldr	r3, [r7, #8]
 801e616:	4013      	ands	r3, r2
 801e618:	68ba      	ldr	r2, [r7, #8]
 801e61a:	429a      	cmp	r2, r3
 801e61c:	bf0c      	ite	eq
 801e61e:	2301      	moveq	r3, #1
 801e620:	2300      	movne	r3, #0
 801e622:	b2db      	uxtb	r3, r3
 801e624:	461a      	mov	r2, r3
 801e626:	79fb      	ldrb	r3, [r7, #7]
 801e628:	429a      	cmp	r2, r3
 801e62a:	d19b      	bne.n	801e564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e62c:	2300      	movs	r3, #0
}
 801e62e:	4618      	mov	r0, r3
 801e630:	3720      	adds	r7, #32
 801e632:	46bd      	mov	sp, r7
 801e634:	bd80      	pop	{r7, pc}
 801e636:	bf00      	nop
 801e638:	20000000 	.word	0x20000000

0801e63c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e63c:	b580      	push	{r7, lr}
 801e63e:	b08a      	sub	sp, #40	@ 0x28
 801e640:	af00      	add	r7, sp, #0
 801e642:	60f8      	str	r0, [r7, #12]
 801e644:	60b9      	str	r1, [r7, #8]
 801e646:	607a      	str	r2, [r7, #4]
 801e648:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e64a:	2300      	movs	r3, #0
 801e64c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e64e:	f7fd fe9d 	bl	801c38c <HAL_GetTick>
 801e652:	4602      	mov	r2, r0
 801e654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e656:	1a9b      	subs	r3, r3, r2
 801e658:	683a      	ldr	r2, [r7, #0]
 801e65a:	4413      	add	r3, r2
 801e65c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801e65e:	f7fd fe95 	bl	801c38c <HAL_GetTick>
 801e662:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801e664:	68fb      	ldr	r3, [r7, #12]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	330c      	adds	r3, #12
 801e66a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801e66c:	4b3d      	ldr	r3, [pc, #244]	@ (801e764 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801e66e:	681a      	ldr	r2, [r3, #0]
 801e670:	4613      	mov	r3, r2
 801e672:	009b      	lsls	r3, r3, #2
 801e674:	4413      	add	r3, r2
 801e676:	00da      	lsls	r2, r3, #3
 801e678:	1ad3      	subs	r3, r2, r3
 801e67a:	0d1b      	lsrs	r3, r3, #20
 801e67c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e67e:	fb02 f303 	mul.w	r3, r2, r3
 801e682:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801e684:	e060      	b.n	801e748 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801e686:	68bb      	ldr	r3, [r7, #8]
 801e688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801e68c:	d107      	bne.n	801e69e <SPI_WaitFifoStateUntilTimeout+0x62>
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	2b00      	cmp	r3, #0
 801e692:	d104      	bne.n	801e69e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801e694:	69fb      	ldr	r3, [r7, #28]
 801e696:	781b      	ldrb	r3, [r3, #0]
 801e698:	b2db      	uxtb	r3, r3
 801e69a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e69c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e69e:	683b      	ldr	r3, [r7, #0]
 801e6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6a4:	d050      	beq.n	801e748 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e6a6:	f7fd fe71 	bl	801c38c <HAL_GetTick>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	6a3b      	ldr	r3, [r7, #32]
 801e6ae:	1ad3      	subs	r3, r2, r3
 801e6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e6b2:	429a      	cmp	r2, r3
 801e6b4:	d902      	bls.n	801e6bc <SPI_WaitFifoStateUntilTimeout+0x80>
 801e6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d13d      	bne.n	801e738 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	685a      	ldr	r2, [r3, #4]
 801e6c2:	68fb      	ldr	r3, [r7, #12]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801e6ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	685b      	ldr	r3, [r3, #4]
 801e6d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801e6d4:	d111      	bne.n	801e6fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e6d6:	68fb      	ldr	r3, [r7, #12]
 801e6d8:	689b      	ldr	r3, [r3, #8]
 801e6da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e6de:	d004      	beq.n	801e6ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	689b      	ldr	r3, [r3, #8]
 801e6e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e6e8:	d107      	bne.n	801e6fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	681a      	ldr	r2, [r3, #0]
 801e6f0:	68fb      	ldr	r3, [r7, #12]
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801e6f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e6fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e702:	d10f      	bne.n	801e724 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e704:	68fb      	ldr	r3, [r7, #12]
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	681a      	ldr	r2, [r3, #0]
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801e712:	601a      	str	r2, [r3, #0]
 801e714:	68fb      	ldr	r3, [r7, #12]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	681a      	ldr	r2, [r3, #0]
 801e71a:	68fb      	ldr	r3, [r7, #12]
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801e722:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	2201      	movs	r2, #1
 801e728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	2200      	movs	r2, #0
 801e730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801e734:	2303      	movs	r3, #3
 801e736:	e010      	b.n	801e75a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e738:	69bb      	ldr	r3, [r7, #24]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d101      	bne.n	801e742 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e73e:	2300      	movs	r3, #0
 801e740:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801e742:	69bb      	ldr	r3, [r7, #24]
 801e744:	3b01      	subs	r3, #1
 801e746:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e748:	68fb      	ldr	r3, [r7, #12]
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	689a      	ldr	r2, [r3, #8]
 801e74e:	68bb      	ldr	r3, [r7, #8]
 801e750:	4013      	ands	r3, r2
 801e752:	687a      	ldr	r2, [r7, #4]
 801e754:	429a      	cmp	r2, r3
 801e756:	d196      	bne.n	801e686 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e758:	2300      	movs	r3, #0
}
 801e75a:	4618      	mov	r0, r3
 801e75c:	3728      	adds	r7, #40	@ 0x28
 801e75e:	46bd      	mov	sp, r7
 801e760:	bd80      	pop	{r7, pc}
 801e762:	bf00      	nop
 801e764:	20000000 	.word	0x20000000

0801e768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801e768:	b580      	push	{r7, lr}
 801e76a:	b086      	sub	sp, #24
 801e76c:	af02      	add	r7, sp, #8
 801e76e:	60f8      	str	r0, [r7, #12]
 801e770:	60b9      	str	r1, [r7, #8]
 801e772:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	9300      	str	r3, [sp, #0]
 801e778:	68bb      	ldr	r3, [r7, #8]
 801e77a:	2200      	movs	r2, #0
 801e77c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801e780:	68f8      	ldr	r0, [r7, #12]
 801e782:	f7ff ff5b 	bl	801e63c <SPI_WaitFifoStateUntilTimeout>
 801e786:	4603      	mov	r3, r0
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d007      	beq.n	801e79c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e790:	f043 0220 	orr.w	r2, r3, #32
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801e798:	2303      	movs	r3, #3
 801e79a:	e027      	b.n	801e7ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	9300      	str	r3, [sp, #0]
 801e7a0:	68bb      	ldr	r3, [r7, #8]
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	2180      	movs	r1, #128	@ 0x80
 801e7a6:	68f8      	ldr	r0, [r7, #12]
 801e7a8:	f7ff fec0 	bl	801e52c <SPI_WaitFlagStateUntilTimeout>
 801e7ac:	4603      	mov	r3, r0
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d007      	beq.n	801e7c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e7b2:	68fb      	ldr	r3, [r7, #12]
 801e7b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e7b6:	f043 0220 	orr.w	r2, r3, #32
 801e7ba:	68fb      	ldr	r3, [r7, #12]
 801e7bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801e7be:	2303      	movs	r3, #3
 801e7c0:	e014      	b.n	801e7ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	9300      	str	r3, [sp, #0]
 801e7c6:	68bb      	ldr	r3, [r7, #8]
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801e7ce:	68f8      	ldr	r0, [r7, #12]
 801e7d0:	f7ff ff34 	bl	801e63c <SPI_WaitFifoStateUntilTimeout>
 801e7d4:	4603      	mov	r3, r0
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d007      	beq.n	801e7ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e7de:	f043 0220 	orr.w	r2, r3, #32
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801e7e6:	2303      	movs	r3, #3
 801e7e8:	e000      	b.n	801e7ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801e7ea:	2300      	movs	r3, #0
}
 801e7ec:	4618      	mov	r0, r3
 801e7ee:	3710      	adds	r7, #16
 801e7f0:	46bd      	mov	sp, r7
 801e7f2:	bd80      	pop	{r7, pc}

0801e7f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e7f4:	b580      	push	{r7, lr}
 801e7f6:	b082      	sub	sp, #8
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d101      	bne.n	801e806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e802:	2301      	movs	r3, #1
 801e804:	e049      	b.n	801e89a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801e80c:	b2db      	uxtb	r3, r3
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d106      	bne.n	801e820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	2200      	movs	r2, #0
 801e816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e81a:	6878      	ldr	r0, [r7, #4]
 801e81c:	f7e4 f8b8 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	2202      	movs	r2, #2
 801e824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681a      	ldr	r2, [r3, #0]
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	3304      	adds	r3, #4
 801e830:	4619      	mov	r1, r3
 801e832:	4610      	mov	r0, r2
 801e834:	f000 fdd4 	bl	801f3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	2201      	movs	r2, #1
 801e83c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	2201      	movs	r2, #1
 801e844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	2201      	movs	r2, #1
 801e84c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	2201      	movs	r2, #1
 801e854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	2201      	movs	r2, #1
 801e85c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	2201      	movs	r2, #1
 801e864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	2201      	movs	r2, #1
 801e86c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	2201      	movs	r2, #1
 801e874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	2201      	movs	r2, #1
 801e87c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	2201      	movs	r2, #1
 801e884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	2201      	movs	r2, #1
 801e88c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	2201      	movs	r2, #1
 801e894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801e898:	2300      	movs	r3, #0
}
 801e89a:	4618      	mov	r0, r3
 801e89c:	3708      	adds	r7, #8
 801e89e:	46bd      	mov	sp, r7
 801e8a0:	bd80      	pop	{r7, pc}
	...

0801e8a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801e8a4:	b480      	push	{r7}
 801e8a6:	b085      	sub	sp, #20
 801e8a8:	af00      	add	r7, sp, #0
 801e8aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801e8b2:	b2db      	uxtb	r3, r3
 801e8b4:	2b01      	cmp	r3, #1
 801e8b6:	d001      	beq.n	801e8bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801e8b8:	2301      	movs	r3, #1
 801e8ba:	e033      	b.n	801e924 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	2202      	movs	r2, #2
 801e8c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	4a19      	ldr	r2, [pc, #100]	@ (801e930 <HAL_TIM_Base_Start+0x8c>)
 801e8ca:	4293      	cmp	r3, r2
 801e8cc:	d009      	beq.n	801e8e2 <HAL_TIM_Base_Start+0x3e>
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e8d6:	d004      	beq.n	801e8e2 <HAL_TIM_Base_Start+0x3e>
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	4a15      	ldr	r2, [pc, #84]	@ (801e934 <HAL_TIM_Base_Start+0x90>)
 801e8de:	4293      	cmp	r3, r2
 801e8e0:	d115      	bne.n	801e90e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e8e2:	687b      	ldr	r3, [r7, #4]
 801e8e4:	681b      	ldr	r3, [r3, #0]
 801e8e6:	689a      	ldr	r2, [r3, #8]
 801e8e8:	4b13      	ldr	r3, [pc, #76]	@ (801e938 <HAL_TIM_Base_Start+0x94>)
 801e8ea:	4013      	ands	r3, r2
 801e8ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e8ee:	68fb      	ldr	r3, [r7, #12]
 801e8f0:	2b06      	cmp	r3, #6
 801e8f2:	d015      	beq.n	801e920 <HAL_TIM_Base_Start+0x7c>
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e8fa:	d011      	beq.n	801e920 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	681a      	ldr	r2, [r3, #0]
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	f042 0201 	orr.w	r2, r2, #1
 801e90a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e90c:	e008      	b.n	801e920 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	681a      	ldr	r2, [r3, #0]
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	f042 0201 	orr.w	r2, r2, #1
 801e91c:	601a      	str	r2, [r3, #0]
 801e91e:	e000      	b.n	801e922 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e920:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e922:	2300      	movs	r3, #0
}
 801e924:	4618      	mov	r0, r3
 801e926:	3714      	adds	r7, #20
 801e928:	46bd      	mov	sp, r7
 801e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e92e:	4770      	bx	lr
 801e930:	40012c00 	.word	0x40012c00
 801e934:	40014000 	.word	0x40014000
 801e938:	00010007 	.word	0x00010007

0801e93c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801e93c:	b480      	push	{r7}
 801e93e:	b083      	sub	sp, #12
 801e940:	af00      	add	r7, sp, #0
 801e942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	6a1a      	ldr	r2, [r3, #32]
 801e94a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801e94e:	4013      	ands	r3, r2
 801e950:	2b00      	cmp	r3, #0
 801e952:	d10f      	bne.n	801e974 <HAL_TIM_Base_Stop+0x38>
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	6a1a      	ldr	r2, [r3, #32]
 801e95a:	f240 4344 	movw	r3, #1092	@ 0x444
 801e95e:	4013      	ands	r3, r2
 801e960:	2b00      	cmp	r3, #0
 801e962:	d107      	bne.n	801e974 <HAL_TIM_Base_Stop+0x38>
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	681a      	ldr	r2, [r3, #0]
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	f022 0201 	bic.w	r2, r2, #1
 801e972:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	2201      	movs	r2, #1
 801e978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 801e97c:	2300      	movs	r3, #0
}
 801e97e:	4618      	mov	r0, r3
 801e980:	370c      	adds	r7, #12
 801e982:	46bd      	mov	sp, r7
 801e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e988:	4770      	bx	lr
	...

0801e98c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e98c:	b480      	push	{r7}
 801e98e:	b085      	sub	sp, #20
 801e990:	af00      	add	r7, sp, #0
 801e992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801e99a:	b2db      	uxtb	r3, r3
 801e99c:	2b01      	cmp	r3, #1
 801e99e:	d001      	beq.n	801e9a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e9a0:	2301      	movs	r3, #1
 801e9a2:	e03b      	b.n	801ea1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	2202      	movs	r2, #2
 801e9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	68da      	ldr	r2, [r3, #12]
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	f042 0201 	orr.w	r2, r2, #1
 801e9ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	4a19      	ldr	r2, [pc, #100]	@ (801ea28 <HAL_TIM_Base_Start_IT+0x9c>)
 801e9c2:	4293      	cmp	r3, r2
 801e9c4:	d009      	beq.n	801e9da <HAL_TIM_Base_Start_IT+0x4e>
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e9ce:	d004      	beq.n	801e9da <HAL_TIM_Base_Start_IT+0x4e>
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	4a15      	ldr	r2, [pc, #84]	@ (801ea2c <HAL_TIM_Base_Start_IT+0xa0>)
 801e9d6:	4293      	cmp	r3, r2
 801e9d8:	d115      	bne.n	801ea06 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	689a      	ldr	r2, [r3, #8]
 801e9e0:	4b13      	ldr	r3, [pc, #76]	@ (801ea30 <HAL_TIM_Base_Start_IT+0xa4>)
 801e9e2:	4013      	ands	r3, r2
 801e9e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e9e6:	68fb      	ldr	r3, [r7, #12]
 801e9e8:	2b06      	cmp	r3, #6
 801e9ea:	d015      	beq.n	801ea18 <HAL_TIM_Base_Start_IT+0x8c>
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e9f2:	d011      	beq.n	801ea18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	681a      	ldr	r2, [r3, #0]
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	681b      	ldr	r3, [r3, #0]
 801e9fe:	f042 0201 	orr.w	r2, r2, #1
 801ea02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea04:	e008      	b.n	801ea18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	681a      	ldr	r2, [r3, #0]
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	f042 0201 	orr.w	r2, r2, #1
 801ea14:	601a      	str	r2, [r3, #0]
 801ea16:	e000      	b.n	801ea1a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ea1a:	2300      	movs	r3, #0
}
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	3714      	adds	r7, #20
 801ea20:	46bd      	mov	sp, r7
 801ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea26:	4770      	bx	lr
 801ea28:	40012c00 	.word	0x40012c00
 801ea2c:	40014000 	.word	0x40014000
 801ea30:	00010007 	.word	0x00010007

0801ea34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ea34:	b580      	push	{r7, lr}
 801ea36:	b082      	sub	sp, #8
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	d101      	bne.n	801ea46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ea42:	2301      	movs	r3, #1
 801ea44:	e049      	b.n	801eada <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ea4c:	b2db      	uxtb	r3, r3
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d106      	bne.n	801ea60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	2200      	movs	r2, #0
 801ea56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ea5a:	6878      	ldr	r0, [r7, #4]
 801ea5c:	f7e3 ff78 	bl	8002950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	2202      	movs	r2, #2
 801ea64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681a      	ldr	r2, [r3, #0]
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	3304      	adds	r3, #4
 801ea70:	4619      	mov	r1, r3
 801ea72:	4610      	mov	r0, r2
 801ea74:	f000 fcb4 	bl	801f3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	2201      	movs	r2, #1
 801ea7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	2201      	movs	r2, #1
 801ea84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	2201      	movs	r2, #1
 801ea8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	2201      	movs	r2, #1
 801ea94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	2201      	movs	r2, #1
 801eaa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	2201      	movs	r2, #1
 801eaac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	2201      	movs	r2, #1
 801eab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	2201      	movs	r2, #1
 801eabc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	2201      	movs	r2, #1
 801eac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2201      	movs	r2, #1
 801eacc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	2201      	movs	r2, #1
 801ead4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801ead8:	2300      	movs	r3, #0
}
 801eada:	4618      	mov	r0, r3
 801eadc:	3708      	adds	r7, #8
 801eade:	46bd      	mov	sp, r7
 801eae0:	bd80      	pop	{r7, pc}
	...

0801eae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801eae4:	b580      	push	{r7, lr}
 801eae6:	b084      	sub	sp, #16
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	6078      	str	r0, [r7, #4]
 801eaec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801eaee:	683b      	ldr	r3, [r7, #0]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d109      	bne.n	801eb08 <HAL_TIM_PWM_Start+0x24>
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801eafa:	b2db      	uxtb	r3, r3
 801eafc:	2b01      	cmp	r3, #1
 801eafe:	bf14      	ite	ne
 801eb00:	2301      	movne	r3, #1
 801eb02:	2300      	moveq	r3, #0
 801eb04:	b2db      	uxtb	r3, r3
 801eb06:	e03c      	b.n	801eb82 <HAL_TIM_PWM_Start+0x9e>
 801eb08:	683b      	ldr	r3, [r7, #0]
 801eb0a:	2b04      	cmp	r3, #4
 801eb0c:	d109      	bne.n	801eb22 <HAL_TIM_PWM_Start+0x3e>
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801eb14:	b2db      	uxtb	r3, r3
 801eb16:	2b01      	cmp	r3, #1
 801eb18:	bf14      	ite	ne
 801eb1a:	2301      	movne	r3, #1
 801eb1c:	2300      	moveq	r3, #0
 801eb1e:	b2db      	uxtb	r3, r3
 801eb20:	e02f      	b.n	801eb82 <HAL_TIM_PWM_Start+0x9e>
 801eb22:	683b      	ldr	r3, [r7, #0]
 801eb24:	2b08      	cmp	r3, #8
 801eb26:	d109      	bne.n	801eb3c <HAL_TIM_PWM_Start+0x58>
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801eb2e:	b2db      	uxtb	r3, r3
 801eb30:	2b01      	cmp	r3, #1
 801eb32:	bf14      	ite	ne
 801eb34:	2301      	movne	r3, #1
 801eb36:	2300      	moveq	r3, #0
 801eb38:	b2db      	uxtb	r3, r3
 801eb3a:	e022      	b.n	801eb82 <HAL_TIM_PWM_Start+0x9e>
 801eb3c:	683b      	ldr	r3, [r7, #0]
 801eb3e:	2b0c      	cmp	r3, #12
 801eb40:	d109      	bne.n	801eb56 <HAL_TIM_PWM_Start+0x72>
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801eb48:	b2db      	uxtb	r3, r3
 801eb4a:	2b01      	cmp	r3, #1
 801eb4c:	bf14      	ite	ne
 801eb4e:	2301      	movne	r3, #1
 801eb50:	2300      	moveq	r3, #0
 801eb52:	b2db      	uxtb	r3, r3
 801eb54:	e015      	b.n	801eb82 <HAL_TIM_PWM_Start+0x9e>
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	2b10      	cmp	r3, #16
 801eb5a:	d109      	bne.n	801eb70 <HAL_TIM_PWM_Start+0x8c>
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801eb62:	b2db      	uxtb	r3, r3
 801eb64:	2b01      	cmp	r3, #1
 801eb66:	bf14      	ite	ne
 801eb68:	2301      	movne	r3, #1
 801eb6a:	2300      	moveq	r3, #0
 801eb6c:	b2db      	uxtb	r3, r3
 801eb6e:	e008      	b.n	801eb82 <HAL_TIM_PWM_Start+0x9e>
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801eb76:	b2db      	uxtb	r3, r3
 801eb78:	2b01      	cmp	r3, #1
 801eb7a:	bf14      	ite	ne
 801eb7c:	2301      	movne	r3, #1
 801eb7e:	2300      	moveq	r3, #0
 801eb80:	b2db      	uxtb	r3, r3
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d001      	beq.n	801eb8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801eb86:	2301      	movs	r3, #1
 801eb88:	e07e      	b.n	801ec88 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801eb8a:	683b      	ldr	r3, [r7, #0]
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d104      	bne.n	801eb9a <HAL_TIM_PWM_Start+0xb6>
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	2202      	movs	r2, #2
 801eb94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801eb98:	e023      	b.n	801ebe2 <HAL_TIM_PWM_Start+0xfe>
 801eb9a:	683b      	ldr	r3, [r7, #0]
 801eb9c:	2b04      	cmp	r3, #4
 801eb9e:	d104      	bne.n	801ebaa <HAL_TIM_PWM_Start+0xc6>
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	2202      	movs	r2, #2
 801eba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801eba8:	e01b      	b.n	801ebe2 <HAL_TIM_PWM_Start+0xfe>
 801ebaa:	683b      	ldr	r3, [r7, #0]
 801ebac:	2b08      	cmp	r3, #8
 801ebae:	d104      	bne.n	801ebba <HAL_TIM_PWM_Start+0xd6>
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	2202      	movs	r2, #2
 801ebb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801ebb8:	e013      	b.n	801ebe2 <HAL_TIM_PWM_Start+0xfe>
 801ebba:	683b      	ldr	r3, [r7, #0]
 801ebbc:	2b0c      	cmp	r3, #12
 801ebbe:	d104      	bne.n	801ebca <HAL_TIM_PWM_Start+0xe6>
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	2202      	movs	r2, #2
 801ebc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801ebc8:	e00b      	b.n	801ebe2 <HAL_TIM_PWM_Start+0xfe>
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	2b10      	cmp	r3, #16
 801ebce:	d104      	bne.n	801ebda <HAL_TIM_PWM_Start+0xf6>
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	2202      	movs	r2, #2
 801ebd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801ebd8:	e003      	b.n	801ebe2 <HAL_TIM_PWM_Start+0xfe>
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	2202      	movs	r2, #2
 801ebde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	2201      	movs	r2, #1
 801ebe8:	6839      	ldr	r1, [r7, #0]
 801ebea:	4618      	mov	r0, r3
 801ebec:	f000 ff80 	bl	801faf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	681b      	ldr	r3, [r3, #0]
 801ebf4:	4a26      	ldr	r2, [pc, #152]	@ (801ec90 <HAL_TIM_PWM_Start+0x1ac>)
 801ebf6:	4293      	cmp	r3, r2
 801ebf8:	d009      	beq.n	801ec0e <HAL_TIM_PWM_Start+0x12a>
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	4a25      	ldr	r2, [pc, #148]	@ (801ec94 <HAL_TIM_PWM_Start+0x1b0>)
 801ec00:	4293      	cmp	r3, r2
 801ec02:	d004      	beq.n	801ec0e <HAL_TIM_PWM_Start+0x12a>
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	4a23      	ldr	r2, [pc, #140]	@ (801ec98 <HAL_TIM_PWM_Start+0x1b4>)
 801ec0a:	4293      	cmp	r3, r2
 801ec0c:	d101      	bne.n	801ec12 <HAL_TIM_PWM_Start+0x12e>
 801ec0e:	2301      	movs	r3, #1
 801ec10:	e000      	b.n	801ec14 <HAL_TIM_PWM_Start+0x130>
 801ec12:	2300      	movs	r3, #0
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d007      	beq.n	801ec28 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801ec26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	681b      	ldr	r3, [r3, #0]
 801ec2c:	4a18      	ldr	r2, [pc, #96]	@ (801ec90 <HAL_TIM_PWM_Start+0x1ac>)
 801ec2e:	4293      	cmp	r3, r2
 801ec30:	d009      	beq.n	801ec46 <HAL_TIM_PWM_Start+0x162>
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ec3a:	d004      	beq.n	801ec46 <HAL_TIM_PWM_Start+0x162>
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	4a14      	ldr	r2, [pc, #80]	@ (801ec94 <HAL_TIM_PWM_Start+0x1b0>)
 801ec42:	4293      	cmp	r3, r2
 801ec44:	d115      	bne.n	801ec72 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	689a      	ldr	r2, [r3, #8]
 801ec4c:	4b13      	ldr	r3, [pc, #76]	@ (801ec9c <HAL_TIM_PWM_Start+0x1b8>)
 801ec4e:	4013      	ands	r3, r2
 801ec50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	2b06      	cmp	r3, #6
 801ec56:	d015      	beq.n	801ec84 <HAL_TIM_PWM_Start+0x1a0>
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ec5e:	d011      	beq.n	801ec84 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	681a      	ldr	r2, [r3, #0]
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	f042 0201 	orr.w	r2, r2, #1
 801ec6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec70:	e008      	b.n	801ec84 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	681a      	ldr	r2, [r3, #0]
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	f042 0201 	orr.w	r2, r2, #1
 801ec80:	601a      	str	r2, [r3, #0]
 801ec82:	e000      	b.n	801ec86 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ec86:	2300      	movs	r3, #0
}
 801ec88:	4618      	mov	r0, r3
 801ec8a:	3710      	adds	r7, #16
 801ec8c:	46bd      	mov	sp, r7
 801ec8e:	bd80      	pop	{r7, pc}
 801ec90:	40012c00 	.word	0x40012c00
 801ec94:	40014000 	.word	0x40014000
 801ec98:	40014400 	.word	0x40014400
 801ec9c:	00010007 	.word	0x00010007

0801eca0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801eca0:	b580      	push	{r7, lr}
 801eca2:	b082      	sub	sp, #8
 801eca4:	af00      	add	r7, sp, #0
 801eca6:	6078      	str	r0, [r7, #4]
 801eca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	2200      	movs	r2, #0
 801ecb0:	6839      	ldr	r1, [r7, #0]
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	f000 ff1c 	bl	801faf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	4a39      	ldr	r2, [pc, #228]	@ (801eda4 <HAL_TIM_PWM_Stop+0x104>)
 801ecbe:	4293      	cmp	r3, r2
 801ecc0:	d009      	beq.n	801ecd6 <HAL_TIM_PWM_Stop+0x36>
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	4a38      	ldr	r2, [pc, #224]	@ (801eda8 <HAL_TIM_PWM_Stop+0x108>)
 801ecc8:	4293      	cmp	r3, r2
 801ecca:	d004      	beq.n	801ecd6 <HAL_TIM_PWM_Stop+0x36>
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	4a36      	ldr	r2, [pc, #216]	@ (801edac <HAL_TIM_PWM_Stop+0x10c>)
 801ecd2:	4293      	cmp	r3, r2
 801ecd4:	d101      	bne.n	801ecda <HAL_TIM_PWM_Stop+0x3a>
 801ecd6:	2301      	movs	r3, #1
 801ecd8:	e000      	b.n	801ecdc <HAL_TIM_PWM_Stop+0x3c>
 801ecda:	2300      	movs	r3, #0
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d017      	beq.n	801ed10 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	681b      	ldr	r3, [r3, #0]
 801ece4:	6a1a      	ldr	r2, [r3, #32]
 801ece6:	f241 1311 	movw	r3, #4369	@ 0x1111
 801ecea:	4013      	ands	r3, r2
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d10f      	bne.n	801ed10 <HAL_TIM_PWM_Stop+0x70>
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	6a1a      	ldr	r2, [r3, #32]
 801ecf6:	f240 4344 	movw	r3, #1092	@ 0x444
 801ecfa:	4013      	ands	r3, r2
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d107      	bne.n	801ed10 <HAL_TIM_PWM_Stop+0x70>
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801ed0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	6a1a      	ldr	r2, [r3, #32]
 801ed16:	f241 1311 	movw	r3, #4369	@ 0x1111
 801ed1a:	4013      	ands	r3, r2
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d10f      	bne.n	801ed40 <HAL_TIM_PWM_Stop+0xa0>
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	6a1a      	ldr	r2, [r3, #32]
 801ed26:	f240 4344 	movw	r3, #1092	@ 0x444
 801ed2a:	4013      	ands	r3, r2
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	d107      	bne.n	801ed40 <HAL_TIM_PWM_Stop+0xa0>
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	681a      	ldr	r2, [r3, #0]
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	f022 0201 	bic.w	r2, r2, #1
 801ed3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801ed40:	683b      	ldr	r3, [r7, #0]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d104      	bne.n	801ed50 <HAL_TIM_PWM_Stop+0xb0>
 801ed46:	687b      	ldr	r3, [r7, #4]
 801ed48:	2201      	movs	r2, #1
 801ed4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ed4e:	e023      	b.n	801ed98 <HAL_TIM_PWM_Stop+0xf8>
 801ed50:	683b      	ldr	r3, [r7, #0]
 801ed52:	2b04      	cmp	r3, #4
 801ed54:	d104      	bne.n	801ed60 <HAL_TIM_PWM_Stop+0xc0>
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	2201      	movs	r2, #1
 801ed5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801ed5e:	e01b      	b.n	801ed98 <HAL_TIM_PWM_Stop+0xf8>
 801ed60:	683b      	ldr	r3, [r7, #0]
 801ed62:	2b08      	cmp	r3, #8
 801ed64:	d104      	bne.n	801ed70 <HAL_TIM_PWM_Stop+0xd0>
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	2201      	movs	r2, #1
 801ed6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801ed6e:	e013      	b.n	801ed98 <HAL_TIM_PWM_Stop+0xf8>
 801ed70:	683b      	ldr	r3, [r7, #0]
 801ed72:	2b0c      	cmp	r3, #12
 801ed74:	d104      	bne.n	801ed80 <HAL_TIM_PWM_Stop+0xe0>
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	2201      	movs	r2, #1
 801ed7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801ed7e:	e00b      	b.n	801ed98 <HAL_TIM_PWM_Stop+0xf8>
 801ed80:	683b      	ldr	r3, [r7, #0]
 801ed82:	2b10      	cmp	r3, #16
 801ed84:	d104      	bne.n	801ed90 <HAL_TIM_PWM_Stop+0xf0>
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	2201      	movs	r2, #1
 801ed8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801ed8e:	e003      	b.n	801ed98 <HAL_TIM_PWM_Stop+0xf8>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	2201      	movs	r2, #1
 801ed94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 801ed98:	2300      	movs	r3, #0
}
 801ed9a:	4618      	mov	r0, r3
 801ed9c:	3708      	adds	r7, #8
 801ed9e:	46bd      	mov	sp, r7
 801eda0:	bd80      	pop	{r7, pc}
 801eda2:	bf00      	nop
 801eda4:	40012c00 	.word	0x40012c00
 801eda8:	40014000 	.word	0x40014000
 801edac:	40014400 	.word	0x40014400

0801edb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801edb0:	b580      	push	{r7, lr}
 801edb2:	b084      	sub	sp, #16
 801edb4:	af00      	add	r7, sp, #0
 801edb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	68db      	ldr	r3, [r3, #12]
 801edbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	681b      	ldr	r3, [r3, #0]
 801edc4:	691b      	ldr	r3, [r3, #16]
 801edc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801edc8:	68bb      	ldr	r3, [r7, #8]
 801edca:	f003 0302 	and.w	r3, r3, #2
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d020      	beq.n	801ee14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	f003 0302 	and.w	r3, r3, #2
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d01b      	beq.n	801ee14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	f06f 0202 	mvn.w	r2, #2
 801ede4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	2201      	movs	r2, #1
 801edea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	699b      	ldr	r3, [r3, #24]
 801edf2:	f003 0303 	and.w	r3, r3, #3
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d003      	beq.n	801ee02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801edfa:	6878      	ldr	r0, [r7, #4]
 801edfc:	f000 fad1 	bl	801f3a2 <HAL_TIM_IC_CaptureCallback>
 801ee00:	e005      	b.n	801ee0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ee02:	6878      	ldr	r0, [r7, #4]
 801ee04:	f000 fac3 	bl	801f38e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ee08:	6878      	ldr	r0, [r7, #4]
 801ee0a:	f000 fad4 	bl	801f3b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	2200      	movs	r2, #0
 801ee12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801ee14:	68bb      	ldr	r3, [r7, #8]
 801ee16:	f003 0304 	and.w	r3, r3, #4
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	d020      	beq.n	801ee60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801ee1e:	68fb      	ldr	r3, [r7, #12]
 801ee20:	f003 0304 	and.w	r3, r3, #4
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d01b      	beq.n	801ee60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	f06f 0204 	mvn.w	r2, #4
 801ee30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	2202      	movs	r2, #2
 801ee36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	699b      	ldr	r3, [r3, #24]
 801ee3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d003      	beq.n	801ee4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ee46:	6878      	ldr	r0, [r7, #4]
 801ee48:	f000 faab 	bl	801f3a2 <HAL_TIM_IC_CaptureCallback>
 801ee4c:	e005      	b.n	801ee5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ee4e:	6878      	ldr	r0, [r7, #4]
 801ee50:	f000 fa9d 	bl	801f38e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ee54:	6878      	ldr	r0, [r7, #4]
 801ee56:	f000 faae 	bl	801f3b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	2200      	movs	r2, #0
 801ee5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801ee60:	68bb      	ldr	r3, [r7, #8]
 801ee62:	f003 0308 	and.w	r3, r3, #8
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d020      	beq.n	801eeac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	f003 0308 	and.w	r3, r3, #8
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d01b      	beq.n	801eeac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	f06f 0208 	mvn.w	r2, #8
 801ee7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	2204      	movs	r2, #4
 801ee82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	69db      	ldr	r3, [r3, #28]
 801ee8a:	f003 0303 	and.w	r3, r3, #3
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d003      	beq.n	801ee9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ee92:	6878      	ldr	r0, [r7, #4]
 801ee94:	f000 fa85 	bl	801f3a2 <HAL_TIM_IC_CaptureCallback>
 801ee98:	e005      	b.n	801eea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ee9a:	6878      	ldr	r0, [r7, #4]
 801ee9c:	f000 fa77 	bl	801f38e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801eea0:	6878      	ldr	r0, [r7, #4]
 801eea2:	f000 fa88 	bl	801f3b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	2200      	movs	r2, #0
 801eeaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801eeac:	68bb      	ldr	r3, [r7, #8]
 801eeae:	f003 0310 	and.w	r3, r3, #16
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d020      	beq.n	801eef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	f003 0310 	and.w	r3, r3, #16
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d01b      	beq.n	801eef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	f06f 0210 	mvn.w	r2, #16
 801eec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	2208      	movs	r2, #8
 801eece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	69db      	ldr	r3, [r3, #28]
 801eed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d003      	beq.n	801eee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801eede:	6878      	ldr	r0, [r7, #4]
 801eee0:	f000 fa5f 	bl	801f3a2 <HAL_TIM_IC_CaptureCallback>
 801eee4:	e005      	b.n	801eef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801eee6:	6878      	ldr	r0, [r7, #4]
 801eee8:	f000 fa51 	bl	801f38e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801eeec:	6878      	ldr	r0, [r7, #4]
 801eeee:	f000 fa62 	bl	801f3b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	2200      	movs	r2, #0
 801eef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801eef8:	68bb      	ldr	r3, [r7, #8]
 801eefa:	f003 0301 	and.w	r3, r3, #1
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d00c      	beq.n	801ef1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	f003 0301 	and.w	r3, r3, #1
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d007      	beq.n	801ef1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	f06f 0201 	mvn.w	r2, #1
 801ef14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ef16:	6878      	ldr	r0, [r7, #4]
 801ef18:	f000 fa2f 	bl	801f37a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801ef1c:	68bb      	ldr	r3, [r7, #8]
 801ef1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	d104      	bne.n	801ef30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801ef26:	68bb      	ldr	r3, [r7, #8]
 801ef28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d00c      	beq.n	801ef4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d007      	beq.n	801ef4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	681b      	ldr	r3, [r3, #0]
 801ef3e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801ef42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ef44:	6878      	ldr	r0, [r7, #4]
 801ef46:	f000 fee1 	bl	801fd0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801ef4a:	68bb      	ldr	r3, [r7, #8]
 801ef4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d00c      	beq.n	801ef6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d007      	beq.n	801ef6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801ef66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801ef68:	6878      	ldr	r0, [r7, #4]
 801ef6a:	f000 fed9 	bl	801fd20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801ef6e:	68bb      	ldr	r3, [r7, #8]
 801ef70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d00c      	beq.n	801ef92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d007      	beq.n	801ef92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801ef8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ef8c:	6878      	ldr	r0, [r7, #4]
 801ef8e:	f000 fa1c 	bl	801f3ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801ef92:	68bb      	ldr	r3, [r7, #8]
 801ef94:	f003 0320 	and.w	r3, r3, #32
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d00c      	beq.n	801efb6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801ef9c:	68fb      	ldr	r3, [r7, #12]
 801ef9e:	f003 0320 	and.w	r3, r3, #32
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d007      	beq.n	801efb6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	f06f 0220 	mvn.w	r2, #32
 801efae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801efb0:	6878      	ldr	r0, [r7, #4]
 801efb2:	f000 fea1 	bl	801fcf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801efb6:	bf00      	nop
 801efb8:	3710      	adds	r7, #16
 801efba:	46bd      	mov	sp, r7
 801efbc:	bd80      	pop	{r7, pc}
	...

0801efc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	b086      	sub	sp, #24
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	60f8      	str	r0, [r7, #12]
 801efc8:	60b9      	str	r1, [r7, #8]
 801efca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801efcc:	2300      	movs	r3, #0
 801efce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801efd6:	2b01      	cmp	r3, #1
 801efd8:	d101      	bne.n	801efde <HAL_TIM_PWM_ConfigChannel+0x1e>
 801efda:	2302      	movs	r3, #2
 801efdc:	e0ff      	b.n	801f1de <HAL_TIM_PWM_ConfigChannel+0x21e>
 801efde:	68fb      	ldr	r3, [r7, #12]
 801efe0:	2201      	movs	r2, #1
 801efe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	2b14      	cmp	r3, #20
 801efea:	f200 80f0 	bhi.w	801f1ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 801efee:	a201      	add	r2, pc, #4	@ (adr r2, 801eff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801eff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eff4:	0801f049 	.word	0x0801f049
 801eff8:	0801f1cf 	.word	0x0801f1cf
 801effc:	0801f1cf 	.word	0x0801f1cf
 801f000:	0801f1cf 	.word	0x0801f1cf
 801f004:	0801f089 	.word	0x0801f089
 801f008:	0801f1cf 	.word	0x0801f1cf
 801f00c:	0801f1cf 	.word	0x0801f1cf
 801f010:	0801f1cf 	.word	0x0801f1cf
 801f014:	0801f0cb 	.word	0x0801f0cb
 801f018:	0801f1cf 	.word	0x0801f1cf
 801f01c:	0801f1cf 	.word	0x0801f1cf
 801f020:	0801f1cf 	.word	0x0801f1cf
 801f024:	0801f10b 	.word	0x0801f10b
 801f028:	0801f1cf 	.word	0x0801f1cf
 801f02c:	0801f1cf 	.word	0x0801f1cf
 801f030:	0801f1cf 	.word	0x0801f1cf
 801f034:	0801f14d 	.word	0x0801f14d
 801f038:	0801f1cf 	.word	0x0801f1cf
 801f03c:	0801f1cf 	.word	0x0801f1cf
 801f040:	0801f1cf 	.word	0x0801f1cf
 801f044:	0801f18d 	.word	0x0801f18d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	68b9      	ldr	r1, [r7, #8]
 801f04e:	4618      	mov	r0, r3
 801f050:	f000 fa36 	bl	801f4c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	699a      	ldr	r2, [r3, #24]
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	f042 0208 	orr.w	r2, r2, #8
 801f062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	699a      	ldr	r2, [r3, #24]
 801f06a:	68fb      	ldr	r3, [r7, #12]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	f022 0204 	bic.w	r2, r2, #4
 801f072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f074:	68fb      	ldr	r3, [r7, #12]
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	6999      	ldr	r1, [r3, #24]
 801f07a:	68bb      	ldr	r3, [r7, #8]
 801f07c:	691a      	ldr	r2, [r3, #16]
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	430a      	orrs	r2, r1
 801f084:	619a      	str	r2, [r3, #24]
      break;
 801f086:	e0a5      	b.n	801f1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	68b9      	ldr	r1, [r7, #8]
 801f08e:	4618      	mov	r0, r3
 801f090:	f000 fa92 	bl	801f5b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	699a      	ldr	r2, [r3, #24]
 801f09a:	68fb      	ldr	r3, [r7, #12]
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f0a4:	68fb      	ldr	r3, [r7, #12]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	699a      	ldr	r2, [r3, #24]
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f0b4:	68fb      	ldr	r3, [r7, #12]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	6999      	ldr	r1, [r3, #24]
 801f0ba:	68bb      	ldr	r3, [r7, #8]
 801f0bc:	691b      	ldr	r3, [r3, #16]
 801f0be:	021a      	lsls	r2, r3, #8
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	681b      	ldr	r3, [r3, #0]
 801f0c4:	430a      	orrs	r2, r1
 801f0c6:	619a      	str	r2, [r3, #24]
      break;
 801f0c8:	e084      	b.n	801f1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	68b9      	ldr	r1, [r7, #8]
 801f0d0:	4618      	mov	r0, r3
 801f0d2:	f000 faeb 	bl	801f6ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	681b      	ldr	r3, [r3, #0]
 801f0da:	69da      	ldr	r2, [r3, #28]
 801f0dc:	68fb      	ldr	r3, [r7, #12]
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	f042 0208 	orr.w	r2, r2, #8
 801f0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	69da      	ldr	r2, [r3, #28]
 801f0ec:	68fb      	ldr	r3, [r7, #12]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	f022 0204 	bic.w	r2, r2, #4
 801f0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	69d9      	ldr	r1, [r3, #28]
 801f0fc:	68bb      	ldr	r3, [r7, #8]
 801f0fe:	691a      	ldr	r2, [r3, #16]
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	430a      	orrs	r2, r1
 801f106:	61da      	str	r2, [r3, #28]
      break;
 801f108:	e064      	b.n	801f1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	68b9      	ldr	r1, [r7, #8]
 801f110:	4618      	mov	r0, r3
 801f112:	f000 fb43 	bl	801f79c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	69da      	ldr	r2, [r3, #28]
 801f11c:	68fb      	ldr	r3, [r7, #12]
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	69da      	ldr	r2, [r3, #28]
 801f12c:	68fb      	ldr	r3, [r7, #12]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f136:	68fb      	ldr	r3, [r7, #12]
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	69d9      	ldr	r1, [r3, #28]
 801f13c:	68bb      	ldr	r3, [r7, #8]
 801f13e:	691b      	ldr	r3, [r3, #16]
 801f140:	021a      	lsls	r2, r3, #8
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	430a      	orrs	r2, r1
 801f148:	61da      	str	r2, [r3, #28]
      break;
 801f14a:	e043      	b.n	801f1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f14c:	68fb      	ldr	r3, [r7, #12]
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	68b9      	ldr	r1, [r7, #8]
 801f152:	4618      	mov	r0, r3
 801f154:	f000 fb80 	bl	801f858 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	681b      	ldr	r3, [r3, #0]
 801f162:	f042 0208 	orr.w	r2, r2, #8
 801f166:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f168:	68fb      	ldr	r3, [r7, #12]
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f16e:	68fb      	ldr	r3, [r7, #12]
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	f022 0204 	bic.w	r2, r2, #4
 801f176:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f178:	68fb      	ldr	r3, [r7, #12]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f17e:	68bb      	ldr	r3, [r7, #8]
 801f180:	691a      	ldr	r2, [r3, #16]
 801f182:	68fb      	ldr	r3, [r7, #12]
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	430a      	orrs	r2, r1
 801f188:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f18a:	e023      	b.n	801f1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f18c:	68fb      	ldr	r3, [r7, #12]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	68b9      	ldr	r1, [r7, #8]
 801f192:	4618      	mov	r0, r3
 801f194:	f000 fbb8 	bl	801f908 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f198:	68fb      	ldr	r3, [r7, #12]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f19e:	68fb      	ldr	r3, [r7, #12]
 801f1a0:	681b      	ldr	r3, [r3, #0]
 801f1a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f1a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f1b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f1b8:	68fb      	ldr	r3, [r7, #12]
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f1be:	68bb      	ldr	r3, [r7, #8]
 801f1c0:	691b      	ldr	r3, [r3, #16]
 801f1c2:	021a      	lsls	r2, r3, #8
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	430a      	orrs	r2, r1
 801f1ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f1cc:	e002      	b.n	801f1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f1ce:	2301      	movs	r3, #1
 801f1d0:	75fb      	strb	r3, [r7, #23]
      break;
 801f1d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801f1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 801f1de:	4618      	mov	r0, r3
 801f1e0:	3718      	adds	r7, #24
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}
 801f1e6:	bf00      	nop

0801f1e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f1e8:	b580      	push	{r7, lr}
 801f1ea:	b084      	sub	sp, #16
 801f1ec:	af00      	add	r7, sp, #0
 801f1ee:	6078      	str	r0, [r7, #4]
 801f1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f1fc:	2b01      	cmp	r3, #1
 801f1fe:	d101      	bne.n	801f204 <HAL_TIM_ConfigClockSource+0x1c>
 801f200:	2302      	movs	r3, #2
 801f202:	e0b6      	b.n	801f372 <HAL_TIM_ConfigClockSource+0x18a>
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	2201      	movs	r2, #1
 801f208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	2202      	movs	r2, #2
 801f210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	681b      	ldr	r3, [r3, #0]
 801f218:	689b      	ldr	r3, [r3, #8]
 801f21a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f21c:	68bb      	ldr	r3, [r7, #8]
 801f21e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801f222:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801f226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f228:	68bb      	ldr	r3, [r7, #8]
 801f22a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f22e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	68ba      	ldr	r2, [r7, #8]
 801f236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f238:	683b      	ldr	r3, [r7, #0]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801f240:	d03e      	beq.n	801f2c0 <HAL_TIM_ConfigClockSource+0xd8>
 801f242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801f246:	f200 8087 	bhi.w	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f24a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f24e:	f000 8086 	beq.w	801f35e <HAL_TIM_ConfigClockSource+0x176>
 801f252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f256:	d87f      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f258:	2b70      	cmp	r3, #112	@ 0x70
 801f25a:	d01a      	beq.n	801f292 <HAL_TIM_ConfigClockSource+0xaa>
 801f25c:	2b70      	cmp	r3, #112	@ 0x70
 801f25e:	d87b      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f260:	2b60      	cmp	r3, #96	@ 0x60
 801f262:	d050      	beq.n	801f306 <HAL_TIM_ConfigClockSource+0x11e>
 801f264:	2b60      	cmp	r3, #96	@ 0x60
 801f266:	d877      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f268:	2b50      	cmp	r3, #80	@ 0x50
 801f26a:	d03c      	beq.n	801f2e6 <HAL_TIM_ConfigClockSource+0xfe>
 801f26c:	2b50      	cmp	r3, #80	@ 0x50
 801f26e:	d873      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f270:	2b40      	cmp	r3, #64	@ 0x40
 801f272:	d058      	beq.n	801f326 <HAL_TIM_ConfigClockSource+0x13e>
 801f274:	2b40      	cmp	r3, #64	@ 0x40
 801f276:	d86f      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f278:	2b30      	cmp	r3, #48	@ 0x30
 801f27a:	d064      	beq.n	801f346 <HAL_TIM_ConfigClockSource+0x15e>
 801f27c:	2b30      	cmp	r3, #48	@ 0x30
 801f27e:	d86b      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f280:	2b20      	cmp	r3, #32
 801f282:	d060      	beq.n	801f346 <HAL_TIM_ConfigClockSource+0x15e>
 801f284:	2b20      	cmp	r3, #32
 801f286:	d867      	bhi.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d05c      	beq.n	801f346 <HAL_TIM_ConfigClockSource+0x15e>
 801f28c:	2b10      	cmp	r3, #16
 801f28e:	d05a      	beq.n	801f346 <HAL_TIM_ConfigClockSource+0x15e>
 801f290:	e062      	b.n	801f358 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801f296:	683b      	ldr	r3, [r7, #0]
 801f298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801f29a:	683b      	ldr	r3, [r7, #0]
 801f29c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801f29e:	683b      	ldr	r3, [r7, #0]
 801f2a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801f2a2:	f000 fc05 	bl	801fab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	689b      	ldr	r3, [r3, #8]
 801f2ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f2ae:	68bb      	ldr	r3, [r7, #8]
 801f2b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801f2b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	68ba      	ldr	r2, [r7, #8]
 801f2bc:	609a      	str	r2, [r3, #8]
      break;
 801f2be:	e04f      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801f2c4:	683b      	ldr	r3, [r7, #0]
 801f2c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801f2c8:	683b      	ldr	r3, [r7, #0]
 801f2ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801f2cc:	683b      	ldr	r3, [r7, #0]
 801f2ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801f2d0:	f000 fbee 	bl	801fab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	689a      	ldr	r2, [r3, #8]
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801f2e2:	609a      	str	r2, [r3, #8]
      break;
 801f2e4:	e03c      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801f2ea:	683b      	ldr	r3, [r7, #0]
 801f2ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801f2ee:	683b      	ldr	r3, [r7, #0]
 801f2f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801f2f2:	461a      	mov	r2, r3
 801f2f4:	f000 fb62 	bl	801f9bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	2150      	movs	r1, #80	@ 0x50
 801f2fe:	4618      	mov	r0, r3
 801f300:	f000 fbbb 	bl	801fa7a <TIM_ITRx_SetConfig>
      break;
 801f304:	e02c      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801f30a:	683b      	ldr	r3, [r7, #0]
 801f30c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801f30e:	683b      	ldr	r3, [r7, #0]
 801f310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801f312:	461a      	mov	r2, r3
 801f314:	f000 fb81 	bl	801fa1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	2160      	movs	r1, #96	@ 0x60
 801f31e:	4618      	mov	r0, r3
 801f320:	f000 fbab 	bl	801fa7a <TIM_ITRx_SetConfig>
      break;
 801f324:	e01c      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801f32a:	683b      	ldr	r3, [r7, #0]
 801f32c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801f32e:	683b      	ldr	r3, [r7, #0]
 801f330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801f332:	461a      	mov	r2, r3
 801f334:	f000 fb42 	bl	801f9bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	2140      	movs	r1, #64	@ 0x40
 801f33e:	4618      	mov	r0, r3
 801f340:	f000 fb9b 	bl	801fa7a <TIM_ITRx_SetConfig>
      break;
 801f344:	e00c      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	681a      	ldr	r2, [r3, #0]
 801f34a:	683b      	ldr	r3, [r7, #0]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	4619      	mov	r1, r3
 801f350:	4610      	mov	r0, r2
 801f352:	f000 fb92 	bl	801fa7a <TIM_ITRx_SetConfig>
      break;
 801f356:	e003      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801f358:	2301      	movs	r3, #1
 801f35a:	73fb      	strb	r3, [r7, #15]
      break;
 801f35c:	e000      	b.n	801f360 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801f35e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	2201      	movs	r2, #1
 801f364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	2200      	movs	r2, #0
 801f36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801f370:	7bfb      	ldrb	r3, [r7, #15]
}
 801f372:	4618      	mov	r0, r3
 801f374:	3710      	adds	r7, #16
 801f376:	46bd      	mov	sp, r7
 801f378:	bd80      	pop	{r7, pc}

0801f37a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f37a:	b480      	push	{r7}
 801f37c:	b083      	sub	sp, #12
 801f37e:	af00      	add	r7, sp, #0
 801f380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801f382:	bf00      	nop
 801f384:	370c      	adds	r7, #12
 801f386:	46bd      	mov	sp, r7
 801f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f38c:	4770      	bx	lr

0801f38e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f38e:	b480      	push	{r7}
 801f390:	b083      	sub	sp, #12
 801f392:	af00      	add	r7, sp, #0
 801f394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f396:	bf00      	nop
 801f398:	370c      	adds	r7, #12
 801f39a:	46bd      	mov	sp, r7
 801f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3a0:	4770      	bx	lr

0801f3a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f3a2:	b480      	push	{r7}
 801f3a4:	b083      	sub	sp, #12
 801f3a6:	af00      	add	r7, sp, #0
 801f3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f3aa:	bf00      	nop
 801f3ac:	370c      	adds	r7, #12
 801f3ae:	46bd      	mov	sp, r7
 801f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b4:	4770      	bx	lr

0801f3b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f3b6:	b480      	push	{r7}
 801f3b8:	b083      	sub	sp, #12
 801f3ba:	af00      	add	r7, sp, #0
 801f3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f3be:	bf00      	nop
 801f3c0:	370c      	adds	r7, #12
 801f3c2:	46bd      	mov	sp, r7
 801f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c8:	4770      	bx	lr

0801f3ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f3ca:	b480      	push	{r7}
 801f3cc:	b083      	sub	sp, #12
 801f3ce:	af00      	add	r7, sp, #0
 801f3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f3d2:	bf00      	nop
 801f3d4:	370c      	adds	r7, #12
 801f3d6:	46bd      	mov	sp, r7
 801f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3dc:	4770      	bx	lr
	...

0801f3e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f3e0:	b480      	push	{r7}
 801f3e2:	b085      	sub	sp, #20
 801f3e4:	af00      	add	r7, sp, #0
 801f3e6:	6078      	str	r0, [r7, #4]
 801f3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	4a30      	ldr	r2, [pc, #192]	@ (801f4b4 <TIM_Base_SetConfig+0xd4>)
 801f3f4:	4293      	cmp	r3, r2
 801f3f6:	d003      	beq.n	801f400 <TIM_Base_SetConfig+0x20>
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f3fe:	d108      	bne.n	801f412 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f408:	683b      	ldr	r3, [r7, #0]
 801f40a:	685b      	ldr	r3, [r3, #4]
 801f40c:	68fa      	ldr	r2, [r7, #12]
 801f40e:	4313      	orrs	r3, r2
 801f410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	4a27      	ldr	r2, [pc, #156]	@ (801f4b4 <TIM_Base_SetConfig+0xd4>)
 801f416:	4293      	cmp	r3, r2
 801f418:	d00b      	beq.n	801f432 <TIM_Base_SetConfig+0x52>
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f420:	d007      	beq.n	801f432 <TIM_Base_SetConfig+0x52>
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	4a24      	ldr	r2, [pc, #144]	@ (801f4b8 <TIM_Base_SetConfig+0xd8>)
 801f426:	4293      	cmp	r3, r2
 801f428:	d003      	beq.n	801f432 <TIM_Base_SetConfig+0x52>
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	4a23      	ldr	r2, [pc, #140]	@ (801f4bc <TIM_Base_SetConfig+0xdc>)
 801f42e:	4293      	cmp	r3, r2
 801f430:	d108      	bne.n	801f444 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f432:	68fb      	ldr	r3, [r7, #12]
 801f434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	68db      	ldr	r3, [r3, #12]
 801f43e:	68fa      	ldr	r2, [r7, #12]
 801f440:	4313      	orrs	r3, r2
 801f442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f444:	68fb      	ldr	r3, [r7, #12]
 801f446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	695b      	ldr	r3, [r3, #20]
 801f44e:	4313      	orrs	r3, r2
 801f450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	68fa      	ldr	r2, [r7, #12]
 801f456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f458:	683b      	ldr	r3, [r7, #0]
 801f45a:	689a      	ldr	r2, [r3, #8]
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f460:	683b      	ldr	r3, [r7, #0]
 801f462:	681a      	ldr	r2, [r3, #0]
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	4a12      	ldr	r2, [pc, #72]	@ (801f4b4 <TIM_Base_SetConfig+0xd4>)
 801f46c:	4293      	cmp	r3, r2
 801f46e:	d007      	beq.n	801f480 <TIM_Base_SetConfig+0xa0>
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	4a11      	ldr	r2, [pc, #68]	@ (801f4b8 <TIM_Base_SetConfig+0xd8>)
 801f474:	4293      	cmp	r3, r2
 801f476:	d003      	beq.n	801f480 <TIM_Base_SetConfig+0xa0>
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	4a10      	ldr	r2, [pc, #64]	@ (801f4bc <TIM_Base_SetConfig+0xdc>)
 801f47c:	4293      	cmp	r3, r2
 801f47e:	d103      	bne.n	801f488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f480:	683b      	ldr	r3, [r7, #0]
 801f482:	691a      	ldr	r2, [r3, #16]
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	2201      	movs	r2, #1
 801f48c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	691b      	ldr	r3, [r3, #16]
 801f492:	f003 0301 	and.w	r3, r3, #1
 801f496:	2b01      	cmp	r3, #1
 801f498:	d105      	bne.n	801f4a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	691b      	ldr	r3, [r3, #16]
 801f49e:	f023 0201 	bic.w	r2, r3, #1
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	611a      	str	r2, [r3, #16]
  }
}
 801f4a6:	bf00      	nop
 801f4a8:	3714      	adds	r7, #20
 801f4aa:	46bd      	mov	sp, r7
 801f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4b0:	4770      	bx	lr
 801f4b2:	bf00      	nop
 801f4b4:	40012c00 	.word	0x40012c00
 801f4b8:	40014000 	.word	0x40014000
 801f4bc:	40014400 	.word	0x40014400

0801f4c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f4c0:	b480      	push	{r7}
 801f4c2:	b087      	sub	sp, #28
 801f4c4:	af00      	add	r7, sp, #0
 801f4c6:	6078      	str	r0, [r7, #4]
 801f4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	6a1b      	ldr	r3, [r3, #32]
 801f4ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	6a1b      	ldr	r3, [r3, #32]
 801f4d4:	f023 0201 	bic.w	r2, r3, #1
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	685b      	ldr	r3, [r3, #4]
 801f4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	699b      	ldr	r3, [r3, #24]
 801f4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f4e8:	68fb      	ldr	r3, [r7, #12]
 801f4ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801f4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f4f4:	68fb      	ldr	r3, [r7, #12]
 801f4f6:	f023 0303 	bic.w	r3, r3, #3
 801f4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f4fc:	683b      	ldr	r3, [r7, #0]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	68fa      	ldr	r2, [r7, #12]
 801f502:	4313      	orrs	r3, r2
 801f504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f506:	697b      	ldr	r3, [r7, #20]
 801f508:	f023 0302 	bic.w	r3, r3, #2
 801f50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f50e:	683b      	ldr	r3, [r7, #0]
 801f510:	689b      	ldr	r3, [r3, #8]
 801f512:	697a      	ldr	r2, [r7, #20]
 801f514:	4313      	orrs	r3, r2
 801f516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	4a24      	ldr	r2, [pc, #144]	@ (801f5ac <TIM_OC1_SetConfig+0xec>)
 801f51c:	4293      	cmp	r3, r2
 801f51e:	d007      	beq.n	801f530 <TIM_OC1_SetConfig+0x70>
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	4a23      	ldr	r2, [pc, #140]	@ (801f5b0 <TIM_OC1_SetConfig+0xf0>)
 801f524:	4293      	cmp	r3, r2
 801f526:	d003      	beq.n	801f530 <TIM_OC1_SetConfig+0x70>
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	4a22      	ldr	r2, [pc, #136]	@ (801f5b4 <TIM_OC1_SetConfig+0xf4>)
 801f52c:	4293      	cmp	r3, r2
 801f52e:	d10c      	bne.n	801f54a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801f530:	697b      	ldr	r3, [r7, #20]
 801f532:	f023 0308 	bic.w	r3, r3, #8
 801f536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801f538:	683b      	ldr	r3, [r7, #0]
 801f53a:	68db      	ldr	r3, [r3, #12]
 801f53c:	697a      	ldr	r2, [r7, #20]
 801f53e:	4313      	orrs	r3, r2
 801f540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801f542:	697b      	ldr	r3, [r7, #20]
 801f544:	f023 0304 	bic.w	r3, r3, #4
 801f548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	4a17      	ldr	r2, [pc, #92]	@ (801f5ac <TIM_OC1_SetConfig+0xec>)
 801f54e:	4293      	cmp	r3, r2
 801f550:	d007      	beq.n	801f562 <TIM_OC1_SetConfig+0xa2>
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	4a16      	ldr	r2, [pc, #88]	@ (801f5b0 <TIM_OC1_SetConfig+0xf0>)
 801f556:	4293      	cmp	r3, r2
 801f558:	d003      	beq.n	801f562 <TIM_OC1_SetConfig+0xa2>
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	4a15      	ldr	r2, [pc, #84]	@ (801f5b4 <TIM_OC1_SetConfig+0xf4>)
 801f55e:	4293      	cmp	r3, r2
 801f560:	d111      	bne.n	801f586 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801f562:	693b      	ldr	r3, [r7, #16]
 801f564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801f56a:	693b      	ldr	r3, [r7, #16]
 801f56c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801f570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801f572:	683b      	ldr	r3, [r7, #0]
 801f574:	695b      	ldr	r3, [r3, #20]
 801f576:	693a      	ldr	r2, [r7, #16]
 801f578:	4313      	orrs	r3, r2
 801f57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801f57c:	683b      	ldr	r3, [r7, #0]
 801f57e:	699b      	ldr	r3, [r3, #24]
 801f580:	693a      	ldr	r2, [r7, #16]
 801f582:	4313      	orrs	r3, r2
 801f584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	693a      	ldr	r2, [r7, #16]
 801f58a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	68fa      	ldr	r2, [r7, #12]
 801f590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801f592:	683b      	ldr	r3, [r7, #0]
 801f594:	685a      	ldr	r2, [r3, #4]
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	697a      	ldr	r2, [r7, #20]
 801f59e:	621a      	str	r2, [r3, #32]
}
 801f5a0:	bf00      	nop
 801f5a2:	371c      	adds	r7, #28
 801f5a4:	46bd      	mov	sp, r7
 801f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5aa:	4770      	bx	lr
 801f5ac:	40012c00 	.word	0x40012c00
 801f5b0:	40014000 	.word	0x40014000
 801f5b4:	40014400 	.word	0x40014400

0801f5b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f5b8:	b480      	push	{r7}
 801f5ba:	b087      	sub	sp, #28
 801f5bc:	af00      	add	r7, sp, #0
 801f5be:	6078      	str	r0, [r7, #4]
 801f5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	6a1b      	ldr	r3, [r3, #32]
 801f5c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	6a1b      	ldr	r3, [r3, #32]
 801f5cc:	f023 0210 	bic.w	r2, r3, #16
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	685b      	ldr	r3, [r3, #4]
 801f5d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	699b      	ldr	r3, [r3, #24]
 801f5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801f5e0:	68fb      	ldr	r3, [r7, #12]
 801f5e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f5e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801f5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f5f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f5f4:	683b      	ldr	r3, [r7, #0]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	021b      	lsls	r3, r3, #8
 801f5fa:	68fa      	ldr	r2, [r7, #12]
 801f5fc:	4313      	orrs	r3, r2
 801f5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801f600:	697b      	ldr	r3, [r7, #20]
 801f602:	f023 0320 	bic.w	r3, r3, #32
 801f606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801f608:	683b      	ldr	r3, [r7, #0]
 801f60a:	689b      	ldr	r3, [r3, #8]
 801f60c:	011b      	lsls	r3, r3, #4
 801f60e:	697a      	ldr	r2, [r7, #20]
 801f610:	4313      	orrs	r3, r2
 801f612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	4a22      	ldr	r2, [pc, #136]	@ (801f6a0 <TIM_OC2_SetConfig+0xe8>)
 801f618:	4293      	cmp	r3, r2
 801f61a:	d10d      	bne.n	801f638 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801f61c:	697b      	ldr	r3, [r7, #20]
 801f61e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801f624:	683b      	ldr	r3, [r7, #0]
 801f626:	68db      	ldr	r3, [r3, #12]
 801f628:	011b      	lsls	r3, r3, #4
 801f62a:	697a      	ldr	r2, [r7, #20]
 801f62c:	4313      	orrs	r3, r2
 801f62e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801f630:	697b      	ldr	r3, [r7, #20]
 801f632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801f636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	4a19      	ldr	r2, [pc, #100]	@ (801f6a0 <TIM_OC2_SetConfig+0xe8>)
 801f63c:	4293      	cmp	r3, r2
 801f63e:	d007      	beq.n	801f650 <TIM_OC2_SetConfig+0x98>
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	4a18      	ldr	r2, [pc, #96]	@ (801f6a4 <TIM_OC2_SetConfig+0xec>)
 801f644:	4293      	cmp	r3, r2
 801f646:	d003      	beq.n	801f650 <TIM_OC2_SetConfig+0x98>
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	4a17      	ldr	r2, [pc, #92]	@ (801f6a8 <TIM_OC2_SetConfig+0xf0>)
 801f64c:	4293      	cmp	r3, r2
 801f64e:	d113      	bne.n	801f678 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801f650:	693b      	ldr	r3, [r7, #16]
 801f652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801f656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801f658:	693b      	ldr	r3, [r7, #16]
 801f65a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801f65e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801f660:	683b      	ldr	r3, [r7, #0]
 801f662:	695b      	ldr	r3, [r3, #20]
 801f664:	009b      	lsls	r3, r3, #2
 801f666:	693a      	ldr	r2, [r7, #16]
 801f668:	4313      	orrs	r3, r2
 801f66a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801f66c:	683b      	ldr	r3, [r7, #0]
 801f66e:	699b      	ldr	r3, [r3, #24]
 801f670:	009b      	lsls	r3, r3, #2
 801f672:	693a      	ldr	r2, [r7, #16]
 801f674:	4313      	orrs	r3, r2
 801f676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	693a      	ldr	r2, [r7, #16]
 801f67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	68fa      	ldr	r2, [r7, #12]
 801f682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	685a      	ldr	r2, [r3, #4]
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	697a      	ldr	r2, [r7, #20]
 801f690:	621a      	str	r2, [r3, #32]
}
 801f692:	bf00      	nop
 801f694:	371c      	adds	r7, #28
 801f696:	46bd      	mov	sp, r7
 801f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f69c:	4770      	bx	lr
 801f69e:	bf00      	nop
 801f6a0:	40012c00 	.word	0x40012c00
 801f6a4:	40014000 	.word	0x40014000
 801f6a8:	40014400 	.word	0x40014400

0801f6ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f6ac:	b480      	push	{r7}
 801f6ae:	b087      	sub	sp, #28
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	6078      	str	r0, [r7, #4]
 801f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	6a1b      	ldr	r3, [r3, #32]
 801f6ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	6a1b      	ldr	r3, [r3, #32]
 801f6c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	685b      	ldr	r3, [r3, #4]
 801f6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	69db      	ldr	r3, [r3, #28]
 801f6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801f6d4:	68fb      	ldr	r3, [r7, #12]
 801f6d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801f6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801f6e0:	68fb      	ldr	r3, [r7, #12]
 801f6e2:	f023 0303 	bic.w	r3, r3, #3
 801f6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	68fa      	ldr	r2, [r7, #12]
 801f6ee:	4313      	orrs	r3, r2
 801f6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801f6f2:	697b      	ldr	r3, [r7, #20]
 801f6f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801f6f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801f6fa:	683b      	ldr	r3, [r7, #0]
 801f6fc:	689b      	ldr	r3, [r3, #8]
 801f6fe:	021b      	lsls	r3, r3, #8
 801f700:	697a      	ldr	r2, [r7, #20]
 801f702:	4313      	orrs	r3, r2
 801f704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	4a21      	ldr	r2, [pc, #132]	@ (801f790 <TIM_OC3_SetConfig+0xe4>)
 801f70a:	4293      	cmp	r3, r2
 801f70c:	d10d      	bne.n	801f72a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801f70e:	697b      	ldr	r3, [r7, #20]
 801f710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801f714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	68db      	ldr	r3, [r3, #12]
 801f71a:	021b      	lsls	r3, r3, #8
 801f71c:	697a      	ldr	r2, [r7, #20]
 801f71e:	4313      	orrs	r3, r2
 801f720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801f722:	697b      	ldr	r3, [r7, #20]
 801f724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801f728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	4a18      	ldr	r2, [pc, #96]	@ (801f790 <TIM_OC3_SetConfig+0xe4>)
 801f72e:	4293      	cmp	r3, r2
 801f730:	d007      	beq.n	801f742 <TIM_OC3_SetConfig+0x96>
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	4a17      	ldr	r2, [pc, #92]	@ (801f794 <TIM_OC3_SetConfig+0xe8>)
 801f736:	4293      	cmp	r3, r2
 801f738:	d003      	beq.n	801f742 <TIM_OC3_SetConfig+0x96>
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	4a16      	ldr	r2, [pc, #88]	@ (801f798 <TIM_OC3_SetConfig+0xec>)
 801f73e:	4293      	cmp	r3, r2
 801f740:	d113      	bne.n	801f76a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801f742:	693b      	ldr	r3, [r7, #16]
 801f744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801f74a:	693b      	ldr	r3, [r7, #16]
 801f74c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801f750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	695b      	ldr	r3, [r3, #20]
 801f756:	011b      	lsls	r3, r3, #4
 801f758:	693a      	ldr	r2, [r7, #16]
 801f75a:	4313      	orrs	r3, r2
 801f75c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	699b      	ldr	r3, [r3, #24]
 801f762:	011b      	lsls	r3, r3, #4
 801f764:	693a      	ldr	r2, [r7, #16]
 801f766:	4313      	orrs	r3, r2
 801f768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f76a:	687b      	ldr	r3, [r7, #4]
 801f76c:	693a      	ldr	r2, [r7, #16]
 801f76e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	68fa      	ldr	r2, [r7, #12]
 801f774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801f776:	683b      	ldr	r3, [r7, #0]
 801f778:	685a      	ldr	r2, [r3, #4]
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	697a      	ldr	r2, [r7, #20]
 801f782:	621a      	str	r2, [r3, #32]
}
 801f784:	bf00      	nop
 801f786:	371c      	adds	r7, #28
 801f788:	46bd      	mov	sp, r7
 801f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f78e:	4770      	bx	lr
 801f790:	40012c00 	.word	0x40012c00
 801f794:	40014000 	.word	0x40014000
 801f798:	40014400 	.word	0x40014400

0801f79c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f79c:	b480      	push	{r7}
 801f79e:	b087      	sub	sp, #28
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	6078      	str	r0, [r7, #4]
 801f7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	6a1b      	ldr	r3, [r3, #32]
 801f7aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	6a1b      	ldr	r3, [r3, #32]
 801f7b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	685b      	ldr	r3, [r3, #4]
 801f7bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	69db      	ldr	r3, [r3, #28]
 801f7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f7ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801f7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f7d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f7d8:	683b      	ldr	r3, [r7, #0]
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	021b      	lsls	r3, r3, #8
 801f7de:	68fa      	ldr	r2, [r7, #12]
 801f7e0:	4313      	orrs	r3, r2
 801f7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801f7e4:	693b      	ldr	r3, [r7, #16]
 801f7e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801f7ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801f7ec:	683b      	ldr	r3, [r7, #0]
 801f7ee:	689b      	ldr	r3, [r3, #8]
 801f7f0:	031b      	lsls	r3, r3, #12
 801f7f2:	693a      	ldr	r2, [r7, #16]
 801f7f4:	4313      	orrs	r3, r2
 801f7f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	4a14      	ldr	r2, [pc, #80]	@ (801f84c <TIM_OC4_SetConfig+0xb0>)
 801f7fc:	4293      	cmp	r3, r2
 801f7fe:	d007      	beq.n	801f810 <TIM_OC4_SetConfig+0x74>
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	4a13      	ldr	r2, [pc, #76]	@ (801f850 <TIM_OC4_SetConfig+0xb4>)
 801f804:	4293      	cmp	r3, r2
 801f806:	d003      	beq.n	801f810 <TIM_OC4_SetConfig+0x74>
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	4a12      	ldr	r2, [pc, #72]	@ (801f854 <TIM_OC4_SetConfig+0xb8>)
 801f80c:	4293      	cmp	r3, r2
 801f80e:	d109      	bne.n	801f824 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801f810:	697b      	ldr	r3, [r7, #20]
 801f812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801f816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801f818:	683b      	ldr	r3, [r7, #0]
 801f81a:	695b      	ldr	r3, [r3, #20]
 801f81c:	019b      	lsls	r3, r3, #6
 801f81e:	697a      	ldr	r2, [r7, #20]
 801f820:	4313      	orrs	r3, r2
 801f822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	697a      	ldr	r2, [r7, #20]
 801f828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	68fa      	ldr	r2, [r7, #12]
 801f82e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f830:	683b      	ldr	r3, [r7, #0]
 801f832:	685a      	ldr	r2, [r3, #4]
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	693a      	ldr	r2, [r7, #16]
 801f83c:	621a      	str	r2, [r3, #32]
}
 801f83e:	bf00      	nop
 801f840:	371c      	adds	r7, #28
 801f842:	46bd      	mov	sp, r7
 801f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f848:	4770      	bx	lr
 801f84a:	bf00      	nop
 801f84c:	40012c00 	.word	0x40012c00
 801f850:	40014000 	.word	0x40014000
 801f854:	40014400 	.word	0x40014400

0801f858 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801f858:	b480      	push	{r7}
 801f85a:	b087      	sub	sp, #28
 801f85c:	af00      	add	r7, sp, #0
 801f85e:	6078      	str	r0, [r7, #4]
 801f860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	6a1b      	ldr	r3, [r3, #32]
 801f866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	6a1b      	ldr	r3, [r3, #32]
 801f86c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	685b      	ldr	r3, [r3, #4]
 801f878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801f886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f88a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f88c:	683b      	ldr	r3, [r7, #0]
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	68fa      	ldr	r2, [r7, #12]
 801f892:	4313      	orrs	r3, r2
 801f894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801f896:	693b      	ldr	r3, [r7, #16]
 801f898:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801f89c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801f89e:	683b      	ldr	r3, [r7, #0]
 801f8a0:	689b      	ldr	r3, [r3, #8]
 801f8a2:	041b      	lsls	r3, r3, #16
 801f8a4:	693a      	ldr	r2, [r7, #16]
 801f8a6:	4313      	orrs	r3, r2
 801f8a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	4a13      	ldr	r2, [pc, #76]	@ (801f8fc <TIM_OC5_SetConfig+0xa4>)
 801f8ae:	4293      	cmp	r3, r2
 801f8b0:	d007      	beq.n	801f8c2 <TIM_OC5_SetConfig+0x6a>
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	4a12      	ldr	r2, [pc, #72]	@ (801f900 <TIM_OC5_SetConfig+0xa8>)
 801f8b6:	4293      	cmp	r3, r2
 801f8b8:	d003      	beq.n	801f8c2 <TIM_OC5_SetConfig+0x6a>
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	4a11      	ldr	r2, [pc, #68]	@ (801f904 <TIM_OC5_SetConfig+0xac>)
 801f8be:	4293      	cmp	r3, r2
 801f8c0:	d109      	bne.n	801f8d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801f8c2:	697b      	ldr	r3, [r7, #20]
 801f8c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801f8c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801f8ca:	683b      	ldr	r3, [r7, #0]
 801f8cc:	695b      	ldr	r3, [r3, #20]
 801f8ce:	021b      	lsls	r3, r3, #8
 801f8d0:	697a      	ldr	r2, [r7, #20]
 801f8d2:	4313      	orrs	r3, r2
 801f8d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	697a      	ldr	r2, [r7, #20]
 801f8da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	68fa      	ldr	r2, [r7, #12]
 801f8e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801f8e2:	683b      	ldr	r3, [r7, #0]
 801f8e4:	685a      	ldr	r2, [r3, #4]
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	693a      	ldr	r2, [r7, #16]
 801f8ee:	621a      	str	r2, [r3, #32]
}
 801f8f0:	bf00      	nop
 801f8f2:	371c      	adds	r7, #28
 801f8f4:	46bd      	mov	sp, r7
 801f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8fa:	4770      	bx	lr
 801f8fc:	40012c00 	.word	0x40012c00
 801f900:	40014000 	.word	0x40014000
 801f904:	40014400 	.word	0x40014400

0801f908 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801f908:	b480      	push	{r7}
 801f90a:	b087      	sub	sp, #28
 801f90c:	af00      	add	r7, sp, #0
 801f90e:	6078      	str	r0, [r7, #4]
 801f910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	6a1b      	ldr	r3, [r3, #32]
 801f916:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	6a1b      	ldr	r3, [r3, #32]
 801f91c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	685b      	ldr	r3, [r3, #4]
 801f928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801f930:	68fb      	ldr	r3, [r7, #12]
 801f932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801f93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f93c:	683b      	ldr	r3, [r7, #0]
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	021b      	lsls	r3, r3, #8
 801f942:	68fa      	ldr	r2, [r7, #12]
 801f944:	4313      	orrs	r3, r2
 801f946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801f948:	693b      	ldr	r3, [r7, #16]
 801f94a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801f94e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801f950:	683b      	ldr	r3, [r7, #0]
 801f952:	689b      	ldr	r3, [r3, #8]
 801f954:	051b      	lsls	r3, r3, #20
 801f956:	693a      	ldr	r2, [r7, #16]
 801f958:	4313      	orrs	r3, r2
 801f95a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	4a14      	ldr	r2, [pc, #80]	@ (801f9b0 <TIM_OC6_SetConfig+0xa8>)
 801f960:	4293      	cmp	r3, r2
 801f962:	d007      	beq.n	801f974 <TIM_OC6_SetConfig+0x6c>
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	4a13      	ldr	r2, [pc, #76]	@ (801f9b4 <TIM_OC6_SetConfig+0xac>)
 801f968:	4293      	cmp	r3, r2
 801f96a:	d003      	beq.n	801f974 <TIM_OC6_SetConfig+0x6c>
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	4a12      	ldr	r2, [pc, #72]	@ (801f9b8 <TIM_OC6_SetConfig+0xb0>)
 801f970:	4293      	cmp	r3, r2
 801f972:	d109      	bne.n	801f988 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801f974:	697b      	ldr	r3, [r7, #20]
 801f976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801f97a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801f97c:	683b      	ldr	r3, [r7, #0]
 801f97e:	695b      	ldr	r3, [r3, #20]
 801f980:	029b      	lsls	r3, r3, #10
 801f982:	697a      	ldr	r2, [r7, #20]
 801f984:	4313      	orrs	r3, r2
 801f986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	697a      	ldr	r2, [r7, #20]
 801f98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	68fa      	ldr	r2, [r7, #12]
 801f992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801f994:	683b      	ldr	r3, [r7, #0]
 801f996:	685a      	ldr	r2, [r3, #4]
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	693a      	ldr	r2, [r7, #16]
 801f9a0:	621a      	str	r2, [r3, #32]
}
 801f9a2:	bf00      	nop
 801f9a4:	371c      	adds	r7, #28
 801f9a6:	46bd      	mov	sp, r7
 801f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ac:	4770      	bx	lr
 801f9ae:	bf00      	nop
 801f9b0:	40012c00 	.word	0x40012c00
 801f9b4:	40014000 	.word	0x40014000
 801f9b8:	40014400 	.word	0x40014400

0801f9bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801f9bc:	b480      	push	{r7}
 801f9be:	b087      	sub	sp, #28
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	60f8      	str	r0, [r7, #12]
 801f9c4:	60b9      	str	r1, [r7, #8]
 801f9c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	6a1b      	ldr	r3, [r3, #32]
 801f9cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f9ce:	68fb      	ldr	r3, [r7, #12]
 801f9d0:	6a1b      	ldr	r3, [r3, #32]
 801f9d2:	f023 0201 	bic.w	r2, r3, #1
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801f9da:	68fb      	ldr	r3, [r7, #12]
 801f9dc:	699b      	ldr	r3, [r3, #24]
 801f9de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801f9e0:	693b      	ldr	r3, [r7, #16]
 801f9e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801f9e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	011b      	lsls	r3, r3, #4
 801f9ec:	693a      	ldr	r2, [r7, #16]
 801f9ee:	4313      	orrs	r3, r2
 801f9f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801f9f2:	697b      	ldr	r3, [r7, #20]
 801f9f4:	f023 030a 	bic.w	r3, r3, #10
 801f9f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801f9fa:	697a      	ldr	r2, [r7, #20]
 801f9fc:	68bb      	ldr	r3, [r7, #8]
 801f9fe:	4313      	orrs	r3, r2
 801fa00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801fa02:	68fb      	ldr	r3, [r7, #12]
 801fa04:	693a      	ldr	r2, [r7, #16]
 801fa06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801fa08:	68fb      	ldr	r3, [r7, #12]
 801fa0a:	697a      	ldr	r2, [r7, #20]
 801fa0c:	621a      	str	r2, [r3, #32]
}
 801fa0e:	bf00      	nop
 801fa10:	371c      	adds	r7, #28
 801fa12:	46bd      	mov	sp, r7
 801fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa18:	4770      	bx	lr

0801fa1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801fa1a:	b480      	push	{r7}
 801fa1c:	b087      	sub	sp, #28
 801fa1e:	af00      	add	r7, sp, #0
 801fa20:	60f8      	str	r0, [r7, #12]
 801fa22:	60b9      	str	r1, [r7, #8]
 801fa24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	6a1b      	ldr	r3, [r3, #32]
 801fa2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	6a1b      	ldr	r3, [r3, #32]
 801fa30:	f023 0210 	bic.w	r2, r3, #16
 801fa34:	68fb      	ldr	r3, [r7, #12]
 801fa36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	699b      	ldr	r3, [r3, #24]
 801fa3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801fa3e:	693b      	ldr	r3, [r7, #16]
 801fa40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801fa44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	031b      	lsls	r3, r3, #12
 801fa4a:	693a      	ldr	r2, [r7, #16]
 801fa4c:	4313      	orrs	r3, r2
 801fa4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801fa50:	697b      	ldr	r3, [r7, #20]
 801fa52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801fa56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801fa58:	68bb      	ldr	r3, [r7, #8]
 801fa5a:	011b      	lsls	r3, r3, #4
 801fa5c:	697a      	ldr	r2, [r7, #20]
 801fa5e:	4313      	orrs	r3, r2
 801fa60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801fa62:	68fb      	ldr	r3, [r7, #12]
 801fa64:	693a      	ldr	r2, [r7, #16]
 801fa66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	697a      	ldr	r2, [r7, #20]
 801fa6c:	621a      	str	r2, [r3, #32]
}
 801fa6e:	bf00      	nop
 801fa70:	371c      	adds	r7, #28
 801fa72:	46bd      	mov	sp, r7
 801fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa78:	4770      	bx	lr

0801fa7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801fa7a:	b480      	push	{r7}
 801fa7c:	b085      	sub	sp, #20
 801fa7e:	af00      	add	r7, sp, #0
 801fa80:	6078      	str	r0, [r7, #4]
 801fa82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	689b      	ldr	r3, [r3, #8]
 801fa88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fa90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801fa92:	683a      	ldr	r2, [r7, #0]
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	4313      	orrs	r3, r2
 801fa98:	f043 0307 	orr.w	r3, r3, #7
 801fa9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	68fa      	ldr	r2, [r7, #12]
 801faa2:	609a      	str	r2, [r3, #8]
}
 801faa4:	bf00      	nop
 801faa6:	3714      	adds	r7, #20
 801faa8:	46bd      	mov	sp, r7
 801faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faae:	4770      	bx	lr

0801fab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801fab0:	b480      	push	{r7}
 801fab2:	b087      	sub	sp, #28
 801fab4:	af00      	add	r7, sp, #0
 801fab6:	60f8      	str	r0, [r7, #12]
 801fab8:	60b9      	str	r1, [r7, #8]
 801faba:	607a      	str	r2, [r7, #4]
 801fabc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801fabe:	68fb      	ldr	r3, [r7, #12]
 801fac0:	689b      	ldr	r3, [r3, #8]
 801fac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801fac4:	697b      	ldr	r3, [r7, #20]
 801fac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801faca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801facc:	683b      	ldr	r3, [r7, #0]
 801face:	021a      	lsls	r2, r3, #8
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	431a      	orrs	r2, r3
 801fad4:	68bb      	ldr	r3, [r7, #8]
 801fad6:	4313      	orrs	r3, r2
 801fad8:	697a      	ldr	r2, [r7, #20]
 801fada:	4313      	orrs	r3, r2
 801fadc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801fade:	68fb      	ldr	r3, [r7, #12]
 801fae0:	697a      	ldr	r2, [r7, #20]
 801fae2:	609a      	str	r2, [r3, #8]
}
 801fae4:	bf00      	nop
 801fae6:	371c      	adds	r7, #28
 801fae8:	46bd      	mov	sp, r7
 801faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faee:	4770      	bx	lr

0801faf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801faf0:	b480      	push	{r7}
 801faf2:	b087      	sub	sp, #28
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	60f8      	str	r0, [r7, #12]
 801faf8:	60b9      	str	r1, [r7, #8]
 801fafa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801fafc:	68bb      	ldr	r3, [r7, #8]
 801fafe:	f003 031f 	and.w	r3, r3, #31
 801fb02:	2201      	movs	r2, #1
 801fb04:	fa02 f303 	lsl.w	r3, r2, r3
 801fb08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	6a1a      	ldr	r2, [r3, #32]
 801fb0e:	697b      	ldr	r3, [r7, #20]
 801fb10:	43db      	mvns	r3, r3
 801fb12:	401a      	ands	r2, r3
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801fb18:	68fb      	ldr	r3, [r7, #12]
 801fb1a:	6a1a      	ldr	r2, [r3, #32]
 801fb1c:	68bb      	ldr	r3, [r7, #8]
 801fb1e:	f003 031f 	and.w	r3, r3, #31
 801fb22:	6879      	ldr	r1, [r7, #4]
 801fb24:	fa01 f303 	lsl.w	r3, r1, r3
 801fb28:	431a      	orrs	r2, r3
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	621a      	str	r2, [r3, #32]
}
 801fb2e:	bf00      	nop
 801fb30:	371c      	adds	r7, #28
 801fb32:	46bd      	mov	sp, r7
 801fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb38:	4770      	bx	lr
	...

0801fb3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801fb3c:	b480      	push	{r7}
 801fb3e:	b085      	sub	sp, #20
 801fb40:	af00      	add	r7, sp, #0
 801fb42:	6078      	str	r0, [r7, #4]
 801fb44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801fb4c:	2b01      	cmp	r3, #1
 801fb4e:	d101      	bne.n	801fb54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801fb50:	2302      	movs	r3, #2
 801fb52:	e04f      	b.n	801fbf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	2201      	movs	r2, #1
 801fb58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	2202      	movs	r2, #2
 801fb60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	685b      	ldr	r3, [r3, #4]
 801fb6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	689b      	ldr	r3, [r3, #8]
 801fb72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	4a21      	ldr	r2, [pc, #132]	@ (801fc00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801fb7a:	4293      	cmp	r3, r2
 801fb7c:	d108      	bne.n	801fb90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801fb7e:	68fb      	ldr	r3, [r7, #12]
 801fb80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801fb84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801fb86:	683b      	ldr	r3, [r7, #0]
 801fb88:	685b      	ldr	r3, [r3, #4]
 801fb8a:	68fa      	ldr	r2, [r7, #12]
 801fb8c:	4313      	orrs	r3, r2
 801fb8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fb96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801fb98:	683b      	ldr	r3, [r7, #0]
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	68fa      	ldr	r2, [r7, #12]
 801fb9e:	4313      	orrs	r3, r2
 801fba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	681b      	ldr	r3, [r3, #0]
 801fba6:	68fa      	ldr	r2, [r7, #12]
 801fba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	4a14      	ldr	r2, [pc, #80]	@ (801fc00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801fbb0:	4293      	cmp	r3, r2
 801fbb2:	d009      	beq.n	801fbc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fbbc:	d004      	beq.n	801fbc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	4a10      	ldr	r2, [pc, #64]	@ (801fc04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801fbc4:	4293      	cmp	r3, r2
 801fbc6:	d10c      	bne.n	801fbe2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801fbc8:	68bb      	ldr	r3, [r7, #8]
 801fbca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fbce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801fbd0:	683b      	ldr	r3, [r7, #0]
 801fbd2:	689b      	ldr	r3, [r3, #8]
 801fbd4:	68ba      	ldr	r2, [r7, #8]
 801fbd6:	4313      	orrs	r3, r2
 801fbd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	68ba      	ldr	r2, [r7, #8]
 801fbe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	2201      	movs	r2, #1
 801fbe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801fbea:	687b      	ldr	r3, [r7, #4]
 801fbec:	2200      	movs	r2, #0
 801fbee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801fbf2:	2300      	movs	r3, #0
}
 801fbf4:	4618      	mov	r0, r3
 801fbf6:	3714      	adds	r7, #20
 801fbf8:	46bd      	mov	sp, r7
 801fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbfe:	4770      	bx	lr
 801fc00:	40012c00 	.word	0x40012c00
 801fc04:	40014000 	.word	0x40014000

0801fc08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801fc08:	b480      	push	{r7}
 801fc0a:	b085      	sub	sp, #20
 801fc0c:	af00      	add	r7, sp, #0
 801fc0e:	6078      	str	r0, [r7, #4]
 801fc10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801fc12:	2300      	movs	r3, #0
 801fc14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801fc1c:	2b01      	cmp	r3, #1
 801fc1e:	d101      	bne.n	801fc24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801fc20:	2302      	movs	r3, #2
 801fc22:	e060      	b.n	801fce6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	2201      	movs	r2, #1
 801fc28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801fc32:	683b      	ldr	r3, [r7, #0]
 801fc34:	68db      	ldr	r3, [r3, #12]
 801fc36:	4313      	orrs	r3, r2
 801fc38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801fc40:	683b      	ldr	r3, [r7, #0]
 801fc42:	689b      	ldr	r3, [r3, #8]
 801fc44:	4313      	orrs	r3, r2
 801fc46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801fc48:	68fb      	ldr	r3, [r7, #12]
 801fc4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801fc4e:	683b      	ldr	r3, [r7, #0]
 801fc50:	685b      	ldr	r3, [r3, #4]
 801fc52:	4313      	orrs	r3, r2
 801fc54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801fc5c:	683b      	ldr	r3, [r7, #0]
 801fc5e:	681b      	ldr	r3, [r3, #0]
 801fc60:	4313      	orrs	r3, r2
 801fc62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801fc6a:	683b      	ldr	r3, [r7, #0]
 801fc6c:	691b      	ldr	r3, [r3, #16]
 801fc6e:	4313      	orrs	r3, r2
 801fc70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801fc78:	683b      	ldr	r3, [r7, #0]
 801fc7a:	695b      	ldr	r3, [r3, #20]
 801fc7c:	4313      	orrs	r3, r2
 801fc7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801fc80:	68fb      	ldr	r3, [r7, #12]
 801fc82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801fc86:	683b      	ldr	r3, [r7, #0]
 801fc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc8a:	4313      	orrs	r3, r2
 801fc8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801fc94:	683b      	ldr	r3, [r7, #0]
 801fc96:	699b      	ldr	r3, [r3, #24]
 801fc98:	041b      	lsls	r3, r3, #16
 801fc9a:	4313      	orrs	r3, r2
 801fc9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	4a14      	ldr	r2, [pc, #80]	@ (801fcf4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801fca4:	4293      	cmp	r3, r2
 801fca6:	d115      	bne.n	801fcd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801fca8:	68fb      	ldr	r3, [r7, #12]
 801fcaa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801fcae:	683b      	ldr	r3, [r7, #0]
 801fcb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fcb2:	051b      	lsls	r3, r3, #20
 801fcb4:	4313      	orrs	r3, r2
 801fcb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801fcbe:	683b      	ldr	r3, [r7, #0]
 801fcc0:	69db      	ldr	r3, [r3, #28]
 801fcc2:	4313      	orrs	r3, r2
 801fcc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801fcc6:	68fb      	ldr	r3, [r7, #12]
 801fcc8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801fccc:	683b      	ldr	r3, [r7, #0]
 801fcce:	6a1b      	ldr	r3, [r3, #32]
 801fcd0:	4313      	orrs	r3, r2
 801fcd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	68fa      	ldr	r2, [r7, #12]
 801fcda:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	2200      	movs	r2, #0
 801fce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801fce4:	2300      	movs	r3, #0
}
 801fce6:	4618      	mov	r0, r3
 801fce8:	3714      	adds	r7, #20
 801fcea:	46bd      	mov	sp, r7
 801fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcf0:	4770      	bx	lr
 801fcf2:	bf00      	nop
 801fcf4:	40012c00 	.word	0x40012c00

0801fcf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801fcf8:	b480      	push	{r7}
 801fcfa:	b083      	sub	sp, #12
 801fcfc:	af00      	add	r7, sp, #0
 801fcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801fd00:	bf00      	nop
 801fd02:	370c      	adds	r7, #12
 801fd04:	46bd      	mov	sp, r7
 801fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd0a:	4770      	bx	lr

0801fd0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801fd0c:	b480      	push	{r7}
 801fd0e:	b083      	sub	sp, #12
 801fd10:	af00      	add	r7, sp, #0
 801fd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801fd14:	bf00      	nop
 801fd16:	370c      	adds	r7, #12
 801fd18:	46bd      	mov	sp, r7
 801fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd1e:	4770      	bx	lr

0801fd20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801fd20:	b480      	push	{r7}
 801fd22:	b083      	sub	sp, #12
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801fd28:	bf00      	nop
 801fd2a:	370c      	adds	r7, #12
 801fd2c:	46bd      	mov	sp, r7
 801fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd32:	4770      	bx	lr

0801fd34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801fd34:	b580      	push	{r7, lr}
 801fd36:	b082      	sub	sp, #8
 801fd38:	af00      	add	r7, sp, #0
 801fd3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d101      	bne.n	801fd46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801fd42:	2301      	movs	r3, #1
 801fd44:	e040      	b.n	801fdc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d106      	bne.n	801fd5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	2200      	movs	r2, #0
 801fd52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801fd56:	6878      	ldr	r0, [r7, #4]
 801fd58:	f7e2 ff18 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	2224      	movs	r2, #36	@ 0x24
 801fd60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	681a      	ldr	r2, [r3, #0]
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	f022 0201 	bic.w	r2, r2, #1
 801fd70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d002      	beq.n	801fd80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801fd7a:	6878      	ldr	r0, [r7, #4]
 801fd7c:	f000 fe7e 	bl	8020a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801fd80:	6878      	ldr	r0, [r7, #4]
 801fd82:	f000 fc21 	bl	80205c8 <UART_SetConfig>
 801fd86:	4603      	mov	r3, r0
 801fd88:	2b01      	cmp	r3, #1
 801fd8a:	d101      	bne.n	801fd90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801fd8c:	2301      	movs	r3, #1
 801fd8e:	e01b      	b.n	801fdc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	685a      	ldr	r2, [r3, #4]
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	681b      	ldr	r3, [r3, #0]
 801fd9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801fd9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	689a      	ldr	r2, [r3, #8]
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801fdae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	681a      	ldr	r2, [r3, #0]
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	f042 0201 	orr.w	r2, r2, #1
 801fdbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801fdc0:	6878      	ldr	r0, [r7, #4]
 801fdc2:	f000 fefd 	bl	8020bc0 <UART_CheckIdleState>
 801fdc6:	4603      	mov	r3, r0
}
 801fdc8:	4618      	mov	r0, r3
 801fdca:	3708      	adds	r7, #8
 801fdcc:	46bd      	mov	sp, r7
 801fdce:	bd80      	pop	{r7, pc}

0801fdd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801fdd0:	b580      	push	{r7, lr}
 801fdd2:	b08a      	sub	sp, #40	@ 0x28
 801fdd4:	af02      	add	r7, sp, #8
 801fdd6:	60f8      	str	r0, [r7, #12]
 801fdd8:	60b9      	str	r1, [r7, #8]
 801fdda:	603b      	str	r3, [r7, #0]
 801fddc:	4613      	mov	r3, r2
 801fdde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801fde0:	68fb      	ldr	r3, [r7, #12]
 801fde2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801fde4:	2b20      	cmp	r3, #32
 801fde6:	d177      	bne.n	801fed8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801fde8:	68bb      	ldr	r3, [r7, #8]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d002      	beq.n	801fdf4 <HAL_UART_Transmit+0x24>
 801fdee:	88fb      	ldrh	r3, [r7, #6]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d101      	bne.n	801fdf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801fdf4:	2301      	movs	r3, #1
 801fdf6:	e070      	b.n	801feda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fdf8:	68fb      	ldr	r3, [r7, #12]
 801fdfa:	2200      	movs	r2, #0
 801fdfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	2221      	movs	r2, #33	@ 0x21
 801fe04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801fe06:	f7fc fac1 	bl	801c38c <HAL_GetTick>
 801fe0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	88fa      	ldrh	r2, [r7, #6]
 801fe10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	88fa      	ldrh	r2, [r7, #6]
 801fe18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	689b      	ldr	r3, [r3, #8]
 801fe20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fe24:	d108      	bne.n	801fe38 <HAL_UART_Transmit+0x68>
 801fe26:	68fb      	ldr	r3, [r7, #12]
 801fe28:	691b      	ldr	r3, [r3, #16]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d104      	bne.n	801fe38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801fe2e:	2300      	movs	r3, #0
 801fe30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801fe32:	68bb      	ldr	r3, [r7, #8]
 801fe34:	61bb      	str	r3, [r7, #24]
 801fe36:	e003      	b.n	801fe40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801fe38:	68bb      	ldr	r3, [r7, #8]
 801fe3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801fe3c:	2300      	movs	r3, #0
 801fe3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801fe40:	e02f      	b.n	801fea2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801fe42:	683b      	ldr	r3, [r7, #0]
 801fe44:	9300      	str	r3, [sp, #0]
 801fe46:	697b      	ldr	r3, [r7, #20]
 801fe48:	2200      	movs	r2, #0
 801fe4a:	2180      	movs	r1, #128	@ 0x80
 801fe4c:	68f8      	ldr	r0, [r7, #12]
 801fe4e:	f000 ff5f 	bl	8020d10 <UART_WaitOnFlagUntilTimeout>
 801fe52:	4603      	mov	r3, r0
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d004      	beq.n	801fe62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801fe58:	68fb      	ldr	r3, [r7, #12]
 801fe5a:	2220      	movs	r2, #32
 801fe5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801fe5e:	2303      	movs	r3, #3
 801fe60:	e03b      	b.n	801feda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801fe62:	69fb      	ldr	r3, [r7, #28]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d10b      	bne.n	801fe80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801fe68:	69bb      	ldr	r3, [r7, #24]
 801fe6a:	881a      	ldrh	r2, [r3, #0]
 801fe6c:	68fb      	ldr	r3, [r7, #12]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801fe74:	b292      	uxth	r2, r2
 801fe76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801fe78:	69bb      	ldr	r3, [r7, #24]
 801fe7a:	3302      	adds	r3, #2
 801fe7c:	61bb      	str	r3, [r7, #24]
 801fe7e:	e007      	b.n	801fe90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801fe80:	69fb      	ldr	r3, [r7, #28]
 801fe82:	781a      	ldrb	r2, [r3, #0]
 801fe84:	68fb      	ldr	r3, [r7, #12]
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801fe8a:	69fb      	ldr	r3, [r7, #28]
 801fe8c:	3301      	adds	r3, #1
 801fe8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801fe90:	68fb      	ldr	r3, [r7, #12]
 801fe92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801fe96:	b29b      	uxth	r3, r3
 801fe98:	3b01      	subs	r3, #1
 801fe9a:	b29a      	uxth	r2, r3
 801fe9c:	68fb      	ldr	r3, [r7, #12]
 801fe9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801fea2:	68fb      	ldr	r3, [r7, #12]
 801fea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801fea8:	b29b      	uxth	r3, r3
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d1c9      	bne.n	801fe42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801feae:	683b      	ldr	r3, [r7, #0]
 801feb0:	9300      	str	r3, [sp, #0]
 801feb2:	697b      	ldr	r3, [r7, #20]
 801feb4:	2200      	movs	r2, #0
 801feb6:	2140      	movs	r1, #64	@ 0x40
 801feb8:	68f8      	ldr	r0, [r7, #12]
 801feba:	f000 ff29 	bl	8020d10 <UART_WaitOnFlagUntilTimeout>
 801febe:	4603      	mov	r3, r0
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d004      	beq.n	801fece <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	2220      	movs	r2, #32
 801fec8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801feca:	2303      	movs	r3, #3
 801fecc:	e005      	b.n	801feda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801fece:	68fb      	ldr	r3, [r7, #12]
 801fed0:	2220      	movs	r2, #32
 801fed2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801fed4:	2300      	movs	r3, #0
 801fed6:	e000      	b.n	801feda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801fed8:	2302      	movs	r3, #2
  }
}
 801feda:	4618      	mov	r0, r3
 801fedc:	3720      	adds	r7, #32
 801fede:	46bd      	mov	sp, r7
 801fee0:	bd80      	pop	{r7, pc}
	...

0801fee4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801fee4:	b580      	push	{r7, lr}
 801fee6:	b08a      	sub	sp, #40	@ 0x28
 801fee8:	af00      	add	r7, sp, #0
 801feea:	60f8      	str	r0, [r7, #12]
 801feec:	60b9      	str	r1, [r7, #8]
 801feee:	4613      	mov	r3, r2
 801fef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801fef2:	68fb      	ldr	r3, [r7, #12]
 801fef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801fef8:	2b20      	cmp	r3, #32
 801fefa:	d137      	bne.n	801ff6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801fefc:	68bb      	ldr	r3, [r7, #8]
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	d002      	beq.n	801ff08 <HAL_UART_Receive_IT+0x24>
 801ff02:	88fb      	ldrh	r3, [r7, #6]
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d101      	bne.n	801ff0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801ff08:	2301      	movs	r3, #1
 801ff0a:	e030      	b.n	801ff6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ff0c:	68fb      	ldr	r3, [r7, #12]
 801ff0e:	2200      	movs	r2, #0
 801ff10:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ff12:	68fb      	ldr	r3, [r7, #12]
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	4a18      	ldr	r2, [pc, #96]	@ (801ff78 <HAL_UART_Receive_IT+0x94>)
 801ff18:	4293      	cmp	r3, r2
 801ff1a:	d01f      	beq.n	801ff5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	685b      	ldr	r3, [r3, #4]
 801ff22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d018      	beq.n	801ff5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ff2a:	68fb      	ldr	r3, [r7, #12]
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff30:	697b      	ldr	r3, [r7, #20]
 801ff32:	e853 3f00 	ldrex	r3, [r3]
 801ff36:	613b      	str	r3, [r7, #16]
   return(result);
 801ff38:	693b      	ldr	r3, [r7, #16]
 801ff3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801ff3e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ff40:	68fb      	ldr	r3, [r7, #12]
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	461a      	mov	r2, r3
 801ff46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff48:	623b      	str	r3, [r7, #32]
 801ff4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff4c:	69f9      	ldr	r1, [r7, #28]
 801ff4e:	6a3a      	ldr	r2, [r7, #32]
 801ff50:	e841 2300 	strex	r3, r2, [r1]
 801ff54:	61bb      	str	r3, [r7, #24]
   return(result);
 801ff56:	69bb      	ldr	r3, [r7, #24]
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d1e6      	bne.n	801ff2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801ff5c:	88fb      	ldrh	r3, [r7, #6]
 801ff5e:	461a      	mov	r2, r3
 801ff60:	68b9      	ldr	r1, [r7, #8]
 801ff62:	68f8      	ldr	r0, [r7, #12]
 801ff64:	f000 ff42 	bl	8020dec <UART_Start_Receive_IT>
 801ff68:	4603      	mov	r3, r0
 801ff6a:	e000      	b.n	801ff6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ff6c:	2302      	movs	r3, #2
  }
}
 801ff6e:	4618      	mov	r0, r3
 801ff70:	3728      	adds	r7, #40	@ 0x28
 801ff72:	46bd      	mov	sp, r7
 801ff74:	bd80      	pop	{r7, pc}
 801ff76:	bf00      	nop
 801ff78:	40008000 	.word	0x40008000

0801ff7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ff7c:	b580      	push	{r7, lr}
 801ff7e:	b0ba      	sub	sp, #232	@ 0xe8
 801ff80:	af00      	add	r7, sp, #0
 801ff82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	69db      	ldr	r3, [r3, #28]
 801ff8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	689b      	ldr	r3, [r3, #8]
 801ff9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ffa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ffa6:	f640 030f 	movw	r3, #2063	@ 0x80f
 801ffaa:	4013      	ands	r3, r2
 801ffac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801ffb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	d115      	bne.n	801ffe4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ffb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ffbc:	f003 0320 	and.w	r3, r3, #32
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d00f      	beq.n	801ffe4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ffc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ffc8:	f003 0320 	and.w	r3, r3, #32
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d009      	beq.n	801ffe4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	f000 82ca 	beq.w	802056e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ffde:	6878      	ldr	r0, [r7, #4]
 801ffe0:	4798      	blx	r3
      }
      return;
 801ffe2:	e2c4      	b.n	802056e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801ffe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	f000 8117 	beq.w	802021c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ffee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801fff2:	f003 0301 	and.w	r3, r3, #1
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d106      	bne.n	8020008 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801fffa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801fffe:	4b85      	ldr	r3, [pc, #532]	@ (8020214 <HAL_UART_IRQHandler+0x298>)
 8020000:	4013      	ands	r3, r2
 8020002:	2b00      	cmp	r3, #0
 8020004:	f000 810a 	beq.w	802021c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8020008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802000c:	f003 0301 	and.w	r3, r3, #1
 8020010:	2b00      	cmp	r3, #0
 8020012:	d011      	beq.n	8020038 <HAL_UART_IRQHandler+0xbc>
 8020014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802001c:	2b00      	cmp	r3, #0
 802001e:	d00b      	beq.n	8020038 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	2201      	movs	r2, #1
 8020026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802002e:	f043 0201 	orr.w	r2, r3, #1
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8020038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802003c:	f003 0302 	and.w	r3, r3, #2
 8020040:	2b00      	cmp	r3, #0
 8020042:	d011      	beq.n	8020068 <HAL_UART_IRQHandler+0xec>
 8020044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020048:	f003 0301 	and.w	r3, r3, #1
 802004c:	2b00      	cmp	r3, #0
 802004e:	d00b      	beq.n	8020068 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	2202      	movs	r2, #2
 8020056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802005e:	f043 0204 	orr.w	r2, r3, #4
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8020068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802006c:	f003 0304 	and.w	r3, r3, #4
 8020070:	2b00      	cmp	r3, #0
 8020072:	d011      	beq.n	8020098 <HAL_UART_IRQHandler+0x11c>
 8020074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020078:	f003 0301 	and.w	r3, r3, #1
 802007c:	2b00      	cmp	r3, #0
 802007e:	d00b      	beq.n	8020098 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	681b      	ldr	r3, [r3, #0]
 8020084:	2204      	movs	r2, #4
 8020086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802008e:	f043 0202 	orr.w	r2, r3, #2
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8020098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802009c:	f003 0308 	and.w	r3, r3, #8
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	d017      	beq.n	80200d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80200a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80200a8:	f003 0320 	and.w	r3, r3, #32
 80200ac:	2b00      	cmp	r3, #0
 80200ae:	d105      	bne.n	80200bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80200b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80200b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80200b8:	2b00      	cmp	r3, #0
 80200ba:	d00b      	beq.n	80200d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	2208      	movs	r2, #8
 80200c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200ca:	f043 0208 	orr.w	r2, r3, #8
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80200d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80200d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d012      	beq.n	8020106 <HAL_UART_IRQHandler+0x18a>
 80200e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80200e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d00c      	beq.n	8020106 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80200f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200fc:	f043 0220 	orr.w	r2, r3, #32
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802010c:	2b00      	cmp	r3, #0
 802010e:	f000 8230 	beq.w	8020572 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8020112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8020116:	f003 0320 	and.w	r3, r3, #32
 802011a:	2b00      	cmp	r3, #0
 802011c:	d00d      	beq.n	802013a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 802011e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020122:	f003 0320 	and.w	r3, r3, #32
 8020126:	2b00      	cmp	r3, #0
 8020128:	d007      	beq.n	802013a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802012e:	2b00      	cmp	r3, #0
 8020130:	d003      	beq.n	802013a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020136:	6878      	ldr	r0, [r7, #4]
 8020138:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020140:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	689b      	ldr	r3, [r3, #8]
 802014a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802014e:	2b40      	cmp	r3, #64	@ 0x40
 8020150:	d005      	beq.n	802015e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8020152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8020156:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 802015a:	2b00      	cmp	r3, #0
 802015c:	d04f      	beq.n	80201fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802015e:	6878      	ldr	r0, [r7, #4]
 8020160:	f000 ff0a 	bl	8020f78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	681b      	ldr	r3, [r3, #0]
 8020168:	689b      	ldr	r3, [r3, #8]
 802016a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802016e:	2b40      	cmp	r3, #64	@ 0x40
 8020170:	d141      	bne.n	80201f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	3308      	adds	r3, #8
 8020178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802017c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8020180:	e853 3f00 	ldrex	r3, [r3]
 8020184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8020188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802018c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	3308      	adds	r3, #8
 802019a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 802019e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80201a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80201a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80201aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80201ae:	e841 2300 	strex	r3, r2, [r1]
 80201b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80201b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d1d9      	bne.n	8020172 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d013      	beq.n	80201ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80201ca:	4a13      	ldr	r2, [pc, #76]	@ (8020218 <HAL_UART_IRQHandler+0x29c>)
 80201cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80201d2:	4618      	mov	r0, r3
 80201d4:	f7fc fa59 	bl	801c68a <HAL_DMA_Abort_IT>
 80201d8:	4603      	mov	r3, r0
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d017      	beq.n	802020e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80201e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80201e4:	687a      	ldr	r2, [r7, #4]
 80201e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80201e8:	4610      	mov	r0, r2
 80201ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80201ec:	e00f      	b.n	802020e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80201ee:	6878      	ldr	r0, [r7, #4]
 80201f0:	f000 f9d4 	bl	802059c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80201f4:	e00b      	b.n	802020e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80201f6:	6878      	ldr	r0, [r7, #4]
 80201f8:	f000 f9d0 	bl	802059c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80201fc:	e007      	b.n	802020e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80201fe:	6878      	ldr	r0, [r7, #4]
 8020200:	f000 f9cc 	bl	802059c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	2200      	movs	r2, #0
 8020208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 802020c:	e1b1      	b.n	8020572 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802020e:	bf00      	nop
    return;
 8020210:	e1af      	b.n	8020572 <HAL_UART_IRQHandler+0x5f6>
 8020212:	bf00      	nop
 8020214:	04000120 	.word	0x04000120
 8020218:	08021041 	.word	0x08021041

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020220:	2b01      	cmp	r3, #1
 8020222:	f040 816a 	bne.w	80204fa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8020226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802022a:	f003 0310 	and.w	r3, r3, #16
 802022e:	2b00      	cmp	r3, #0
 8020230:	f000 8163 	beq.w	80204fa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8020234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020238:	f003 0310 	and.w	r3, r3, #16
 802023c:	2b00      	cmp	r3, #0
 802023e:	f000 815c 	beq.w	80204fa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	2210      	movs	r2, #16
 8020248:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	689b      	ldr	r3, [r3, #8]
 8020250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020254:	2b40      	cmp	r3, #64	@ 0x40
 8020256:	f040 80d4 	bne.w	8020402 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	685b      	ldr	r3, [r3, #4]
 8020262:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8020266:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 802026a:	2b00      	cmp	r3, #0
 802026c:	f000 80ad 	beq.w	80203ca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8020276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 802027a:	429a      	cmp	r2, r3
 802027c:	f080 80a5 	bcs.w	80203ca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8020286:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	f003 0320 	and.w	r3, r3, #32
 8020296:	2b00      	cmp	r3, #0
 8020298:	f040 8086 	bne.w	80203a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80202a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80202a8:	e853 3f00 	ldrex	r3, [r3]
 80202ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80202b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80202b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80202b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	461a      	mov	r2, r3
 80202c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80202c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80202ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80202ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80202d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80202d6:	e841 2300 	strex	r3, r2, [r1]
 80202da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80202de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	d1da      	bne.n	802029c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80202e6:	687b      	ldr	r3, [r7, #4]
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	3308      	adds	r3, #8
 80202ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80202ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80202f0:	e853 3f00 	ldrex	r3, [r3]
 80202f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80202f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80202f8:	f023 0301 	bic.w	r3, r3, #1
 80202fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	3308      	adds	r3, #8
 8020306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 802030a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802030e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020310:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8020312:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8020316:	e841 2300 	strex	r3, r2, [r1]
 802031a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 802031c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802031e:	2b00      	cmp	r3, #0
 8020320:	d1e1      	bne.n	80202e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	3308      	adds	r3, #8
 8020328:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802032a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802032c:	e853 3f00 	ldrex	r3, [r3]
 8020330:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8020332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	3308      	adds	r3, #8
 8020342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8020346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8020348:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802034a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802034c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802034e:	e841 2300 	strex	r3, r2, [r1]
 8020352:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8020354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020356:	2b00      	cmp	r3, #0
 8020358:	d1e3      	bne.n	8020322 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	2220      	movs	r2, #32
 802035e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	2200      	movs	r2, #0
 8020366:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	681b      	ldr	r3, [r3, #0]
 802036c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802036e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020370:	e853 3f00 	ldrex	r3, [r3]
 8020374:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8020376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020378:	f023 0310 	bic.w	r3, r3, #16
 802037c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	461a      	mov	r2, r3
 8020386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802038a:	65bb      	str	r3, [r7, #88]	@ 0x58
 802038c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802038e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8020390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8020392:	e841 2300 	strex	r3, r2, [r1]
 8020396:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8020398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802039a:	2b00      	cmp	r3, #0
 802039c:	d1e4      	bne.n	8020368 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80203a2:	4618      	mov	r0, r3
 80203a4:	f7fc f933 	bl	801c60e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	2202      	movs	r2, #2
 80203ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80203ba:	b29b      	uxth	r3, r3
 80203bc:	1ad3      	subs	r3, r2, r3
 80203be:	b29b      	uxth	r3, r3
 80203c0:	4619      	mov	r1, r3
 80203c2:	6878      	ldr	r0, [r7, #4]
 80203c4:	f000 f8f4 	bl	80205b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80203c8:	e0d5      	b.n	8020576 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80203d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80203d4:	429a      	cmp	r2, r3
 80203d6:	f040 80ce 	bne.w	8020576 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	f003 0320 	and.w	r3, r3, #32
 80203e6:	2b20      	cmp	r3, #32
 80203e8:	f040 80c5 	bne.w	8020576 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	2202      	movs	r2, #2
 80203f0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80203f8:	4619      	mov	r1, r3
 80203fa:	6878      	ldr	r0, [r7, #4]
 80203fc:	f000 f8d8 	bl	80205b0 <HAL_UARTEx_RxEventCallback>
      return;
 8020400:	e0b9      	b.n	8020576 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 802040e:	b29b      	uxth	r3, r3
 8020410:	1ad3      	subs	r3, r2, r3
 8020412:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 802041c:	b29b      	uxth	r3, r3
 802041e:	2b00      	cmp	r3, #0
 8020420:	f000 80ab 	beq.w	802057a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8020424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8020428:	2b00      	cmp	r3, #0
 802042a:	f000 80a6 	beq.w	802057a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	681b      	ldr	r3, [r3, #0]
 8020432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020436:	e853 3f00 	ldrex	r3, [r3]
 802043a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802043e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	461a      	mov	r2, r3
 802044c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8020450:	647b      	str	r3, [r7, #68]	@ 0x44
 8020452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020458:	e841 2300 	strex	r3, r2, [r1]
 802045c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802045e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020460:	2b00      	cmp	r3, #0
 8020462:	d1e4      	bne.n	802042e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	3308      	adds	r3, #8
 802046a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802046c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802046e:	e853 3f00 	ldrex	r3, [r3]
 8020472:	623b      	str	r3, [r7, #32]
   return(result);
 8020474:	6a3b      	ldr	r3, [r7, #32]
 8020476:	f023 0301 	bic.w	r3, r3, #1
 802047a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	3308      	adds	r3, #8
 8020484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8020488:	633a      	str	r2, [r7, #48]	@ 0x30
 802048a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802048c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802048e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020490:	e841 2300 	strex	r3, r2, [r1]
 8020494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020498:	2b00      	cmp	r3, #0
 802049a:	d1e3      	bne.n	8020464 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	2220      	movs	r2, #32
 80204a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	2200      	movs	r2, #0
 80204a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	2200      	movs	r2, #0
 80204ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80204b6:	693b      	ldr	r3, [r7, #16]
 80204b8:	e853 3f00 	ldrex	r3, [r3]
 80204bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80204be:	68fb      	ldr	r3, [r7, #12]
 80204c0:	f023 0310 	bic.w	r3, r3, #16
 80204c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	461a      	mov	r2, r3
 80204ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80204d2:	61fb      	str	r3, [r7, #28]
 80204d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80204d6:	69b9      	ldr	r1, [r7, #24]
 80204d8:	69fa      	ldr	r2, [r7, #28]
 80204da:	e841 2300 	strex	r3, r2, [r1]
 80204de:	617b      	str	r3, [r7, #20]
   return(result);
 80204e0:	697b      	ldr	r3, [r7, #20]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d1e4      	bne.n	80204b0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	2202      	movs	r2, #2
 80204ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80204ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80204f0:	4619      	mov	r1, r3
 80204f2:	6878      	ldr	r0, [r7, #4]
 80204f4:	f000 f85c 	bl	80205b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80204f8:	e03f      	b.n	802057a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80204fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80204fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8020502:	2b00      	cmp	r3, #0
 8020504:	d00e      	beq.n	8020524 <HAL_UART_IRQHandler+0x5a8>
 8020506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802050a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802050e:	2b00      	cmp	r3, #0
 8020510:	d008      	beq.n	8020524 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 802051a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 802051c:	6878      	ldr	r0, [r7, #4]
 802051e:	f000 ff8b 	bl	8021438 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8020522:	e02d      	b.n	8020580 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8020524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8020528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802052c:	2b00      	cmp	r3, #0
 802052e:	d00e      	beq.n	802054e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8020530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020538:	2b00      	cmp	r3, #0
 802053a:	d008      	beq.n	802054e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020540:	2b00      	cmp	r3, #0
 8020542:	d01c      	beq.n	802057e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020548:	6878      	ldr	r0, [r7, #4]
 802054a:	4798      	blx	r3
    }
    return;
 802054c:	e017      	b.n	802057e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 802054e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8020552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020556:	2b00      	cmp	r3, #0
 8020558:	d012      	beq.n	8020580 <HAL_UART_IRQHandler+0x604>
 802055a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802055e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020562:	2b00      	cmp	r3, #0
 8020564:	d00c      	beq.n	8020580 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8020566:	6878      	ldr	r0, [r7, #4]
 8020568:	f000 fd80 	bl	802106c <UART_EndTransmit_IT>
    return;
 802056c:	e008      	b.n	8020580 <HAL_UART_IRQHandler+0x604>
      return;
 802056e:	bf00      	nop
 8020570:	e006      	b.n	8020580 <HAL_UART_IRQHandler+0x604>
    return;
 8020572:	bf00      	nop
 8020574:	e004      	b.n	8020580 <HAL_UART_IRQHandler+0x604>
      return;
 8020576:	bf00      	nop
 8020578:	e002      	b.n	8020580 <HAL_UART_IRQHandler+0x604>
      return;
 802057a:	bf00      	nop
 802057c:	e000      	b.n	8020580 <HAL_UART_IRQHandler+0x604>
    return;
 802057e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8020580:	37e8      	adds	r7, #232	@ 0xe8
 8020582:	46bd      	mov	sp, r7
 8020584:	bd80      	pop	{r7, pc}
 8020586:	bf00      	nop

08020588 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8020588:	b480      	push	{r7}
 802058a:	b083      	sub	sp, #12
 802058c:	af00      	add	r7, sp, #0
 802058e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8020590:	bf00      	nop
 8020592:	370c      	adds	r7, #12
 8020594:	46bd      	mov	sp, r7
 8020596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802059a:	4770      	bx	lr

0802059c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802059c:	b480      	push	{r7}
 802059e:	b083      	sub	sp, #12
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80205a4:	bf00      	nop
 80205a6:	370c      	adds	r7, #12
 80205a8:	46bd      	mov	sp, r7
 80205aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ae:	4770      	bx	lr

080205b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80205b0:	b480      	push	{r7}
 80205b2:	b083      	sub	sp, #12
 80205b4:	af00      	add	r7, sp, #0
 80205b6:	6078      	str	r0, [r7, #4]
 80205b8:	460b      	mov	r3, r1
 80205ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80205bc:	bf00      	nop
 80205be:	370c      	adds	r7, #12
 80205c0:	46bd      	mov	sp, r7
 80205c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205c6:	4770      	bx	lr

080205c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80205c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80205cc:	b08a      	sub	sp, #40	@ 0x28
 80205ce:	af00      	add	r7, sp, #0
 80205d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80205d2:	2300      	movs	r3, #0
 80205d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80205d8:	68fb      	ldr	r3, [r7, #12]
 80205da:	689a      	ldr	r2, [r3, #8]
 80205dc:	68fb      	ldr	r3, [r7, #12]
 80205de:	691b      	ldr	r3, [r3, #16]
 80205e0:	431a      	orrs	r2, r3
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	695b      	ldr	r3, [r3, #20]
 80205e6:	431a      	orrs	r2, r3
 80205e8:	68fb      	ldr	r3, [r7, #12]
 80205ea:	69db      	ldr	r3, [r3, #28]
 80205ec:	4313      	orrs	r3, r2
 80205ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	681a      	ldr	r2, [r3, #0]
 80205f6:	4b9e      	ldr	r3, [pc, #632]	@ (8020870 <UART_SetConfig+0x2a8>)
 80205f8:	4013      	ands	r3, r2
 80205fa:	68fa      	ldr	r2, [r7, #12]
 80205fc:	6812      	ldr	r2, [r2, #0]
 80205fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020600:	430b      	orrs	r3, r1
 8020602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020604:	68fb      	ldr	r3, [r7, #12]
 8020606:	681b      	ldr	r3, [r3, #0]
 8020608:	685b      	ldr	r3, [r3, #4]
 802060a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	68da      	ldr	r2, [r3, #12]
 8020612:	68fb      	ldr	r3, [r7, #12]
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	430a      	orrs	r2, r1
 8020618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802061a:	68fb      	ldr	r3, [r7, #12]
 802061c:	699b      	ldr	r3, [r3, #24]
 802061e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8020620:	68fb      	ldr	r3, [r7, #12]
 8020622:	681b      	ldr	r3, [r3, #0]
 8020624:	4a93      	ldr	r2, [pc, #588]	@ (8020874 <UART_SetConfig+0x2ac>)
 8020626:	4293      	cmp	r3, r2
 8020628:	d004      	beq.n	8020634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802062a:	68fb      	ldr	r3, [r7, #12]
 802062c:	6a1b      	ldr	r3, [r3, #32]
 802062e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020630:	4313      	orrs	r3, r2
 8020632:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020634:	68fb      	ldr	r3, [r7, #12]
 8020636:	681b      	ldr	r3, [r3, #0]
 8020638:	689b      	ldr	r3, [r3, #8]
 802063a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020644:	430a      	orrs	r2, r1
 8020646:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8020648:	68fb      	ldr	r3, [r7, #12]
 802064a:	681b      	ldr	r3, [r3, #0]
 802064c:	4a8a      	ldr	r2, [pc, #552]	@ (8020878 <UART_SetConfig+0x2b0>)
 802064e:	4293      	cmp	r3, r2
 8020650:	d126      	bne.n	80206a0 <UART_SetConfig+0xd8>
 8020652:	4b8a      	ldr	r3, [pc, #552]	@ (802087c <UART_SetConfig+0x2b4>)
 8020654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020658:	f003 0303 	and.w	r3, r3, #3
 802065c:	2b03      	cmp	r3, #3
 802065e:	d81b      	bhi.n	8020698 <UART_SetConfig+0xd0>
 8020660:	a201      	add	r2, pc, #4	@ (adr r2, 8020668 <UART_SetConfig+0xa0>)
 8020662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020666:	bf00      	nop
 8020668:	08020679 	.word	0x08020679
 802066c:	08020689 	.word	0x08020689
 8020670:	08020681 	.word	0x08020681
 8020674:	08020691 	.word	0x08020691
 8020678:	2301      	movs	r3, #1
 802067a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 802067e:	e0ab      	b.n	80207d8 <UART_SetConfig+0x210>
 8020680:	2302      	movs	r3, #2
 8020682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020686:	e0a7      	b.n	80207d8 <UART_SetConfig+0x210>
 8020688:	2304      	movs	r3, #4
 802068a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 802068e:	e0a3      	b.n	80207d8 <UART_SetConfig+0x210>
 8020690:	2308      	movs	r3, #8
 8020692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020696:	e09f      	b.n	80207d8 <UART_SetConfig+0x210>
 8020698:	2310      	movs	r3, #16
 802069a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 802069e:	e09b      	b.n	80207d8 <UART_SetConfig+0x210>
 80206a0:	68fb      	ldr	r3, [r7, #12]
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	4a76      	ldr	r2, [pc, #472]	@ (8020880 <UART_SetConfig+0x2b8>)
 80206a6:	4293      	cmp	r3, r2
 80206a8:	d138      	bne.n	802071c <UART_SetConfig+0x154>
 80206aa:	4b74      	ldr	r3, [pc, #464]	@ (802087c <UART_SetConfig+0x2b4>)
 80206ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80206b0:	f003 030c 	and.w	r3, r3, #12
 80206b4:	2b0c      	cmp	r3, #12
 80206b6:	d82d      	bhi.n	8020714 <UART_SetConfig+0x14c>
 80206b8:	a201      	add	r2, pc, #4	@ (adr r2, 80206c0 <UART_SetConfig+0xf8>)
 80206ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80206be:	bf00      	nop
 80206c0:	080206f5 	.word	0x080206f5
 80206c4:	08020715 	.word	0x08020715
 80206c8:	08020715 	.word	0x08020715
 80206cc:	08020715 	.word	0x08020715
 80206d0:	08020705 	.word	0x08020705
 80206d4:	08020715 	.word	0x08020715
 80206d8:	08020715 	.word	0x08020715
 80206dc:	08020715 	.word	0x08020715
 80206e0:	080206fd 	.word	0x080206fd
 80206e4:	08020715 	.word	0x08020715
 80206e8:	08020715 	.word	0x08020715
 80206ec:	08020715 	.word	0x08020715
 80206f0:	0802070d 	.word	0x0802070d
 80206f4:	2300      	movs	r3, #0
 80206f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80206fa:	e06d      	b.n	80207d8 <UART_SetConfig+0x210>
 80206fc:	2302      	movs	r3, #2
 80206fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020702:	e069      	b.n	80207d8 <UART_SetConfig+0x210>
 8020704:	2304      	movs	r3, #4
 8020706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 802070a:	e065      	b.n	80207d8 <UART_SetConfig+0x210>
 802070c:	2308      	movs	r3, #8
 802070e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020712:	e061      	b.n	80207d8 <UART_SetConfig+0x210>
 8020714:	2310      	movs	r3, #16
 8020716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 802071a:	e05d      	b.n	80207d8 <UART_SetConfig+0x210>
 802071c:	68fb      	ldr	r3, [r7, #12]
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	4a58      	ldr	r2, [pc, #352]	@ (8020884 <UART_SetConfig+0x2bc>)
 8020722:	4293      	cmp	r3, r2
 8020724:	d125      	bne.n	8020772 <UART_SetConfig+0x1aa>
 8020726:	4b55      	ldr	r3, [pc, #340]	@ (802087c <UART_SetConfig+0x2b4>)
 8020728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802072c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8020730:	2b30      	cmp	r3, #48	@ 0x30
 8020732:	d016      	beq.n	8020762 <UART_SetConfig+0x19a>
 8020734:	2b30      	cmp	r3, #48	@ 0x30
 8020736:	d818      	bhi.n	802076a <UART_SetConfig+0x1a2>
 8020738:	2b20      	cmp	r3, #32
 802073a:	d00a      	beq.n	8020752 <UART_SetConfig+0x18a>
 802073c:	2b20      	cmp	r3, #32
 802073e:	d814      	bhi.n	802076a <UART_SetConfig+0x1a2>
 8020740:	2b00      	cmp	r3, #0
 8020742:	d002      	beq.n	802074a <UART_SetConfig+0x182>
 8020744:	2b10      	cmp	r3, #16
 8020746:	d008      	beq.n	802075a <UART_SetConfig+0x192>
 8020748:	e00f      	b.n	802076a <UART_SetConfig+0x1a2>
 802074a:	2300      	movs	r3, #0
 802074c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020750:	e042      	b.n	80207d8 <UART_SetConfig+0x210>
 8020752:	2302      	movs	r3, #2
 8020754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020758:	e03e      	b.n	80207d8 <UART_SetConfig+0x210>
 802075a:	2304      	movs	r3, #4
 802075c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020760:	e03a      	b.n	80207d8 <UART_SetConfig+0x210>
 8020762:	2308      	movs	r3, #8
 8020764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020768:	e036      	b.n	80207d8 <UART_SetConfig+0x210>
 802076a:	2310      	movs	r3, #16
 802076c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8020770:	e032      	b.n	80207d8 <UART_SetConfig+0x210>
 8020772:	68fb      	ldr	r3, [r7, #12]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	4a3f      	ldr	r2, [pc, #252]	@ (8020874 <UART_SetConfig+0x2ac>)
 8020778:	4293      	cmp	r3, r2
 802077a:	d12a      	bne.n	80207d2 <UART_SetConfig+0x20a>
 802077c:	4b3f      	ldr	r3, [pc, #252]	@ (802087c <UART_SetConfig+0x2b4>)
 802077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020782:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8020786:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 802078a:	d01a      	beq.n	80207c2 <UART_SetConfig+0x1fa>
 802078c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020790:	d81b      	bhi.n	80207ca <UART_SetConfig+0x202>
 8020792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020796:	d00c      	beq.n	80207b2 <UART_SetConfig+0x1ea>
 8020798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802079c:	d815      	bhi.n	80207ca <UART_SetConfig+0x202>
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d003      	beq.n	80207aa <UART_SetConfig+0x1e2>
 80207a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80207a6:	d008      	beq.n	80207ba <UART_SetConfig+0x1f2>
 80207a8:	e00f      	b.n	80207ca <UART_SetConfig+0x202>
 80207aa:	2300      	movs	r3, #0
 80207ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80207b0:	e012      	b.n	80207d8 <UART_SetConfig+0x210>
 80207b2:	2302      	movs	r3, #2
 80207b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80207b8:	e00e      	b.n	80207d8 <UART_SetConfig+0x210>
 80207ba:	2304      	movs	r3, #4
 80207bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80207c0:	e00a      	b.n	80207d8 <UART_SetConfig+0x210>
 80207c2:	2308      	movs	r3, #8
 80207c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80207c8:	e006      	b.n	80207d8 <UART_SetConfig+0x210>
 80207ca:	2310      	movs	r3, #16
 80207cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80207d0:	e002      	b.n	80207d8 <UART_SetConfig+0x210>
 80207d2:	2310      	movs	r3, #16
 80207d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	4a25      	ldr	r2, [pc, #148]	@ (8020874 <UART_SetConfig+0x2ac>)
 80207de:	4293      	cmp	r3, r2
 80207e0:	f040 808a 	bne.w	80208f8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80207e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80207e8:	2b08      	cmp	r3, #8
 80207ea:	d824      	bhi.n	8020836 <UART_SetConfig+0x26e>
 80207ec:	a201      	add	r2, pc, #4	@ (adr r2, 80207f4 <UART_SetConfig+0x22c>)
 80207ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80207f2:	bf00      	nop
 80207f4:	08020819 	.word	0x08020819
 80207f8:	08020837 	.word	0x08020837
 80207fc:	08020821 	.word	0x08020821
 8020800:	08020837 	.word	0x08020837
 8020804:	08020827 	.word	0x08020827
 8020808:	08020837 	.word	0x08020837
 802080c:	08020837 	.word	0x08020837
 8020810:	08020837 	.word	0x08020837
 8020814:	0802082f 	.word	0x0802082f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020818:	f7fd f830 	bl	801d87c <HAL_RCC_GetPCLK1Freq>
 802081c:	61f8      	str	r0, [r7, #28]
        break;
 802081e:	e010      	b.n	8020842 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020820:	4b19      	ldr	r3, [pc, #100]	@ (8020888 <UART_SetConfig+0x2c0>)
 8020822:	61fb      	str	r3, [r7, #28]
        break;
 8020824:	e00d      	b.n	8020842 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020826:	f7fc ff91 	bl	801d74c <HAL_RCC_GetSysClockFreq>
 802082a:	61f8      	str	r0, [r7, #28]
        break;
 802082c:	e009      	b.n	8020842 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802082e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020832:	61fb      	str	r3, [r7, #28]
        break;
 8020834:	e005      	b.n	8020842 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8020836:	2300      	movs	r3, #0
 8020838:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 802083a:	2301      	movs	r3, #1
 802083c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8020840:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020842:	69fb      	ldr	r3, [r7, #28]
 8020844:	2b00      	cmp	r3, #0
 8020846:	f000 8109 	beq.w	8020a5c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 802084a:	68fb      	ldr	r3, [r7, #12]
 802084c:	685a      	ldr	r2, [r3, #4]
 802084e:	4613      	mov	r3, r2
 8020850:	005b      	lsls	r3, r3, #1
 8020852:	4413      	add	r3, r2
 8020854:	69fa      	ldr	r2, [r7, #28]
 8020856:	429a      	cmp	r2, r3
 8020858:	d305      	bcc.n	8020866 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	685b      	ldr	r3, [r3, #4]
 802085e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8020860:	69fa      	ldr	r2, [r7, #28]
 8020862:	429a      	cmp	r2, r3
 8020864:	d912      	bls.n	802088c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8020866:	2301      	movs	r3, #1
 8020868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 802086c:	e0f6      	b.n	8020a5c <UART_SetConfig+0x494>
 802086e:	bf00      	nop
 8020870:	efff69f3 	.word	0xefff69f3
 8020874:	40008000 	.word	0x40008000
 8020878:	40013800 	.word	0x40013800
 802087c:	40021000 	.word	0x40021000
 8020880:	40004400 	.word	0x40004400
 8020884:	40004800 	.word	0x40004800
 8020888:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 802088c:	69fb      	ldr	r3, [r7, #28]
 802088e:	2200      	movs	r2, #0
 8020890:	461c      	mov	r4, r3
 8020892:	4615      	mov	r5, r2
 8020894:	f04f 0200 	mov.w	r2, #0
 8020898:	f04f 0300 	mov.w	r3, #0
 802089c:	022b      	lsls	r3, r5, #8
 802089e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80208a2:	0222      	lsls	r2, r4, #8
 80208a4:	68f9      	ldr	r1, [r7, #12]
 80208a6:	6849      	ldr	r1, [r1, #4]
 80208a8:	0849      	lsrs	r1, r1, #1
 80208aa:	2000      	movs	r0, #0
 80208ac:	4688      	mov	r8, r1
 80208ae:	4681      	mov	r9, r0
 80208b0:	eb12 0a08 	adds.w	sl, r2, r8
 80208b4:	eb43 0b09 	adc.w	fp, r3, r9
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	685b      	ldr	r3, [r3, #4]
 80208bc:	2200      	movs	r2, #0
 80208be:	603b      	str	r3, [r7, #0]
 80208c0:	607a      	str	r2, [r7, #4]
 80208c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80208c6:	4650      	mov	r0, sl
 80208c8:	4659      	mov	r1, fp
 80208ca:	f7e0 f9bd 	bl	8000c48 <__aeabi_uldivmod>
 80208ce:	4602      	mov	r2, r0
 80208d0:	460b      	mov	r3, r1
 80208d2:	4613      	mov	r3, r2
 80208d4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80208d6:	69bb      	ldr	r3, [r7, #24]
 80208d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80208dc:	d308      	bcc.n	80208f0 <UART_SetConfig+0x328>
 80208de:	69bb      	ldr	r3, [r7, #24]
 80208e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80208e4:	d204      	bcs.n	80208f0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80208e6:	68fb      	ldr	r3, [r7, #12]
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	69ba      	ldr	r2, [r7, #24]
 80208ec:	60da      	str	r2, [r3, #12]
 80208ee:	e0b5      	b.n	8020a5c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80208f0:	2301      	movs	r3, #1
 80208f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80208f6:	e0b1      	b.n	8020a5c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80208f8:	68fb      	ldr	r3, [r7, #12]
 80208fa:	69db      	ldr	r3, [r3, #28]
 80208fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020900:	d15d      	bne.n	80209be <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8020902:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8020906:	2b08      	cmp	r3, #8
 8020908:	d827      	bhi.n	802095a <UART_SetConfig+0x392>
 802090a:	a201      	add	r2, pc, #4	@ (adr r2, 8020910 <UART_SetConfig+0x348>)
 802090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020910:	08020935 	.word	0x08020935
 8020914:	0802093d 	.word	0x0802093d
 8020918:	08020945 	.word	0x08020945
 802091c:	0802095b 	.word	0x0802095b
 8020920:	0802094b 	.word	0x0802094b
 8020924:	0802095b 	.word	0x0802095b
 8020928:	0802095b 	.word	0x0802095b
 802092c:	0802095b 	.word	0x0802095b
 8020930:	08020953 	.word	0x08020953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020934:	f7fc ffa2 	bl	801d87c <HAL_RCC_GetPCLK1Freq>
 8020938:	61f8      	str	r0, [r7, #28]
        break;
 802093a:	e014      	b.n	8020966 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802093c:	f7fc ffb4 	bl	801d8a8 <HAL_RCC_GetPCLK2Freq>
 8020940:	61f8      	str	r0, [r7, #28]
        break;
 8020942:	e010      	b.n	8020966 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020944:	4b4c      	ldr	r3, [pc, #304]	@ (8020a78 <UART_SetConfig+0x4b0>)
 8020946:	61fb      	str	r3, [r7, #28]
        break;
 8020948:	e00d      	b.n	8020966 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802094a:	f7fc feff 	bl	801d74c <HAL_RCC_GetSysClockFreq>
 802094e:	61f8      	str	r0, [r7, #28]
        break;
 8020950:	e009      	b.n	8020966 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020956:	61fb      	str	r3, [r7, #28]
        break;
 8020958:	e005      	b.n	8020966 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 802095a:	2300      	movs	r3, #0
 802095c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 802095e:	2301      	movs	r3, #1
 8020960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8020964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020966:	69fb      	ldr	r3, [r7, #28]
 8020968:	2b00      	cmp	r3, #0
 802096a:	d077      	beq.n	8020a5c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 802096c:	69fb      	ldr	r3, [r7, #28]
 802096e:	005a      	lsls	r2, r3, #1
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	685b      	ldr	r3, [r3, #4]
 8020974:	085b      	lsrs	r3, r3, #1
 8020976:	441a      	add	r2, r3
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	685b      	ldr	r3, [r3, #4]
 802097c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020980:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020982:	69bb      	ldr	r3, [r7, #24]
 8020984:	2b0f      	cmp	r3, #15
 8020986:	d916      	bls.n	80209b6 <UART_SetConfig+0x3ee>
 8020988:	69bb      	ldr	r3, [r7, #24]
 802098a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802098e:	d212      	bcs.n	80209b6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020990:	69bb      	ldr	r3, [r7, #24]
 8020992:	b29b      	uxth	r3, r3
 8020994:	f023 030f 	bic.w	r3, r3, #15
 8020998:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802099a:	69bb      	ldr	r3, [r7, #24]
 802099c:	085b      	lsrs	r3, r3, #1
 802099e:	b29b      	uxth	r3, r3
 80209a0:	f003 0307 	and.w	r3, r3, #7
 80209a4:	b29a      	uxth	r2, r3
 80209a6:	8afb      	ldrh	r3, [r7, #22]
 80209a8:	4313      	orrs	r3, r2
 80209aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	8afa      	ldrh	r2, [r7, #22]
 80209b2:	60da      	str	r2, [r3, #12]
 80209b4:	e052      	b.n	8020a5c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80209b6:	2301      	movs	r3, #1
 80209b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80209bc:	e04e      	b.n	8020a5c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80209be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80209c2:	2b08      	cmp	r3, #8
 80209c4:	d827      	bhi.n	8020a16 <UART_SetConfig+0x44e>
 80209c6:	a201      	add	r2, pc, #4	@ (adr r2, 80209cc <UART_SetConfig+0x404>)
 80209c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209cc:	080209f1 	.word	0x080209f1
 80209d0:	080209f9 	.word	0x080209f9
 80209d4:	08020a01 	.word	0x08020a01
 80209d8:	08020a17 	.word	0x08020a17
 80209dc:	08020a07 	.word	0x08020a07
 80209e0:	08020a17 	.word	0x08020a17
 80209e4:	08020a17 	.word	0x08020a17
 80209e8:	08020a17 	.word	0x08020a17
 80209ec:	08020a0f 	.word	0x08020a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80209f0:	f7fc ff44 	bl	801d87c <HAL_RCC_GetPCLK1Freq>
 80209f4:	61f8      	str	r0, [r7, #28]
        break;
 80209f6:	e014      	b.n	8020a22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80209f8:	f7fc ff56 	bl	801d8a8 <HAL_RCC_GetPCLK2Freq>
 80209fc:	61f8      	str	r0, [r7, #28]
        break;
 80209fe:	e010      	b.n	8020a22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020a00:	4b1d      	ldr	r3, [pc, #116]	@ (8020a78 <UART_SetConfig+0x4b0>)
 8020a02:	61fb      	str	r3, [r7, #28]
        break;
 8020a04:	e00d      	b.n	8020a22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020a06:	f7fc fea1 	bl	801d74c <HAL_RCC_GetSysClockFreq>
 8020a0a:	61f8      	str	r0, [r7, #28]
        break;
 8020a0c:	e009      	b.n	8020a22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020a12:	61fb      	str	r3, [r7, #28]
        break;
 8020a14:	e005      	b.n	8020a22 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8020a16:	2300      	movs	r3, #0
 8020a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8020a1a:	2301      	movs	r3, #1
 8020a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8020a20:	bf00      	nop
    }

    if (pclk != 0U)
 8020a22:	69fb      	ldr	r3, [r7, #28]
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d019      	beq.n	8020a5c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8020a28:	68fb      	ldr	r3, [r7, #12]
 8020a2a:	685b      	ldr	r3, [r3, #4]
 8020a2c:	085a      	lsrs	r2, r3, #1
 8020a2e:	69fb      	ldr	r3, [r7, #28]
 8020a30:	441a      	add	r2, r3
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	685b      	ldr	r3, [r3, #4]
 8020a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020a3c:	69bb      	ldr	r3, [r7, #24]
 8020a3e:	2b0f      	cmp	r3, #15
 8020a40:	d909      	bls.n	8020a56 <UART_SetConfig+0x48e>
 8020a42:	69bb      	ldr	r3, [r7, #24]
 8020a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020a48:	d205      	bcs.n	8020a56 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020a4a:	69bb      	ldr	r3, [r7, #24]
 8020a4c:	b29a      	uxth	r2, r3
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	60da      	str	r2, [r3, #12]
 8020a54:	e002      	b.n	8020a5c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8020a56:	2301      	movs	r3, #1
 8020a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	2200      	movs	r2, #0
 8020a60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8020a62:	68fb      	ldr	r3, [r7, #12]
 8020a64:	2200      	movs	r2, #0
 8020a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8020a68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	3728      	adds	r7, #40	@ 0x28
 8020a70:	46bd      	mov	sp, r7
 8020a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020a76:	bf00      	nop
 8020a78:	00f42400 	.word	0x00f42400

08020a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020a7c:	b480      	push	{r7}
 8020a7e:	b083      	sub	sp, #12
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020a88:	f003 0308 	and.w	r3, r3, #8
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d00a      	beq.n	8020aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	681b      	ldr	r3, [r3, #0]
 8020a94:	685b      	ldr	r3, [r3, #4]
 8020a96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	430a      	orrs	r2, r1
 8020aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020aaa:	f003 0301 	and.w	r3, r3, #1
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	d00a      	beq.n	8020ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	685b      	ldr	r3, [r3, #4]
 8020ab8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	430a      	orrs	r2, r1
 8020ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020acc:	f003 0302 	and.w	r3, r3, #2
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d00a      	beq.n	8020aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	685b      	ldr	r3, [r3, #4]
 8020ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	430a      	orrs	r2, r1
 8020ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020aee:	f003 0304 	and.w	r3, r3, #4
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d00a      	beq.n	8020b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	685b      	ldr	r3, [r3, #4]
 8020afc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	430a      	orrs	r2, r1
 8020b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020b10:	f003 0310 	and.w	r3, r3, #16
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d00a      	beq.n	8020b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	689b      	ldr	r3, [r3, #8]
 8020b1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	430a      	orrs	r2, r1
 8020b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020b32:	f003 0320 	and.w	r3, r3, #32
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	d00a      	beq.n	8020b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8020b3a:	687b      	ldr	r3, [r7, #4]
 8020b3c:	681b      	ldr	r3, [r3, #0]
 8020b3e:	689b      	ldr	r3, [r3, #8]
 8020b40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	430a      	orrs	r2, r1
 8020b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d01a      	beq.n	8020b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	685b      	ldr	r3, [r3, #4]
 8020b62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	681b      	ldr	r3, [r3, #0]
 8020b6e:	430a      	orrs	r2, r1
 8020b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020b7a:	d10a      	bne.n	8020b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	685b      	ldr	r3, [r3, #4]
 8020b82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	681b      	ldr	r3, [r3, #0]
 8020b8e:	430a      	orrs	r2, r1
 8020b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020b9a:	2b00      	cmp	r3, #0
 8020b9c:	d00a      	beq.n	8020bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	685b      	ldr	r3, [r3, #4]
 8020ba4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8020ba8:	687b      	ldr	r3, [r7, #4]
 8020baa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	430a      	orrs	r2, r1
 8020bb2:	605a      	str	r2, [r3, #4]
  }
}
 8020bb4:	bf00      	nop
 8020bb6:	370c      	adds	r7, #12
 8020bb8:	46bd      	mov	sp, r7
 8020bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bbe:	4770      	bx	lr

08020bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b098      	sub	sp, #96	@ 0x60
 8020bc4:	af02      	add	r7, sp, #8
 8020bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	2200      	movs	r2, #0
 8020bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020bd0:	f7fb fbdc 	bl	801c38c <HAL_GetTick>
 8020bd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	f003 0308 	and.w	r3, r3, #8
 8020be0:	2b08      	cmp	r3, #8
 8020be2:	d12e      	bne.n	8020c42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020be8:	9300      	str	r3, [sp, #0]
 8020bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020bec:	2200      	movs	r2, #0
 8020bee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8020bf2:	6878      	ldr	r0, [r7, #4]
 8020bf4:	f000 f88c 	bl	8020d10 <UART_WaitOnFlagUntilTimeout>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	d021      	beq.n	8020c42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020c06:	e853 3f00 	ldrex	r3, [r3]
 8020c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8020c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	461a      	mov	r2, r3
 8020c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8020c1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020c24:	e841 2300 	strex	r3, r2, [r1]
 8020c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8020c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d1e6      	bne.n	8020bfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	2220      	movs	r2, #32
 8020c34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	2200      	movs	r2, #0
 8020c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020c3e:	2303      	movs	r3, #3
 8020c40:	e062      	b.n	8020d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	f003 0304 	and.w	r3, r3, #4
 8020c4c:	2b04      	cmp	r3, #4
 8020c4e:	d149      	bne.n	8020ce4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020c54:	9300      	str	r3, [sp, #0]
 8020c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c58:	2200      	movs	r2, #0
 8020c5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8020c5e:	6878      	ldr	r0, [r7, #4]
 8020c60:	f000 f856 	bl	8020d10 <UART_WaitOnFlagUntilTimeout>
 8020c64:	4603      	mov	r3, r0
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d03c      	beq.n	8020ce4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c72:	e853 3f00 	ldrex	r3, [r3]
 8020c76:	623b      	str	r3, [r7, #32]
   return(result);
 8020c78:	6a3b      	ldr	r3, [r7, #32]
 8020c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	681b      	ldr	r3, [r3, #0]
 8020c84:	461a      	mov	r2, r3
 8020c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8020c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020c90:	e841 2300 	strex	r3, r2, [r1]
 8020c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d1e6      	bne.n	8020c6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	681b      	ldr	r3, [r3, #0]
 8020ca0:	3308      	adds	r3, #8
 8020ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ca4:	693b      	ldr	r3, [r7, #16]
 8020ca6:	e853 3f00 	ldrex	r3, [r3]
 8020caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	f023 0301 	bic.w	r3, r3, #1
 8020cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	3308      	adds	r3, #8
 8020cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020cbc:	61fa      	str	r2, [r7, #28]
 8020cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020cc0:	69b9      	ldr	r1, [r7, #24]
 8020cc2:	69fa      	ldr	r2, [r7, #28]
 8020cc4:	e841 2300 	strex	r3, r2, [r1]
 8020cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8020cca:	697b      	ldr	r3, [r7, #20]
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d1e5      	bne.n	8020c9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	2220      	movs	r2, #32
 8020cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	2200      	movs	r2, #0
 8020cdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020ce0:	2303      	movs	r3, #3
 8020ce2:	e011      	b.n	8020d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	2220      	movs	r2, #32
 8020ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	2220      	movs	r2, #32
 8020cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	2200      	movs	r2, #0
 8020cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	2200      	movs	r2, #0
 8020d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8020d06:	2300      	movs	r3, #0
}
 8020d08:	4618      	mov	r0, r3
 8020d0a:	3758      	adds	r7, #88	@ 0x58
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}

08020d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8020d10:	b580      	push	{r7, lr}
 8020d12:	b084      	sub	sp, #16
 8020d14:	af00      	add	r7, sp, #0
 8020d16:	60f8      	str	r0, [r7, #12]
 8020d18:	60b9      	str	r1, [r7, #8]
 8020d1a:	603b      	str	r3, [r7, #0]
 8020d1c:	4613      	mov	r3, r2
 8020d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020d20:	e04f      	b.n	8020dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020d22:	69bb      	ldr	r3, [r7, #24]
 8020d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d28:	d04b      	beq.n	8020dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020d2a:	f7fb fb2f 	bl	801c38c <HAL_GetTick>
 8020d2e:	4602      	mov	r2, r0
 8020d30:	683b      	ldr	r3, [r7, #0]
 8020d32:	1ad3      	subs	r3, r2, r3
 8020d34:	69ba      	ldr	r2, [r7, #24]
 8020d36:	429a      	cmp	r2, r3
 8020d38:	d302      	bcc.n	8020d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8020d3a:	69bb      	ldr	r3, [r7, #24]
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	d101      	bne.n	8020d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8020d40:	2303      	movs	r3, #3
 8020d42:	e04e      	b.n	8020de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8020d44:	68fb      	ldr	r3, [r7, #12]
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	f003 0304 	and.w	r3, r3, #4
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d037      	beq.n	8020dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020d52:	68bb      	ldr	r3, [r7, #8]
 8020d54:	2b80      	cmp	r3, #128	@ 0x80
 8020d56:	d034      	beq.n	8020dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020d58:	68bb      	ldr	r3, [r7, #8]
 8020d5a:	2b40      	cmp	r3, #64	@ 0x40
 8020d5c:	d031      	beq.n	8020dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	681b      	ldr	r3, [r3, #0]
 8020d62:	69db      	ldr	r3, [r3, #28]
 8020d64:	f003 0308 	and.w	r3, r3, #8
 8020d68:	2b08      	cmp	r3, #8
 8020d6a:	d110      	bne.n	8020d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8020d6c:	68fb      	ldr	r3, [r7, #12]
 8020d6e:	681b      	ldr	r3, [r3, #0]
 8020d70:	2208      	movs	r2, #8
 8020d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020d74:	68f8      	ldr	r0, [r7, #12]
 8020d76:	f000 f8ff 	bl	8020f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8020d7a:	68fb      	ldr	r3, [r7, #12]
 8020d7c:	2208      	movs	r2, #8
 8020d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020d82:	68fb      	ldr	r3, [r7, #12]
 8020d84:	2200      	movs	r2, #0
 8020d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8020d8a:	2301      	movs	r3, #1
 8020d8c:	e029      	b.n	8020de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	681b      	ldr	r3, [r3, #0]
 8020d92:	69db      	ldr	r3, [r3, #28]
 8020d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8020d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020d9c:	d111      	bne.n	8020dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020d9e:	68fb      	ldr	r3, [r7, #12]
 8020da0:	681b      	ldr	r3, [r3, #0]
 8020da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8020da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020da8:	68f8      	ldr	r0, [r7, #12]
 8020daa:	f000 f8e5 	bl	8020f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020dae:	68fb      	ldr	r3, [r7, #12]
 8020db0:	2220      	movs	r2, #32
 8020db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020db6:	68fb      	ldr	r3, [r7, #12]
 8020db8:	2200      	movs	r2, #0
 8020dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8020dbe:	2303      	movs	r3, #3
 8020dc0:	e00f      	b.n	8020de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020dc2:	68fb      	ldr	r3, [r7, #12]
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	69da      	ldr	r2, [r3, #28]
 8020dc8:	68bb      	ldr	r3, [r7, #8]
 8020dca:	4013      	ands	r3, r2
 8020dcc:	68ba      	ldr	r2, [r7, #8]
 8020dce:	429a      	cmp	r2, r3
 8020dd0:	bf0c      	ite	eq
 8020dd2:	2301      	moveq	r3, #1
 8020dd4:	2300      	movne	r3, #0
 8020dd6:	b2db      	uxtb	r3, r3
 8020dd8:	461a      	mov	r2, r3
 8020dda:	79fb      	ldrb	r3, [r7, #7]
 8020ddc:	429a      	cmp	r2, r3
 8020dde:	d0a0      	beq.n	8020d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020de0:	2300      	movs	r3, #0
}
 8020de2:	4618      	mov	r0, r3
 8020de4:	3710      	adds	r7, #16
 8020de6:	46bd      	mov	sp, r7
 8020de8:	bd80      	pop	{r7, pc}
	...

08020dec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020dec:	b480      	push	{r7}
 8020dee:	b097      	sub	sp, #92	@ 0x5c
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	60f8      	str	r0, [r7, #12]
 8020df4:	60b9      	str	r1, [r7, #8]
 8020df6:	4613      	mov	r3, r2
 8020df8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8020dfa:	68fb      	ldr	r3, [r7, #12]
 8020dfc:	68ba      	ldr	r2, [r7, #8]
 8020dfe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8020e00:	68fb      	ldr	r3, [r7, #12]
 8020e02:	88fa      	ldrh	r2, [r7, #6]
 8020e04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8020e08:	68fb      	ldr	r3, [r7, #12]
 8020e0a:	88fa      	ldrh	r2, [r7, #6]
 8020e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8020e10:	68fb      	ldr	r3, [r7, #12]
 8020e12:	2200      	movs	r2, #0
 8020e14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8020e16:	68fb      	ldr	r3, [r7, #12]
 8020e18:	689b      	ldr	r3, [r3, #8]
 8020e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020e1e:	d10e      	bne.n	8020e3e <UART_Start_Receive_IT+0x52>
 8020e20:	68fb      	ldr	r3, [r7, #12]
 8020e22:	691b      	ldr	r3, [r3, #16]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d105      	bne.n	8020e34 <UART_Start_Receive_IT+0x48>
 8020e28:	68fb      	ldr	r3, [r7, #12]
 8020e2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8020e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020e32:	e02d      	b.n	8020e90 <UART_Start_Receive_IT+0xa4>
 8020e34:	68fb      	ldr	r3, [r7, #12]
 8020e36:	22ff      	movs	r2, #255	@ 0xff
 8020e38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020e3c:	e028      	b.n	8020e90 <UART_Start_Receive_IT+0xa4>
 8020e3e:	68fb      	ldr	r3, [r7, #12]
 8020e40:	689b      	ldr	r3, [r3, #8]
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d10d      	bne.n	8020e62 <UART_Start_Receive_IT+0x76>
 8020e46:	68fb      	ldr	r3, [r7, #12]
 8020e48:	691b      	ldr	r3, [r3, #16]
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	d104      	bne.n	8020e58 <UART_Start_Receive_IT+0x6c>
 8020e4e:	68fb      	ldr	r3, [r7, #12]
 8020e50:	22ff      	movs	r2, #255	@ 0xff
 8020e52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020e56:	e01b      	b.n	8020e90 <UART_Start_Receive_IT+0xa4>
 8020e58:	68fb      	ldr	r3, [r7, #12]
 8020e5a:	227f      	movs	r2, #127	@ 0x7f
 8020e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020e60:	e016      	b.n	8020e90 <UART_Start_Receive_IT+0xa4>
 8020e62:	68fb      	ldr	r3, [r7, #12]
 8020e64:	689b      	ldr	r3, [r3, #8]
 8020e66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020e6a:	d10d      	bne.n	8020e88 <UART_Start_Receive_IT+0x9c>
 8020e6c:	68fb      	ldr	r3, [r7, #12]
 8020e6e:	691b      	ldr	r3, [r3, #16]
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d104      	bne.n	8020e7e <UART_Start_Receive_IT+0x92>
 8020e74:	68fb      	ldr	r3, [r7, #12]
 8020e76:	227f      	movs	r2, #127	@ 0x7f
 8020e78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020e7c:	e008      	b.n	8020e90 <UART_Start_Receive_IT+0xa4>
 8020e7e:	68fb      	ldr	r3, [r7, #12]
 8020e80:	223f      	movs	r2, #63	@ 0x3f
 8020e82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8020e86:	e003      	b.n	8020e90 <UART_Start_Receive_IT+0xa4>
 8020e88:	68fb      	ldr	r3, [r7, #12]
 8020e8a:	2200      	movs	r2, #0
 8020e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020e90:	68fb      	ldr	r3, [r7, #12]
 8020e92:	2200      	movs	r2, #0
 8020e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8020e98:	68fb      	ldr	r3, [r7, #12]
 8020e9a:	2222      	movs	r2, #34	@ 0x22
 8020e9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020ea0:	68fb      	ldr	r3, [r7, #12]
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	3308      	adds	r3, #8
 8020ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020eaa:	e853 3f00 	ldrex	r3, [r3]
 8020eae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020eb2:	f043 0301 	orr.w	r3, r3, #1
 8020eb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8020eb8:	68fb      	ldr	r3, [r7, #12]
 8020eba:	681b      	ldr	r3, [r3, #0]
 8020ebc:	3308      	adds	r3, #8
 8020ebe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8020ec0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8020ec2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020ec4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020ec6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020ec8:	e841 2300 	strex	r3, r2, [r1]
 8020ecc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8020ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d1e5      	bne.n	8020ea0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020ed4:	68fb      	ldr	r3, [r7, #12]
 8020ed6:	689b      	ldr	r3, [r3, #8]
 8020ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020edc:	d107      	bne.n	8020eee <UART_Start_Receive_IT+0x102>
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	691b      	ldr	r3, [r3, #16]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d103      	bne.n	8020eee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8020ee6:	68fb      	ldr	r3, [r7, #12]
 8020ee8:	4a21      	ldr	r2, [pc, #132]	@ (8020f70 <UART_Start_Receive_IT+0x184>)
 8020eea:	669a      	str	r2, [r3, #104]	@ 0x68
 8020eec:	e002      	b.n	8020ef4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8020eee:	68fb      	ldr	r3, [r7, #12]
 8020ef0:	4a20      	ldr	r2, [pc, #128]	@ (8020f74 <UART_Start_Receive_IT+0x188>)
 8020ef2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8020ef4:	68fb      	ldr	r3, [r7, #12]
 8020ef6:	691b      	ldr	r3, [r3, #16]
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d019      	beq.n	8020f30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8020efc:	68fb      	ldr	r3, [r7, #12]
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f04:	e853 3f00 	ldrex	r3, [r3]
 8020f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8020f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f0c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8020f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	461a      	mov	r2, r3
 8020f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8020f1c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020f1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8020f20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020f22:	e841 2300 	strex	r3, r2, [r1]
 8020f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8020f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d1e6      	bne.n	8020efc <UART_Start_Receive_IT+0x110>
 8020f2e:	e018      	b.n	8020f62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8020f30:	68fb      	ldr	r3, [r7, #12]
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020f36:	697b      	ldr	r3, [r7, #20]
 8020f38:	e853 3f00 	ldrex	r3, [r3]
 8020f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8020f3e:	693b      	ldr	r3, [r7, #16]
 8020f40:	f043 0320 	orr.w	r3, r3, #32
 8020f44:	653b      	str	r3, [r7, #80]	@ 0x50
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	681b      	ldr	r3, [r3, #0]
 8020f4a:	461a      	mov	r2, r3
 8020f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020f4e:	623b      	str	r3, [r7, #32]
 8020f50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020f52:	69f9      	ldr	r1, [r7, #28]
 8020f54:	6a3a      	ldr	r2, [r7, #32]
 8020f56:	e841 2300 	strex	r3, r2, [r1]
 8020f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8020f5c:	69bb      	ldr	r3, [r7, #24]
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	d1e6      	bne.n	8020f30 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8020f62:	2300      	movs	r3, #0
}
 8020f64:	4618      	mov	r0, r3
 8020f66:	375c      	adds	r7, #92	@ 0x5c
 8020f68:	46bd      	mov	sp, r7
 8020f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f6e:	4770      	bx	lr
 8020f70:	0802127d 	.word	0x0802127d
 8020f74:	080210c1 	.word	0x080210c1

08020f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020f78:	b480      	push	{r7}
 8020f7a:	b095      	sub	sp, #84	@ 0x54
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020f88:	e853 3f00 	ldrex	r3, [r3]
 8020f8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8020f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	681b      	ldr	r3, [r3, #0]
 8020f9a:	461a      	mov	r2, r3
 8020f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020f9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8020fa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020fa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020fa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020fa6:	e841 2300 	strex	r3, r2, [r1]
 8020faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d1e6      	bne.n	8020f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	3308      	adds	r3, #8
 8020fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020fba:	6a3b      	ldr	r3, [r7, #32]
 8020fbc:	e853 3f00 	ldrex	r3, [r3]
 8020fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8020fc2:	69fb      	ldr	r3, [r7, #28]
 8020fc4:	f023 0301 	bic.w	r3, r3, #1
 8020fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	3308      	adds	r3, #8
 8020fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8020fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020fda:	e841 2300 	strex	r3, r2, [r1]
 8020fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8020fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d1e5      	bne.n	8020fb2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020fea:	2b01      	cmp	r3, #1
 8020fec:	d118      	bne.n	8021020 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	681b      	ldr	r3, [r3, #0]
 8020ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ff4:	68fb      	ldr	r3, [r7, #12]
 8020ff6:	e853 3f00 	ldrex	r3, [r3]
 8020ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8020ffc:	68bb      	ldr	r3, [r7, #8]
 8020ffe:	f023 0310 	bic.w	r3, r3, #16
 8021002:	647b      	str	r3, [r7, #68]	@ 0x44
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	681b      	ldr	r3, [r3, #0]
 8021008:	461a      	mov	r2, r3
 802100a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802100c:	61bb      	str	r3, [r7, #24]
 802100e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021010:	6979      	ldr	r1, [r7, #20]
 8021012:	69ba      	ldr	r2, [r7, #24]
 8021014:	e841 2300 	strex	r3, r2, [r1]
 8021018:	613b      	str	r3, [r7, #16]
   return(result);
 802101a:	693b      	ldr	r3, [r7, #16]
 802101c:	2b00      	cmp	r3, #0
 802101e:	d1e6      	bne.n	8020fee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	2220      	movs	r2, #32
 8021024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	2200      	movs	r2, #0
 802102c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	2200      	movs	r2, #0
 8021032:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8021034:	bf00      	nop
 8021036:	3754      	adds	r7, #84	@ 0x54
 8021038:	46bd      	mov	sp, r7
 802103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802103e:	4770      	bx	lr

08021040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021040:	b580      	push	{r7, lr}
 8021042:	b084      	sub	sp, #16
 8021044:	af00      	add	r7, sp, #0
 8021046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802104c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	2200      	movs	r2, #0
 8021052:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8021056:	68fb      	ldr	r3, [r7, #12]
 8021058:	2200      	movs	r2, #0
 802105a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802105e:	68f8      	ldr	r0, [r7, #12]
 8021060:	f7ff fa9c 	bl	802059c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021064:	bf00      	nop
 8021066:	3710      	adds	r7, #16
 8021068:	46bd      	mov	sp, r7
 802106a:	bd80      	pop	{r7, pc}

0802106c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802106c:	b580      	push	{r7, lr}
 802106e:	b088      	sub	sp, #32
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802107a:	68fb      	ldr	r3, [r7, #12]
 802107c:	e853 3f00 	ldrex	r3, [r3]
 8021080:	60bb      	str	r3, [r7, #8]
   return(result);
 8021082:	68bb      	ldr	r3, [r7, #8]
 8021084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8021088:	61fb      	str	r3, [r7, #28]
 802108a:	687b      	ldr	r3, [r7, #4]
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	461a      	mov	r2, r3
 8021090:	69fb      	ldr	r3, [r7, #28]
 8021092:	61bb      	str	r3, [r7, #24]
 8021094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021096:	6979      	ldr	r1, [r7, #20]
 8021098:	69ba      	ldr	r2, [r7, #24]
 802109a:	e841 2300 	strex	r3, r2, [r1]
 802109e:	613b      	str	r3, [r7, #16]
   return(result);
 80210a0:	693b      	ldr	r3, [r7, #16]
 80210a2:	2b00      	cmp	r3, #0
 80210a4:	d1e6      	bne.n	8021074 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	2220      	movs	r2, #32
 80210aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	2200      	movs	r2, #0
 80210b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80210b2:	6878      	ldr	r0, [r7, #4]
 80210b4:	f7ff fa68 	bl	8020588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80210b8:	bf00      	nop
 80210ba:	3720      	adds	r7, #32
 80210bc:	46bd      	mov	sp, r7
 80210be:	bd80      	pop	{r7, pc}

080210c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80210c0:	b580      	push	{r7, lr}
 80210c2:	b09c      	sub	sp, #112	@ 0x70
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80210ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80210d8:	2b22      	cmp	r3, #34	@ 0x22
 80210da:	f040 80be 	bne.w	802125a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80210e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80210e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80210ec:	b2d9      	uxtb	r1, r3
 80210ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80210f2:	b2da      	uxtb	r2, r3
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80210f8:	400a      	ands	r2, r1
 80210fa:	b2d2      	uxtb	r2, r2
 80210fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021102:	1c5a      	adds	r2, r3, #1
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 802110e:	b29b      	uxth	r3, r3
 8021110:	3b01      	subs	r3, #1
 8021112:	b29a      	uxth	r2, r3
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8021120:	b29b      	uxth	r3, r3
 8021122:	2b00      	cmp	r3, #0
 8021124:	f040 80a3 	bne.w	802126e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802112e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021130:	e853 3f00 	ldrex	r3, [r3]
 8021134:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8021136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802113c:	66bb      	str	r3, [r7, #104]	@ 0x68
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	681b      	ldr	r3, [r3, #0]
 8021142:	461a      	mov	r2, r3
 8021144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8021146:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021148:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802114a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802114c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802114e:	e841 2300 	strex	r3, r2, [r1]
 8021152:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8021154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021156:	2b00      	cmp	r3, #0
 8021158:	d1e6      	bne.n	8021128 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	3308      	adds	r3, #8
 8021160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021164:	e853 3f00 	ldrex	r3, [r3]
 8021168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802116a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802116c:	f023 0301 	bic.w	r3, r3, #1
 8021170:	667b      	str	r3, [r7, #100]	@ 0x64
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	3308      	adds	r3, #8
 8021178:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802117a:	647a      	str	r2, [r7, #68]	@ 0x44
 802117c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802117e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021182:	e841 2300 	strex	r3, r2, [r1]
 8021186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8021188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802118a:	2b00      	cmp	r3, #0
 802118c:	d1e5      	bne.n	802115a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	2220      	movs	r2, #32
 8021192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	2200      	movs	r2, #0
 802119a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	2200      	movs	r2, #0
 80211a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	4a34      	ldr	r2, [pc, #208]	@ (8021278 <UART_RxISR_8BIT+0x1b8>)
 80211a8:	4293      	cmp	r3, r2
 80211aa:	d01f      	beq.n	80211ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	681b      	ldr	r3, [r3, #0]
 80211b0:	685b      	ldr	r3, [r3, #4]
 80211b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d018      	beq.n	80211ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80211ba:	687b      	ldr	r3, [r7, #4]
 80211bc:	681b      	ldr	r3, [r3, #0]
 80211be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80211c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80211c2:	e853 3f00 	ldrex	r3, [r3]
 80211c6:	623b      	str	r3, [r7, #32]
   return(result);
 80211c8:	6a3b      	ldr	r3, [r7, #32]
 80211ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80211ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	461a      	mov	r2, r3
 80211d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80211d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80211da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80211dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80211de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80211e0:	e841 2300 	strex	r3, r2, [r1]
 80211e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80211e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	d1e6      	bne.n	80211ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80211f0:	2b01      	cmp	r3, #1
 80211f2:	d12e      	bne.n	8021252 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	2200      	movs	r2, #0
 80211f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021200:	693b      	ldr	r3, [r7, #16]
 8021202:	e853 3f00 	ldrex	r3, [r3]
 8021206:	60fb      	str	r3, [r7, #12]
   return(result);
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	f023 0310 	bic.w	r3, r3, #16
 802120e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	681b      	ldr	r3, [r3, #0]
 8021214:	461a      	mov	r2, r3
 8021216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021218:	61fb      	str	r3, [r7, #28]
 802121a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802121c:	69b9      	ldr	r1, [r7, #24]
 802121e:	69fa      	ldr	r2, [r7, #28]
 8021220:	e841 2300 	strex	r3, r2, [r1]
 8021224:	617b      	str	r3, [r7, #20]
   return(result);
 8021226:	697b      	ldr	r3, [r7, #20]
 8021228:	2b00      	cmp	r3, #0
 802122a:	d1e6      	bne.n	80211fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	69db      	ldr	r3, [r3, #28]
 8021232:	f003 0310 	and.w	r3, r3, #16
 8021236:	2b10      	cmp	r3, #16
 8021238:	d103      	bne.n	8021242 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	681b      	ldr	r3, [r3, #0]
 802123e:	2210      	movs	r2, #16
 8021240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8021248:	4619      	mov	r1, r3
 802124a:	6878      	ldr	r0, [r7, #4]
 802124c:	f7ff f9b0 	bl	80205b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8021250:	e00d      	b.n	802126e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8021252:	6878      	ldr	r0, [r7, #4]
 8021254:	f7e1 fd0c 	bl	8002c70 <HAL_UART_RxCpltCallback>
}
 8021258:	e009      	b.n	802126e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	681b      	ldr	r3, [r3, #0]
 802125e:	8b1b      	ldrh	r3, [r3, #24]
 8021260:	b29a      	uxth	r2, r3
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	681b      	ldr	r3, [r3, #0]
 8021266:	f042 0208 	orr.w	r2, r2, #8
 802126a:	b292      	uxth	r2, r2
 802126c:	831a      	strh	r2, [r3, #24]
}
 802126e:	bf00      	nop
 8021270:	3770      	adds	r7, #112	@ 0x70
 8021272:	46bd      	mov	sp, r7
 8021274:	bd80      	pop	{r7, pc}
 8021276:	bf00      	nop
 8021278:	40008000 	.word	0x40008000

0802127c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 802127c:	b580      	push	{r7, lr}
 802127e:	b09c      	sub	sp, #112	@ 0x70
 8021280:	af00      	add	r7, sp, #0
 8021282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 802128a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021294:	2b22      	cmp	r3, #34	@ 0x22
 8021296:	f040 80be 	bne.w	8021416 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80212a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80212a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80212aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80212ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80212b2:	4013      	ands	r3, r2
 80212b4:	b29a      	uxth	r2, r3
 80212b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80212b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80212be:	1c9a      	adds	r2, r3, #2
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80212ca:	b29b      	uxth	r3, r3
 80212cc:	3b01      	subs	r3, #1
 80212ce:	b29a      	uxth	r2, r3
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80212dc:	b29b      	uxth	r3, r3
 80212de:	2b00      	cmp	r3, #0
 80212e0:	f040 80a3 	bne.w	802142a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80212ec:	e853 3f00 	ldrex	r3, [r3]
 80212f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80212f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80212f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80212f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	681b      	ldr	r3, [r3, #0]
 80212fe:	461a      	mov	r2, r3
 8021300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021302:	657b      	str	r3, [r7, #84]	@ 0x54
 8021304:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021306:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021308:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802130a:	e841 2300 	strex	r3, r2, [r1]
 802130e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8021310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021312:	2b00      	cmp	r3, #0
 8021314:	d1e6      	bne.n	80212e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	681b      	ldr	r3, [r3, #0]
 802131a:	3308      	adds	r3, #8
 802131c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802131e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021320:	e853 3f00 	ldrex	r3, [r3]
 8021324:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021328:	f023 0301 	bic.w	r3, r3, #1
 802132c:	663b      	str	r3, [r7, #96]	@ 0x60
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	3308      	adds	r3, #8
 8021334:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8021336:	643a      	str	r2, [r7, #64]	@ 0x40
 8021338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802133a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802133c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802133e:	e841 2300 	strex	r3, r2, [r1]
 8021342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8021344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021346:	2b00      	cmp	r3, #0
 8021348:	d1e5      	bne.n	8021316 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	2220      	movs	r2, #32
 802134e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	2200      	movs	r2, #0
 8021356:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021358:	687b      	ldr	r3, [r7, #4]
 802135a:	2200      	movs	r2, #0
 802135c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	681b      	ldr	r3, [r3, #0]
 8021362:	4a34      	ldr	r2, [pc, #208]	@ (8021434 <UART_RxISR_16BIT+0x1b8>)
 8021364:	4293      	cmp	r3, r2
 8021366:	d01f      	beq.n	80213a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8021368:	687b      	ldr	r3, [r7, #4]
 802136a:	681b      	ldr	r3, [r3, #0]
 802136c:	685b      	ldr	r3, [r3, #4]
 802136e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8021372:	2b00      	cmp	r3, #0
 8021374:	d018      	beq.n	80213a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802137c:	6a3b      	ldr	r3, [r7, #32]
 802137e:	e853 3f00 	ldrex	r3, [r3]
 8021382:	61fb      	str	r3, [r7, #28]
   return(result);
 8021384:	69fb      	ldr	r3, [r7, #28]
 8021386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 802138a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	681b      	ldr	r3, [r3, #0]
 8021390:	461a      	mov	r2, r3
 8021392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021396:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802139a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802139c:	e841 2300 	strex	r3, r2, [r1]
 80213a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80213a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	d1e6      	bne.n	8021376 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80213ac:	2b01      	cmp	r3, #1
 80213ae:	d12e      	bne.n	802140e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	2200      	movs	r2, #0
 80213b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213bc:	68fb      	ldr	r3, [r7, #12]
 80213be:	e853 3f00 	ldrex	r3, [r3]
 80213c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80213c4:	68bb      	ldr	r3, [r7, #8]
 80213c6:	f023 0310 	bic.w	r3, r3, #16
 80213ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	461a      	mov	r2, r3
 80213d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80213d4:	61bb      	str	r3, [r7, #24]
 80213d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213d8:	6979      	ldr	r1, [r7, #20]
 80213da:	69ba      	ldr	r2, [r7, #24]
 80213dc:	e841 2300 	strex	r3, r2, [r1]
 80213e0:	613b      	str	r3, [r7, #16]
   return(result);
 80213e2:	693b      	ldr	r3, [r7, #16]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d1e6      	bne.n	80213b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80213e8:	687b      	ldr	r3, [r7, #4]
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	69db      	ldr	r3, [r3, #28]
 80213ee:	f003 0310 	and.w	r3, r3, #16
 80213f2:	2b10      	cmp	r3, #16
 80213f4:	d103      	bne.n	80213fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	2210      	movs	r2, #16
 80213fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8021404:	4619      	mov	r1, r3
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f7ff f8d2 	bl	80205b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802140c:	e00d      	b.n	802142a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 802140e:	6878      	ldr	r0, [r7, #4]
 8021410:	f7e1 fc2e 	bl	8002c70 <HAL_UART_RxCpltCallback>
}
 8021414:	e009      	b.n	802142a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	8b1b      	ldrh	r3, [r3, #24]
 802141c:	b29a      	uxth	r2, r3
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	681b      	ldr	r3, [r3, #0]
 8021422:	f042 0208 	orr.w	r2, r2, #8
 8021426:	b292      	uxth	r2, r2
 8021428:	831a      	strh	r2, [r3, #24]
}
 802142a:	bf00      	nop
 802142c:	3770      	adds	r7, #112	@ 0x70
 802142e:	46bd      	mov	sp, r7
 8021430:	bd80      	pop	{r7, pc}
 8021432:	bf00      	nop
 8021434:	40008000 	.word	0x40008000

08021438 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8021438:	b480      	push	{r7}
 802143a:	b083      	sub	sp, #12
 802143c:	af00      	add	r7, sp, #0
 802143e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8021440:	bf00      	nop
 8021442:	370c      	adds	r7, #12
 8021444:	46bd      	mov	sp, r7
 8021446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802144a:	4770      	bx	lr

0802144c <__cvt>:
 802144c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021450:	ec57 6b10 	vmov	r6, r7, d0
 8021454:	2f00      	cmp	r7, #0
 8021456:	460c      	mov	r4, r1
 8021458:	4619      	mov	r1, r3
 802145a:	463b      	mov	r3, r7
 802145c:	bfbb      	ittet	lt
 802145e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8021462:	461f      	movlt	r7, r3
 8021464:	2300      	movge	r3, #0
 8021466:	232d      	movlt	r3, #45	@ 0x2d
 8021468:	700b      	strb	r3, [r1, #0]
 802146a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802146c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8021470:	4691      	mov	r9, r2
 8021472:	f023 0820 	bic.w	r8, r3, #32
 8021476:	bfbc      	itt	lt
 8021478:	4632      	movlt	r2, r6
 802147a:	4616      	movlt	r6, r2
 802147c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8021480:	d005      	beq.n	802148e <__cvt+0x42>
 8021482:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8021486:	d100      	bne.n	802148a <__cvt+0x3e>
 8021488:	3401      	adds	r4, #1
 802148a:	2102      	movs	r1, #2
 802148c:	e000      	b.n	8021490 <__cvt+0x44>
 802148e:	2103      	movs	r1, #3
 8021490:	ab03      	add	r3, sp, #12
 8021492:	9301      	str	r3, [sp, #4]
 8021494:	ab02      	add	r3, sp, #8
 8021496:	9300      	str	r3, [sp, #0]
 8021498:	ec47 6b10 	vmov	d0, r6, r7
 802149c:	4653      	mov	r3, sl
 802149e:	4622      	mov	r2, r4
 80214a0:	f001 f822 	bl	80224e8 <_dtoa_r>
 80214a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80214a8:	4605      	mov	r5, r0
 80214aa:	d119      	bne.n	80214e0 <__cvt+0x94>
 80214ac:	f019 0f01 	tst.w	r9, #1
 80214b0:	d00e      	beq.n	80214d0 <__cvt+0x84>
 80214b2:	eb00 0904 	add.w	r9, r0, r4
 80214b6:	2200      	movs	r2, #0
 80214b8:	2300      	movs	r3, #0
 80214ba:	4630      	mov	r0, r6
 80214bc:	4639      	mov	r1, r7
 80214be:	f7df fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80214c2:	b108      	cbz	r0, 80214c8 <__cvt+0x7c>
 80214c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80214c8:	2230      	movs	r2, #48	@ 0x30
 80214ca:	9b03      	ldr	r3, [sp, #12]
 80214cc:	454b      	cmp	r3, r9
 80214ce:	d31e      	bcc.n	802150e <__cvt+0xc2>
 80214d0:	9b03      	ldr	r3, [sp, #12]
 80214d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214d4:	1b5b      	subs	r3, r3, r5
 80214d6:	4628      	mov	r0, r5
 80214d8:	6013      	str	r3, [r2, #0]
 80214da:	b004      	add	sp, #16
 80214dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80214e4:	eb00 0904 	add.w	r9, r0, r4
 80214e8:	d1e5      	bne.n	80214b6 <__cvt+0x6a>
 80214ea:	7803      	ldrb	r3, [r0, #0]
 80214ec:	2b30      	cmp	r3, #48	@ 0x30
 80214ee:	d10a      	bne.n	8021506 <__cvt+0xba>
 80214f0:	2200      	movs	r2, #0
 80214f2:	2300      	movs	r3, #0
 80214f4:	4630      	mov	r0, r6
 80214f6:	4639      	mov	r1, r7
 80214f8:	f7df fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80214fc:	b918      	cbnz	r0, 8021506 <__cvt+0xba>
 80214fe:	f1c4 0401 	rsb	r4, r4, #1
 8021502:	f8ca 4000 	str.w	r4, [sl]
 8021506:	f8da 3000 	ldr.w	r3, [sl]
 802150a:	4499      	add	r9, r3
 802150c:	e7d3      	b.n	80214b6 <__cvt+0x6a>
 802150e:	1c59      	adds	r1, r3, #1
 8021510:	9103      	str	r1, [sp, #12]
 8021512:	701a      	strb	r2, [r3, #0]
 8021514:	e7d9      	b.n	80214ca <__cvt+0x7e>

08021516 <__exponent>:
 8021516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021518:	2900      	cmp	r1, #0
 802151a:	bfba      	itte	lt
 802151c:	4249      	neglt	r1, r1
 802151e:	232d      	movlt	r3, #45	@ 0x2d
 8021520:	232b      	movge	r3, #43	@ 0x2b
 8021522:	2909      	cmp	r1, #9
 8021524:	7002      	strb	r2, [r0, #0]
 8021526:	7043      	strb	r3, [r0, #1]
 8021528:	dd29      	ble.n	802157e <__exponent+0x68>
 802152a:	f10d 0307 	add.w	r3, sp, #7
 802152e:	461d      	mov	r5, r3
 8021530:	270a      	movs	r7, #10
 8021532:	461a      	mov	r2, r3
 8021534:	fbb1 f6f7 	udiv	r6, r1, r7
 8021538:	fb07 1416 	mls	r4, r7, r6, r1
 802153c:	3430      	adds	r4, #48	@ 0x30
 802153e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8021542:	460c      	mov	r4, r1
 8021544:	2c63      	cmp	r4, #99	@ 0x63
 8021546:	f103 33ff 	add.w	r3, r3, #4294967295
 802154a:	4631      	mov	r1, r6
 802154c:	dcf1      	bgt.n	8021532 <__exponent+0x1c>
 802154e:	3130      	adds	r1, #48	@ 0x30
 8021550:	1e94      	subs	r4, r2, #2
 8021552:	f803 1c01 	strb.w	r1, [r3, #-1]
 8021556:	1c41      	adds	r1, r0, #1
 8021558:	4623      	mov	r3, r4
 802155a:	42ab      	cmp	r3, r5
 802155c:	d30a      	bcc.n	8021574 <__exponent+0x5e>
 802155e:	f10d 0309 	add.w	r3, sp, #9
 8021562:	1a9b      	subs	r3, r3, r2
 8021564:	42ac      	cmp	r4, r5
 8021566:	bf88      	it	hi
 8021568:	2300      	movhi	r3, #0
 802156a:	3302      	adds	r3, #2
 802156c:	4403      	add	r3, r0
 802156e:	1a18      	subs	r0, r3, r0
 8021570:	b003      	add	sp, #12
 8021572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021574:	f813 6b01 	ldrb.w	r6, [r3], #1
 8021578:	f801 6f01 	strb.w	r6, [r1, #1]!
 802157c:	e7ed      	b.n	802155a <__exponent+0x44>
 802157e:	2330      	movs	r3, #48	@ 0x30
 8021580:	3130      	adds	r1, #48	@ 0x30
 8021582:	7083      	strb	r3, [r0, #2]
 8021584:	70c1      	strb	r1, [r0, #3]
 8021586:	1d03      	adds	r3, r0, #4
 8021588:	e7f1      	b.n	802156e <__exponent+0x58>
	...

0802158c <_printf_float>:
 802158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021590:	b08d      	sub	sp, #52	@ 0x34
 8021592:	460c      	mov	r4, r1
 8021594:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8021598:	4616      	mov	r6, r2
 802159a:	461f      	mov	r7, r3
 802159c:	4605      	mov	r5, r0
 802159e:	f000 fe95 	bl	80222cc <_localeconv_r>
 80215a2:	6803      	ldr	r3, [r0, #0]
 80215a4:	9304      	str	r3, [sp, #16]
 80215a6:	4618      	mov	r0, r3
 80215a8:	f7de fe62 	bl	8000270 <strlen>
 80215ac:	2300      	movs	r3, #0
 80215ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80215b0:	f8d8 3000 	ldr.w	r3, [r8]
 80215b4:	9005      	str	r0, [sp, #20]
 80215b6:	3307      	adds	r3, #7
 80215b8:	f023 0307 	bic.w	r3, r3, #7
 80215bc:	f103 0208 	add.w	r2, r3, #8
 80215c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80215c4:	f8d4 b000 	ldr.w	fp, [r4]
 80215c8:	f8c8 2000 	str.w	r2, [r8]
 80215cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80215d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80215d4:	9307      	str	r3, [sp, #28]
 80215d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80215da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80215de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80215e2:	4b9c      	ldr	r3, [pc, #624]	@ (8021854 <_printf_float+0x2c8>)
 80215e4:	f04f 32ff 	mov.w	r2, #4294967295
 80215e8:	f7df faa0 	bl	8000b2c <__aeabi_dcmpun>
 80215ec:	bb70      	cbnz	r0, 802164c <_printf_float+0xc0>
 80215ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80215f2:	4b98      	ldr	r3, [pc, #608]	@ (8021854 <_printf_float+0x2c8>)
 80215f4:	f04f 32ff 	mov.w	r2, #4294967295
 80215f8:	f7df fa7a 	bl	8000af0 <__aeabi_dcmple>
 80215fc:	bb30      	cbnz	r0, 802164c <_printf_float+0xc0>
 80215fe:	2200      	movs	r2, #0
 8021600:	2300      	movs	r3, #0
 8021602:	4640      	mov	r0, r8
 8021604:	4649      	mov	r1, r9
 8021606:	f7df fa69 	bl	8000adc <__aeabi_dcmplt>
 802160a:	b110      	cbz	r0, 8021612 <_printf_float+0x86>
 802160c:	232d      	movs	r3, #45	@ 0x2d
 802160e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021612:	4a91      	ldr	r2, [pc, #580]	@ (8021858 <_printf_float+0x2cc>)
 8021614:	4b91      	ldr	r3, [pc, #580]	@ (802185c <_printf_float+0x2d0>)
 8021616:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802161a:	bf8c      	ite	hi
 802161c:	4690      	movhi	r8, r2
 802161e:	4698      	movls	r8, r3
 8021620:	2303      	movs	r3, #3
 8021622:	6123      	str	r3, [r4, #16]
 8021624:	f02b 0304 	bic.w	r3, fp, #4
 8021628:	6023      	str	r3, [r4, #0]
 802162a:	f04f 0900 	mov.w	r9, #0
 802162e:	9700      	str	r7, [sp, #0]
 8021630:	4633      	mov	r3, r6
 8021632:	aa0b      	add	r2, sp, #44	@ 0x2c
 8021634:	4621      	mov	r1, r4
 8021636:	4628      	mov	r0, r5
 8021638:	f000 f9d2 	bl	80219e0 <_printf_common>
 802163c:	3001      	adds	r0, #1
 802163e:	f040 808d 	bne.w	802175c <_printf_float+0x1d0>
 8021642:	f04f 30ff 	mov.w	r0, #4294967295
 8021646:	b00d      	add	sp, #52	@ 0x34
 8021648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802164c:	4642      	mov	r2, r8
 802164e:	464b      	mov	r3, r9
 8021650:	4640      	mov	r0, r8
 8021652:	4649      	mov	r1, r9
 8021654:	f7df fa6a 	bl	8000b2c <__aeabi_dcmpun>
 8021658:	b140      	cbz	r0, 802166c <_printf_float+0xe0>
 802165a:	464b      	mov	r3, r9
 802165c:	2b00      	cmp	r3, #0
 802165e:	bfbc      	itt	lt
 8021660:	232d      	movlt	r3, #45	@ 0x2d
 8021662:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8021666:	4a7e      	ldr	r2, [pc, #504]	@ (8021860 <_printf_float+0x2d4>)
 8021668:	4b7e      	ldr	r3, [pc, #504]	@ (8021864 <_printf_float+0x2d8>)
 802166a:	e7d4      	b.n	8021616 <_printf_float+0x8a>
 802166c:	6863      	ldr	r3, [r4, #4]
 802166e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8021672:	9206      	str	r2, [sp, #24]
 8021674:	1c5a      	adds	r2, r3, #1
 8021676:	d13b      	bne.n	80216f0 <_printf_float+0x164>
 8021678:	2306      	movs	r3, #6
 802167a:	6063      	str	r3, [r4, #4]
 802167c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8021680:	2300      	movs	r3, #0
 8021682:	6022      	str	r2, [r4, #0]
 8021684:	9303      	str	r3, [sp, #12]
 8021686:	ab0a      	add	r3, sp, #40	@ 0x28
 8021688:	e9cd a301 	strd	sl, r3, [sp, #4]
 802168c:	ab09      	add	r3, sp, #36	@ 0x24
 802168e:	9300      	str	r3, [sp, #0]
 8021690:	6861      	ldr	r1, [r4, #4]
 8021692:	ec49 8b10 	vmov	d0, r8, r9
 8021696:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802169a:	4628      	mov	r0, r5
 802169c:	f7ff fed6 	bl	802144c <__cvt>
 80216a0:	9b06      	ldr	r3, [sp, #24]
 80216a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80216a4:	2b47      	cmp	r3, #71	@ 0x47
 80216a6:	4680      	mov	r8, r0
 80216a8:	d129      	bne.n	80216fe <_printf_float+0x172>
 80216aa:	1cc8      	adds	r0, r1, #3
 80216ac:	db02      	blt.n	80216b4 <_printf_float+0x128>
 80216ae:	6863      	ldr	r3, [r4, #4]
 80216b0:	4299      	cmp	r1, r3
 80216b2:	dd41      	ble.n	8021738 <_printf_float+0x1ac>
 80216b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80216b8:	fa5f fa8a 	uxtb.w	sl, sl
 80216bc:	3901      	subs	r1, #1
 80216be:	4652      	mov	r2, sl
 80216c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80216c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80216c6:	f7ff ff26 	bl	8021516 <__exponent>
 80216ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80216cc:	1813      	adds	r3, r2, r0
 80216ce:	2a01      	cmp	r2, #1
 80216d0:	4681      	mov	r9, r0
 80216d2:	6123      	str	r3, [r4, #16]
 80216d4:	dc02      	bgt.n	80216dc <_printf_float+0x150>
 80216d6:	6822      	ldr	r2, [r4, #0]
 80216d8:	07d2      	lsls	r2, r2, #31
 80216da:	d501      	bpl.n	80216e0 <_printf_float+0x154>
 80216dc:	3301      	adds	r3, #1
 80216de:	6123      	str	r3, [r4, #16]
 80216e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d0a2      	beq.n	802162e <_printf_float+0xa2>
 80216e8:	232d      	movs	r3, #45	@ 0x2d
 80216ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80216ee:	e79e      	b.n	802162e <_printf_float+0xa2>
 80216f0:	9a06      	ldr	r2, [sp, #24]
 80216f2:	2a47      	cmp	r2, #71	@ 0x47
 80216f4:	d1c2      	bne.n	802167c <_printf_float+0xf0>
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d1c0      	bne.n	802167c <_printf_float+0xf0>
 80216fa:	2301      	movs	r3, #1
 80216fc:	e7bd      	b.n	802167a <_printf_float+0xee>
 80216fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021702:	d9db      	bls.n	80216bc <_printf_float+0x130>
 8021704:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8021708:	d118      	bne.n	802173c <_printf_float+0x1b0>
 802170a:	2900      	cmp	r1, #0
 802170c:	6863      	ldr	r3, [r4, #4]
 802170e:	dd0b      	ble.n	8021728 <_printf_float+0x19c>
 8021710:	6121      	str	r1, [r4, #16]
 8021712:	b913      	cbnz	r3, 802171a <_printf_float+0x18e>
 8021714:	6822      	ldr	r2, [r4, #0]
 8021716:	07d0      	lsls	r0, r2, #31
 8021718:	d502      	bpl.n	8021720 <_printf_float+0x194>
 802171a:	3301      	adds	r3, #1
 802171c:	440b      	add	r3, r1
 802171e:	6123      	str	r3, [r4, #16]
 8021720:	65a1      	str	r1, [r4, #88]	@ 0x58
 8021722:	f04f 0900 	mov.w	r9, #0
 8021726:	e7db      	b.n	80216e0 <_printf_float+0x154>
 8021728:	b913      	cbnz	r3, 8021730 <_printf_float+0x1a4>
 802172a:	6822      	ldr	r2, [r4, #0]
 802172c:	07d2      	lsls	r2, r2, #31
 802172e:	d501      	bpl.n	8021734 <_printf_float+0x1a8>
 8021730:	3302      	adds	r3, #2
 8021732:	e7f4      	b.n	802171e <_printf_float+0x192>
 8021734:	2301      	movs	r3, #1
 8021736:	e7f2      	b.n	802171e <_printf_float+0x192>
 8021738:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802173c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802173e:	4299      	cmp	r1, r3
 8021740:	db05      	blt.n	802174e <_printf_float+0x1c2>
 8021742:	6823      	ldr	r3, [r4, #0]
 8021744:	6121      	str	r1, [r4, #16]
 8021746:	07d8      	lsls	r0, r3, #31
 8021748:	d5ea      	bpl.n	8021720 <_printf_float+0x194>
 802174a:	1c4b      	adds	r3, r1, #1
 802174c:	e7e7      	b.n	802171e <_printf_float+0x192>
 802174e:	2900      	cmp	r1, #0
 8021750:	bfd4      	ite	le
 8021752:	f1c1 0202 	rsble	r2, r1, #2
 8021756:	2201      	movgt	r2, #1
 8021758:	4413      	add	r3, r2
 802175a:	e7e0      	b.n	802171e <_printf_float+0x192>
 802175c:	6823      	ldr	r3, [r4, #0]
 802175e:	055a      	lsls	r2, r3, #21
 8021760:	d407      	bmi.n	8021772 <_printf_float+0x1e6>
 8021762:	6923      	ldr	r3, [r4, #16]
 8021764:	4642      	mov	r2, r8
 8021766:	4631      	mov	r1, r6
 8021768:	4628      	mov	r0, r5
 802176a:	47b8      	blx	r7
 802176c:	3001      	adds	r0, #1
 802176e:	d12b      	bne.n	80217c8 <_printf_float+0x23c>
 8021770:	e767      	b.n	8021642 <_printf_float+0xb6>
 8021772:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021776:	f240 80dd 	bls.w	8021934 <_printf_float+0x3a8>
 802177a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802177e:	2200      	movs	r2, #0
 8021780:	2300      	movs	r3, #0
 8021782:	f7df f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8021786:	2800      	cmp	r0, #0
 8021788:	d033      	beq.n	80217f2 <_printf_float+0x266>
 802178a:	4a37      	ldr	r2, [pc, #220]	@ (8021868 <_printf_float+0x2dc>)
 802178c:	2301      	movs	r3, #1
 802178e:	4631      	mov	r1, r6
 8021790:	4628      	mov	r0, r5
 8021792:	47b8      	blx	r7
 8021794:	3001      	adds	r0, #1
 8021796:	f43f af54 	beq.w	8021642 <_printf_float+0xb6>
 802179a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802179e:	4543      	cmp	r3, r8
 80217a0:	db02      	blt.n	80217a8 <_printf_float+0x21c>
 80217a2:	6823      	ldr	r3, [r4, #0]
 80217a4:	07d8      	lsls	r0, r3, #31
 80217a6:	d50f      	bpl.n	80217c8 <_printf_float+0x23c>
 80217a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80217ac:	4631      	mov	r1, r6
 80217ae:	4628      	mov	r0, r5
 80217b0:	47b8      	blx	r7
 80217b2:	3001      	adds	r0, #1
 80217b4:	f43f af45 	beq.w	8021642 <_printf_float+0xb6>
 80217b8:	f04f 0900 	mov.w	r9, #0
 80217bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80217c0:	f104 0a1a 	add.w	sl, r4, #26
 80217c4:	45c8      	cmp	r8, r9
 80217c6:	dc09      	bgt.n	80217dc <_printf_float+0x250>
 80217c8:	6823      	ldr	r3, [r4, #0]
 80217ca:	079b      	lsls	r3, r3, #30
 80217cc:	f100 8103 	bmi.w	80219d6 <_printf_float+0x44a>
 80217d0:	68e0      	ldr	r0, [r4, #12]
 80217d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80217d4:	4298      	cmp	r0, r3
 80217d6:	bfb8      	it	lt
 80217d8:	4618      	movlt	r0, r3
 80217da:	e734      	b.n	8021646 <_printf_float+0xba>
 80217dc:	2301      	movs	r3, #1
 80217de:	4652      	mov	r2, sl
 80217e0:	4631      	mov	r1, r6
 80217e2:	4628      	mov	r0, r5
 80217e4:	47b8      	blx	r7
 80217e6:	3001      	adds	r0, #1
 80217e8:	f43f af2b 	beq.w	8021642 <_printf_float+0xb6>
 80217ec:	f109 0901 	add.w	r9, r9, #1
 80217f0:	e7e8      	b.n	80217c4 <_printf_float+0x238>
 80217f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	dc39      	bgt.n	802186c <_printf_float+0x2e0>
 80217f8:	4a1b      	ldr	r2, [pc, #108]	@ (8021868 <_printf_float+0x2dc>)
 80217fa:	2301      	movs	r3, #1
 80217fc:	4631      	mov	r1, r6
 80217fe:	4628      	mov	r0, r5
 8021800:	47b8      	blx	r7
 8021802:	3001      	adds	r0, #1
 8021804:	f43f af1d 	beq.w	8021642 <_printf_float+0xb6>
 8021808:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802180c:	ea59 0303 	orrs.w	r3, r9, r3
 8021810:	d102      	bne.n	8021818 <_printf_float+0x28c>
 8021812:	6823      	ldr	r3, [r4, #0]
 8021814:	07d9      	lsls	r1, r3, #31
 8021816:	d5d7      	bpl.n	80217c8 <_printf_float+0x23c>
 8021818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802181c:	4631      	mov	r1, r6
 802181e:	4628      	mov	r0, r5
 8021820:	47b8      	blx	r7
 8021822:	3001      	adds	r0, #1
 8021824:	f43f af0d 	beq.w	8021642 <_printf_float+0xb6>
 8021828:	f04f 0a00 	mov.w	sl, #0
 802182c:	f104 0b1a 	add.w	fp, r4, #26
 8021830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021832:	425b      	negs	r3, r3
 8021834:	4553      	cmp	r3, sl
 8021836:	dc01      	bgt.n	802183c <_printf_float+0x2b0>
 8021838:	464b      	mov	r3, r9
 802183a:	e793      	b.n	8021764 <_printf_float+0x1d8>
 802183c:	2301      	movs	r3, #1
 802183e:	465a      	mov	r2, fp
 8021840:	4631      	mov	r1, r6
 8021842:	4628      	mov	r0, r5
 8021844:	47b8      	blx	r7
 8021846:	3001      	adds	r0, #1
 8021848:	f43f aefb 	beq.w	8021642 <_printf_float+0xb6>
 802184c:	f10a 0a01 	add.w	sl, sl, #1
 8021850:	e7ee      	b.n	8021830 <_printf_float+0x2a4>
 8021852:	bf00      	nop
 8021854:	7fefffff 	.word	0x7fefffff
 8021858:	08026e18 	.word	0x08026e18
 802185c:	08026e14 	.word	0x08026e14
 8021860:	08026e20 	.word	0x08026e20
 8021864:	08026e1c 	.word	0x08026e1c
 8021868:	08026e24 	.word	0x08026e24
 802186c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802186e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8021872:	4553      	cmp	r3, sl
 8021874:	bfa8      	it	ge
 8021876:	4653      	movge	r3, sl
 8021878:	2b00      	cmp	r3, #0
 802187a:	4699      	mov	r9, r3
 802187c:	dc36      	bgt.n	80218ec <_printf_float+0x360>
 802187e:	f04f 0b00 	mov.w	fp, #0
 8021882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021886:	f104 021a 	add.w	r2, r4, #26
 802188a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802188c:	9306      	str	r3, [sp, #24]
 802188e:	eba3 0309 	sub.w	r3, r3, r9
 8021892:	455b      	cmp	r3, fp
 8021894:	dc31      	bgt.n	80218fa <_printf_float+0x36e>
 8021896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021898:	459a      	cmp	sl, r3
 802189a:	dc3a      	bgt.n	8021912 <_printf_float+0x386>
 802189c:	6823      	ldr	r3, [r4, #0]
 802189e:	07da      	lsls	r2, r3, #31
 80218a0:	d437      	bmi.n	8021912 <_printf_float+0x386>
 80218a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218a4:	ebaa 0903 	sub.w	r9, sl, r3
 80218a8:	9b06      	ldr	r3, [sp, #24]
 80218aa:	ebaa 0303 	sub.w	r3, sl, r3
 80218ae:	4599      	cmp	r9, r3
 80218b0:	bfa8      	it	ge
 80218b2:	4699      	movge	r9, r3
 80218b4:	f1b9 0f00 	cmp.w	r9, #0
 80218b8:	dc33      	bgt.n	8021922 <_printf_float+0x396>
 80218ba:	f04f 0800 	mov.w	r8, #0
 80218be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80218c2:	f104 0b1a 	add.w	fp, r4, #26
 80218c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218c8:	ebaa 0303 	sub.w	r3, sl, r3
 80218cc:	eba3 0309 	sub.w	r3, r3, r9
 80218d0:	4543      	cmp	r3, r8
 80218d2:	f77f af79 	ble.w	80217c8 <_printf_float+0x23c>
 80218d6:	2301      	movs	r3, #1
 80218d8:	465a      	mov	r2, fp
 80218da:	4631      	mov	r1, r6
 80218dc:	4628      	mov	r0, r5
 80218de:	47b8      	blx	r7
 80218e0:	3001      	adds	r0, #1
 80218e2:	f43f aeae 	beq.w	8021642 <_printf_float+0xb6>
 80218e6:	f108 0801 	add.w	r8, r8, #1
 80218ea:	e7ec      	b.n	80218c6 <_printf_float+0x33a>
 80218ec:	4642      	mov	r2, r8
 80218ee:	4631      	mov	r1, r6
 80218f0:	4628      	mov	r0, r5
 80218f2:	47b8      	blx	r7
 80218f4:	3001      	adds	r0, #1
 80218f6:	d1c2      	bne.n	802187e <_printf_float+0x2f2>
 80218f8:	e6a3      	b.n	8021642 <_printf_float+0xb6>
 80218fa:	2301      	movs	r3, #1
 80218fc:	4631      	mov	r1, r6
 80218fe:	4628      	mov	r0, r5
 8021900:	9206      	str	r2, [sp, #24]
 8021902:	47b8      	blx	r7
 8021904:	3001      	adds	r0, #1
 8021906:	f43f ae9c 	beq.w	8021642 <_printf_float+0xb6>
 802190a:	9a06      	ldr	r2, [sp, #24]
 802190c:	f10b 0b01 	add.w	fp, fp, #1
 8021910:	e7bb      	b.n	802188a <_printf_float+0x2fe>
 8021912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021916:	4631      	mov	r1, r6
 8021918:	4628      	mov	r0, r5
 802191a:	47b8      	blx	r7
 802191c:	3001      	adds	r0, #1
 802191e:	d1c0      	bne.n	80218a2 <_printf_float+0x316>
 8021920:	e68f      	b.n	8021642 <_printf_float+0xb6>
 8021922:	9a06      	ldr	r2, [sp, #24]
 8021924:	464b      	mov	r3, r9
 8021926:	4442      	add	r2, r8
 8021928:	4631      	mov	r1, r6
 802192a:	4628      	mov	r0, r5
 802192c:	47b8      	blx	r7
 802192e:	3001      	adds	r0, #1
 8021930:	d1c3      	bne.n	80218ba <_printf_float+0x32e>
 8021932:	e686      	b.n	8021642 <_printf_float+0xb6>
 8021934:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8021938:	f1ba 0f01 	cmp.w	sl, #1
 802193c:	dc01      	bgt.n	8021942 <_printf_float+0x3b6>
 802193e:	07db      	lsls	r3, r3, #31
 8021940:	d536      	bpl.n	80219b0 <_printf_float+0x424>
 8021942:	2301      	movs	r3, #1
 8021944:	4642      	mov	r2, r8
 8021946:	4631      	mov	r1, r6
 8021948:	4628      	mov	r0, r5
 802194a:	47b8      	blx	r7
 802194c:	3001      	adds	r0, #1
 802194e:	f43f ae78 	beq.w	8021642 <_printf_float+0xb6>
 8021952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021956:	4631      	mov	r1, r6
 8021958:	4628      	mov	r0, r5
 802195a:	47b8      	blx	r7
 802195c:	3001      	adds	r0, #1
 802195e:	f43f ae70 	beq.w	8021642 <_printf_float+0xb6>
 8021962:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021966:	2200      	movs	r2, #0
 8021968:	2300      	movs	r3, #0
 802196a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802196e:	f7df f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8021972:	b9c0      	cbnz	r0, 80219a6 <_printf_float+0x41a>
 8021974:	4653      	mov	r3, sl
 8021976:	f108 0201 	add.w	r2, r8, #1
 802197a:	4631      	mov	r1, r6
 802197c:	4628      	mov	r0, r5
 802197e:	47b8      	blx	r7
 8021980:	3001      	adds	r0, #1
 8021982:	d10c      	bne.n	802199e <_printf_float+0x412>
 8021984:	e65d      	b.n	8021642 <_printf_float+0xb6>
 8021986:	2301      	movs	r3, #1
 8021988:	465a      	mov	r2, fp
 802198a:	4631      	mov	r1, r6
 802198c:	4628      	mov	r0, r5
 802198e:	47b8      	blx	r7
 8021990:	3001      	adds	r0, #1
 8021992:	f43f ae56 	beq.w	8021642 <_printf_float+0xb6>
 8021996:	f108 0801 	add.w	r8, r8, #1
 802199a:	45d0      	cmp	r8, sl
 802199c:	dbf3      	blt.n	8021986 <_printf_float+0x3fa>
 802199e:	464b      	mov	r3, r9
 80219a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80219a4:	e6df      	b.n	8021766 <_printf_float+0x1da>
 80219a6:	f04f 0800 	mov.w	r8, #0
 80219aa:	f104 0b1a 	add.w	fp, r4, #26
 80219ae:	e7f4      	b.n	802199a <_printf_float+0x40e>
 80219b0:	2301      	movs	r3, #1
 80219b2:	4642      	mov	r2, r8
 80219b4:	e7e1      	b.n	802197a <_printf_float+0x3ee>
 80219b6:	2301      	movs	r3, #1
 80219b8:	464a      	mov	r2, r9
 80219ba:	4631      	mov	r1, r6
 80219bc:	4628      	mov	r0, r5
 80219be:	47b8      	blx	r7
 80219c0:	3001      	adds	r0, #1
 80219c2:	f43f ae3e 	beq.w	8021642 <_printf_float+0xb6>
 80219c6:	f108 0801 	add.w	r8, r8, #1
 80219ca:	68e3      	ldr	r3, [r4, #12]
 80219cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80219ce:	1a5b      	subs	r3, r3, r1
 80219d0:	4543      	cmp	r3, r8
 80219d2:	dcf0      	bgt.n	80219b6 <_printf_float+0x42a>
 80219d4:	e6fc      	b.n	80217d0 <_printf_float+0x244>
 80219d6:	f04f 0800 	mov.w	r8, #0
 80219da:	f104 0919 	add.w	r9, r4, #25
 80219de:	e7f4      	b.n	80219ca <_printf_float+0x43e>

080219e0 <_printf_common>:
 80219e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80219e4:	4616      	mov	r6, r2
 80219e6:	4698      	mov	r8, r3
 80219e8:	688a      	ldr	r2, [r1, #8]
 80219ea:	690b      	ldr	r3, [r1, #16]
 80219ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80219f0:	4293      	cmp	r3, r2
 80219f2:	bfb8      	it	lt
 80219f4:	4613      	movlt	r3, r2
 80219f6:	6033      	str	r3, [r6, #0]
 80219f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80219fc:	4607      	mov	r7, r0
 80219fe:	460c      	mov	r4, r1
 8021a00:	b10a      	cbz	r2, 8021a06 <_printf_common+0x26>
 8021a02:	3301      	adds	r3, #1
 8021a04:	6033      	str	r3, [r6, #0]
 8021a06:	6823      	ldr	r3, [r4, #0]
 8021a08:	0699      	lsls	r1, r3, #26
 8021a0a:	bf42      	ittt	mi
 8021a0c:	6833      	ldrmi	r3, [r6, #0]
 8021a0e:	3302      	addmi	r3, #2
 8021a10:	6033      	strmi	r3, [r6, #0]
 8021a12:	6825      	ldr	r5, [r4, #0]
 8021a14:	f015 0506 	ands.w	r5, r5, #6
 8021a18:	d106      	bne.n	8021a28 <_printf_common+0x48>
 8021a1a:	f104 0a19 	add.w	sl, r4, #25
 8021a1e:	68e3      	ldr	r3, [r4, #12]
 8021a20:	6832      	ldr	r2, [r6, #0]
 8021a22:	1a9b      	subs	r3, r3, r2
 8021a24:	42ab      	cmp	r3, r5
 8021a26:	dc26      	bgt.n	8021a76 <_printf_common+0x96>
 8021a28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021a2c:	6822      	ldr	r2, [r4, #0]
 8021a2e:	3b00      	subs	r3, #0
 8021a30:	bf18      	it	ne
 8021a32:	2301      	movne	r3, #1
 8021a34:	0692      	lsls	r2, r2, #26
 8021a36:	d42b      	bmi.n	8021a90 <_printf_common+0xb0>
 8021a38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021a3c:	4641      	mov	r1, r8
 8021a3e:	4638      	mov	r0, r7
 8021a40:	47c8      	blx	r9
 8021a42:	3001      	adds	r0, #1
 8021a44:	d01e      	beq.n	8021a84 <_printf_common+0xa4>
 8021a46:	6823      	ldr	r3, [r4, #0]
 8021a48:	6922      	ldr	r2, [r4, #16]
 8021a4a:	f003 0306 	and.w	r3, r3, #6
 8021a4e:	2b04      	cmp	r3, #4
 8021a50:	bf02      	ittt	eq
 8021a52:	68e5      	ldreq	r5, [r4, #12]
 8021a54:	6833      	ldreq	r3, [r6, #0]
 8021a56:	1aed      	subeq	r5, r5, r3
 8021a58:	68a3      	ldr	r3, [r4, #8]
 8021a5a:	bf0c      	ite	eq
 8021a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021a60:	2500      	movne	r5, #0
 8021a62:	4293      	cmp	r3, r2
 8021a64:	bfc4      	itt	gt
 8021a66:	1a9b      	subgt	r3, r3, r2
 8021a68:	18ed      	addgt	r5, r5, r3
 8021a6a:	2600      	movs	r6, #0
 8021a6c:	341a      	adds	r4, #26
 8021a6e:	42b5      	cmp	r5, r6
 8021a70:	d11a      	bne.n	8021aa8 <_printf_common+0xc8>
 8021a72:	2000      	movs	r0, #0
 8021a74:	e008      	b.n	8021a88 <_printf_common+0xa8>
 8021a76:	2301      	movs	r3, #1
 8021a78:	4652      	mov	r2, sl
 8021a7a:	4641      	mov	r1, r8
 8021a7c:	4638      	mov	r0, r7
 8021a7e:	47c8      	blx	r9
 8021a80:	3001      	adds	r0, #1
 8021a82:	d103      	bne.n	8021a8c <_printf_common+0xac>
 8021a84:	f04f 30ff 	mov.w	r0, #4294967295
 8021a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a8c:	3501      	adds	r5, #1
 8021a8e:	e7c6      	b.n	8021a1e <_printf_common+0x3e>
 8021a90:	18e1      	adds	r1, r4, r3
 8021a92:	1c5a      	adds	r2, r3, #1
 8021a94:	2030      	movs	r0, #48	@ 0x30
 8021a96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021a9a:	4422      	add	r2, r4
 8021a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021aa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021aa4:	3302      	adds	r3, #2
 8021aa6:	e7c7      	b.n	8021a38 <_printf_common+0x58>
 8021aa8:	2301      	movs	r3, #1
 8021aaa:	4622      	mov	r2, r4
 8021aac:	4641      	mov	r1, r8
 8021aae:	4638      	mov	r0, r7
 8021ab0:	47c8      	blx	r9
 8021ab2:	3001      	adds	r0, #1
 8021ab4:	d0e6      	beq.n	8021a84 <_printf_common+0xa4>
 8021ab6:	3601      	adds	r6, #1
 8021ab8:	e7d9      	b.n	8021a6e <_printf_common+0x8e>
	...

08021abc <_printf_i>:
 8021abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021ac0:	7e0f      	ldrb	r7, [r1, #24]
 8021ac2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021ac4:	2f78      	cmp	r7, #120	@ 0x78
 8021ac6:	4691      	mov	r9, r2
 8021ac8:	4680      	mov	r8, r0
 8021aca:	460c      	mov	r4, r1
 8021acc:	469a      	mov	sl, r3
 8021ace:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021ad2:	d807      	bhi.n	8021ae4 <_printf_i+0x28>
 8021ad4:	2f62      	cmp	r7, #98	@ 0x62
 8021ad6:	d80a      	bhi.n	8021aee <_printf_i+0x32>
 8021ad8:	2f00      	cmp	r7, #0
 8021ada:	f000 80d1 	beq.w	8021c80 <_printf_i+0x1c4>
 8021ade:	2f58      	cmp	r7, #88	@ 0x58
 8021ae0:	f000 80b8 	beq.w	8021c54 <_printf_i+0x198>
 8021ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021ae8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021aec:	e03a      	b.n	8021b64 <_printf_i+0xa8>
 8021aee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021af2:	2b15      	cmp	r3, #21
 8021af4:	d8f6      	bhi.n	8021ae4 <_printf_i+0x28>
 8021af6:	a101      	add	r1, pc, #4	@ (adr r1, 8021afc <_printf_i+0x40>)
 8021af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021afc:	08021b55 	.word	0x08021b55
 8021b00:	08021b69 	.word	0x08021b69
 8021b04:	08021ae5 	.word	0x08021ae5
 8021b08:	08021ae5 	.word	0x08021ae5
 8021b0c:	08021ae5 	.word	0x08021ae5
 8021b10:	08021ae5 	.word	0x08021ae5
 8021b14:	08021b69 	.word	0x08021b69
 8021b18:	08021ae5 	.word	0x08021ae5
 8021b1c:	08021ae5 	.word	0x08021ae5
 8021b20:	08021ae5 	.word	0x08021ae5
 8021b24:	08021ae5 	.word	0x08021ae5
 8021b28:	08021c67 	.word	0x08021c67
 8021b2c:	08021b93 	.word	0x08021b93
 8021b30:	08021c21 	.word	0x08021c21
 8021b34:	08021ae5 	.word	0x08021ae5
 8021b38:	08021ae5 	.word	0x08021ae5
 8021b3c:	08021c89 	.word	0x08021c89
 8021b40:	08021ae5 	.word	0x08021ae5
 8021b44:	08021b93 	.word	0x08021b93
 8021b48:	08021ae5 	.word	0x08021ae5
 8021b4c:	08021ae5 	.word	0x08021ae5
 8021b50:	08021c29 	.word	0x08021c29
 8021b54:	6833      	ldr	r3, [r6, #0]
 8021b56:	1d1a      	adds	r2, r3, #4
 8021b58:	681b      	ldr	r3, [r3, #0]
 8021b5a:	6032      	str	r2, [r6, #0]
 8021b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021b60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021b64:	2301      	movs	r3, #1
 8021b66:	e09c      	b.n	8021ca2 <_printf_i+0x1e6>
 8021b68:	6833      	ldr	r3, [r6, #0]
 8021b6a:	6820      	ldr	r0, [r4, #0]
 8021b6c:	1d19      	adds	r1, r3, #4
 8021b6e:	6031      	str	r1, [r6, #0]
 8021b70:	0606      	lsls	r6, r0, #24
 8021b72:	d501      	bpl.n	8021b78 <_printf_i+0xbc>
 8021b74:	681d      	ldr	r5, [r3, #0]
 8021b76:	e003      	b.n	8021b80 <_printf_i+0xc4>
 8021b78:	0645      	lsls	r5, r0, #25
 8021b7a:	d5fb      	bpl.n	8021b74 <_printf_i+0xb8>
 8021b7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021b80:	2d00      	cmp	r5, #0
 8021b82:	da03      	bge.n	8021b8c <_printf_i+0xd0>
 8021b84:	232d      	movs	r3, #45	@ 0x2d
 8021b86:	426d      	negs	r5, r5
 8021b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021b8c:	4858      	ldr	r0, [pc, #352]	@ (8021cf0 <_printf_i+0x234>)
 8021b8e:	230a      	movs	r3, #10
 8021b90:	e011      	b.n	8021bb6 <_printf_i+0xfa>
 8021b92:	6821      	ldr	r1, [r4, #0]
 8021b94:	6833      	ldr	r3, [r6, #0]
 8021b96:	0608      	lsls	r0, r1, #24
 8021b98:	f853 5b04 	ldr.w	r5, [r3], #4
 8021b9c:	d402      	bmi.n	8021ba4 <_printf_i+0xe8>
 8021b9e:	0649      	lsls	r1, r1, #25
 8021ba0:	bf48      	it	mi
 8021ba2:	b2ad      	uxthmi	r5, r5
 8021ba4:	2f6f      	cmp	r7, #111	@ 0x6f
 8021ba6:	4852      	ldr	r0, [pc, #328]	@ (8021cf0 <_printf_i+0x234>)
 8021ba8:	6033      	str	r3, [r6, #0]
 8021baa:	bf14      	ite	ne
 8021bac:	230a      	movne	r3, #10
 8021bae:	2308      	moveq	r3, #8
 8021bb0:	2100      	movs	r1, #0
 8021bb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021bb6:	6866      	ldr	r6, [r4, #4]
 8021bb8:	60a6      	str	r6, [r4, #8]
 8021bba:	2e00      	cmp	r6, #0
 8021bbc:	db05      	blt.n	8021bca <_printf_i+0x10e>
 8021bbe:	6821      	ldr	r1, [r4, #0]
 8021bc0:	432e      	orrs	r6, r5
 8021bc2:	f021 0104 	bic.w	r1, r1, #4
 8021bc6:	6021      	str	r1, [r4, #0]
 8021bc8:	d04b      	beq.n	8021c62 <_printf_i+0x1a6>
 8021bca:	4616      	mov	r6, r2
 8021bcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8021bd0:	fb03 5711 	mls	r7, r3, r1, r5
 8021bd4:	5dc7      	ldrb	r7, [r0, r7]
 8021bd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021bda:	462f      	mov	r7, r5
 8021bdc:	42bb      	cmp	r3, r7
 8021bde:	460d      	mov	r5, r1
 8021be0:	d9f4      	bls.n	8021bcc <_printf_i+0x110>
 8021be2:	2b08      	cmp	r3, #8
 8021be4:	d10b      	bne.n	8021bfe <_printf_i+0x142>
 8021be6:	6823      	ldr	r3, [r4, #0]
 8021be8:	07df      	lsls	r7, r3, #31
 8021bea:	d508      	bpl.n	8021bfe <_printf_i+0x142>
 8021bec:	6923      	ldr	r3, [r4, #16]
 8021bee:	6861      	ldr	r1, [r4, #4]
 8021bf0:	4299      	cmp	r1, r3
 8021bf2:	bfde      	ittt	le
 8021bf4:	2330      	movle	r3, #48	@ 0x30
 8021bf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021bfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021bfe:	1b92      	subs	r2, r2, r6
 8021c00:	6122      	str	r2, [r4, #16]
 8021c02:	f8cd a000 	str.w	sl, [sp]
 8021c06:	464b      	mov	r3, r9
 8021c08:	aa03      	add	r2, sp, #12
 8021c0a:	4621      	mov	r1, r4
 8021c0c:	4640      	mov	r0, r8
 8021c0e:	f7ff fee7 	bl	80219e0 <_printf_common>
 8021c12:	3001      	adds	r0, #1
 8021c14:	d14a      	bne.n	8021cac <_printf_i+0x1f0>
 8021c16:	f04f 30ff 	mov.w	r0, #4294967295
 8021c1a:	b004      	add	sp, #16
 8021c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c20:	6823      	ldr	r3, [r4, #0]
 8021c22:	f043 0320 	orr.w	r3, r3, #32
 8021c26:	6023      	str	r3, [r4, #0]
 8021c28:	4832      	ldr	r0, [pc, #200]	@ (8021cf4 <_printf_i+0x238>)
 8021c2a:	2778      	movs	r7, #120	@ 0x78
 8021c2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021c30:	6823      	ldr	r3, [r4, #0]
 8021c32:	6831      	ldr	r1, [r6, #0]
 8021c34:	061f      	lsls	r7, r3, #24
 8021c36:	f851 5b04 	ldr.w	r5, [r1], #4
 8021c3a:	d402      	bmi.n	8021c42 <_printf_i+0x186>
 8021c3c:	065f      	lsls	r7, r3, #25
 8021c3e:	bf48      	it	mi
 8021c40:	b2ad      	uxthmi	r5, r5
 8021c42:	6031      	str	r1, [r6, #0]
 8021c44:	07d9      	lsls	r1, r3, #31
 8021c46:	bf44      	itt	mi
 8021c48:	f043 0320 	orrmi.w	r3, r3, #32
 8021c4c:	6023      	strmi	r3, [r4, #0]
 8021c4e:	b11d      	cbz	r5, 8021c58 <_printf_i+0x19c>
 8021c50:	2310      	movs	r3, #16
 8021c52:	e7ad      	b.n	8021bb0 <_printf_i+0xf4>
 8021c54:	4826      	ldr	r0, [pc, #152]	@ (8021cf0 <_printf_i+0x234>)
 8021c56:	e7e9      	b.n	8021c2c <_printf_i+0x170>
 8021c58:	6823      	ldr	r3, [r4, #0]
 8021c5a:	f023 0320 	bic.w	r3, r3, #32
 8021c5e:	6023      	str	r3, [r4, #0]
 8021c60:	e7f6      	b.n	8021c50 <_printf_i+0x194>
 8021c62:	4616      	mov	r6, r2
 8021c64:	e7bd      	b.n	8021be2 <_printf_i+0x126>
 8021c66:	6833      	ldr	r3, [r6, #0]
 8021c68:	6825      	ldr	r5, [r4, #0]
 8021c6a:	6961      	ldr	r1, [r4, #20]
 8021c6c:	1d18      	adds	r0, r3, #4
 8021c6e:	6030      	str	r0, [r6, #0]
 8021c70:	062e      	lsls	r6, r5, #24
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	d501      	bpl.n	8021c7a <_printf_i+0x1be>
 8021c76:	6019      	str	r1, [r3, #0]
 8021c78:	e002      	b.n	8021c80 <_printf_i+0x1c4>
 8021c7a:	0668      	lsls	r0, r5, #25
 8021c7c:	d5fb      	bpl.n	8021c76 <_printf_i+0x1ba>
 8021c7e:	8019      	strh	r1, [r3, #0]
 8021c80:	2300      	movs	r3, #0
 8021c82:	6123      	str	r3, [r4, #16]
 8021c84:	4616      	mov	r6, r2
 8021c86:	e7bc      	b.n	8021c02 <_printf_i+0x146>
 8021c88:	6833      	ldr	r3, [r6, #0]
 8021c8a:	1d1a      	adds	r2, r3, #4
 8021c8c:	6032      	str	r2, [r6, #0]
 8021c8e:	681e      	ldr	r6, [r3, #0]
 8021c90:	6862      	ldr	r2, [r4, #4]
 8021c92:	2100      	movs	r1, #0
 8021c94:	4630      	mov	r0, r6
 8021c96:	f7de fa9b 	bl	80001d0 <memchr>
 8021c9a:	b108      	cbz	r0, 8021ca0 <_printf_i+0x1e4>
 8021c9c:	1b80      	subs	r0, r0, r6
 8021c9e:	6060      	str	r0, [r4, #4]
 8021ca0:	6863      	ldr	r3, [r4, #4]
 8021ca2:	6123      	str	r3, [r4, #16]
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021caa:	e7aa      	b.n	8021c02 <_printf_i+0x146>
 8021cac:	6923      	ldr	r3, [r4, #16]
 8021cae:	4632      	mov	r2, r6
 8021cb0:	4649      	mov	r1, r9
 8021cb2:	4640      	mov	r0, r8
 8021cb4:	47d0      	blx	sl
 8021cb6:	3001      	adds	r0, #1
 8021cb8:	d0ad      	beq.n	8021c16 <_printf_i+0x15a>
 8021cba:	6823      	ldr	r3, [r4, #0]
 8021cbc:	079b      	lsls	r3, r3, #30
 8021cbe:	d413      	bmi.n	8021ce8 <_printf_i+0x22c>
 8021cc0:	68e0      	ldr	r0, [r4, #12]
 8021cc2:	9b03      	ldr	r3, [sp, #12]
 8021cc4:	4298      	cmp	r0, r3
 8021cc6:	bfb8      	it	lt
 8021cc8:	4618      	movlt	r0, r3
 8021cca:	e7a6      	b.n	8021c1a <_printf_i+0x15e>
 8021ccc:	2301      	movs	r3, #1
 8021cce:	4632      	mov	r2, r6
 8021cd0:	4649      	mov	r1, r9
 8021cd2:	4640      	mov	r0, r8
 8021cd4:	47d0      	blx	sl
 8021cd6:	3001      	adds	r0, #1
 8021cd8:	d09d      	beq.n	8021c16 <_printf_i+0x15a>
 8021cda:	3501      	adds	r5, #1
 8021cdc:	68e3      	ldr	r3, [r4, #12]
 8021cde:	9903      	ldr	r1, [sp, #12]
 8021ce0:	1a5b      	subs	r3, r3, r1
 8021ce2:	42ab      	cmp	r3, r5
 8021ce4:	dcf2      	bgt.n	8021ccc <_printf_i+0x210>
 8021ce6:	e7eb      	b.n	8021cc0 <_printf_i+0x204>
 8021ce8:	2500      	movs	r5, #0
 8021cea:	f104 0619 	add.w	r6, r4, #25
 8021cee:	e7f5      	b.n	8021cdc <_printf_i+0x220>
 8021cf0:	08026e26 	.word	0x08026e26
 8021cf4:	08026e37 	.word	0x08026e37

08021cf8 <__sflush_r>:
 8021cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d00:	0716      	lsls	r6, r2, #28
 8021d02:	4605      	mov	r5, r0
 8021d04:	460c      	mov	r4, r1
 8021d06:	d454      	bmi.n	8021db2 <__sflush_r+0xba>
 8021d08:	684b      	ldr	r3, [r1, #4]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	dc02      	bgt.n	8021d14 <__sflush_r+0x1c>
 8021d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	dd48      	ble.n	8021da6 <__sflush_r+0xae>
 8021d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021d16:	2e00      	cmp	r6, #0
 8021d18:	d045      	beq.n	8021da6 <__sflush_r+0xae>
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021d20:	682f      	ldr	r7, [r5, #0]
 8021d22:	6a21      	ldr	r1, [r4, #32]
 8021d24:	602b      	str	r3, [r5, #0]
 8021d26:	d030      	beq.n	8021d8a <__sflush_r+0x92>
 8021d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021d2a:	89a3      	ldrh	r3, [r4, #12]
 8021d2c:	0759      	lsls	r1, r3, #29
 8021d2e:	d505      	bpl.n	8021d3c <__sflush_r+0x44>
 8021d30:	6863      	ldr	r3, [r4, #4]
 8021d32:	1ad2      	subs	r2, r2, r3
 8021d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021d36:	b10b      	cbz	r3, 8021d3c <__sflush_r+0x44>
 8021d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021d3a:	1ad2      	subs	r2, r2, r3
 8021d3c:	2300      	movs	r3, #0
 8021d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021d40:	6a21      	ldr	r1, [r4, #32]
 8021d42:	4628      	mov	r0, r5
 8021d44:	47b0      	blx	r6
 8021d46:	1c43      	adds	r3, r0, #1
 8021d48:	89a3      	ldrh	r3, [r4, #12]
 8021d4a:	d106      	bne.n	8021d5a <__sflush_r+0x62>
 8021d4c:	6829      	ldr	r1, [r5, #0]
 8021d4e:	291d      	cmp	r1, #29
 8021d50:	d82b      	bhi.n	8021daa <__sflush_r+0xb2>
 8021d52:	4a2a      	ldr	r2, [pc, #168]	@ (8021dfc <__sflush_r+0x104>)
 8021d54:	40ca      	lsrs	r2, r1
 8021d56:	07d6      	lsls	r6, r2, #31
 8021d58:	d527      	bpl.n	8021daa <__sflush_r+0xb2>
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	6062      	str	r2, [r4, #4]
 8021d5e:	04d9      	lsls	r1, r3, #19
 8021d60:	6922      	ldr	r2, [r4, #16]
 8021d62:	6022      	str	r2, [r4, #0]
 8021d64:	d504      	bpl.n	8021d70 <__sflush_r+0x78>
 8021d66:	1c42      	adds	r2, r0, #1
 8021d68:	d101      	bne.n	8021d6e <__sflush_r+0x76>
 8021d6a:	682b      	ldr	r3, [r5, #0]
 8021d6c:	b903      	cbnz	r3, 8021d70 <__sflush_r+0x78>
 8021d6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8021d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021d72:	602f      	str	r7, [r5, #0]
 8021d74:	b1b9      	cbz	r1, 8021da6 <__sflush_r+0xae>
 8021d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021d7a:	4299      	cmp	r1, r3
 8021d7c:	d002      	beq.n	8021d84 <__sflush_r+0x8c>
 8021d7e:	4628      	mov	r0, r5
 8021d80:	f001 f982 	bl	8023088 <_free_r>
 8021d84:	2300      	movs	r3, #0
 8021d86:	6363      	str	r3, [r4, #52]	@ 0x34
 8021d88:	e00d      	b.n	8021da6 <__sflush_r+0xae>
 8021d8a:	2301      	movs	r3, #1
 8021d8c:	4628      	mov	r0, r5
 8021d8e:	47b0      	blx	r6
 8021d90:	4602      	mov	r2, r0
 8021d92:	1c50      	adds	r0, r2, #1
 8021d94:	d1c9      	bne.n	8021d2a <__sflush_r+0x32>
 8021d96:	682b      	ldr	r3, [r5, #0]
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d0c6      	beq.n	8021d2a <__sflush_r+0x32>
 8021d9c:	2b1d      	cmp	r3, #29
 8021d9e:	d001      	beq.n	8021da4 <__sflush_r+0xac>
 8021da0:	2b16      	cmp	r3, #22
 8021da2:	d11e      	bne.n	8021de2 <__sflush_r+0xea>
 8021da4:	602f      	str	r7, [r5, #0]
 8021da6:	2000      	movs	r0, #0
 8021da8:	e022      	b.n	8021df0 <__sflush_r+0xf8>
 8021daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021dae:	b21b      	sxth	r3, r3
 8021db0:	e01b      	b.n	8021dea <__sflush_r+0xf2>
 8021db2:	690f      	ldr	r7, [r1, #16]
 8021db4:	2f00      	cmp	r7, #0
 8021db6:	d0f6      	beq.n	8021da6 <__sflush_r+0xae>
 8021db8:	0793      	lsls	r3, r2, #30
 8021dba:	680e      	ldr	r6, [r1, #0]
 8021dbc:	bf08      	it	eq
 8021dbe:	694b      	ldreq	r3, [r1, #20]
 8021dc0:	600f      	str	r7, [r1, #0]
 8021dc2:	bf18      	it	ne
 8021dc4:	2300      	movne	r3, #0
 8021dc6:	eba6 0807 	sub.w	r8, r6, r7
 8021dca:	608b      	str	r3, [r1, #8]
 8021dcc:	f1b8 0f00 	cmp.w	r8, #0
 8021dd0:	dde9      	ble.n	8021da6 <__sflush_r+0xae>
 8021dd2:	6a21      	ldr	r1, [r4, #32]
 8021dd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021dd6:	4643      	mov	r3, r8
 8021dd8:	463a      	mov	r2, r7
 8021dda:	4628      	mov	r0, r5
 8021ddc:	47b0      	blx	r6
 8021dde:	2800      	cmp	r0, #0
 8021de0:	dc08      	bgt.n	8021df4 <__sflush_r+0xfc>
 8021de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021dea:	81a3      	strh	r3, [r4, #12]
 8021dec:	f04f 30ff 	mov.w	r0, #4294967295
 8021df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021df4:	4407      	add	r7, r0
 8021df6:	eba8 0800 	sub.w	r8, r8, r0
 8021dfa:	e7e7      	b.n	8021dcc <__sflush_r+0xd4>
 8021dfc:	20400001 	.word	0x20400001

08021e00 <_fflush_r>:
 8021e00:	b538      	push	{r3, r4, r5, lr}
 8021e02:	690b      	ldr	r3, [r1, #16]
 8021e04:	4605      	mov	r5, r0
 8021e06:	460c      	mov	r4, r1
 8021e08:	b913      	cbnz	r3, 8021e10 <_fflush_r+0x10>
 8021e0a:	2500      	movs	r5, #0
 8021e0c:	4628      	mov	r0, r5
 8021e0e:	bd38      	pop	{r3, r4, r5, pc}
 8021e10:	b118      	cbz	r0, 8021e1a <_fflush_r+0x1a>
 8021e12:	6a03      	ldr	r3, [r0, #32]
 8021e14:	b90b      	cbnz	r3, 8021e1a <_fflush_r+0x1a>
 8021e16:	f000 f8bb 	bl	8021f90 <__sinit>
 8021e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d0f3      	beq.n	8021e0a <_fflush_r+0xa>
 8021e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021e24:	07d0      	lsls	r0, r2, #31
 8021e26:	d404      	bmi.n	8021e32 <_fflush_r+0x32>
 8021e28:	0599      	lsls	r1, r3, #22
 8021e2a:	d402      	bmi.n	8021e32 <_fflush_r+0x32>
 8021e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021e2e:	f000 fac2 	bl	80223b6 <__retarget_lock_acquire_recursive>
 8021e32:	4628      	mov	r0, r5
 8021e34:	4621      	mov	r1, r4
 8021e36:	f7ff ff5f 	bl	8021cf8 <__sflush_r>
 8021e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021e3c:	07da      	lsls	r2, r3, #31
 8021e3e:	4605      	mov	r5, r0
 8021e40:	d4e4      	bmi.n	8021e0c <_fflush_r+0xc>
 8021e42:	89a3      	ldrh	r3, [r4, #12]
 8021e44:	059b      	lsls	r3, r3, #22
 8021e46:	d4e1      	bmi.n	8021e0c <_fflush_r+0xc>
 8021e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021e4a:	f000 fab5 	bl	80223b8 <__retarget_lock_release_recursive>
 8021e4e:	e7dd      	b.n	8021e0c <_fflush_r+0xc>

08021e50 <fflush>:
 8021e50:	4601      	mov	r1, r0
 8021e52:	b920      	cbnz	r0, 8021e5e <fflush+0xe>
 8021e54:	4a04      	ldr	r2, [pc, #16]	@ (8021e68 <fflush+0x18>)
 8021e56:	4905      	ldr	r1, [pc, #20]	@ (8021e6c <fflush+0x1c>)
 8021e58:	4805      	ldr	r0, [pc, #20]	@ (8021e70 <fflush+0x20>)
 8021e5a:	f000 b8b1 	b.w	8021fc0 <_fwalk_sglue>
 8021e5e:	4b05      	ldr	r3, [pc, #20]	@ (8021e74 <fflush+0x24>)
 8021e60:	6818      	ldr	r0, [r3, #0]
 8021e62:	f7ff bfcd 	b.w	8021e00 <_fflush_r>
 8021e66:	bf00      	nop
 8021e68:	20000078 	.word	0x20000078
 8021e6c:	08021e01 	.word	0x08021e01
 8021e70:	20000088 	.word	0x20000088
 8021e74:	20000084 	.word	0x20000084

08021e78 <std>:
 8021e78:	2300      	movs	r3, #0
 8021e7a:	b510      	push	{r4, lr}
 8021e7c:	4604      	mov	r4, r0
 8021e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8021e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021e86:	6083      	str	r3, [r0, #8]
 8021e88:	8181      	strh	r1, [r0, #12]
 8021e8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8021e8c:	81c2      	strh	r2, [r0, #14]
 8021e8e:	6183      	str	r3, [r0, #24]
 8021e90:	4619      	mov	r1, r3
 8021e92:	2208      	movs	r2, #8
 8021e94:	305c      	adds	r0, #92	@ 0x5c
 8021e96:	f000 fa11 	bl	80222bc <memset>
 8021e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8021ed0 <std+0x58>)
 8021e9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8021e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8021ed4 <std+0x5c>)
 8021ea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8021ed8 <std+0x60>)
 8021ea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8021edc <std+0x64>)
 8021ea8:	6323      	str	r3, [r4, #48]	@ 0x30
 8021eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8021ee0 <std+0x68>)
 8021eac:	6224      	str	r4, [r4, #32]
 8021eae:	429c      	cmp	r4, r3
 8021eb0:	d006      	beq.n	8021ec0 <std+0x48>
 8021eb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021eb6:	4294      	cmp	r4, r2
 8021eb8:	d002      	beq.n	8021ec0 <std+0x48>
 8021eba:	33d0      	adds	r3, #208	@ 0xd0
 8021ebc:	429c      	cmp	r4, r3
 8021ebe:	d105      	bne.n	8021ecc <std+0x54>
 8021ec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ec8:	f000 ba74 	b.w	80223b4 <__retarget_lock_init_recursive>
 8021ecc:	bd10      	pop	{r4, pc}
 8021ece:	bf00      	nop
 8021ed0:	080220ed 	.word	0x080220ed
 8021ed4:	0802210f 	.word	0x0802210f
 8021ed8:	08022147 	.word	0x08022147
 8021edc:	0802216b 	.word	0x0802216b
 8021ee0:	20001c08 	.word	0x20001c08

08021ee4 <stdio_exit_handler>:
 8021ee4:	4a02      	ldr	r2, [pc, #8]	@ (8021ef0 <stdio_exit_handler+0xc>)
 8021ee6:	4903      	ldr	r1, [pc, #12]	@ (8021ef4 <stdio_exit_handler+0x10>)
 8021ee8:	4803      	ldr	r0, [pc, #12]	@ (8021ef8 <stdio_exit_handler+0x14>)
 8021eea:	f000 b869 	b.w	8021fc0 <_fwalk_sglue>
 8021eee:	bf00      	nop
 8021ef0:	20000078 	.word	0x20000078
 8021ef4:	08021e01 	.word	0x08021e01
 8021ef8:	20000088 	.word	0x20000088

08021efc <cleanup_stdio>:
 8021efc:	6841      	ldr	r1, [r0, #4]
 8021efe:	4b0c      	ldr	r3, [pc, #48]	@ (8021f30 <cleanup_stdio+0x34>)
 8021f00:	4299      	cmp	r1, r3
 8021f02:	b510      	push	{r4, lr}
 8021f04:	4604      	mov	r4, r0
 8021f06:	d001      	beq.n	8021f0c <cleanup_stdio+0x10>
 8021f08:	f7ff ff7a 	bl	8021e00 <_fflush_r>
 8021f0c:	68a1      	ldr	r1, [r4, #8]
 8021f0e:	4b09      	ldr	r3, [pc, #36]	@ (8021f34 <cleanup_stdio+0x38>)
 8021f10:	4299      	cmp	r1, r3
 8021f12:	d002      	beq.n	8021f1a <cleanup_stdio+0x1e>
 8021f14:	4620      	mov	r0, r4
 8021f16:	f7ff ff73 	bl	8021e00 <_fflush_r>
 8021f1a:	68e1      	ldr	r1, [r4, #12]
 8021f1c:	4b06      	ldr	r3, [pc, #24]	@ (8021f38 <cleanup_stdio+0x3c>)
 8021f1e:	4299      	cmp	r1, r3
 8021f20:	d004      	beq.n	8021f2c <cleanup_stdio+0x30>
 8021f22:	4620      	mov	r0, r4
 8021f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f28:	f7ff bf6a 	b.w	8021e00 <_fflush_r>
 8021f2c:	bd10      	pop	{r4, pc}
 8021f2e:	bf00      	nop
 8021f30:	20001c08 	.word	0x20001c08
 8021f34:	20001c70 	.word	0x20001c70
 8021f38:	20001cd8 	.word	0x20001cd8

08021f3c <global_stdio_init.part.0>:
 8021f3c:	b510      	push	{r4, lr}
 8021f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8021f6c <global_stdio_init.part.0+0x30>)
 8021f40:	4c0b      	ldr	r4, [pc, #44]	@ (8021f70 <global_stdio_init.part.0+0x34>)
 8021f42:	4a0c      	ldr	r2, [pc, #48]	@ (8021f74 <global_stdio_init.part.0+0x38>)
 8021f44:	601a      	str	r2, [r3, #0]
 8021f46:	4620      	mov	r0, r4
 8021f48:	2200      	movs	r2, #0
 8021f4a:	2104      	movs	r1, #4
 8021f4c:	f7ff ff94 	bl	8021e78 <std>
 8021f50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021f54:	2201      	movs	r2, #1
 8021f56:	2109      	movs	r1, #9
 8021f58:	f7ff ff8e 	bl	8021e78 <std>
 8021f5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021f60:	2202      	movs	r2, #2
 8021f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f66:	2112      	movs	r1, #18
 8021f68:	f7ff bf86 	b.w	8021e78 <std>
 8021f6c:	20001d40 	.word	0x20001d40
 8021f70:	20001c08 	.word	0x20001c08
 8021f74:	08021ee5 	.word	0x08021ee5

08021f78 <__sfp_lock_acquire>:
 8021f78:	4801      	ldr	r0, [pc, #4]	@ (8021f80 <__sfp_lock_acquire+0x8>)
 8021f7a:	f000 ba1c 	b.w	80223b6 <__retarget_lock_acquire_recursive>
 8021f7e:	bf00      	nop
 8021f80:	20001d49 	.word	0x20001d49

08021f84 <__sfp_lock_release>:
 8021f84:	4801      	ldr	r0, [pc, #4]	@ (8021f8c <__sfp_lock_release+0x8>)
 8021f86:	f000 ba17 	b.w	80223b8 <__retarget_lock_release_recursive>
 8021f8a:	bf00      	nop
 8021f8c:	20001d49 	.word	0x20001d49

08021f90 <__sinit>:
 8021f90:	b510      	push	{r4, lr}
 8021f92:	4604      	mov	r4, r0
 8021f94:	f7ff fff0 	bl	8021f78 <__sfp_lock_acquire>
 8021f98:	6a23      	ldr	r3, [r4, #32]
 8021f9a:	b11b      	cbz	r3, 8021fa4 <__sinit+0x14>
 8021f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fa0:	f7ff bff0 	b.w	8021f84 <__sfp_lock_release>
 8021fa4:	4b04      	ldr	r3, [pc, #16]	@ (8021fb8 <__sinit+0x28>)
 8021fa6:	6223      	str	r3, [r4, #32]
 8021fa8:	4b04      	ldr	r3, [pc, #16]	@ (8021fbc <__sinit+0x2c>)
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d1f5      	bne.n	8021f9c <__sinit+0xc>
 8021fb0:	f7ff ffc4 	bl	8021f3c <global_stdio_init.part.0>
 8021fb4:	e7f2      	b.n	8021f9c <__sinit+0xc>
 8021fb6:	bf00      	nop
 8021fb8:	08021efd 	.word	0x08021efd
 8021fbc:	20001d40 	.word	0x20001d40

08021fc0 <_fwalk_sglue>:
 8021fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021fc4:	4607      	mov	r7, r0
 8021fc6:	4688      	mov	r8, r1
 8021fc8:	4614      	mov	r4, r2
 8021fca:	2600      	movs	r6, #0
 8021fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8021fd4:	d505      	bpl.n	8021fe2 <_fwalk_sglue+0x22>
 8021fd6:	6824      	ldr	r4, [r4, #0]
 8021fd8:	2c00      	cmp	r4, #0
 8021fda:	d1f7      	bne.n	8021fcc <_fwalk_sglue+0xc>
 8021fdc:	4630      	mov	r0, r6
 8021fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021fe2:	89ab      	ldrh	r3, [r5, #12]
 8021fe4:	2b01      	cmp	r3, #1
 8021fe6:	d907      	bls.n	8021ff8 <_fwalk_sglue+0x38>
 8021fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021fec:	3301      	adds	r3, #1
 8021fee:	d003      	beq.n	8021ff8 <_fwalk_sglue+0x38>
 8021ff0:	4629      	mov	r1, r5
 8021ff2:	4638      	mov	r0, r7
 8021ff4:	47c0      	blx	r8
 8021ff6:	4306      	orrs	r6, r0
 8021ff8:	3568      	adds	r5, #104	@ 0x68
 8021ffa:	e7e9      	b.n	8021fd0 <_fwalk_sglue+0x10>

08021ffc <iprintf>:
 8021ffc:	b40f      	push	{r0, r1, r2, r3}
 8021ffe:	b507      	push	{r0, r1, r2, lr}
 8022000:	4906      	ldr	r1, [pc, #24]	@ (802201c <iprintf+0x20>)
 8022002:	ab04      	add	r3, sp, #16
 8022004:	6808      	ldr	r0, [r1, #0]
 8022006:	f853 2b04 	ldr.w	r2, [r3], #4
 802200a:	6881      	ldr	r1, [r0, #8]
 802200c:	9301      	str	r3, [sp, #4]
 802200e:	f001 fcdf 	bl	80239d0 <_vfiprintf_r>
 8022012:	b003      	add	sp, #12
 8022014:	f85d eb04 	ldr.w	lr, [sp], #4
 8022018:	b004      	add	sp, #16
 802201a:	4770      	bx	lr
 802201c:	20000084 	.word	0x20000084

08022020 <putchar>:
 8022020:	4b02      	ldr	r3, [pc, #8]	@ (802202c <putchar+0xc>)
 8022022:	4601      	mov	r1, r0
 8022024:	6818      	ldr	r0, [r3, #0]
 8022026:	6882      	ldr	r2, [r0, #8]
 8022028:	f001 be4c 	b.w	8023cc4 <_putc_r>
 802202c:	20000084 	.word	0x20000084

08022030 <_puts_r>:
 8022030:	6a03      	ldr	r3, [r0, #32]
 8022032:	b570      	push	{r4, r5, r6, lr}
 8022034:	6884      	ldr	r4, [r0, #8]
 8022036:	4605      	mov	r5, r0
 8022038:	460e      	mov	r6, r1
 802203a:	b90b      	cbnz	r3, 8022040 <_puts_r+0x10>
 802203c:	f7ff ffa8 	bl	8021f90 <__sinit>
 8022040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022042:	07db      	lsls	r3, r3, #31
 8022044:	d405      	bmi.n	8022052 <_puts_r+0x22>
 8022046:	89a3      	ldrh	r3, [r4, #12]
 8022048:	0598      	lsls	r0, r3, #22
 802204a:	d402      	bmi.n	8022052 <_puts_r+0x22>
 802204c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802204e:	f000 f9b2 	bl	80223b6 <__retarget_lock_acquire_recursive>
 8022052:	89a3      	ldrh	r3, [r4, #12]
 8022054:	0719      	lsls	r1, r3, #28
 8022056:	d502      	bpl.n	802205e <_puts_r+0x2e>
 8022058:	6923      	ldr	r3, [r4, #16]
 802205a:	2b00      	cmp	r3, #0
 802205c:	d135      	bne.n	80220ca <_puts_r+0x9a>
 802205e:	4621      	mov	r1, r4
 8022060:	4628      	mov	r0, r5
 8022062:	f000 f8c5 	bl	80221f0 <__swsetup_r>
 8022066:	b380      	cbz	r0, 80220ca <_puts_r+0x9a>
 8022068:	f04f 35ff 	mov.w	r5, #4294967295
 802206c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802206e:	07da      	lsls	r2, r3, #31
 8022070:	d405      	bmi.n	802207e <_puts_r+0x4e>
 8022072:	89a3      	ldrh	r3, [r4, #12]
 8022074:	059b      	lsls	r3, r3, #22
 8022076:	d402      	bmi.n	802207e <_puts_r+0x4e>
 8022078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802207a:	f000 f99d 	bl	80223b8 <__retarget_lock_release_recursive>
 802207e:	4628      	mov	r0, r5
 8022080:	bd70      	pop	{r4, r5, r6, pc}
 8022082:	2b00      	cmp	r3, #0
 8022084:	da04      	bge.n	8022090 <_puts_r+0x60>
 8022086:	69a2      	ldr	r2, [r4, #24]
 8022088:	429a      	cmp	r2, r3
 802208a:	dc17      	bgt.n	80220bc <_puts_r+0x8c>
 802208c:	290a      	cmp	r1, #10
 802208e:	d015      	beq.n	80220bc <_puts_r+0x8c>
 8022090:	6823      	ldr	r3, [r4, #0]
 8022092:	1c5a      	adds	r2, r3, #1
 8022094:	6022      	str	r2, [r4, #0]
 8022096:	7019      	strb	r1, [r3, #0]
 8022098:	68a3      	ldr	r3, [r4, #8]
 802209a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802209e:	3b01      	subs	r3, #1
 80220a0:	60a3      	str	r3, [r4, #8]
 80220a2:	2900      	cmp	r1, #0
 80220a4:	d1ed      	bne.n	8022082 <_puts_r+0x52>
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	da11      	bge.n	80220ce <_puts_r+0x9e>
 80220aa:	4622      	mov	r2, r4
 80220ac:	210a      	movs	r1, #10
 80220ae:	4628      	mov	r0, r5
 80220b0:	f000 f85f 	bl	8022172 <__swbuf_r>
 80220b4:	3001      	adds	r0, #1
 80220b6:	d0d7      	beq.n	8022068 <_puts_r+0x38>
 80220b8:	250a      	movs	r5, #10
 80220ba:	e7d7      	b.n	802206c <_puts_r+0x3c>
 80220bc:	4622      	mov	r2, r4
 80220be:	4628      	mov	r0, r5
 80220c0:	f000 f857 	bl	8022172 <__swbuf_r>
 80220c4:	3001      	adds	r0, #1
 80220c6:	d1e7      	bne.n	8022098 <_puts_r+0x68>
 80220c8:	e7ce      	b.n	8022068 <_puts_r+0x38>
 80220ca:	3e01      	subs	r6, #1
 80220cc:	e7e4      	b.n	8022098 <_puts_r+0x68>
 80220ce:	6823      	ldr	r3, [r4, #0]
 80220d0:	1c5a      	adds	r2, r3, #1
 80220d2:	6022      	str	r2, [r4, #0]
 80220d4:	220a      	movs	r2, #10
 80220d6:	701a      	strb	r2, [r3, #0]
 80220d8:	e7ee      	b.n	80220b8 <_puts_r+0x88>
	...

080220dc <puts>:
 80220dc:	4b02      	ldr	r3, [pc, #8]	@ (80220e8 <puts+0xc>)
 80220de:	4601      	mov	r1, r0
 80220e0:	6818      	ldr	r0, [r3, #0]
 80220e2:	f7ff bfa5 	b.w	8022030 <_puts_r>
 80220e6:	bf00      	nop
 80220e8:	20000084 	.word	0x20000084

080220ec <__sread>:
 80220ec:	b510      	push	{r4, lr}
 80220ee:	460c      	mov	r4, r1
 80220f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220f4:	f000 f910 	bl	8022318 <_read_r>
 80220f8:	2800      	cmp	r0, #0
 80220fa:	bfab      	itete	ge
 80220fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80220fe:	89a3      	ldrhlt	r3, [r4, #12]
 8022100:	181b      	addge	r3, r3, r0
 8022102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022106:	bfac      	ite	ge
 8022108:	6563      	strge	r3, [r4, #84]	@ 0x54
 802210a:	81a3      	strhlt	r3, [r4, #12]
 802210c:	bd10      	pop	{r4, pc}

0802210e <__swrite>:
 802210e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022112:	461f      	mov	r7, r3
 8022114:	898b      	ldrh	r3, [r1, #12]
 8022116:	05db      	lsls	r3, r3, #23
 8022118:	4605      	mov	r5, r0
 802211a:	460c      	mov	r4, r1
 802211c:	4616      	mov	r6, r2
 802211e:	d505      	bpl.n	802212c <__swrite+0x1e>
 8022120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022124:	2302      	movs	r3, #2
 8022126:	2200      	movs	r2, #0
 8022128:	f000 f8e4 	bl	80222f4 <_lseek_r>
 802212c:	89a3      	ldrh	r3, [r4, #12]
 802212e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022136:	81a3      	strh	r3, [r4, #12]
 8022138:	4632      	mov	r2, r6
 802213a:	463b      	mov	r3, r7
 802213c:	4628      	mov	r0, r5
 802213e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022142:	f000 b8fb 	b.w	802233c <_write_r>

08022146 <__sseek>:
 8022146:	b510      	push	{r4, lr}
 8022148:	460c      	mov	r4, r1
 802214a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802214e:	f000 f8d1 	bl	80222f4 <_lseek_r>
 8022152:	1c43      	adds	r3, r0, #1
 8022154:	89a3      	ldrh	r3, [r4, #12]
 8022156:	bf15      	itete	ne
 8022158:	6560      	strne	r0, [r4, #84]	@ 0x54
 802215a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802215e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022162:	81a3      	strheq	r3, [r4, #12]
 8022164:	bf18      	it	ne
 8022166:	81a3      	strhne	r3, [r4, #12]
 8022168:	bd10      	pop	{r4, pc}

0802216a <__sclose>:
 802216a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802216e:	f000 b8b1 	b.w	80222d4 <_close_r>

08022172 <__swbuf_r>:
 8022172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022174:	460e      	mov	r6, r1
 8022176:	4614      	mov	r4, r2
 8022178:	4605      	mov	r5, r0
 802217a:	b118      	cbz	r0, 8022184 <__swbuf_r+0x12>
 802217c:	6a03      	ldr	r3, [r0, #32]
 802217e:	b90b      	cbnz	r3, 8022184 <__swbuf_r+0x12>
 8022180:	f7ff ff06 	bl	8021f90 <__sinit>
 8022184:	69a3      	ldr	r3, [r4, #24]
 8022186:	60a3      	str	r3, [r4, #8]
 8022188:	89a3      	ldrh	r3, [r4, #12]
 802218a:	071a      	lsls	r2, r3, #28
 802218c:	d501      	bpl.n	8022192 <__swbuf_r+0x20>
 802218e:	6923      	ldr	r3, [r4, #16]
 8022190:	b943      	cbnz	r3, 80221a4 <__swbuf_r+0x32>
 8022192:	4621      	mov	r1, r4
 8022194:	4628      	mov	r0, r5
 8022196:	f000 f82b 	bl	80221f0 <__swsetup_r>
 802219a:	b118      	cbz	r0, 80221a4 <__swbuf_r+0x32>
 802219c:	f04f 37ff 	mov.w	r7, #4294967295
 80221a0:	4638      	mov	r0, r7
 80221a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80221a4:	6823      	ldr	r3, [r4, #0]
 80221a6:	6922      	ldr	r2, [r4, #16]
 80221a8:	1a98      	subs	r0, r3, r2
 80221aa:	6963      	ldr	r3, [r4, #20]
 80221ac:	b2f6      	uxtb	r6, r6
 80221ae:	4283      	cmp	r3, r0
 80221b0:	4637      	mov	r7, r6
 80221b2:	dc05      	bgt.n	80221c0 <__swbuf_r+0x4e>
 80221b4:	4621      	mov	r1, r4
 80221b6:	4628      	mov	r0, r5
 80221b8:	f7ff fe22 	bl	8021e00 <_fflush_r>
 80221bc:	2800      	cmp	r0, #0
 80221be:	d1ed      	bne.n	802219c <__swbuf_r+0x2a>
 80221c0:	68a3      	ldr	r3, [r4, #8]
 80221c2:	3b01      	subs	r3, #1
 80221c4:	60a3      	str	r3, [r4, #8]
 80221c6:	6823      	ldr	r3, [r4, #0]
 80221c8:	1c5a      	adds	r2, r3, #1
 80221ca:	6022      	str	r2, [r4, #0]
 80221cc:	701e      	strb	r6, [r3, #0]
 80221ce:	6962      	ldr	r2, [r4, #20]
 80221d0:	1c43      	adds	r3, r0, #1
 80221d2:	429a      	cmp	r2, r3
 80221d4:	d004      	beq.n	80221e0 <__swbuf_r+0x6e>
 80221d6:	89a3      	ldrh	r3, [r4, #12]
 80221d8:	07db      	lsls	r3, r3, #31
 80221da:	d5e1      	bpl.n	80221a0 <__swbuf_r+0x2e>
 80221dc:	2e0a      	cmp	r6, #10
 80221de:	d1df      	bne.n	80221a0 <__swbuf_r+0x2e>
 80221e0:	4621      	mov	r1, r4
 80221e2:	4628      	mov	r0, r5
 80221e4:	f7ff fe0c 	bl	8021e00 <_fflush_r>
 80221e8:	2800      	cmp	r0, #0
 80221ea:	d0d9      	beq.n	80221a0 <__swbuf_r+0x2e>
 80221ec:	e7d6      	b.n	802219c <__swbuf_r+0x2a>
	...

080221f0 <__swsetup_r>:
 80221f0:	b538      	push	{r3, r4, r5, lr}
 80221f2:	4b29      	ldr	r3, [pc, #164]	@ (8022298 <__swsetup_r+0xa8>)
 80221f4:	4605      	mov	r5, r0
 80221f6:	6818      	ldr	r0, [r3, #0]
 80221f8:	460c      	mov	r4, r1
 80221fa:	b118      	cbz	r0, 8022204 <__swsetup_r+0x14>
 80221fc:	6a03      	ldr	r3, [r0, #32]
 80221fe:	b90b      	cbnz	r3, 8022204 <__swsetup_r+0x14>
 8022200:	f7ff fec6 	bl	8021f90 <__sinit>
 8022204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022208:	0719      	lsls	r1, r3, #28
 802220a:	d422      	bmi.n	8022252 <__swsetup_r+0x62>
 802220c:	06da      	lsls	r2, r3, #27
 802220e:	d407      	bmi.n	8022220 <__swsetup_r+0x30>
 8022210:	2209      	movs	r2, #9
 8022212:	602a      	str	r2, [r5, #0]
 8022214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022218:	81a3      	strh	r3, [r4, #12]
 802221a:	f04f 30ff 	mov.w	r0, #4294967295
 802221e:	e033      	b.n	8022288 <__swsetup_r+0x98>
 8022220:	0758      	lsls	r0, r3, #29
 8022222:	d512      	bpl.n	802224a <__swsetup_r+0x5a>
 8022224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022226:	b141      	cbz	r1, 802223a <__swsetup_r+0x4a>
 8022228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802222c:	4299      	cmp	r1, r3
 802222e:	d002      	beq.n	8022236 <__swsetup_r+0x46>
 8022230:	4628      	mov	r0, r5
 8022232:	f000 ff29 	bl	8023088 <_free_r>
 8022236:	2300      	movs	r3, #0
 8022238:	6363      	str	r3, [r4, #52]	@ 0x34
 802223a:	89a3      	ldrh	r3, [r4, #12]
 802223c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022240:	81a3      	strh	r3, [r4, #12]
 8022242:	2300      	movs	r3, #0
 8022244:	6063      	str	r3, [r4, #4]
 8022246:	6923      	ldr	r3, [r4, #16]
 8022248:	6023      	str	r3, [r4, #0]
 802224a:	89a3      	ldrh	r3, [r4, #12]
 802224c:	f043 0308 	orr.w	r3, r3, #8
 8022250:	81a3      	strh	r3, [r4, #12]
 8022252:	6923      	ldr	r3, [r4, #16]
 8022254:	b94b      	cbnz	r3, 802226a <__swsetup_r+0x7a>
 8022256:	89a3      	ldrh	r3, [r4, #12]
 8022258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802225c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022260:	d003      	beq.n	802226a <__swsetup_r+0x7a>
 8022262:	4621      	mov	r1, r4
 8022264:	4628      	mov	r0, r5
 8022266:	f001 fcf1 	bl	8023c4c <__smakebuf_r>
 802226a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802226e:	f013 0201 	ands.w	r2, r3, #1
 8022272:	d00a      	beq.n	802228a <__swsetup_r+0x9a>
 8022274:	2200      	movs	r2, #0
 8022276:	60a2      	str	r2, [r4, #8]
 8022278:	6962      	ldr	r2, [r4, #20]
 802227a:	4252      	negs	r2, r2
 802227c:	61a2      	str	r2, [r4, #24]
 802227e:	6922      	ldr	r2, [r4, #16]
 8022280:	b942      	cbnz	r2, 8022294 <__swsetup_r+0xa4>
 8022282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022286:	d1c5      	bne.n	8022214 <__swsetup_r+0x24>
 8022288:	bd38      	pop	{r3, r4, r5, pc}
 802228a:	0799      	lsls	r1, r3, #30
 802228c:	bf58      	it	pl
 802228e:	6962      	ldrpl	r2, [r4, #20]
 8022290:	60a2      	str	r2, [r4, #8]
 8022292:	e7f4      	b.n	802227e <__swsetup_r+0x8e>
 8022294:	2000      	movs	r0, #0
 8022296:	e7f7      	b.n	8022288 <__swsetup_r+0x98>
 8022298:	20000084 	.word	0x20000084

0802229c <memcmp>:
 802229c:	b510      	push	{r4, lr}
 802229e:	3901      	subs	r1, #1
 80222a0:	4402      	add	r2, r0
 80222a2:	4290      	cmp	r0, r2
 80222a4:	d101      	bne.n	80222aa <memcmp+0xe>
 80222a6:	2000      	movs	r0, #0
 80222a8:	e005      	b.n	80222b6 <memcmp+0x1a>
 80222aa:	7803      	ldrb	r3, [r0, #0]
 80222ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80222b0:	42a3      	cmp	r3, r4
 80222b2:	d001      	beq.n	80222b8 <memcmp+0x1c>
 80222b4:	1b18      	subs	r0, r3, r4
 80222b6:	bd10      	pop	{r4, pc}
 80222b8:	3001      	adds	r0, #1
 80222ba:	e7f2      	b.n	80222a2 <memcmp+0x6>

080222bc <memset>:
 80222bc:	4402      	add	r2, r0
 80222be:	4603      	mov	r3, r0
 80222c0:	4293      	cmp	r3, r2
 80222c2:	d100      	bne.n	80222c6 <memset+0xa>
 80222c4:	4770      	bx	lr
 80222c6:	f803 1b01 	strb.w	r1, [r3], #1
 80222ca:	e7f9      	b.n	80222c0 <memset+0x4>

080222cc <_localeconv_r>:
 80222cc:	4800      	ldr	r0, [pc, #0]	@ (80222d0 <_localeconv_r+0x4>)
 80222ce:	4770      	bx	lr
 80222d0:	200001c4 	.word	0x200001c4

080222d4 <_close_r>:
 80222d4:	b538      	push	{r3, r4, r5, lr}
 80222d6:	4d06      	ldr	r5, [pc, #24]	@ (80222f0 <_close_r+0x1c>)
 80222d8:	2300      	movs	r3, #0
 80222da:	4604      	mov	r4, r0
 80222dc:	4608      	mov	r0, r1
 80222de:	602b      	str	r3, [r5, #0]
 80222e0:	f7e0 f9a8 	bl	8002634 <_close>
 80222e4:	1c43      	adds	r3, r0, #1
 80222e6:	d102      	bne.n	80222ee <_close_r+0x1a>
 80222e8:	682b      	ldr	r3, [r5, #0]
 80222ea:	b103      	cbz	r3, 80222ee <_close_r+0x1a>
 80222ec:	6023      	str	r3, [r4, #0]
 80222ee:	bd38      	pop	{r3, r4, r5, pc}
 80222f0:	20001d44 	.word	0x20001d44

080222f4 <_lseek_r>:
 80222f4:	b538      	push	{r3, r4, r5, lr}
 80222f6:	4d07      	ldr	r5, [pc, #28]	@ (8022314 <_lseek_r+0x20>)
 80222f8:	4604      	mov	r4, r0
 80222fa:	4608      	mov	r0, r1
 80222fc:	4611      	mov	r1, r2
 80222fe:	2200      	movs	r2, #0
 8022300:	602a      	str	r2, [r5, #0]
 8022302:	461a      	mov	r2, r3
 8022304:	f7e0 f9bd 	bl	8002682 <_lseek>
 8022308:	1c43      	adds	r3, r0, #1
 802230a:	d102      	bne.n	8022312 <_lseek_r+0x1e>
 802230c:	682b      	ldr	r3, [r5, #0]
 802230e:	b103      	cbz	r3, 8022312 <_lseek_r+0x1e>
 8022310:	6023      	str	r3, [r4, #0]
 8022312:	bd38      	pop	{r3, r4, r5, pc}
 8022314:	20001d44 	.word	0x20001d44

08022318 <_read_r>:
 8022318:	b538      	push	{r3, r4, r5, lr}
 802231a:	4d07      	ldr	r5, [pc, #28]	@ (8022338 <_read_r+0x20>)
 802231c:	4604      	mov	r4, r0
 802231e:	4608      	mov	r0, r1
 8022320:	4611      	mov	r1, r2
 8022322:	2200      	movs	r2, #0
 8022324:	602a      	str	r2, [r5, #0]
 8022326:	461a      	mov	r2, r3
 8022328:	f7e0 f94b 	bl	80025c2 <_read>
 802232c:	1c43      	adds	r3, r0, #1
 802232e:	d102      	bne.n	8022336 <_read_r+0x1e>
 8022330:	682b      	ldr	r3, [r5, #0]
 8022332:	b103      	cbz	r3, 8022336 <_read_r+0x1e>
 8022334:	6023      	str	r3, [r4, #0]
 8022336:	bd38      	pop	{r3, r4, r5, pc}
 8022338:	20001d44 	.word	0x20001d44

0802233c <_write_r>:
 802233c:	b538      	push	{r3, r4, r5, lr}
 802233e:	4d07      	ldr	r5, [pc, #28]	@ (802235c <_write_r+0x20>)
 8022340:	4604      	mov	r4, r0
 8022342:	4608      	mov	r0, r1
 8022344:	4611      	mov	r1, r2
 8022346:	2200      	movs	r2, #0
 8022348:	602a      	str	r2, [r5, #0]
 802234a:	461a      	mov	r2, r3
 802234c:	f7e0 f956 	bl	80025fc <_write>
 8022350:	1c43      	adds	r3, r0, #1
 8022352:	d102      	bne.n	802235a <_write_r+0x1e>
 8022354:	682b      	ldr	r3, [r5, #0]
 8022356:	b103      	cbz	r3, 802235a <_write_r+0x1e>
 8022358:	6023      	str	r3, [r4, #0]
 802235a:	bd38      	pop	{r3, r4, r5, pc}
 802235c:	20001d44 	.word	0x20001d44

08022360 <__errno>:
 8022360:	4b01      	ldr	r3, [pc, #4]	@ (8022368 <__errno+0x8>)
 8022362:	6818      	ldr	r0, [r3, #0]
 8022364:	4770      	bx	lr
 8022366:	bf00      	nop
 8022368:	20000084 	.word	0x20000084

0802236c <__libc_init_array>:
 802236c:	b570      	push	{r4, r5, r6, lr}
 802236e:	4d0d      	ldr	r5, [pc, #52]	@ (80223a4 <__libc_init_array+0x38>)
 8022370:	4c0d      	ldr	r4, [pc, #52]	@ (80223a8 <__libc_init_array+0x3c>)
 8022372:	1b64      	subs	r4, r4, r5
 8022374:	10a4      	asrs	r4, r4, #2
 8022376:	2600      	movs	r6, #0
 8022378:	42a6      	cmp	r6, r4
 802237a:	d109      	bne.n	8022390 <__libc_init_array+0x24>
 802237c:	4d0b      	ldr	r5, [pc, #44]	@ (80223ac <__libc_init_array+0x40>)
 802237e:	4c0c      	ldr	r4, [pc, #48]	@ (80223b0 <__libc_init_array+0x44>)
 8022380:	f001 fdb6 	bl	8023ef0 <_init>
 8022384:	1b64      	subs	r4, r4, r5
 8022386:	10a4      	asrs	r4, r4, #2
 8022388:	2600      	movs	r6, #0
 802238a:	42a6      	cmp	r6, r4
 802238c:	d105      	bne.n	802239a <__libc_init_array+0x2e>
 802238e:	bd70      	pop	{r4, r5, r6, pc}
 8022390:	f855 3b04 	ldr.w	r3, [r5], #4
 8022394:	4798      	blx	r3
 8022396:	3601      	adds	r6, #1
 8022398:	e7ee      	b.n	8022378 <__libc_init_array+0xc>
 802239a:	f855 3b04 	ldr.w	r3, [r5], #4
 802239e:	4798      	blx	r3
 80223a0:	3601      	adds	r6, #1
 80223a2:	e7f2      	b.n	802238a <__libc_init_array+0x1e>
 80223a4:	08027194 	.word	0x08027194
 80223a8:	08027194 	.word	0x08027194
 80223ac:	08027194 	.word	0x08027194
 80223b0:	08027198 	.word	0x08027198

080223b4 <__retarget_lock_init_recursive>:
 80223b4:	4770      	bx	lr

080223b6 <__retarget_lock_acquire_recursive>:
 80223b6:	4770      	bx	lr

080223b8 <__retarget_lock_release_recursive>:
 80223b8:	4770      	bx	lr

080223ba <memcpy>:
 80223ba:	440a      	add	r2, r1
 80223bc:	4291      	cmp	r1, r2
 80223be:	f100 33ff 	add.w	r3, r0, #4294967295
 80223c2:	d100      	bne.n	80223c6 <memcpy+0xc>
 80223c4:	4770      	bx	lr
 80223c6:	b510      	push	{r4, lr}
 80223c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80223cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80223d0:	4291      	cmp	r1, r2
 80223d2:	d1f9      	bne.n	80223c8 <memcpy+0xe>
 80223d4:	bd10      	pop	{r4, pc}

080223d6 <quorem>:
 80223d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223da:	6903      	ldr	r3, [r0, #16]
 80223dc:	690c      	ldr	r4, [r1, #16]
 80223de:	42a3      	cmp	r3, r4
 80223e0:	4607      	mov	r7, r0
 80223e2:	db7e      	blt.n	80224e2 <quorem+0x10c>
 80223e4:	3c01      	subs	r4, #1
 80223e6:	f101 0814 	add.w	r8, r1, #20
 80223ea:	00a3      	lsls	r3, r4, #2
 80223ec:	f100 0514 	add.w	r5, r0, #20
 80223f0:	9300      	str	r3, [sp, #0]
 80223f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80223f6:	9301      	str	r3, [sp, #4]
 80223f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80223fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022400:	3301      	adds	r3, #1
 8022402:	429a      	cmp	r2, r3
 8022404:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022408:	fbb2 f6f3 	udiv	r6, r2, r3
 802240c:	d32e      	bcc.n	802246c <quorem+0x96>
 802240e:	f04f 0a00 	mov.w	sl, #0
 8022412:	46c4      	mov	ip, r8
 8022414:	46ae      	mov	lr, r5
 8022416:	46d3      	mov	fp, sl
 8022418:	f85c 3b04 	ldr.w	r3, [ip], #4
 802241c:	b298      	uxth	r0, r3
 802241e:	fb06 a000 	mla	r0, r6, r0, sl
 8022422:	0c02      	lsrs	r2, r0, #16
 8022424:	0c1b      	lsrs	r3, r3, #16
 8022426:	fb06 2303 	mla	r3, r6, r3, r2
 802242a:	f8de 2000 	ldr.w	r2, [lr]
 802242e:	b280      	uxth	r0, r0
 8022430:	b292      	uxth	r2, r2
 8022432:	1a12      	subs	r2, r2, r0
 8022434:	445a      	add	r2, fp
 8022436:	f8de 0000 	ldr.w	r0, [lr]
 802243a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802243e:	b29b      	uxth	r3, r3
 8022440:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8022444:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8022448:	b292      	uxth	r2, r2
 802244a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802244e:	45e1      	cmp	r9, ip
 8022450:	f84e 2b04 	str.w	r2, [lr], #4
 8022454:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8022458:	d2de      	bcs.n	8022418 <quorem+0x42>
 802245a:	9b00      	ldr	r3, [sp, #0]
 802245c:	58eb      	ldr	r3, [r5, r3]
 802245e:	b92b      	cbnz	r3, 802246c <quorem+0x96>
 8022460:	9b01      	ldr	r3, [sp, #4]
 8022462:	3b04      	subs	r3, #4
 8022464:	429d      	cmp	r5, r3
 8022466:	461a      	mov	r2, r3
 8022468:	d32f      	bcc.n	80224ca <quorem+0xf4>
 802246a:	613c      	str	r4, [r7, #16]
 802246c:	4638      	mov	r0, r7
 802246e:	f001 f97d 	bl	802376c <__mcmp>
 8022472:	2800      	cmp	r0, #0
 8022474:	db25      	blt.n	80224c2 <quorem+0xec>
 8022476:	4629      	mov	r1, r5
 8022478:	2000      	movs	r0, #0
 802247a:	f858 2b04 	ldr.w	r2, [r8], #4
 802247e:	f8d1 c000 	ldr.w	ip, [r1]
 8022482:	fa1f fe82 	uxth.w	lr, r2
 8022486:	fa1f f38c 	uxth.w	r3, ip
 802248a:	eba3 030e 	sub.w	r3, r3, lr
 802248e:	4403      	add	r3, r0
 8022490:	0c12      	lsrs	r2, r2, #16
 8022492:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8022496:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802249a:	b29b      	uxth	r3, r3
 802249c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80224a0:	45c1      	cmp	r9, r8
 80224a2:	f841 3b04 	str.w	r3, [r1], #4
 80224a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80224aa:	d2e6      	bcs.n	802247a <quorem+0xa4>
 80224ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80224b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80224b4:	b922      	cbnz	r2, 80224c0 <quorem+0xea>
 80224b6:	3b04      	subs	r3, #4
 80224b8:	429d      	cmp	r5, r3
 80224ba:	461a      	mov	r2, r3
 80224bc:	d30b      	bcc.n	80224d6 <quorem+0x100>
 80224be:	613c      	str	r4, [r7, #16]
 80224c0:	3601      	adds	r6, #1
 80224c2:	4630      	mov	r0, r6
 80224c4:	b003      	add	sp, #12
 80224c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224ca:	6812      	ldr	r2, [r2, #0]
 80224cc:	3b04      	subs	r3, #4
 80224ce:	2a00      	cmp	r2, #0
 80224d0:	d1cb      	bne.n	802246a <quorem+0x94>
 80224d2:	3c01      	subs	r4, #1
 80224d4:	e7c6      	b.n	8022464 <quorem+0x8e>
 80224d6:	6812      	ldr	r2, [r2, #0]
 80224d8:	3b04      	subs	r3, #4
 80224da:	2a00      	cmp	r2, #0
 80224dc:	d1ef      	bne.n	80224be <quorem+0xe8>
 80224de:	3c01      	subs	r4, #1
 80224e0:	e7ea      	b.n	80224b8 <quorem+0xe2>
 80224e2:	2000      	movs	r0, #0
 80224e4:	e7ee      	b.n	80224c4 <quorem+0xee>
	...

080224e8 <_dtoa_r>:
 80224e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224ec:	69c7      	ldr	r7, [r0, #28]
 80224ee:	b097      	sub	sp, #92	@ 0x5c
 80224f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80224f4:	ec55 4b10 	vmov	r4, r5, d0
 80224f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80224fa:	9107      	str	r1, [sp, #28]
 80224fc:	4681      	mov	r9, r0
 80224fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8022500:	9311      	str	r3, [sp, #68]	@ 0x44
 8022502:	b97f      	cbnz	r7, 8022524 <_dtoa_r+0x3c>
 8022504:	2010      	movs	r0, #16
 8022506:	f000 fe09 	bl	802311c <malloc>
 802250a:	4602      	mov	r2, r0
 802250c:	f8c9 001c 	str.w	r0, [r9, #28]
 8022510:	b920      	cbnz	r0, 802251c <_dtoa_r+0x34>
 8022512:	4ba9      	ldr	r3, [pc, #676]	@ (80227b8 <_dtoa_r+0x2d0>)
 8022514:	21ef      	movs	r1, #239	@ 0xef
 8022516:	48a9      	ldr	r0, [pc, #676]	@ (80227bc <_dtoa_r+0x2d4>)
 8022518:	f001 fc3a 	bl	8023d90 <__assert_func>
 802251c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8022520:	6007      	str	r7, [r0, #0]
 8022522:	60c7      	str	r7, [r0, #12]
 8022524:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022528:	6819      	ldr	r1, [r3, #0]
 802252a:	b159      	cbz	r1, 8022544 <_dtoa_r+0x5c>
 802252c:	685a      	ldr	r2, [r3, #4]
 802252e:	604a      	str	r2, [r1, #4]
 8022530:	2301      	movs	r3, #1
 8022532:	4093      	lsls	r3, r2
 8022534:	608b      	str	r3, [r1, #8]
 8022536:	4648      	mov	r0, r9
 8022538:	f000 fee6 	bl	8023308 <_Bfree>
 802253c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022540:	2200      	movs	r2, #0
 8022542:	601a      	str	r2, [r3, #0]
 8022544:	1e2b      	subs	r3, r5, #0
 8022546:	bfb9      	ittee	lt
 8022548:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802254c:	9305      	strlt	r3, [sp, #20]
 802254e:	2300      	movge	r3, #0
 8022550:	6033      	strge	r3, [r6, #0]
 8022552:	9f05      	ldr	r7, [sp, #20]
 8022554:	4b9a      	ldr	r3, [pc, #616]	@ (80227c0 <_dtoa_r+0x2d8>)
 8022556:	bfbc      	itt	lt
 8022558:	2201      	movlt	r2, #1
 802255a:	6032      	strlt	r2, [r6, #0]
 802255c:	43bb      	bics	r3, r7
 802255e:	d112      	bne.n	8022586 <_dtoa_r+0x9e>
 8022560:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022562:	f242 730f 	movw	r3, #9999	@ 0x270f
 8022566:	6013      	str	r3, [r2, #0]
 8022568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802256c:	4323      	orrs	r3, r4
 802256e:	f000 855a 	beq.w	8023026 <_dtoa_r+0xb3e>
 8022572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022574:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80227d4 <_dtoa_r+0x2ec>
 8022578:	2b00      	cmp	r3, #0
 802257a:	f000 855c 	beq.w	8023036 <_dtoa_r+0xb4e>
 802257e:	f10a 0303 	add.w	r3, sl, #3
 8022582:	f000 bd56 	b.w	8023032 <_dtoa_r+0xb4a>
 8022586:	ed9d 7b04 	vldr	d7, [sp, #16]
 802258a:	2200      	movs	r2, #0
 802258c:	ec51 0b17 	vmov	r0, r1, d7
 8022590:	2300      	movs	r3, #0
 8022592:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8022596:	f7de fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 802259a:	4680      	mov	r8, r0
 802259c:	b158      	cbz	r0, 80225b6 <_dtoa_r+0xce>
 802259e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80225a0:	2301      	movs	r3, #1
 80225a2:	6013      	str	r3, [r2, #0]
 80225a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80225a6:	b113      	cbz	r3, 80225ae <_dtoa_r+0xc6>
 80225a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80225aa:	4b86      	ldr	r3, [pc, #536]	@ (80227c4 <_dtoa_r+0x2dc>)
 80225ac:	6013      	str	r3, [r2, #0]
 80225ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80227d8 <_dtoa_r+0x2f0>
 80225b2:	f000 bd40 	b.w	8023036 <_dtoa_r+0xb4e>
 80225b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80225ba:	aa14      	add	r2, sp, #80	@ 0x50
 80225bc:	a915      	add	r1, sp, #84	@ 0x54
 80225be:	4648      	mov	r0, r9
 80225c0:	f001 f984 	bl	80238cc <__d2b>
 80225c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80225c8:	9002      	str	r0, [sp, #8]
 80225ca:	2e00      	cmp	r6, #0
 80225cc:	d078      	beq.n	80226c0 <_dtoa_r+0x1d8>
 80225ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80225d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80225d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80225d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80225dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80225e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80225e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80225e8:	4619      	mov	r1, r3
 80225ea:	2200      	movs	r2, #0
 80225ec:	4b76      	ldr	r3, [pc, #472]	@ (80227c8 <_dtoa_r+0x2e0>)
 80225ee:	f7dd fe4b 	bl	8000288 <__aeabi_dsub>
 80225f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80227a0 <_dtoa_r+0x2b8>)
 80225f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225f8:	f7dd fffe 	bl	80005f8 <__aeabi_dmul>
 80225fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80227a8 <_dtoa_r+0x2c0>)
 80225fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022602:	f7dd fe43 	bl	800028c <__adddf3>
 8022606:	4604      	mov	r4, r0
 8022608:	4630      	mov	r0, r6
 802260a:	460d      	mov	r5, r1
 802260c:	f7dd ff8a 	bl	8000524 <__aeabi_i2d>
 8022610:	a367      	add	r3, pc, #412	@ (adr r3, 80227b0 <_dtoa_r+0x2c8>)
 8022612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022616:	f7dd ffef 	bl	80005f8 <__aeabi_dmul>
 802261a:	4602      	mov	r2, r0
 802261c:	460b      	mov	r3, r1
 802261e:	4620      	mov	r0, r4
 8022620:	4629      	mov	r1, r5
 8022622:	f7dd fe33 	bl	800028c <__adddf3>
 8022626:	4604      	mov	r4, r0
 8022628:	460d      	mov	r5, r1
 802262a:	f7de fa95 	bl	8000b58 <__aeabi_d2iz>
 802262e:	2200      	movs	r2, #0
 8022630:	4607      	mov	r7, r0
 8022632:	2300      	movs	r3, #0
 8022634:	4620      	mov	r0, r4
 8022636:	4629      	mov	r1, r5
 8022638:	f7de fa50 	bl	8000adc <__aeabi_dcmplt>
 802263c:	b140      	cbz	r0, 8022650 <_dtoa_r+0x168>
 802263e:	4638      	mov	r0, r7
 8022640:	f7dd ff70 	bl	8000524 <__aeabi_i2d>
 8022644:	4622      	mov	r2, r4
 8022646:	462b      	mov	r3, r5
 8022648:	f7de fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 802264c:	b900      	cbnz	r0, 8022650 <_dtoa_r+0x168>
 802264e:	3f01      	subs	r7, #1
 8022650:	2f16      	cmp	r7, #22
 8022652:	d852      	bhi.n	80226fa <_dtoa_r+0x212>
 8022654:	4b5d      	ldr	r3, [pc, #372]	@ (80227cc <_dtoa_r+0x2e4>)
 8022656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802265e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8022662:	f7de fa3b 	bl	8000adc <__aeabi_dcmplt>
 8022666:	2800      	cmp	r0, #0
 8022668:	d049      	beq.n	80226fe <_dtoa_r+0x216>
 802266a:	3f01      	subs	r7, #1
 802266c:	2300      	movs	r3, #0
 802266e:	9310      	str	r3, [sp, #64]	@ 0x40
 8022670:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022672:	1b9b      	subs	r3, r3, r6
 8022674:	1e5a      	subs	r2, r3, #1
 8022676:	bf45      	ittet	mi
 8022678:	f1c3 0301 	rsbmi	r3, r3, #1
 802267c:	9300      	strmi	r3, [sp, #0]
 802267e:	2300      	movpl	r3, #0
 8022680:	2300      	movmi	r3, #0
 8022682:	9206      	str	r2, [sp, #24]
 8022684:	bf54      	ite	pl
 8022686:	9300      	strpl	r3, [sp, #0]
 8022688:	9306      	strmi	r3, [sp, #24]
 802268a:	2f00      	cmp	r7, #0
 802268c:	db39      	blt.n	8022702 <_dtoa_r+0x21a>
 802268e:	9b06      	ldr	r3, [sp, #24]
 8022690:	970d      	str	r7, [sp, #52]	@ 0x34
 8022692:	443b      	add	r3, r7
 8022694:	9306      	str	r3, [sp, #24]
 8022696:	2300      	movs	r3, #0
 8022698:	9308      	str	r3, [sp, #32]
 802269a:	9b07      	ldr	r3, [sp, #28]
 802269c:	2b09      	cmp	r3, #9
 802269e:	d863      	bhi.n	8022768 <_dtoa_r+0x280>
 80226a0:	2b05      	cmp	r3, #5
 80226a2:	bfc4      	itt	gt
 80226a4:	3b04      	subgt	r3, #4
 80226a6:	9307      	strgt	r3, [sp, #28]
 80226a8:	9b07      	ldr	r3, [sp, #28]
 80226aa:	f1a3 0302 	sub.w	r3, r3, #2
 80226ae:	bfcc      	ite	gt
 80226b0:	2400      	movgt	r4, #0
 80226b2:	2401      	movle	r4, #1
 80226b4:	2b03      	cmp	r3, #3
 80226b6:	d863      	bhi.n	8022780 <_dtoa_r+0x298>
 80226b8:	e8df f003 	tbb	[pc, r3]
 80226bc:	2b375452 	.word	0x2b375452
 80226c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80226c4:	441e      	add	r6, r3
 80226c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80226ca:	2b20      	cmp	r3, #32
 80226cc:	bfc1      	itttt	gt
 80226ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80226d2:	409f      	lslgt	r7, r3
 80226d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80226d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80226dc:	bfd6      	itet	le
 80226de:	f1c3 0320 	rsble	r3, r3, #32
 80226e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80226e6:	fa04 f003 	lslle.w	r0, r4, r3
 80226ea:	f7dd ff0b 	bl	8000504 <__aeabi_ui2d>
 80226ee:	2201      	movs	r2, #1
 80226f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80226f4:	3e01      	subs	r6, #1
 80226f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80226f8:	e776      	b.n	80225e8 <_dtoa_r+0x100>
 80226fa:	2301      	movs	r3, #1
 80226fc:	e7b7      	b.n	802266e <_dtoa_r+0x186>
 80226fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8022700:	e7b6      	b.n	8022670 <_dtoa_r+0x188>
 8022702:	9b00      	ldr	r3, [sp, #0]
 8022704:	1bdb      	subs	r3, r3, r7
 8022706:	9300      	str	r3, [sp, #0]
 8022708:	427b      	negs	r3, r7
 802270a:	9308      	str	r3, [sp, #32]
 802270c:	2300      	movs	r3, #0
 802270e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022710:	e7c3      	b.n	802269a <_dtoa_r+0x1b2>
 8022712:	2301      	movs	r3, #1
 8022714:	9309      	str	r3, [sp, #36]	@ 0x24
 8022716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022718:	eb07 0b03 	add.w	fp, r7, r3
 802271c:	f10b 0301 	add.w	r3, fp, #1
 8022720:	2b01      	cmp	r3, #1
 8022722:	9303      	str	r3, [sp, #12]
 8022724:	bfb8      	it	lt
 8022726:	2301      	movlt	r3, #1
 8022728:	e006      	b.n	8022738 <_dtoa_r+0x250>
 802272a:	2301      	movs	r3, #1
 802272c:	9309      	str	r3, [sp, #36]	@ 0x24
 802272e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022730:	2b00      	cmp	r3, #0
 8022732:	dd28      	ble.n	8022786 <_dtoa_r+0x29e>
 8022734:	469b      	mov	fp, r3
 8022736:	9303      	str	r3, [sp, #12]
 8022738:	f8d9 001c 	ldr.w	r0, [r9, #28]
 802273c:	2100      	movs	r1, #0
 802273e:	2204      	movs	r2, #4
 8022740:	f102 0514 	add.w	r5, r2, #20
 8022744:	429d      	cmp	r5, r3
 8022746:	d926      	bls.n	8022796 <_dtoa_r+0x2ae>
 8022748:	6041      	str	r1, [r0, #4]
 802274a:	4648      	mov	r0, r9
 802274c:	f000 fd9c 	bl	8023288 <_Balloc>
 8022750:	4682      	mov	sl, r0
 8022752:	2800      	cmp	r0, #0
 8022754:	d142      	bne.n	80227dc <_dtoa_r+0x2f4>
 8022756:	4b1e      	ldr	r3, [pc, #120]	@ (80227d0 <_dtoa_r+0x2e8>)
 8022758:	4602      	mov	r2, r0
 802275a:	f240 11af 	movw	r1, #431	@ 0x1af
 802275e:	e6da      	b.n	8022516 <_dtoa_r+0x2e>
 8022760:	2300      	movs	r3, #0
 8022762:	e7e3      	b.n	802272c <_dtoa_r+0x244>
 8022764:	2300      	movs	r3, #0
 8022766:	e7d5      	b.n	8022714 <_dtoa_r+0x22c>
 8022768:	2401      	movs	r4, #1
 802276a:	2300      	movs	r3, #0
 802276c:	9307      	str	r3, [sp, #28]
 802276e:	9409      	str	r4, [sp, #36]	@ 0x24
 8022770:	f04f 3bff 	mov.w	fp, #4294967295
 8022774:	2200      	movs	r2, #0
 8022776:	f8cd b00c 	str.w	fp, [sp, #12]
 802277a:	2312      	movs	r3, #18
 802277c:	920c      	str	r2, [sp, #48]	@ 0x30
 802277e:	e7db      	b.n	8022738 <_dtoa_r+0x250>
 8022780:	2301      	movs	r3, #1
 8022782:	9309      	str	r3, [sp, #36]	@ 0x24
 8022784:	e7f4      	b.n	8022770 <_dtoa_r+0x288>
 8022786:	f04f 0b01 	mov.w	fp, #1
 802278a:	f8cd b00c 	str.w	fp, [sp, #12]
 802278e:	465b      	mov	r3, fp
 8022790:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8022794:	e7d0      	b.n	8022738 <_dtoa_r+0x250>
 8022796:	3101      	adds	r1, #1
 8022798:	0052      	lsls	r2, r2, #1
 802279a:	e7d1      	b.n	8022740 <_dtoa_r+0x258>
 802279c:	f3af 8000 	nop.w
 80227a0:	636f4361 	.word	0x636f4361
 80227a4:	3fd287a7 	.word	0x3fd287a7
 80227a8:	8b60c8b3 	.word	0x8b60c8b3
 80227ac:	3fc68a28 	.word	0x3fc68a28
 80227b0:	509f79fb 	.word	0x509f79fb
 80227b4:	3fd34413 	.word	0x3fd34413
 80227b8:	08026e55 	.word	0x08026e55
 80227bc:	08026e6c 	.word	0x08026e6c
 80227c0:	7ff00000 	.word	0x7ff00000
 80227c4:	08026e25 	.word	0x08026e25
 80227c8:	3ff80000 	.word	0x3ff80000
 80227cc:	08026fc0 	.word	0x08026fc0
 80227d0:	08026ec4 	.word	0x08026ec4
 80227d4:	08026e51 	.word	0x08026e51
 80227d8:	08026e24 	.word	0x08026e24
 80227dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80227e0:	6018      	str	r0, [r3, #0]
 80227e2:	9b03      	ldr	r3, [sp, #12]
 80227e4:	2b0e      	cmp	r3, #14
 80227e6:	f200 80a1 	bhi.w	802292c <_dtoa_r+0x444>
 80227ea:	2c00      	cmp	r4, #0
 80227ec:	f000 809e 	beq.w	802292c <_dtoa_r+0x444>
 80227f0:	2f00      	cmp	r7, #0
 80227f2:	dd33      	ble.n	802285c <_dtoa_r+0x374>
 80227f4:	4b9c      	ldr	r3, [pc, #624]	@ (8022a68 <_dtoa_r+0x580>)
 80227f6:	f007 020f 	and.w	r2, r7, #15
 80227fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80227fe:	ed93 7b00 	vldr	d7, [r3]
 8022802:	05f8      	lsls	r0, r7, #23
 8022804:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8022808:	ea4f 1427 	mov.w	r4, r7, asr #4
 802280c:	d516      	bpl.n	802283c <_dtoa_r+0x354>
 802280e:	4b97      	ldr	r3, [pc, #604]	@ (8022a6c <_dtoa_r+0x584>)
 8022810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8022814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022818:	f7de f818 	bl	800084c <__aeabi_ddiv>
 802281c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022820:	f004 040f 	and.w	r4, r4, #15
 8022824:	2603      	movs	r6, #3
 8022826:	4d91      	ldr	r5, [pc, #580]	@ (8022a6c <_dtoa_r+0x584>)
 8022828:	b954      	cbnz	r4, 8022840 <_dtoa_r+0x358>
 802282a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802282e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022832:	f7de f80b 	bl	800084c <__aeabi_ddiv>
 8022836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802283a:	e028      	b.n	802288e <_dtoa_r+0x3a6>
 802283c:	2602      	movs	r6, #2
 802283e:	e7f2      	b.n	8022826 <_dtoa_r+0x33e>
 8022840:	07e1      	lsls	r1, r4, #31
 8022842:	d508      	bpl.n	8022856 <_dtoa_r+0x36e>
 8022844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8022848:	e9d5 2300 	ldrd	r2, r3, [r5]
 802284c:	f7dd fed4 	bl	80005f8 <__aeabi_dmul>
 8022850:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8022854:	3601      	adds	r6, #1
 8022856:	1064      	asrs	r4, r4, #1
 8022858:	3508      	adds	r5, #8
 802285a:	e7e5      	b.n	8022828 <_dtoa_r+0x340>
 802285c:	f000 80af 	beq.w	80229be <_dtoa_r+0x4d6>
 8022860:	427c      	negs	r4, r7
 8022862:	4b81      	ldr	r3, [pc, #516]	@ (8022a68 <_dtoa_r+0x580>)
 8022864:	4d81      	ldr	r5, [pc, #516]	@ (8022a6c <_dtoa_r+0x584>)
 8022866:	f004 020f 	and.w	r2, r4, #15
 802286a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022872:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8022876:	f7dd febf 	bl	80005f8 <__aeabi_dmul>
 802287a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802287e:	1124      	asrs	r4, r4, #4
 8022880:	2300      	movs	r3, #0
 8022882:	2602      	movs	r6, #2
 8022884:	2c00      	cmp	r4, #0
 8022886:	f040 808f 	bne.w	80229a8 <_dtoa_r+0x4c0>
 802288a:	2b00      	cmp	r3, #0
 802288c:	d1d3      	bne.n	8022836 <_dtoa_r+0x34e>
 802288e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022890:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8022894:	2b00      	cmp	r3, #0
 8022896:	f000 8094 	beq.w	80229c2 <_dtoa_r+0x4da>
 802289a:	4b75      	ldr	r3, [pc, #468]	@ (8022a70 <_dtoa_r+0x588>)
 802289c:	2200      	movs	r2, #0
 802289e:	4620      	mov	r0, r4
 80228a0:	4629      	mov	r1, r5
 80228a2:	f7de f91b 	bl	8000adc <__aeabi_dcmplt>
 80228a6:	2800      	cmp	r0, #0
 80228a8:	f000 808b 	beq.w	80229c2 <_dtoa_r+0x4da>
 80228ac:	9b03      	ldr	r3, [sp, #12]
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	f000 8087 	beq.w	80229c2 <_dtoa_r+0x4da>
 80228b4:	f1bb 0f00 	cmp.w	fp, #0
 80228b8:	dd34      	ble.n	8022924 <_dtoa_r+0x43c>
 80228ba:	4620      	mov	r0, r4
 80228bc:	4b6d      	ldr	r3, [pc, #436]	@ (8022a74 <_dtoa_r+0x58c>)
 80228be:	2200      	movs	r2, #0
 80228c0:	4629      	mov	r1, r5
 80228c2:	f7dd fe99 	bl	80005f8 <__aeabi_dmul>
 80228c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80228ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80228ce:	3601      	adds	r6, #1
 80228d0:	465c      	mov	r4, fp
 80228d2:	4630      	mov	r0, r6
 80228d4:	f7dd fe26 	bl	8000524 <__aeabi_i2d>
 80228d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80228dc:	f7dd fe8c 	bl	80005f8 <__aeabi_dmul>
 80228e0:	4b65      	ldr	r3, [pc, #404]	@ (8022a78 <_dtoa_r+0x590>)
 80228e2:	2200      	movs	r2, #0
 80228e4:	f7dd fcd2 	bl	800028c <__adddf3>
 80228e8:	4605      	mov	r5, r0
 80228ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80228ee:	2c00      	cmp	r4, #0
 80228f0:	d16a      	bne.n	80229c8 <_dtoa_r+0x4e0>
 80228f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80228f6:	4b61      	ldr	r3, [pc, #388]	@ (8022a7c <_dtoa_r+0x594>)
 80228f8:	2200      	movs	r2, #0
 80228fa:	f7dd fcc5 	bl	8000288 <__aeabi_dsub>
 80228fe:	4602      	mov	r2, r0
 8022900:	460b      	mov	r3, r1
 8022902:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022906:	462a      	mov	r2, r5
 8022908:	4633      	mov	r3, r6
 802290a:	f7de f905 	bl	8000b18 <__aeabi_dcmpgt>
 802290e:	2800      	cmp	r0, #0
 8022910:	f040 8298 	bne.w	8022e44 <_dtoa_r+0x95c>
 8022914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022918:	462a      	mov	r2, r5
 802291a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802291e:	f7de f8dd 	bl	8000adc <__aeabi_dcmplt>
 8022922:	bb38      	cbnz	r0, 8022974 <_dtoa_r+0x48c>
 8022924:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8022928:	e9cd 3404 	strd	r3, r4, [sp, #16]
 802292c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802292e:	2b00      	cmp	r3, #0
 8022930:	f2c0 8157 	blt.w	8022be2 <_dtoa_r+0x6fa>
 8022934:	2f0e      	cmp	r7, #14
 8022936:	f300 8154 	bgt.w	8022be2 <_dtoa_r+0x6fa>
 802293a:	4b4b      	ldr	r3, [pc, #300]	@ (8022a68 <_dtoa_r+0x580>)
 802293c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022940:	ed93 7b00 	vldr	d7, [r3]
 8022944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022946:	2b00      	cmp	r3, #0
 8022948:	ed8d 7b00 	vstr	d7, [sp]
 802294c:	f280 80e5 	bge.w	8022b1a <_dtoa_r+0x632>
 8022950:	9b03      	ldr	r3, [sp, #12]
 8022952:	2b00      	cmp	r3, #0
 8022954:	f300 80e1 	bgt.w	8022b1a <_dtoa_r+0x632>
 8022958:	d10c      	bne.n	8022974 <_dtoa_r+0x48c>
 802295a:	4b48      	ldr	r3, [pc, #288]	@ (8022a7c <_dtoa_r+0x594>)
 802295c:	2200      	movs	r2, #0
 802295e:	ec51 0b17 	vmov	r0, r1, d7
 8022962:	f7dd fe49 	bl	80005f8 <__aeabi_dmul>
 8022966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802296a:	f7de f8cb 	bl	8000b04 <__aeabi_dcmpge>
 802296e:	2800      	cmp	r0, #0
 8022970:	f000 8266 	beq.w	8022e40 <_dtoa_r+0x958>
 8022974:	2400      	movs	r4, #0
 8022976:	4625      	mov	r5, r4
 8022978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802297a:	4656      	mov	r6, sl
 802297c:	ea6f 0803 	mvn.w	r8, r3
 8022980:	2700      	movs	r7, #0
 8022982:	4621      	mov	r1, r4
 8022984:	4648      	mov	r0, r9
 8022986:	f000 fcbf 	bl	8023308 <_Bfree>
 802298a:	2d00      	cmp	r5, #0
 802298c:	f000 80bd 	beq.w	8022b0a <_dtoa_r+0x622>
 8022990:	b12f      	cbz	r7, 802299e <_dtoa_r+0x4b6>
 8022992:	42af      	cmp	r7, r5
 8022994:	d003      	beq.n	802299e <_dtoa_r+0x4b6>
 8022996:	4639      	mov	r1, r7
 8022998:	4648      	mov	r0, r9
 802299a:	f000 fcb5 	bl	8023308 <_Bfree>
 802299e:	4629      	mov	r1, r5
 80229a0:	4648      	mov	r0, r9
 80229a2:	f000 fcb1 	bl	8023308 <_Bfree>
 80229a6:	e0b0      	b.n	8022b0a <_dtoa_r+0x622>
 80229a8:	07e2      	lsls	r2, r4, #31
 80229aa:	d505      	bpl.n	80229b8 <_dtoa_r+0x4d0>
 80229ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80229b0:	f7dd fe22 	bl	80005f8 <__aeabi_dmul>
 80229b4:	3601      	adds	r6, #1
 80229b6:	2301      	movs	r3, #1
 80229b8:	1064      	asrs	r4, r4, #1
 80229ba:	3508      	adds	r5, #8
 80229bc:	e762      	b.n	8022884 <_dtoa_r+0x39c>
 80229be:	2602      	movs	r6, #2
 80229c0:	e765      	b.n	802288e <_dtoa_r+0x3a6>
 80229c2:	9c03      	ldr	r4, [sp, #12]
 80229c4:	46b8      	mov	r8, r7
 80229c6:	e784      	b.n	80228d2 <_dtoa_r+0x3ea>
 80229c8:	4b27      	ldr	r3, [pc, #156]	@ (8022a68 <_dtoa_r+0x580>)
 80229ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80229cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80229d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80229d4:	4454      	add	r4, sl
 80229d6:	2900      	cmp	r1, #0
 80229d8:	d054      	beq.n	8022a84 <_dtoa_r+0x59c>
 80229da:	4929      	ldr	r1, [pc, #164]	@ (8022a80 <_dtoa_r+0x598>)
 80229dc:	2000      	movs	r0, #0
 80229de:	f7dd ff35 	bl	800084c <__aeabi_ddiv>
 80229e2:	4633      	mov	r3, r6
 80229e4:	462a      	mov	r2, r5
 80229e6:	f7dd fc4f 	bl	8000288 <__aeabi_dsub>
 80229ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80229ee:	4656      	mov	r6, sl
 80229f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80229f4:	f7de f8b0 	bl	8000b58 <__aeabi_d2iz>
 80229f8:	4605      	mov	r5, r0
 80229fa:	f7dd fd93 	bl	8000524 <__aeabi_i2d>
 80229fe:	4602      	mov	r2, r0
 8022a00:	460b      	mov	r3, r1
 8022a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022a06:	f7dd fc3f 	bl	8000288 <__aeabi_dsub>
 8022a0a:	3530      	adds	r5, #48	@ 0x30
 8022a0c:	4602      	mov	r2, r0
 8022a0e:	460b      	mov	r3, r1
 8022a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022a14:	f806 5b01 	strb.w	r5, [r6], #1
 8022a18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8022a1c:	f7de f85e 	bl	8000adc <__aeabi_dcmplt>
 8022a20:	2800      	cmp	r0, #0
 8022a22:	d172      	bne.n	8022b0a <_dtoa_r+0x622>
 8022a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022a28:	4911      	ldr	r1, [pc, #68]	@ (8022a70 <_dtoa_r+0x588>)
 8022a2a:	2000      	movs	r0, #0
 8022a2c:	f7dd fc2c 	bl	8000288 <__aeabi_dsub>
 8022a30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8022a34:	f7de f852 	bl	8000adc <__aeabi_dcmplt>
 8022a38:	2800      	cmp	r0, #0
 8022a3a:	f040 80b4 	bne.w	8022ba6 <_dtoa_r+0x6be>
 8022a3e:	42a6      	cmp	r6, r4
 8022a40:	f43f af70 	beq.w	8022924 <_dtoa_r+0x43c>
 8022a44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8022a48:	4b0a      	ldr	r3, [pc, #40]	@ (8022a74 <_dtoa_r+0x58c>)
 8022a4a:	2200      	movs	r2, #0
 8022a4c:	f7dd fdd4 	bl	80005f8 <__aeabi_dmul>
 8022a50:	4b08      	ldr	r3, [pc, #32]	@ (8022a74 <_dtoa_r+0x58c>)
 8022a52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8022a56:	2200      	movs	r2, #0
 8022a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022a5c:	f7dd fdcc 	bl	80005f8 <__aeabi_dmul>
 8022a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022a64:	e7c4      	b.n	80229f0 <_dtoa_r+0x508>
 8022a66:	bf00      	nop
 8022a68:	08026fc0 	.word	0x08026fc0
 8022a6c:	08026f98 	.word	0x08026f98
 8022a70:	3ff00000 	.word	0x3ff00000
 8022a74:	40240000 	.word	0x40240000
 8022a78:	401c0000 	.word	0x401c0000
 8022a7c:	40140000 	.word	0x40140000
 8022a80:	3fe00000 	.word	0x3fe00000
 8022a84:	4631      	mov	r1, r6
 8022a86:	4628      	mov	r0, r5
 8022a88:	f7dd fdb6 	bl	80005f8 <__aeabi_dmul>
 8022a8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8022a90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8022a92:	4656      	mov	r6, sl
 8022a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022a98:	f7de f85e 	bl	8000b58 <__aeabi_d2iz>
 8022a9c:	4605      	mov	r5, r0
 8022a9e:	f7dd fd41 	bl	8000524 <__aeabi_i2d>
 8022aa2:	4602      	mov	r2, r0
 8022aa4:	460b      	mov	r3, r1
 8022aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022aaa:	f7dd fbed 	bl	8000288 <__aeabi_dsub>
 8022aae:	3530      	adds	r5, #48	@ 0x30
 8022ab0:	f806 5b01 	strb.w	r5, [r6], #1
 8022ab4:	4602      	mov	r2, r0
 8022ab6:	460b      	mov	r3, r1
 8022ab8:	42a6      	cmp	r6, r4
 8022aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022abe:	f04f 0200 	mov.w	r2, #0
 8022ac2:	d124      	bne.n	8022b0e <_dtoa_r+0x626>
 8022ac4:	4baf      	ldr	r3, [pc, #700]	@ (8022d84 <_dtoa_r+0x89c>)
 8022ac6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8022aca:	f7dd fbdf 	bl	800028c <__adddf3>
 8022ace:	4602      	mov	r2, r0
 8022ad0:	460b      	mov	r3, r1
 8022ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022ad6:	f7de f81f 	bl	8000b18 <__aeabi_dcmpgt>
 8022ada:	2800      	cmp	r0, #0
 8022adc:	d163      	bne.n	8022ba6 <_dtoa_r+0x6be>
 8022ade:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8022ae2:	49a8      	ldr	r1, [pc, #672]	@ (8022d84 <_dtoa_r+0x89c>)
 8022ae4:	2000      	movs	r0, #0
 8022ae6:	f7dd fbcf 	bl	8000288 <__aeabi_dsub>
 8022aea:	4602      	mov	r2, r0
 8022aec:	460b      	mov	r3, r1
 8022aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022af2:	f7dd fff3 	bl	8000adc <__aeabi_dcmplt>
 8022af6:	2800      	cmp	r0, #0
 8022af8:	f43f af14 	beq.w	8022924 <_dtoa_r+0x43c>
 8022afc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8022afe:	1e73      	subs	r3, r6, #1
 8022b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022b02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022b06:	2b30      	cmp	r3, #48	@ 0x30
 8022b08:	d0f8      	beq.n	8022afc <_dtoa_r+0x614>
 8022b0a:	4647      	mov	r7, r8
 8022b0c:	e03b      	b.n	8022b86 <_dtoa_r+0x69e>
 8022b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8022d88 <_dtoa_r+0x8a0>)
 8022b10:	f7dd fd72 	bl	80005f8 <__aeabi_dmul>
 8022b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022b18:	e7bc      	b.n	8022a94 <_dtoa_r+0x5ac>
 8022b1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8022b1e:	4656      	mov	r6, sl
 8022b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b24:	4620      	mov	r0, r4
 8022b26:	4629      	mov	r1, r5
 8022b28:	f7dd fe90 	bl	800084c <__aeabi_ddiv>
 8022b2c:	f7de f814 	bl	8000b58 <__aeabi_d2iz>
 8022b30:	4680      	mov	r8, r0
 8022b32:	f7dd fcf7 	bl	8000524 <__aeabi_i2d>
 8022b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b3a:	f7dd fd5d 	bl	80005f8 <__aeabi_dmul>
 8022b3e:	4602      	mov	r2, r0
 8022b40:	460b      	mov	r3, r1
 8022b42:	4620      	mov	r0, r4
 8022b44:	4629      	mov	r1, r5
 8022b46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8022b4a:	f7dd fb9d 	bl	8000288 <__aeabi_dsub>
 8022b4e:	f806 4b01 	strb.w	r4, [r6], #1
 8022b52:	9d03      	ldr	r5, [sp, #12]
 8022b54:	eba6 040a 	sub.w	r4, r6, sl
 8022b58:	42a5      	cmp	r5, r4
 8022b5a:	4602      	mov	r2, r0
 8022b5c:	460b      	mov	r3, r1
 8022b5e:	d133      	bne.n	8022bc8 <_dtoa_r+0x6e0>
 8022b60:	f7dd fb94 	bl	800028c <__adddf3>
 8022b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b68:	4604      	mov	r4, r0
 8022b6a:	460d      	mov	r5, r1
 8022b6c:	f7dd ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 8022b70:	b9c0      	cbnz	r0, 8022ba4 <_dtoa_r+0x6bc>
 8022b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b76:	4620      	mov	r0, r4
 8022b78:	4629      	mov	r1, r5
 8022b7a:	f7dd ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8022b7e:	b110      	cbz	r0, 8022b86 <_dtoa_r+0x69e>
 8022b80:	f018 0f01 	tst.w	r8, #1
 8022b84:	d10e      	bne.n	8022ba4 <_dtoa_r+0x6bc>
 8022b86:	9902      	ldr	r1, [sp, #8]
 8022b88:	4648      	mov	r0, r9
 8022b8a:	f000 fbbd 	bl	8023308 <_Bfree>
 8022b8e:	2300      	movs	r3, #0
 8022b90:	7033      	strb	r3, [r6, #0]
 8022b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022b94:	3701      	adds	r7, #1
 8022b96:	601f      	str	r7, [r3, #0]
 8022b98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	f000 824b 	beq.w	8023036 <_dtoa_r+0xb4e>
 8022ba0:	601e      	str	r6, [r3, #0]
 8022ba2:	e248      	b.n	8023036 <_dtoa_r+0xb4e>
 8022ba4:	46b8      	mov	r8, r7
 8022ba6:	4633      	mov	r3, r6
 8022ba8:	461e      	mov	r6, r3
 8022baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022bae:	2a39      	cmp	r2, #57	@ 0x39
 8022bb0:	d106      	bne.n	8022bc0 <_dtoa_r+0x6d8>
 8022bb2:	459a      	cmp	sl, r3
 8022bb4:	d1f8      	bne.n	8022ba8 <_dtoa_r+0x6c0>
 8022bb6:	2230      	movs	r2, #48	@ 0x30
 8022bb8:	f108 0801 	add.w	r8, r8, #1
 8022bbc:	f88a 2000 	strb.w	r2, [sl]
 8022bc0:	781a      	ldrb	r2, [r3, #0]
 8022bc2:	3201      	adds	r2, #1
 8022bc4:	701a      	strb	r2, [r3, #0]
 8022bc6:	e7a0      	b.n	8022b0a <_dtoa_r+0x622>
 8022bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8022d88 <_dtoa_r+0x8a0>)
 8022bca:	2200      	movs	r2, #0
 8022bcc:	f7dd fd14 	bl	80005f8 <__aeabi_dmul>
 8022bd0:	2200      	movs	r2, #0
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	4604      	mov	r4, r0
 8022bd6:	460d      	mov	r5, r1
 8022bd8:	f7dd ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8022bdc:	2800      	cmp	r0, #0
 8022bde:	d09f      	beq.n	8022b20 <_dtoa_r+0x638>
 8022be0:	e7d1      	b.n	8022b86 <_dtoa_r+0x69e>
 8022be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022be4:	2a00      	cmp	r2, #0
 8022be6:	f000 80ea 	beq.w	8022dbe <_dtoa_r+0x8d6>
 8022bea:	9a07      	ldr	r2, [sp, #28]
 8022bec:	2a01      	cmp	r2, #1
 8022bee:	f300 80cd 	bgt.w	8022d8c <_dtoa_r+0x8a4>
 8022bf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022bf4:	2a00      	cmp	r2, #0
 8022bf6:	f000 80c1 	beq.w	8022d7c <_dtoa_r+0x894>
 8022bfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8022bfe:	9c08      	ldr	r4, [sp, #32]
 8022c00:	9e00      	ldr	r6, [sp, #0]
 8022c02:	9a00      	ldr	r2, [sp, #0]
 8022c04:	441a      	add	r2, r3
 8022c06:	9200      	str	r2, [sp, #0]
 8022c08:	9a06      	ldr	r2, [sp, #24]
 8022c0a:	2101      	movs	r1, #1
 8022c0c:	441a      	add	r2, r3
 8022c0e:	4648      	mov	r0, r9
 8022c10:	9206      	str	r2, [sp, #24]
 8022c12:	f000 fc2d 	bl	8023470 <__i2b>
 8022c16:	4605      	mov	r5, r0
 8022c18:	b166      	cbz	r6, 8022c34 <_dtoa_r+0x74c>
 8022c1a:	9b06      	ldr	r3, [sp, #24]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	dd09      	ble.n	8022c34 <_dtoa_r+0x74c>
 8022c20:	42b3      	cmp	r3, r6
 8022c22:	9a00      	ldr	r2, [sp, #0]
 8022c24:	bfa8      	it	ge
 8022c26:	4633      	movge	r3, r6
 8022c28:	1ad2      	subs	r2, r2, r3
 8022c2a:	9200      	str	r2, [sp, #0]
 8022c2c:	9a06      	ldr	r2, [sp, #24]
 8022c2e:	1af6      	subs	r6, r6, r3
 8022c30:	1ad3      	subs	r3, r2, r3
 8022c32:	9306      	str	r3, [sp, #24]
 8022c34:	9b08      	ldr	r3, [sp, #32]
 8022c36:	b30b      	cbz	r3, 8022c7c <_dtoa_r+0x794>
 8022c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	f000 80c6 	beq.w	8022dcc <_dtoa_r+0x8e4>
 8022c40:	2c00      	cmp	r4, #0
 8022c42:	f000 80c0 	beq.w	8022dc6 <_dtoa_r+0x8de>
 8022c46:	4629      	mov	r1, r5
 8022c48:	4622      	mov	r2, r4
 8022c4a:	4648      	mov	r0, r9
 8022c4c:	f000 fcc8 	bl	80235e0 <__pow5mult>
 8022c50:	9a02      	ldr	r2, [sp, #8]
 8022c52:	4601      	mov	r1, r0
 8022c54:	4605      	mov	r5, r0
 8022c56:	4648      	mov	r0, r9
 8022c58:	f000 fc20 	bl	802349c <__multiply>
 8022c5c:	9902      	ldr	r1, [sp, #8]
 8022c5e:	4680      	mov	r8, r0
 8022c60:	4648      	mov	r0, r9
 8022c62:	f000 fb51 	bl	8023308 <_Bfree>
 8022c66:	9b08      	ldr	r3, [sp, #32]
 8022c68:	1b1b      	subs	r3, r3, r4
 8022c6a:	9308      	str	r3, [sp, #32]
 8022c6c:	f000 80b1 	beq.w	8022dd2 <_dtoa_r+0x8ea>
 8022c70:	9a08      	ldr	r2, [sp, #32]
 8022c72:	4641      	mov	r1, r8
 8022c74:	4648      	mov	r0, r9
 8022c76:	f000 fcb3 	bl	80235e0 <__pow5mult>
 8022c7a:	9002      	str	r0, [sp, #8]
 8022c7c:	2101      	movs	r1, #1
 8022c7e:	4648      	mov	r0, r9
 8022c80:	f000 fbf6 	bl	8023470 <__i2b>
 8022c84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022c86:	4604      	mov	r4, r0
 8022c88:	2b00      	cmp	r3, #0
 8022c8a:	f000 81d8 	beq.w	802303e <_dtoa_r+0xb56>
 8022c8e:	461a      	mov	r2, r3
 8022c90:	4601      	mov	r1, r0
 8022c92:	4648      	mov	r0, r9
 8022c94:	f000 fca4 	bl	80235e0 <__pow5mult>
 8022c98:	9b07      	ldr	r3, [sp, #28]
 8022c9a:	2b01      	cmp	r3, #1
 8022c9c:	4604      	mov	r4, r0
 8022c9e:	f300 809f 	bgt.w	8022de0 <_dtoa_r+0x8f8>
 8022ca2:	9b04      	ldr	r3, [sp, #16]
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	f040 8097 	bne.w	8022dd8 <_dtoa_r+0x8f0>
 8022caa:	9b05      	ldr	r3, [sp, #20]
 8022cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022cb0:	2b00      	cmp	r3, #0
 8022cb2:	f040 8093 	bne.w	8022ddc <_dtoa_r+0x8f4>
 8022cb6:	9b05      	ldr	r3, [sp, #20]
 8022cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022cbc:	0d1b      	lsrs	r3, r3, #20
 8022cbe:	051b      	lsls	r3, r3, #20
 8022cc0:	b133      	cbz	r3, 8022cd0 <_dtoa_r+0x7e8>
 8022cc2:	9b00      	ldr	r3, [sp, #0]
 8022cc4:	3301      	adds	r3, #1
 8022cc6:	9300      	str	r3, [sp, #0]
 8022cc8:	9b06      	ldr	r3, [sp, #24]
 8022cca:	3301      	adds	r3, #1
 8022ccc:	9306      	str	r3, [sp, #24]
 8022cce:	2301      	movs	r3, #1
 8022cd0:	9308      	str	r3, [sp, #32]
 8022cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	f000 81b8 	beq.w	802304a <_dtoa_r+0xb62>
 8022cda:	6923      	ldr	r3, [r4, #16]
 8022cdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022ce0:	6918      	ldr	r0, [r3, #16]
 8022ce2:	f000 fb79 	bl	80233d8 <__hi0bits>
 8022ce6:	f1c0 0020 	rsb	r0, r0, #32
 8022cea:	9b06      	ldr	r3, [sp, #24]
 8022cec:	4418      	add	r0, r3
 8022cee:	f010 001f 	ands.w	r0, r0, #31
 8022cf2:	f000 8082 	beq.w	8022dfa <_dtoa_r+0x912>
 8022cf6:	f1c0 0320 	rsb	r3, r0, #32
 8022cfa:	2b04      	cmp	r3, #4
 8022cfc:	dd73      	ble.n	8022de6 <_dtoa_r+0x8fe>
 8022cfe:	9b00      	ldr	r3, [sp, #0]
 8022d00:	f1c0 001c 	rsb	r0, r0, #28
 8022d04:	4403      	add	r3, r0
 8022d06:	9300      	str	r3, [sp, #0]
 8022d08:	9b06      	ldr	r3, [sp, #24]
 8022d0a:	4403      	add	r3, r0
 8022d0c:	4406      	add	r6, r0
 8022d0e:	9306      	str	r3, [sp, #24]
 8022d10:	9b00      	ldr	r3, [sp, #0]
 8022d12:	2b00      	cmp	r3, #0
 8022d14:	dd05      	ble.n	8022d22 <_dtoa_r+0x83a>
 8022d16:	9902      	ldr	r1, [sp, #8]
 8022d18:	461a      	mov	r2, r3
 8022d1a:	4648      	mov	r0, r9
 8022d1c:	f000 fcba 	bl	8023694 <__lshift>
 8022d20:	9002      	str	r0, [sp, #8]
 8022d22:	9b06      	ldr	r3, [sp, #24]
 8022d24:	2b00      	cmp	r3, #0
 8022d26:	dd05      	ble.n	8022d34 <_dtoa_r+0x84c>
 8022d28:	4621      	mov	r1, r4
 8022d2a:	461a      	mov	r2, r3
 8022d2c:	4648      	mov	r0, r9
 8022d2e:	f000 fcb1 	bl	8023694 <__lshift>
 8022d32:	4604      	mov	r4, r0
 8022d34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d061      	beq.n	8022dfe <_dtoa_r+0x916>
 8022d3a:	9802      	ldr	r0, [sp, #8]
 8022d3c:	4621      	mov	r1, r4
 8022d3e:	f000 fd15 	bl	802376c <__mcmp>
 8022d42:	2800      	cmp	r0, #0
 8022d44:	da5b      	bge.n	8022dfe <_dtoa_r+0x916>
 8022d46:	2300      	movs	r3, #0
 8022d48:	9902      	ldr	r1, [sp, #8]
 8022d4a:	220a      	movs	r2, #10
 8022d4c:	4648      	mov	r0, r9
 8022d4e:	f000 fafd 	bl	802334c <__multadd>
 8022d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d54:	9002      	str	r0, [sp, #8]
 8022d56:	f107 38ff 	add.w	r8, r7, #4294967295
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	f000 8177 	beq.w	802304e <_dtoa_r+0xb66>
 8022d60:	4629      	mov	r1, r5
 8022d62:	2300      	movs	r3, #0
 8022d64:	220a      	movs	r2, #10
 8022d66:	4648      	mov	r0, r9
 8022d68:	f000 faf0 	bl	802334c <__multadd>
 8022d6c:	f1bb 0f00 	cmp.w	fp, #0
 8022d70:	4605      	mov	r5, r0
 8022d72:	dc6f      	bgt.n	8022e54 <_dtoa_r+0x96c>
 8022d74:	9b07      	ldr	r3, [sp, #28]
 8022d76:	2b02      	cmp	r3, #2
 8022d78:	dc49      	bgt.n	8022e0e <_dtoa_r+0x926>
 8022d7a:	e06b      	b.n	8022e54 <_dtoa_r+0x96c>
 8022d7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8022d82:	e73c      	b.n	8022bfe <_dtoa_r+0x716>
 8022d84:	3fe00000 	.word	0x3fe00000
 8022d88:	40240000 	.word	0x40240000
 8022d8c:	9b03      	ldr	r3, [sp, #12]
 8022d8e:	1e5c      	subs	r4, r3, #1
 8022d90:	9b08      	ldr	r3, [sp, #32]
 8022d92:	42a3      	cmp	r3, r4
 8022d94:	db09      	blt.n	8022daa <_dtoa_r+0x8c2>
 8022d96:	1b1c      	subs	r4, r3, r4
 8022d98:	9b03      	ldr	r3, [sp, #12]
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	f6bf af30 	bge.w	8022c00 <_dtoa_r+0x718>
 8022da0:	9b00      	ldr	r3, [sp, #0]
 8022da2:	9a03      	ldr	r2, [sp, #12]
 8022da4:	1a9e      	subs	r6, r3, r2
 8022da6:	2300      	movs	r3, #0
 8022da8:	e72b      	b.n	8022c02 <_dtoa_r+0x71a>
 8022daa:	9b08      	ldr	r3, [sp, #32]
 8022dac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022dae:	9408      	str	r4, [sp, #32]
 8022db0:	1ae3      	subs	r3, r4, r3
 8022db2:	441a      	add	r2, r3
 8022db4:	9e00      	ldr	r6, [sp, #0]
 8022db6:	9b03      	ldr	r3, [sp, #12]
 8022db8:	920d      	str	r2, [sp, #52]	@ 0x34
 8022dba:	2400      	movs	r4, #0
 8022dbc:	e721      	b.n	8022c02 <_dtoa_r+0x71a>
 8022dbe:	9c08      	ldr	r4, [sp, #32]
 8022dc0:	9e00      	ldr	r6, [sp, #0]
 8022dc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022dc4:	e728      	b.n	8022c18 <_dtoa_r+0x730>
 8022dc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8022dca:	e751      	b.n	8022c70 <_dtoa_r+0x788>
 8022dcc:	9a08      	ldr	r2, [sp, #32]
 8022dce:	9902      	ldr	r1, [sp, #8]
 8022dd0:	e750      	b.n	8022c74 <_dtoa_r+0x78c>
 8022dd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8022dd6:	e751      	b.n	8022c7c <_dtoa_r+0x794>
 8022dd8:	2300      	movs	r3, #0
 8022dda:	e779      	b.n	8022cd0 <_dtoa_r+0x7e8>
 8022ddc:	9b04      	ldr	r3, [sp, #16]
 8022dde:	e777      	b.n	8022cd0 <_dtoa_r+0x7e8>
 8022de0:	2300      	movs	r3, #0
 8022de2:	9308      	str	r3, [sp, #32]
 8022de4:	e779      	b.n	8022cda <_dtoa_r+0x7f2>
 8022de6:	d093      	beq.n	8022d10 <_dtoa_r+0x828>
 8022de8:	9a00      	ldr	r2, [sp, #0]
 8022dea:	331c      	adds	r3, #28
 8022dec:	441a      	add	r2, r3
 8022dee:	9200      	str	r2, [sp, #0]
 8022df0:	9a06      	ldr	r2, [sp, #24]
 8022df2:	441a      	add	r2, r3
 8022df4:	441e      	add	r6, r3
 8022df6:	9206      	str	r2, [sp, #24]
 8022df8:	e78a      	b.n	8022d10 <_dtoa_r+0x828>
 8022dfa:	4603      	mov	r3, r0
 8022dfc:	e7f4      	b.n	8022de8 <_dtoa_r+0x900>
 8022dfe:	9b03      	ldr	r3, [sp, #12]
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	46b8      	mov	r8, r7
 8022e04:	dc20      	bgt.n	8022e48 <_dtoa_r+0x960>
 8022e06:	469b      	mov	fp, r3
 8022e08:	9b07      	ldr	r3, [sp, #28]
 8022e0a:	2b02      	cmp	r3, #2
 8022e0c:	dd1e      	ble.n	8022e4c <_dtoa_r+0x964>
 8022e0e:	f1bb 0f00 	cmp.w	fp, #0
 8022e12:	f47f adb1 	bne.w	8022978 <_dtoa_r+0x490>
 8022e16:	4621      	mov	r1, r4
 8022e18:	465b      	mov	r3, fp
 8022e1a:	2205      	movs	r2, #5
 8022e1c:	4648      	mov	r0, r9
 8022e1e:	f000 fa95 	bl	802334c <__multadd>
 8022e22:	4601      	mov	r1, r0
 8022e24:	4604      	mov	r4, r0
 8022e26:	9802      	ldr	r0, [sp, #8]
 8022e28:	f000 fca0 	bl	802376c <__mcmp>
 8022e2c:	2800      	cmp	r0, #0
 8022e2e:	f77f ada3 	ble.w	8022978 <_dtoa_r+0x490>
 8022e32:	4656      	mov	r6, sl
 8022e34:	2331      	movs	r3, #49	@ 0x31
 8022e36:	f806 3b01 	strb.w	r3, [r6], #1
 8022e3a:	f108 0801 	add.w	r8, r8, #1
 8022e3e:	e59f      	b.n	8022980 <_dtoa_r+0x498>
 8022e40:	9c03      	ldr	r4, [sp, #12]
 8022e42:	46b8      	mov	r8, r7
 8022e44:	4625      	mov	r5, r4
 8022e46:	e7f4      	b.n	8022e32 <_dtoa_r+0x94a>
 8022e48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	f000 8101 	beq.w	8023056 <_dtoa_r+0xb6e>
 8022e54:	2e00      	cmp	r6, #0
 8022e56:	dd05      	ble.n	8022e64 <_dtoa_r+0x97c>
 8022e58:	4629      	mov	r1, r5
 8022e5a:	4632      	mov	r2, r6
 8022e5c:	4648      	mov	r0, r9
 8022e5e:	f000 fc19 	bl	8023694 <__lshift>
 8022e62:	4605      	mov	r5, r0
 8022e64:	9b08      	ldr	r3, [sp, #32]
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	d05c      	beq.n	8022f24 <_dtoa_r+0xa3c>
 8022e6a:	6869      	ldr	r1, [r5, #4]
 8022e6c:	4648      	mov	r0, r9
 8022e6e:	f000 fa0b 	bl	8023288 <_Balloc>
 8022e72:	4606      	mov	r6, r0
 8022e74:	b928      	cbnz	r0, 8022e82 <_dtoa_r+0x99a>
 8022e76:	4b82      	ldr	r3, [pc, #520]	@ (8023080 <_dtoa_r+0xb98>)
 8022e78:	4602      	mov	r2, r0
 8022e7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8022e7e:	f7ff bb4a 	b.w	8022516 <_dtoa_r+0x2e>
 8022e82:	692a      	ldr	r2, [r5, #16]
 8022e84:	3202      	adds	r2, #2
 8022e86:	0092      	lsls	r2, r2, #2
 8022e88:	f105 010c 	add.w	r1, r5, #12
 8022e8c:	300c      	adds	r0, #12
 8022e8e:	f7ff fa94 	bl	80223ba <memcpy>
 8022e92:	2201      	movs	r2, #1
 8022e94:	4631      	mov	r1, r6
 8022e96:	4648      	mov	r0, r9
 8022e98:	f000 fbfc 	bl	8023694 <__lshift>
 8022e9c:	f10a 0301 	add.w	r3, sl, #1
 8022ea0:	9300      	str	r3, [sp, #0]
 8022ea2:	eb0a 030b 	add.w	r3, sl, fp
 8022ea6:	9308      	str	r3, [sp, #32]
 8022ea8:	9b04      	ldr	r3, [sp, #16]
 8022eaa:	f003 0301 	and.w	r3, r3, #1
 8022eae:	462f      	mov	r7, r5
 8022eb0:	9306      	str	r3, [sp, #24]
 8022eb2:	4605      	mov	r5, r0
 8022eb4:	9b00      	ldr	r3, [sp, #0]
 8022eb6:	9802      	ldr	r0, [sp, #8]
 8022eb8:	4621      	mov	r1, r4
 8022eba:	f103 3bff 	add.w	fp, r3, #4294967295
 8022ebe:	f7ff fa8a 	bl	80223d6 <quorem>
 8022ec2:	4603      	mov	r3, r0
 8022ec4:	3330      	adds	r3, #48	@ 0x30
 8022ec6:	9003      	str	r0, [sp, #12]
 8022ec8:	4639      	mov	r1, r7
 8022eca:	9802      	ldr	r0, [sp, #8]
 8022ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ece:	f000 fc4d 	bl	802376c <__mcmp>
 8022ed2:	462a      	mov	r2, r5
 8022ed4:	9004      	str	r0, [sp, #16]
 8022ed6:	4621      	mov	r1, r4
 8022ed8:	4648      	mov	r0, r9
 8022eda:	f000 fc63 	bl	80237a4 <__mdiff>
 8022ede:	68c2      	ldr	r2, [r0, #12]
 8022ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ee2:	4606      	mov	r6, r0
 8022ee4:	bb02      	cbnz	r2, 8022f28 <_dtoa_r+0xa40>
 8022ee6:	4601      	mov	r1, r0
 8022ee8:	9802      	ldr	r0, [sp, #8]
 8022eea:	f000 fc3f 	bl	802376c <__mcmp>
 8022eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ef0:	4602      	mov	r2, r0
 8022ef2:	4631      	mov	r1, r6
 8022ef4:	4648      	mov	r0, r9
 8022ef6:	920c      	str	r2, [sp, #48]	@ 0x30
 8022ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8022efa:	f000 fa05 	bl	8023308 <_Bfree>
 8022efe:	9b07      	ldr	r3, [sp, #28]
 8022f00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022f02:	9e00      	ldr	r6, [sp, #0]
 8022f04:	ea42 0103 	orr.w	r1, r2, r3
 8022f08:	9b06      	ldr	r3, [sp, #24]
 8022f0a:	4319      	orrs	r1, r3
 8022f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f0e:	d10d      	bne.n	8022f2c <_dtoa_r+0xa44>
 8022f10:	2b39      	cmp	r3, #57	@ 0x39
 8022f12:	d027      	beq.n	8022f64 <_dtoa_r+0xa7c>
 8022f14:	9a04      	ldr	r2, [sp, #16]
 8022f16:	2a00      	cmp	r2, #0
 8022f18:	dd01      	ble.n	8022f1e <_dtoa_r+0xa36>
 8022f1a:	9b03      	ldr	r3, [sp, #12]
 8022f1c:	3331      	adds	r3, #49	@ 0x31
 8022f1e:	f88b 3000 	strb.w	r3, [fp]
 8022f22:	e52e      	b.n	8022982 <_dtoa_r+0x49a>
 8022f24:	4628      	mov	r0, r5
 8022f26:	e7b9      	b.n	8022e9c <_dtoa_r+0x9b4>
 8022f28:	2201      	movs	r2, #1
 8022f2a:	e7e2      	b.n	8022ef2 <_dtoa_r+0xa0a>
 8022f2c:	9904      	ldr	r1, [sp, #16]
 8022f2e:	2900      	cmp	r1, #0
 8022f30:	db04      	blt.n	8022f3c <_dtoa_r+0xa54>
 8022f32:	9807      	ldr	r0, [sp, #28]
 8022f34:	4301      	orrs	r1, r0
 8022f36:	9806      	ldr	r0, [sp, #24]
 8022f38:	4301      	orrs	r1, r0
 8022f3a:	d120      	bne.n	8022f7e <_dtoa_r+0xa96>
 8022f3c:	2a00      	cmp	r2, #0
 8022f3e:	ddee      	ble.n	8022f1e <_dtoa_r+0xa36>
 8022f40:	9902      	ldr	r1, [sp, #8]
 8022f42:	9300      	str	r3, [sp, #0]
 8022f44:	2201      	movs	r2, #1
 8022f46:	4648      	mov	r0, r9
 8022f48:	f000 fba4 	bl	8023694 <__lshift>
 8022f4c:	4621      	mov	r1, r4
 8022f4e:	9002      	str	r0, [sp, #8]
 8022f50:	f000 fc0c 	bl	802376c <__mcmp>
 8022f54:	2800      	cmp	r0, #0
 8022f56:	9b00      	ldr	r3, [sp, #0]
 8022f58:	dc02      	bgt.n	8022f60 <_dtoa_r+0xa78>
 8022f5a:	d1e0      	bne.n	8022f1e <_dtoa_r+0xa36>
 8022f5c:	07da      	lsls	r2, r3, #31
 8022f5e:	d5de      	bpl.n	8022f1e <_dtoa_r+0xa36>
 8022f60:	2b39      	cmp	r3, #57	@ 0x39
 8022f62:	d1da      	bne.n	8022f1a <_dtoa_r+0xa32>
 8022f64:	2339      	movs	r3, #57	@ 0x39
 8022f66:	f88b 3000 	strb.w	r3, [fp]
 8022f6a:	4633      	mov	r3, r6
 8022f6c:	461e      	mov	r6, r3
 8022f6e:	3b01      	subs	r3, #1
 8022f70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8022f74:	2a39      	cmp	r2, #57	@ 0x39
 8022f76:	d04e      	beq.n	8023016 <_dtoa_r+0xb2e>
 8022f78:	3201      	adds	r2, #1
 8022f7a:	701a      	strb	r2, [r3, #0]
 8022f7c:	e501      	b.n	8022982 <_dtoa_r+0x49a>
 8022f7e:	2a00      	cmp	r2, #0
 8022f80:	dd03      	ble.n	8022f8a <_dtoa_r+0xaa2>
 8022f82:	2b39      	cmp	r3, #57	@ 0x39
 8022f84:	d0ee      	beq.n	8022f64 <_dtoa_r+0xa7c>
 8022f86:	3301      	adds	r3, #1
 8022f88:	e7c9      	b.n	8022f1e <_dtoa_r+0xa36>
 8022f8a:	9a00      	ldr	r2, [sp, #0]
 8022f8c:	9908      	ldr	r1, [sp, #32]
 8022f8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022f92:	428a      	cmp	r2, r1
 8022f94:	d028      	beq.n	8022fe8 <_dtoa_r+0xb00>
 8022f96:	9902      	ldr	r1, [sp, #8]
 8022f98:	2300      	movs	r3, #0
 8022f9a:	220a      	movs	r2, #10
 8022f9c:	4648      	mov	r0, r9
 8022f9e:	f000 f9d5 	bl	802334c <__multadd>
 8022fa2:	42af      	cmp	r7, r5
 8022fa4:	9002      	str	r0, [sp, #8]
 8022fa6:	f04f 0300 	mov.w	r3, #0
 8022faa:	f04f 020a 	mov.w	r2, #10
 8022fae:	4639      	mov	r1, r7
 8022fb0:	4648      	mov	r0, r9
 8022fb2:	d107      	bne.n	8022fc4 <_dtoa_r+0xadc>
 8022fb4:	f000 f9ca 	bl	802334c <__multadd>
 8022fb8:	4607      	mov	r7, r0
 8022fba:	4605      	mov	r5, r0
 8022fbc:	9b00      	ldr	r3, [sp, #0]
 8022fbe:	3301      	adds	r3, #1
 8022fc0:	9300      	str	r3, [sp, #0]
 8022fc2:	e777      	b.n	8022eb4 <_dtoa_r+0x9cc>
 8022fc4:	f000 f9c2 	bl	802334c <__multadd>
 8022fc8:	4629      	mov	r1, r5
 8022fca:	4607      	mov	r7, r0
 8022fcc:	2300      	movs	r3, #0
 8022fce:	220a      	movs	r2, #10
 8022fd0:	4648      	mov	r0, r9
 8022fd2:	f000 f9bb 	bl	802334c <__multadd>
 8022fd6:	4605      	mov	r5, r0
 8022fd8:	e7f0      	b.n	8022fbc <_dtoa_r+0xad4>
 8022fda:	f1bb 0f00 	cmp.w	fp, #0
 8022fde:	bfcc      	ite	gt
 8022fe0:	465e      	movgt	r6, fp
 8022fe2:	2601      	movle	r6, #1
 8022fe4:	4456      	add	r6, sl
 8022fe6:	2700      	movs	r7, #0
 8022fe8:	9902      	ldr	r1, [sp, #8]
 8022fea:	9300      	str	r3, [sp, #0]
 8022fec:	2201      	movs	r2, #1
 8022fee:	4648      	mov	r0, r9
 8022ff0:	f000 fb50 	bl	8023694 <__lshift>
 8022ff4:	4621      	mov	r1, r4
 8022ff6:	9002      	str	r0, [sp, #8]
 8022ff8:	f000 fbb8 	bl	802376c <__mcmp>
 8022ffc:	2800      	cmp	r0, #0
 8022ffe:	dcb4      	bgt.n	8022f6a <_dtoa_r+0xa82>
 8023000:	d102      	bne.n	8023008 <_dtoa_r+0xb20>
 8023002:	9b00      	ldr	r3, [sp, #0]
 8023004:	07db      	lsls	r3, r3, #31
 8023006:	d4b0      	bmi.n	8022f6a <_dtoa_r+0xa82>
 8023008:	4633      	mov	r3, r6
 802300a:	461e      	mov	r6, r3
 802300c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023010:	2a30      	cmp	r2, #48	@ 0x30
 8023012:	d0fa      	beq.n	802300a <_dtoa_r+0xb22>
 8023014:	e4b5      	b.n	8022982 <_dtoa_r+0x49a>
 8023016:	459a      	cmp	sl, r3
 8023018:	d1a8      	bne.n	8022f6c <_dtoa_r+0xa84>
 802301a:	2331      	movs	r3, #49	@ 0x31
 802301c:	f108 0801 	add.w	r8, r8, #1
 8023020:	f88a 3000 	strb.w	r3, [sl]
 8023024:	e4ad      	b.n	8022982 <_dtoa_r+0x49a>
 8023026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023028:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8023084 <_dtoa_r+0xb9c>
 802302c:	b11b      	cbz	r3, 8023036 <_dtoa_r+0xb4e>
 802302e:	f10a 0308 	add.w	r3, sl, #8
 8023032:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023034:	6013      	str	r3, [r2, #0]
 8023036:	4650      	mov	r0, sl
 8023038:	b017      	add	sp, #92	@ 0x5c
 802303a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802303e:	9b07      	ldr	r3, [sp, #28]
 8023040:	2b01      	cmp	r3, #1
 8023042:	f77f ae2e 	ble.w	8022ca2 <_dtoa_r+0x7ba>
 8023046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023048:	9308      	str	r3, [sp, #32]
 802304a:	2001      	movs	r0, #1
 802304c:	e64d      	b.n	8022cea <_dtoa_r+0x802>
 802304e:	f1bb 0f00 	cmp.w	fp, #0
 8023052:	f77f aed9 	ble.w	8022e08 <_dtoa_r+0x920>
 8023056:	4656      	mov	r6, sl
 8023058:	9802      	ldr	r0, [sp, #8]
 802305a:	4621      	mov	r1, r4
 802305c:	f7ff f9bb 	bl	80223d6 <quorem>
 8023060:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023064:	f806 3b01 	strb.w	r3, [r6], #1
 8023068:	eba6 020a 	sub.w	r2, r6, sl
 802306c:	4593      	cmp	fp, r2
 802306e:	ddb4      	ble.n	8022fda <_dtoa_r+0xaf2>
 8023070:	9902      	ldr	r1, [sp, #8]
 8023072:	2300      	movs	r3, #0
 8023074:	220a      	movs	r2, #10
 8023076:	4648      	mov	r0, r9
 8023078:	f000 f968 	bl	802334c <__multadd>
 802307c:	9002      	str	r0, [sp, #8]
 802307e:	e7eb      	b.n	8023058 <_dtoa_r+0xb70>
 8023080:	08026ec4 	.word	0x08026ec4
 8023084:	08026e48 	.word	0x08026e48

08023088 <_free_r>:
 8023088:	b538      	push	{r3, r4, r5, lr}
 802308a:	4605      	mov	r5, r0
 802308c:	2900      	cmp	r1, #0
 802308e:	d041      	beq.n	8023114 <_free_r+0x8c>
 8023090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023094:	1f0c      	subs	r4, r1, #4
 8023096:	2b00      	cmp	r3, #0
 8023098:	bfb8      	it	lt
 802309a:	18e4      	addlt	r4, r4, r3
 802309c:	f000 f8e8 	bl	8023270 <__malloc_lock>
 80230a0:	4a1d      	ldr	r2, [pc, #116]	@ (8023118 <_free_r+0x90>)
 80230a2:	6813      	ldr	r3, [r2, #0]
 80230a4:	b933      	cbnz	r3, 80230b4 <_free_r+0x2c>
 80230a6:	6063      	str	r3, [r4, #4]
 80230a8:	6014      	str	r4, [r2, #0]
 80230aa:	4628      	mov	r0, r5
 80230ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80230b0:	f000 b8e4 	b.w	802327c <__malloc_unlock>
 80230b4:	42a3      	cmp	r3, r4
 80230b6:	d908      	bls.n	80230ca <_free_r+0x42>
 80230b8:	6820      	ldr	r0, [r4, #0]
 80230ba:	1821      	adds	r1, r4, r0
 80230bc:	428b      	cmp	r3, r1
 80230be:	bf01      	itttt	eq
 80230c0:	6819      	ldreq	r1, [r3, #0]
 80230c2:	685b      	ldreq	r3, [r3, #4]
 80230c4:	1809      	addeq	r1, r1, r0
 80230c6:	6021      	streq	r1, [r4, #0]
 80230c8:	e7ed      	b.n	80230a6 <_free_r+0x1e>
 80230ca:	461a      	mov	r2, r3
 80230cc:	685b      	ldr	r3, [r3, #4]
 80230ce:	b10b      	cbz	r3, 80230d4 <_free_r+0x4c>
 80230d0:	42a3      	cmp	r3, r4
 80230d2:	d9fa      	bls.n	80230ca <_free_r+0x42>
 80230d4:	6811      	ldr	r1, [r2, #0]
 80230d6:	1850      	adds	r0, r2, r1
 80230d8:	42a0      	cmp	r0, r4
 80230da:	d10b      	bne.n	80230f4 <_free_r+0x6c>
 80230dc:	6820      	ldr	r0, [r4, #0]
 80230de:	4401      	add	r1, r0
 80230e0:	1850      	adds	r0, r2, r1
 80230e2:	4283      	cmp	r3, r0
 80230e4:	6011      	str	r1, [r2, #0]
 80230e6:	d1e0      	bne.n	80230aa <_free_r+0x22>
 80230e8:	6818      	ldr	r0, [r3, #0]
 80230ea:	685b      	ldr	r3, [r3, #4]
 80230ec:	6053      	str	r3, [r2, #4]
 80230ee:	4408      	add	r0, r1
 80230f0:	6010      	str	r0, [r2, #0]
 80230f2:	e7da      	b.n	80230aa <_free_r+0x22>
 80230f4:	d902      	bls.n	80230fc <_free_r+0x74>
 80230f6:	230c      	movs	r3, #12
 80230f8:	602b      	str	r3, [r5, #0]
 80230fa:	e7d6      	b.n	80230aa <_free_r+0x22>
 80230fc:	6820      	ldr	r0, [r4, #0]
 80230fe:	1821      	adds	r1, r4, r0
 8023100:	428b      	cmp	r3, r1
 8023102:	bf04      	itt	eq
 8023104:	6819      	ldreq	r1, [r3, #0]
 8023106:	685b      	ldreq	r3, [r3, #4]
 8023108:	6063      	str	r3, [r4, #4]
 802310a:	bf04      	itt	eq
 802310c:	1809      	addeq	r1, r1, r0
 802310e:	6021      	streq	r1, [r4, #0]
 8023110:	6054      	str	r4, [r2, #4]
 8023112:	e7ca      	b.n	80230aa <_free_r+0x22>
 8023114:	bd38      	pop	{r3, r4, r5, pc}
 8023116:	bf00      	nop
 8023118:	20001d50 	.word	0x20001d50

0802311c <malloc>:
 802311c:	4b02      	ldr	r3, [pc, #8]	@ (8023128 <malloc+0xc>)
 802311e:	4601      	mov	r1, r0
 8023120:	6818      	ldr	r0, [r3, #0]
 8023122:	f000 b825 	b.w	8023170 <_malloc_r>
 8023126:	bf00      	nop
 8023128:	20000084 	.word	0x20000084

0802312c <sbrk_aligned>:
 802312c:	b570      	push	{r4, r5, r6, lr}
 802312e:	4e0f      	ldr	r6, [pc, #60]	@ (802316c <sbrk_aligned+0x40>)
 8023130:	460c      	mov	r4, r1
 8023132:	6831      	ldr	r1, [r6, #0]
 8023134:	4605      	mov	r5, r0
 8023136:	b911      	cbnz	r1, 802313e <sbrk_aligned+0x12>
 8023138:	f000 fe1a 	bl	8023d70 <_sbrk_r>
 802313c:	6030      	str	r0, [r6, #0]
 802313e:	4621      	mov	r1, r4
 8023140:	4628      	mov	r0, r5
 8023142:	f000 fe15 	bl	8023d70 <_sbrk_r>
 8023146:	1c43      	adds	r3, r0, #1
 8023148:	d103      	bne.n	8023152 <sbrk_aligned+0x26>
 802314a:	f04f 34ff 	mov.w	r4, #4294967295
 802314e:	4620      	mov	r0, r4
 8023150:	bd70      	pop	{r4, r5, r6, pc}
 8023152:	1cc4      	adds	r4, r0, #3
 8023154:	f024 0403 	bic.w	r4, r4, #3
 8023158:	42a0      	cmp	r0, r4
 802315a:	d0f8      	beq.n	802314e <sbrk_aligned+0x22>
 802315c:	1a21      	subs	r1, r4, r0
 802315e:	4628      	mov	r0, r5
 8023160:	f000 fe06 	bl	8023d70 <_sbrk_r>
 8023164:	3001      	adds	r0, #1
 8023166:	d1f2      	bne.n	802314e <sbrk_aligned+0x22>
 8023168:	e7ef      	b.n	802314a <sbrk_aligned+0x1e>
 802316a:	bf00      	nop
 802316c:	20001d4c 	.word	0x20001d4c

08023170 <_malloc_r>:
 8023170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023174:	1ccd      	adds	r5, r1, #3
 8023176:	f025 0503 	bic.w	r5, r5, #3
 802317a:	3508      	adds	r5, #8
 802317c:	2d0c      	cmp	r5, #12
 802317e:	bf38      	it	cc
 8023180:	250c      	movcc	r5, #12
 8023182:	2d00      	cmp	r5, #0
 8023184:	4606      	mov	r6, r0
 8023186:	db01      	blt.n	802318c <_malloc_r+0x1c>
 8023188:	42a9      	cmp	r1, r5
 802318a:	d904      	bls.n	8023196 <_malloc_r+0x26>
 802318c:	230c      	movs	r3, #12
 802318e:	6033      	str	r3, [r6, #0]
 8023190:	2000      	movs	r0, #0
 8023192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802326c <_malloc_r+0xfc>
 802319a:	f000 f869 	bl	8023270 <__malloc_lock>
 802319e:	f8d8 3000 	ldr.w	r3, [r8]
 80231a2:	461c      	mov	r4, r3
 80231a4:	bb44      	cbnz	r4, 80231f8 <_malloc_r+0x88>
 80231a6:	4629      	mov	r1, r5
 80231a8:	4630      	mov	r0, r6
 80231aa:	f7ff ffbf 	bl	802312c <sbrk_aligned>
 80231ae:	1c43      	adds	r3, r0, #1
 80231b0:	4604      	mov	r4, r0
 80231b2:	d158      	bne.n	8023266 <_malloc_r+0xf6>
 80231b4:	f8d8 4000 	ldr.w	r4, [r8]
 80231b8:	4627      	mov	r7, r4
 80231ba:	2f00      	cmp	r7, #0
 80231bc:	d143      	bne.n	8023246 <_malloc_r+0xd6>
 80231be:	2c00      	cmp	r4, #0
 80231c0:	d04b      	beq.n	802325a <_malloc_r+0xea>
 80231c2:	6823      	ldr	r3, [r4, #0]
 80231c4:	4639      	mov	r1, r7
 80231c6:	4630      	mov	r0, r6
 80231c8:	eb04 0903 	add.w	r9, r4, r3
 80231cc:	f000 fdd0 	bl	8023d70 <_sbrk_r>
 80231d0:	4581      	cmp	r9, r0
 80231d2:	d142      	bne.n	802325a <_malloc_r+0xea>
 80231d4:	6821      	ldr	r1, [r4, #0]
 80231d6:	1a6d      	subs	r5, r5, r1
 80231d8:	4629      	mov	r1, r5
 80231da:	4630      	mov	r0, r6
 80231dc:	f7ff ffa6 	bl	802312c <sbrk_aligned>
 80231e0:	3001      	adds	r0, #1
 80231e2:	d03a      	beq.n	802325a <_malloc_r+0xea>
 80231e4:	6823      	ldr	r3, [r4, #0]
 80231e6:	442b      	add	r3, r5
 80231e8:	6023      	str	r3, [r4, #0]
 80231ea:	f8d8 3000 	ldr.w	r3, [r8]
 80231ee:	685a      	ldr	r2, [r3, #4]
 80231f0:	bb62      	cbnz	r2, 802324c <_malloc_r+0xdc>
 80231f2:	f8c8 7000 	str.w	r7, [r8]
 80231f6:	e00f      	b.n	8023218 <_malloc_r+0xa8>
 80231f8:	6822      	ldr	r2, [r4, #0]
 80231fa:	1b52      	subs	r2, r2, r5
 80231fc:	d420      	bmi.n	8023240 <_malloc_r+0xd0>
 80231fe:	2a0b      	cmp	r2, #11
 8023200:	d917      	bls.n	8023232 <_malloc_r+0xc2>
 8023202:	1961      	adds	r1, r4, r5
 8023204:	42a3      	cmp	r3, r4
 8023206:	6025      	str	r5, [r4, #0]
 8023208:	bf18      	it	ne
 802320a:	6059      	strne	r1, [r3, #4]
 802320c:	6863      	ldr	r3, [r4, #4]
 802320e:	bf08      	it	eq
 8023210:	f8c8 1000 	streq.w	r1, [r8]
 8023214:	5162      	str	r2, [r4, r5]
 8023216:	604b      	str	r3, [r1, #4]
 8023218:	4630      	mov	r0, r6
 802321a:	f000 f82f 	bl	802327c <__malloc_unlock>
 802321e:	f104 000b 	add.w	r0, r4, #11
 8023222:	1d23      	adds	r3, r4, #4
 8023224:	f020 0007 	bic.w	r0, r0, #7
 8023228:	1ac2      	subs	r2, r0, r3
 802322a:	bf1c      	itt	ne
 802322c:	1a1b      	subne	r3, r3, r0
 802322e:	50a3      	strne	r3, [r4, r2]
 8023230:	e7af      	b.n	8023192 <_malloc_r+0x22>
 8023232:	6862      	ldr	r2, [r4, #4]
 8023234:	42a3      	cmp	r3, r4
 8023236:	bf0c      	ite	eq
 8023238:	f8c8 2000 	streq.w	r2, [r8]
 802323c:	605a      	strne	r2, [r3, #4]
 802323e:	e7eb      	b.n	8023218 <_malloc_r+0xa8>
 8023240:	4623      	mov	r3, r4
 8023242:	6864      	ldr	r4, [r4, #4]
 8023244:	e7ae      	b.n	80231a4 <_malloc_r+0x34>
 8023246:	463c      	mov	r4, r7
 8023248:	687f      	ldr	r7, [r7, #4]
 802324a:	e7b6      	b.n	80231ba <_malloc_r+0x4a>
 802324c:	461a      	mov	r2, r3
 802324e:	685b      	ldr	r3, [r3, #4]
 8023250:	42a3      	cmp	r3, r4
 8023252:	d1fb      	bne.n	802324c <_malloc_r+0xdc>
 8023254:	2300      	movs	r3, #0
 8023256:	6053      	str	r3, [r2, #4]
 8023258:	e7de      	b.n	8023218 <_malloc_r+0xa8>
 802325a:	230c      	movs	r3, #12
 802325c:	6033      	str	r3, [r6, #0]
 802325e:	4630      	mov	r0, r6
 8023260:	f000 f80c 	bl	802327c <__malloc_unlock>
 8023264:	e794      	b.n	8023190 <_malloc_r+0x20>
 8023266:	6005      	str	r5, [r0, #0]
 8023268:	e7d6      	b.n	8023218 <_malloc_r+0xa8>
 802326a:	bf00      	nop
 802326c:	20001d50 	.word	0x20001d50

08023270 <__malloc_lock>:
 8023270:	4801      	ldr	r0, [pc, #4]	@ (8023278 <__malloc_lock+0x8>)
 8023272:	f7ff b8a0 	b.w	80223b6 <__retarget_lock_acquire_recursive>
 8023276:	bf00      	nop
 8023278:	20001d48 	.word	0x20001d48

0802327c <__malloc_unlock>:
 802327c:	4801      	ldr	r0, [pc, #4]	@ (8023284 <__malloc_unlock+0x8>)
 802327e:	f7ff b89b 	b.w	80223b8 <__retarget_lock_release_recursive>
 8023282:	bf00      	nop
 8023284:	20001d48 	.word	0x20001d48

08023288 <_Balloc>:
 8023288:	b570      	push	{r4, r5, r6, lr}
 802328a:	69c6      	ldr	r6, [r0, #28]
 802328c:	4604      	mov	r4, r0
 802328e:	460d      	mov	r5, r1
 8023290:	b976      	cbnz	r6, 80232b0 <_Balloc+0x28>
 8023292:	2010      	movs	r0, #16
 8023294:	f7ff ff42 	bl	802311c <malloc>
 8023298:	4602      	mov	r2, r0
 802329a:	61e0      	str	r0, [r4, #28]
 802329c:	b920      	cbnz	r0, 80232a8 <_Balloc+0x20>
 802329e:	4b18      	ldr	r3, [pc, #96]	@ (8023300 <_Balloc+0x78>)
 80232a0:	4818      	ldr	r0, [pc, #96]	@ (8023304 <_Balloc+0x7c>)
 80232a2:	216b      	movs	r1, #107	@ 0x6b
 80232a4:	f000 fd74 	bl	8023d90 <__assert_func>
 80232a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80232ac:	6006      	str	r6, [r0, #0]
 80232ae:	60c6      	str	r6, [r0, #12]
 80232b0:	69e6      	ldr	r6, [r4, #28]
 80232b2:	68f3      	ldr	r3, [r6, #12]
 80232b4:	b183      	cbz	r3, 80232d8 <_Balloc+0x50>
 80232b6:	69e3      	ldr	r3, [r4, #28]
 80232b8:	68db      	ldr	r3, [r3, #12]
 80232ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80232be:	b9b8      	cbnz	r0, 80232f0 <_Balloc+0x68>
 80232c0:	2101      	movs	r1, #1
 80232c2:	fa01 f605 	lsl.w	r6, r1, r5
 80232c6:	1d72      	adds	r2, r6, #5
 80232c8:	0092      	lsls	r2, r2, #2
 80232ca:	4620      	mov	r0, r4
 80232cc:	f000 fd7e 	bl	8023dcc <_calloc_r>
 80232d0:	b160      	cbz	r0, 80232ec <_Balloc+0x64>
 80232d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80232d6:	e00e      	b.n	80232f6 <_Balloc+0x6e>
 80232d8:	2221      	movs	r2, #33	@ 0x21
 80232da:	2104      	movs	r1, #4
 80232dc:	4620      	mov	r0, r4
 80232de:	f000 fd75 	bl	8023dcc <_calloc_r>
 80232e2:	69e3      	ldr	r3, [r4, #28]
 80232e4:	60f0      	str	r0, [r6, #12]
 80232e6:	68db      	ldr	r3, [r3, #12]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	d1e4      	bne.n	80232b6 <_Balloc+0x2e>
 80232ec:	2000      	movs	r0, #0
 80232ee:	bd70      	pop	{r4, r5, r6, pc}
 80232f0:	6802      	ldr	r2, [r0, #0]
 80232f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80232f6:	2300      	movs	r3, #0
 80232f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80232fc:	e7f7      	b.n	80232ee <_Balloc+0x66>
 80232fe:	bf00      	nop
 8023300:	08026e55 	.word	0x08026e55
 8023304:	08026ed5 	.word	0x08026ed5

08023308 <_Bfree>:
 8023308:	b570      	push	{r4, r5, r6, lr}
 802330a:	69c6      	ldr	r6, [r0, #28]
 802330c:	4605      	mov	r5, r0
 802330e:	460c      	mov	r4, r1
 8023310:	b976      	cbnz	r6, 8023330 <_Bfree+0x28>
 8023312:	2010      	movs	r0, #16
 8023314:	f7ff ff02 	bl	802311c <malloc>
 8023318:	4602      	mov	r2, r0
 802331a:	61e8      	str	r0, [r5, #28]
 802331c:	b920      	cbnz	r0, 8023328 <_Bfree+0x20>
 802331e:	4b09      	ldr	r3, [pc, #36]	@ (8023344 <_Bfree+0x3c>)
 8023320:	4809      	ldr	r0, [pc, #36]	@ (8023348 <_Bfree+0x40>)
 8023322:	218f      	movs	r1, #143	@ 0x8f
 8023324:	f000 fd34 	bl	8023d90 <__assert_func>
 8023328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802332c:	6006      	str	r6, [r0, #0]
 802332e:	60c6      	str	r6, [r0, #12]
 8023330:	b13c      	cbz	r4, 8023342 <_Bfree+0x3a>
 8023332:	69eb      	ldr	r3, [r5, #28]
 8023334:	6862      	ldr	r2, [r4, #4]
 8023336:	68db      	ldr	r3, [r3, #12]
 8023338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802333c:	6021      	str	r1, [r4, #0]
 802333e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023342:	bd70      	pop	{r4, r5, r6, pc}
 8023344:	08026e55 	.word	0x08026e55
 8023348:	08026ed5 	.word	0x08026ed5

0802334c <__multadd>:
 802334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023350:	690d      	ldr	r5, [r1, #16]
 8023352:	4607      	mov	r7, r0
 8023354:	460c      	mov	r4, r1
 8023356:	461e      	mov	r6, r3
 8023358:	f101 0c14 	add.w	ip, r1, #20
 802335c:	2000      	movs	r0, #0
 802335e:	f8dc 3000 	ldr.w	r3, [ip]
 8023362:	b299      	uxth	r1, r3
 8023364:	fb02 6101 	mla	r1, r2, r1, r6
 8023368:	0c1e      	lsrs	r6, r3, #16
 802336a:	0c0b      	lsrs	r3, r1, #16
 802336c:	fb02 3306 	mla	r3, r2, r6, r3
 8023370:	b289      	uxth	r1, r1
 8023372:	3001      	adds	r0, #1
 8023374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023378:	4285      	cmp	r5, r0
 802337a:	f84c 1b04 	str.w	r1, [ip], #4
 802337e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8023382:	dcec      	bgt.n	802335e <__multadd+0x12>
 8023384:	b30e      	cbz	r6, 80233ca <__multadd+0x7e>
 8023386:	68a3      	ldr	r3, [r4, #8]
 8023388:	42ab      	cmp	r3, r5
 802338a:	dc19      	bgt.n	80233c0 <__multadd+0x74>
 802338c:	6861      	ldr	r1, [r4, #4]
 802338e:	4638      	mov	r0, r7
 8023390:	3101      	adds	r1, #1
 8023392:	f7ff ff79 	bl	8023288 <_Balloc>
 8023396:	4680      	mov	r8, r0
 8023398:	b928      	cbnz	r0, 80233a6 <__multadd+0x5a>
 802339a:	4602      	mov	r2, r0
 802339c:	4b0c      	ldr	r3, [pc, #48]	@ (80233d0 <__multadd+0x84>)
 802339e:	480d      	ldr	r0, [pc, #52]	@ (80233d4 <__multadd+0x88>)
 80233a0:	21ba      	movs	r1, #186	@ 0xba
 80233a2:	f000 fcf5 	bl	8023d90 <__assert_func>
 80233a6:	6922      	ldr	r2, [r4, #16]
 80233a8:	3202      	adds	r2, #2
 80233aa:	f104 010c 	add.w	r1, r4, #12
 80233ae:	0092      	lsls	r2, r2, #2
 80233b0:	300c      	adds	r0, #12
 80233b2:	f7ff f802 	bl	80223ba <memcpy>
 80233b6:	4621      	mov	r1, r4
 80233b8:	4638      	mov	r0, r7
 80233ba:	f7ff ffa5 	bl	8023308 <_Bfree>
 80233be:	4644      	mov	r4, r8
 80233c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80233c4:	3501      	adds	r5, #1
 80233c6:	615e      	str	r6, [r3, #20]
 80233c8:	6125      	str	r5, [r4, #16]
 80233ca:	4620      	mov	r0, r4
 80233cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233d0:	08026ec4 	.word	0x08026ec4
 80233d4:	08026ed5 	.word	0x08026ed5

080233d8 <__hi0bits>:
 80233d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80233dc:	4603      	mov	r3, r0
 80233de:	bf36      	itet	cc
 80233e0:	0403      	lslcc	r3, r0, #16
 80233e2:	2000      	movcs	r0, #0
 80233e4:	2010      	movcc	r0, #16
 80233e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80233ea:	bf3c      	itt	cc
 80233ec:	021b      	lslcc	r3, r3, #8
 80233ee:	3008      	addcc	r0, #8
 80233f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80233f4:	bf3c      	itt	cc
 80233f6:	011b      	lslcc	r3, r3, #4
 80233f8:	3004      	addcc	r0, #4
 80233fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80233fe:	bf3c      	itt	cc
 8023400:	009b      	lslcc	r3, r3, #2
 8023402:	3002      	addcc	r0, #2
 8023404:	2b00      	cmp	r3, #0
 8023406:	db05      	blt.n	8023414 <__hi0bits+0x3c>
 8023408:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802340c:	f100 0001 	add.w	r0, r0, #1
 8023410:	bf08      	it	eq
 8023412:	2020      	moveq	r0, #32
 8023414:	4770      	bx	lr

08023416 <__lo0bits>:
 8023416:	6803      	ldr	r3, [r0, #0]
 8023418:	4602      	mov	r2, r0
 802341a:	f013 0007 	ands.w	r0, r3, #7
 802341e:	d00b      	beq.n	8023438 <__lo0bits+0x22>
 8023420:	07d9      	lsls	r1, r3, #31
 8023422:	d421      	bmi.n	8023468 <__lo0bits+0x52>
 8023424:	0798      	lsls	r0, r3, #30
 8023426:	bf49      	itett	mi
 8023428:	085b      	lsrmi	r3, r3, #1
 802342a:	089b      	lsrpl	r3, r3, #2
 802342c:	2001      	movmi	r0, #1
 802342e:	6013      	strmi	r3, [r2, #0]
 8023430:	bf5c      	itt	pl
 8023432:	6013      	strpl	r3, [r2, #0]
 8023434:	2002      	movpl	r0, #2
 8023436:	4770      	bx	lr
 8023438:	b299      	uxth	r1, r3
 802343a:	b909      	cbnz	r1, 8023440 <__lo0bits+0x2a>
 802343c:	0c1b      	lsrs	r3, r3, #16
 802343e:	2010      	movs	r0, #16
 8023440:	b2d9      	uxtb	r1, r3
 8023442:	b909      	cbnz	r1, 8023448 <__lo0bits+0x32>
 8023444:	3008      	adds	r0, #8
 8023446:	0a1b      	lsrs	r3, r3, #8
 8023448:	0719      	lsls	r1, r3, #28
 802344a:	bf04      	itt	eq
 802344c:	091b      	lsreq	r3, r3, #4
 802344e:	3004      	addeq	r0, #4
 8023450:	0799      	lsls	r1, r3, #30
 8023452:	bf04      	itt	eq
 8023454:	089b      	lsreq	r3, r3, #2
 8023456:	3002      	addeq	r0, #2
 8023458:	07d9      	lsls	r1, r3, #31
 802345a:	d403      	bmi.n	8023464 <__lo0bits+0x4e>
 802345c:	085b      	lsrs	r3, r3, #1
 802345e:	f100 0001 	add.w	r0, r0, #1
 8023462:	d003      	beq.n	802346c <__lo0bits+0x56>
 8023464:	6013      	str	r3, [r2, #0]
 8023466:	4770      	bx	lr
 8023468:	2000      	movs	r0, #0
 802346a:	4770      	bx	lr
 802346c:	2020      	movs	r0, #32
 802346e:	4770      	bx	lr

08023470 <__i2b>:
 8023470:	b510      	push	{r4, lr}
 8023472:	460c      	mov	r4, r1
 8023474:	2101      	movs	r1, #1
 8023476:	f7ff ff07 	bl	8023288 <_Balloc>
 802347a:	4602      	mov	r2, r0
 802347c:	b928      	cbnz	r0, 802348a <__i2b+0x1a>
 802347e:	4b05      	ldr	r3, [pc, #20]	@ (8023494 <__i2b+0x24>)
 8023480:	4805      	ldr	r0, [pc, #20]	@ (8023498 <__i2b+0x28>)
 8023482:	f240 1145 	movw	r1, #325	@ 0x145
 8023486:	f000 fc83 	bl	8023d90 <__assert_func>
 802348a:	2301      	movs	r3, #1
 802348c:	6144      	str	r4, [r0, #20]
 802348e:	6103      	str	r3, [r0, #16]
 8023490:	bd10      	pop	{r4, pc}
 8023492:	bf00      	nop
 8023494:	08026ec4 	.word	0x08026ec4
 8023498:	08026ed5 	.word	0x08026ed5

0802349c <__multiply>:
 802349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234a0:	4617      	mov	r7, r2
 80234a2:	690a      	ldr	r2, [r1, #16]
 80234a4:	693b      	ldr	r3, [r7, #16]
 80234a6:	429a      	cmp	r2, r3
 80234a8:	bfa8      	it	ge
 80234aa:	463b      	movge	r3, r7
 80234ac:	4689      	mov	r9, r1
 80234ae:	bfa4      	itt	ge
 80234b0:	460f      	movge	r7, r1
 80234b2:	4699      	movge	r9, r3
 80234b4:	693d      	ldr	r5, [r7, #16]
 80234b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80234ba:	68bb      	ldr	r3, [r7, #8]
 80234bc:	6879      	ldr	r1, [r7, #4]
 80234be:	eb05 060a 	add.w	r6, r5, sl
 80234c2:	42b3      	cmp	r3, r6
 80234c4:	b085      	sub	sp, #20
 80234c6:	bfb8      	it	lt
 80234c8:	3101      	addlt	r1, #1
 80234ca:	f7ff fedd 	bl	8023288 <_Balloc>
 80234ce:	b930      	cbnz	r0, 80234de <__multiply+0x42>
 80234d0:	4602      	mov	r2, r0
 80234d2:	4b41      	ldr	r3, [pc, #260]	@ (80235d8 <__multiply+0x13c>)
 80234d4:	4841      	ldr	r0, [pc, #260]	@ (80235dc <__multiply+0x140>)
 80234d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80234da:	f000 fc59 	bl	8023d90 <__assert_func>
 80234de:	f100 0414 	add.w	r4, r0, #20
 80234e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80234e6:	4623      	mov	r3, r4
 80234e8:	2200      	movs	r2, #0
 80234ea:	4573      	cmp	r3, lr
 80234ec:	d320      	bcc.n	8023530 <__multiply+0x94>
 80234ee:	f107 0814 	add.w	r8, r7, #20
 80234f2:	f109 0114 	add.w	r1, r9, #20
 80234f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80234fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80234fe:	9302      	str	r3, [sp, #8]
 8023500:	1beb      	subs	r3, r5, r7
 8023502:	3b15      	subs	r3, #21
 8023504:	f023 0303 	bic.w	r3, r3, #3
 8023508:	3304      	adds	r3, #4
 802350a:	3715      	adds	r7, #21
 802350c:	42bd      	cmp	r5, r7
 802350e:	bf38      	it	cc
 8023510:	2304      	movcc	r3, #4
 8023512:	9301      	str	r3, [sp, #4]
 8023514:	9b02      	ldr	r3, [sp, #8]
 8023516:	9103      	str	r1, [sp, #12]
 8023518:	428b      	cmp	r3, r1
 802351a:	d80c      	bhi.n	8023536 <__multiply+0x9a>
 802351c:	2e00      	cmp	r6, #0
 802351e:	dd03      	ble.n	8023528 <__multiply+0x8c>
 8023520:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8023524:	2b00      	cmp	r3, #0
 8023526:	d055      	beq.n	80235d4 <__multiply+0x138>
 8023528:	6106      	str	r6, [r0, #16]
 802352a:	b005      	add	sp, #20
 802352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023530:	f843 2b04 	str.w	r2, [r3], #4
 8023534:	e7d9      	b.n	80234ea <__multiply+0x4e>
 8023536:	f8b1 a000 	ldrh.w	sl, [r1]
 802353a:	f1ba 0f00 	cmp.w	sl, #0
 802353e:	d01f      	beq.n	8023580 <__multiply+0xe4>
 8023540:	46c4      	mov	ip, r8
 8023542:	46a1      	mov	r9, r4
 8023544:	2700      	movs	r7, #0
 8023546:	f85c 2b04 	ldr.w	r2, [ip], #4
 802354a:	f8d9 3000 	ldr.w	r3, [r9]
 802354e:	fa1f fb82 	uxth.w	fp, r2
 8023552:	b29b      	uxth	r3, r3
 8023554:	fb0a 330b 	mla	r3, sl, fp, r3
 8023558:	443b      	add	r3, r7
 802355a:	f8d9 7000 	ldr.w	r7, [r9]
 802355e:	0c12      	lsrs	r2, r2, #16
 8023560:	0c3f      	lsrs	r7, r7, #16
 8023562:	fb0a 7202 	mla	r2, sl, r2, r7
 8023566:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 802356a:	b29b      	uxth	r3, r3
 802356c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023570:	4565      	cmp	r5, ip
 8023572:	f849 3b04 	str.w	r3, [r9], #4
 8023576:	ea4f 4712 	mov.w	r7, r2, lsr #16
 802357a:	d8e4      	bhi.n	8023546 <__multiply+0xaa>
 802357c:	9b01      	ldr	r3, [sp, #4]
 802357e:	50e7      	str	r7, [r4, r3]
 8023580:	9b03      	ldr	r3, [sp, #12]
 8023582:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8023586:	3104      	adds	r1, #4
 8023588:	f1b9 0f00 	cmp.w	r9, #0
 802358c:	d020      	beq.n	80235d0 <__multiply+0x134>
 802358e:	6823      	ldr	r3, [r4, #0]
 8023590:	4647      	mov	r7, r8
 8023592:	46a4      	mov	ip, r4
 8023594:	f04f 0a00 	mov.w	sl, #0
 8023598:	f8b7 b000 	ldrh.w	fp, [r7]
 802359c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80235a0:	fb09 220b 	mla	r2, r9, fp, r2
 80235a4:	4452      	add	r2, sl
 80235a6:	b29b      	uxth	r3, r3
 80235a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80235ac:	f84c 3b04 	str.w	r3, [ip], #4
 80235b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80235b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80235b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80235bc:	fb09 330a 	mla	r3, r9, sl, r3
 80235c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80235c4:	42bd      	cmp	r5, r7
 80235c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80235ca:	d8e5      	bhi.n	8023598 <__multiply+0xfc>
 80235cc:	9a01      	ldr	r2, [sp, #4]
 80235ce:	50a3      	str	r3, [r4, r2]
 80235d0:	3404      	adds	r4, #4
 80235d2:	e79f      	b.n	8023514 <__multiply+0x78>
 80235d4:	3e01      	subs	r6, #1
 80235d6:	e7a1      	b.n	802351c <__multiply+0x80>
 80235d8:	08026ec4 	.word	0x08026ec4
 80235dc:	08026ed5 	.word	0x08026ed5

080235e0 <__pow5mult>:
 80235e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80235e4:	4615      	mov	r5, r2
 80235e6:	f012 0203 	ands.w	r2, r2, #3
 80235ea:	4607      	mov	r7, r0
 80235ec:	460e      	mov	r6, r1
 80235ee:	d007      	beq.n	8023600 <__pow5mult+0x20>
 80235f0:	4c25      	ldr	r4, [pc, #148]	@ (8023688 <__pow5mult+0xa8>)
 80235f2:	3a01      	subs	r2, #1
 80235f4:	2300      	movs	r3, #0
 80235f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80235fa:	f7ff fea7 	bl	802334c <__multadd>
 80235fe:	4606      	mov	r6, r0
 8023600:	10ad      	asrs	r5, r5, #2
 8023602:	d03d      	beq.n	8023680 <__pow5mult+0xa0>
 8023604:	69fc      	ldr	r4, [r7, #28]
 8023606:	b97c      	cbnz	r4, 8023628 <__pow5mult+0x48>
 8023608:	2010      	movs	r0, #16
 802360a:	f7ff fd87 	bl	802311c <malloc>
 802360e:	4602      	mov	r2, r0
 8023610:	61f8      	str	r0, [r7, #28]
 8023612:	b928      	cbnz	r0, 8023620 <__pow5mult+0x40>
 8023614:	4b1d      	ldr	r3, [pc, #116]	@ (802368c <__pow5mult+0xac>)
 8023616:	481e      	ldr	r0, [pc, #120]	@ (8023690 <__pow5mult+0xb0>)
 8023618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802361c:	f000 fbb8 	bl	8023d90 <__assert_func>
 8023620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023624:	6004      	str	r4, [r0, #0]
 8023626:	60c4      	str	r4, [r0, #12]
 8023628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802362c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023630:	b94c      	cbnz	r4, 8023646 <__pow5mult+0x66>
 8023632:	f240 2171 	movw	r1, #625	@ 0x271
 8023636:	4638      	mov	r0, r7
 8023638:	f7ff ff1a 	bl	8023470 <__i2b>
 802363c:	2300      	movs	r3, #0
 802363e:	f8c8 0008 	str.w	r0, [r8, #8]
 8023642:	4604      	mov	r4, r0
 8023644:	6003      	str	r3, [r0, #0]
 8023646:	f04f 0900 	mov.w	r9, #0
 802364a:	07eb      	lsls	r3, r5, #31
 802364c:	d50a      	bpl.n	8023664 <__pow5mult+0x84>
 802364e:	4631      	mov	r1, r6
 8023650:	4622      	mov	r2, r4
 8023652:	4638      	mov	r0, r7
 8023654:	f7ff ff22 	bl	802349c <__multiply>
 8023658:	4631      	mov	r1, r6
 802365a:	4680      	mov	r8, r0
 802365c:	4638      	mov	r0, r7
 802365e:	f7ff fe53 	bl	8023308 <_Bfree>
 8023662:	4646      	mov	r6, r8
 8023664:	106d      	asrs	r5, r5, #1
 8023666:	d00b      	beq.n	8023680 <__pow5mult+0xa0>
 8023668:	6820      	ldr	r0, [r4, #0]
 802366a:	b938      	cbnz	r0, 802367c <__pow5mult+0x9c>
 802366c:	4622      	mov	r2, r4
 802366e:	4621      	mov	r1, r4
 8023670:	4638      	mov	r0, r7
 8023672:	f7ff ff13 	bl	802349c <__multiply>
 8023676:	6020      	str	r0, [r4, #0]
 8023678:	f8c0 9000 	str.w	r9, [r0]
 802367c:	4604      	mov	r4, r0
 802367e:	e7e4      	b.n	802364a <__pow5mult+0x6a>
 8023680:	4630      	mov	r0, r6
 8023682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023686:	bf00      	nop
 8023688:	08026f88 	.word	0x08026f88
 802368c:	08026e55 	.word	0x08026e55
 8023690:	08026ed5 	.word	0x08026ed5

08023694 <__lshift>:
 8023694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023698:	460c      	mov	r4, r1
 802369a:	6849      	ldr	r1, [r1, #4]
 802369c:	6923      	ldr	r3, [r4, #16]
 802369e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80236a2:	68a3      	ldr	r3, [r4, #8]
 80236a4:	4607      	mov	r7, r0
 80236a6:	4691      	mov	r9, r2
 80236a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80236ac:	f108 0601 	add.w	r6, r8, #1
 80236b0:	42b3      	cmp	r3, r6
 80236b2:	db0b      	blt.n	80236cc <__lshift+0x38>
 80236b4:	4638      	mov	r0, r7
 80236b6:	f7ff fde7 	bl	8023288 <_Balloc>
 80236ba:	4605      	mov	r5, r0
 80236bc:	b948      	cbnz	r0, 80236d2 <__lshift+0x3e>
 80236be:	4602      	mov	r2, r0
 80236c0:	4b28      	ldr	r3, [pc, #160]	@ (8023764 <__lshift+0xd0>)
 80236c2:	4829      	ldr	r0, [pc, #164]	@ (8023768 <__lshift+0xd4>)
 80236c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80236c8:	f000 fb62 	bl	8023d90 <__assert_func>
 80236cc:	3101      	adds	r1, #1
 80236ce:	005b      	lsls	r3, r3, #1
 80236d0:	e7ee      	b.n	80236b0 <__lshift+0x1c>
 80236d2:	2300      	movs	r3, #0
 80236d4:	f100 0114 	add.w	r1, r0, #20
 80236d8:	f100 0210 	add.w	r2, r0, #16
 80236dc:	4618      	mov	r0, r3
 80236de:	4553      	cmp	r3, sl
 80236e0:	db33      	blt.n	802374a <__lshift+0xb6>
 80236e2:	6920      	ldr	r0, [r4, #16]
 80236e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80236e8:	f104 0314 	add.w	r3, r4, #20
 80236ec:	f019 091f 	ands.w	r9, r9, #31
 80236f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80236f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80236f8:	d02b      	beq.n	8023752 <__lshift+0xbe>
 80236fa:	f1c9 0e20 	rsb	lr, r9, #32
 80236fe:	468a      	mov	sl, r1
 8023700:	2200      	movs	r2, #0
 8023702:	6818      	ldr	r0, [r3, #0]
 8023704:	fa00 f009 	lsl.w	r0, r0, r9
 8023708:	4310      	orrs	r0, r2
 802370a:	f84a 0b04 	str.w	r0, [sl], #4
 802370e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023712:	459c      	cmp	ip, r3
 8023714:	fa22 f20e 	lsr.w	r2, r2, lr
 8023718:	d8f3      	bhi.n	8023702 <__lshift+0x6e>
 802371a:	ebac 0304 	sub.w	r3, ip, r4
 802371e:	3b15      	subs	r3, #21
 8023720:	f023 0303 	bic.w	r3, r3, #3
 8023724:	3304      	adds	r3, #4
 8023726:	f104 0015 	add.w	r0, r4, #21
 802372a:	4560      	cmp	r0, ip
 802372c:	bf88      	it	hi
 802372e:	2304      	movhi	r3, #4
 8023730:	50ca      	str	r2, [r1, r3]
 8023732:	b10a      	cbz	r2, 8023738 <__lshift+0xa4>
 8023734:	f108 0602 	add.w	r6, r8, #2
 8023738:	3e01      	subs	r6, #1
 802373a:	4638      	mov	r0, r7
 802373c:	612e      	str	r6, [r5, #16]
 802373e:	4621      	mov	r1, r4
 8023740:	f7ff fde2 	bl	8023308 <_Bfree>
 8023744:	4628      	mov	r0, r5
 8023746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802374a:	f842 0f04 	str.w	r0, [r2, #4]!
 802374e:	3301      	adds	r3, #1
 8023750:	e7c5      	b.n	80236de <__lshift+0x4a>
 8023752:	3904      	subs	r1, #4
 8023754:	f853 2b04 	ldr.w	r2, [r3], #4
 8023758:	f841 2f04 	str.w	r2, [r1, #4]!
 802375c:	459c      	cmp	ip, r3
 802375e:	d8f9      	bhi.n	8023754 <__lshift+0xc0>
 8023760:	e7ea      	b.n	8023738 <__lshift+0xa4>
 8023762:	bf00      	nop
 8023764:	08026ec4 	.word	0x08026ec4
 8023768:	08026ed5 	.word	0x08026ed5

0802376c <__mcmp>:
 802376c:	690a      	ldr	r2, [r1, #16]
 802376e:	4603      	mov	r3, r0
 8023770:	6900      	ldr	r0, [r0, #16]
 8023772:	1a80      	subs	r0, r0, r2
 8023774:	b530      	push	{r4, r5, lr}
 8023776:	d10e      	bne.n	8023796 <__mcmp+0x2a>
 8023778:	3314      	adds	r3, #20
 802377a:	3114      	adds	r1, #20
 802377c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8023780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802378c:	4295      	cmp	r5, r2
 802378e:	d003      	beq.n	8023798 <__mcmp+0x2c>
 8023790:	d205      	bcs.n	802379e <__mcmp+0x32>
 8023792:	f04f 30ff 	mov.w	r0, #4294967295
 8023796:	bd30      	pop	{r4, r5, pc}
 8023798:	42a3      	cmp	r3, r4
 802379a:	d3f3      	bcc.n	8023784 <__mcmp+0x18>
 802379c:	e7fb      	b.n	8023796 <__mcmp+0x2a>
 802379e:	2001      	movs	r0, #1
 80237a0:	e7f9      	b.n	8023796 <__mcmp+0x2a>
	...

080237a4 <__mdiff>:
 80237a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237a8:	4689      	mov	r9, r1
 80237aa:	4606      	mov	r6, r0
 80237ac:	4611      	mov	r1, r2
 80237ae:	4648      	mov	r0, r9
 80237b0:	4614      	mov	r4, r2
 80237b2:	f7ff ffdb 	bl	802376c <__mcmp>
 80237b6:	1e05      	subs	r5, r0, #0
 80237b8:	d112      	bne.n	80237e0 <__mdiff+0x3c>
 80237ba:	4629      	mov	r1, r5
 80237bc:	4630      	mov	r0, r6
 80237be:	f7ff fd63 	bl	8023288 <_Balloc>
 80237c2:	4602      	mov	r2, r0
 80237c4:	b928      	cbnz	r0, 80237d2 <__mdiff+0x2e>
 80237c6:	4b3f      	ldr	r3, [pc, #252]	@ (80238c4 <__mdiff+0x120>)
 80237c8:	f240 2137 	movw	r1, #567	@ 0x237
 80237cc:	483e      	ldr	r0, [pc, #248]	@ (80238c8 <__mdiff+0x124>)
 80237ce:	f000 fadf 	bl	8023d90 <__assert_func>
 80237d2:	2301      	movs	r3, #1
 80237d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80237d8:	4610      	mov	r0, r2
 80237da:	b003      	add	sp, #12
 80237dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237e0:	bfbc      	itt	lt
 80237e2:	464b      	movlt	r3, r9
 80237e4:	46a1      	movlt	r9, r4
 80237e6:	4630      	mov	r0, r6
 80237e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80237ec:	bfba      	itte	lt
 80237ee:	461c      	movlt	r4, r3
 80237f0:	2501      	movlt	r5, #1
 80237f2:	2500      	movge	r5, #0
 80237f4:	f7ff fd48 	bl	8023288 <_Balloc>
 80237f8:	4602      	mov	r2, r0
 80237fa:	b918      	cbnz	r0, 8023804 <__mdiff+0x60>
 80237fc:	4b31      	ldr	r3, [pc, #196]	@ (80238c4 <__mdiff+0x120>)
 80237fe:	f240 2145 	movw	r1, #581	@ 0x245
 8023802:	e7e3      	b.n	80237cc <__mdiff+0x28>
 8023804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023808:	6926      	ldr	r6, [r4, #16]
 802380a:	60c5      	str	r5, [r0, #12]
 802380c:	f109 0310 	add.w	r3, r9, #16
 8023810:	f109 0514 	add.w	r5, r9, #20
 8023814:	f104 0e14 	add.w	lr, r4, #20
 8023818:	f100 0b14 	add.w	fp, r0, #20
 802381c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8023820:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8023824:	9301      	str	r3, [sp, #4]
 8023826:	46d9      	mov	r9, fp
 8023828:	f04f 0c00 	mov.w	ip, #0
 802382c:	9b01      	ldr	r3, [sp, #4]
 802382e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8023832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8023836:	9301      	str	r3, [sp, #4]
 8023838:	fa1f f38a 	uxth.w	r3, sl
 802383c:	4619      	mov	r1, r3
 802383e:	b283      	uxth	r3, r0
 8023840:	1acb      	subs	r3, r1, r3
 8023842:	0c00      	lsrs	r0, r0, #16
 8023844:	4463      	add	r3, ip
 8023846:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802384a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802384e:	b29b      	uxth	r3, r3
 8023850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023854:	4576      	cmp	r6, lr
 8023856:	f849 3b04 	str.w	r3, [r9], #4
 802385a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802385e:	d8e5      	bhi.n	802382c <__mdiff+0x88>
 8023860:	1b33      	subs	r3, r6, r4
 8023862:	3b15      	subs	r3, #21
 8023864:	f023 0303 	bic.w	r3, r3, #3
 8023868:	3415      	adds	r4, #21
 802386a:	3304      	adds	r3, #4
 802386c:	42a6      	cmp	r6, r4
 802386e:	bf38      	it	cc
 8023870:	2304      	movcc	r3, #4
 8023872:	441d      	add	r5, r3
 8023874:	445b      	add	r3, fp
 8023876:	461e      	mov	r6, r3
 8023878:	462c      	mov	r4, r5
 802387a:	4544      	cmp	r4, r8
 802387c:	d30e      	bcc.n	802389c <__mdiff+0xf8>
 802387e:	f108 0103 	add.w	r1, r8, #3
 8023882:	1b49      	subs	r1, r1, r5
 8023884:	f021 0103 	bic.w	r1, r1, #3
 8023888:	3d03      	subs	r5, #3
 802388a:	45a8      	cmp	r8, r5
 802388c:	bf38      	it	cc
 802388e:	2100      	movcc	r1, #0
 8023890:	440b      	add	r3, r1
 8023892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023896:	b191      	cbz	r1, 80238be <__mdiff+0x11a>
 8023898:	6117      	str	r7, [r2, #16]
 802389a:	e79d      	b.n	80237d8 <__mdiff+0x34>
 802389c:	f854 1b04 	ldr.w	r1, [r4], #4
 80238a0:	46e6      	mov	lr, ip
 80238a2:	0c08      	lsrs	r0, r1, #16
 80238a4:	fa1c fc81 	uxtah	ip, ip, r1
 80238a8:	4471      	add	r1, lr
 80238aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80238ae:	b289      	uxth	r1, r1
 80238b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80238b4:	f846 1b04 	str.w	r1, [r6], #4
 80238b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80238bc:	e7dd      	b.n	802387a <__mdiff+0xd6>
 80238be:	3f01      	subs	r7, #1
 80238c0:	e7e7      	b.n	8023892 <__mdiff+0xee>
 80238c2:	bf00      	nop
 80238c4:	08026ec4 	.word	0x08026ec4
 80238c8:	08026ed5 	.word	0x08026ed5

080238cc <__d2b>:
 80238cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80238d0:	460f      	mov	r7, r1
 80238d2:	2101      	movs	r1, #1
 80238d4:	ec59 8b10 	vmov	r8, r9, d0
 80238d8:	4616      	mov	r6, r2
 80238da:	f7ff fcd5 	bl	8023288 <_Balloc>
 80238de:	4604      	mov	r4, r0
 80238e0:	b930      	cbnz	r0, 80238f0 <__d2b+0x24>
 80238e2:	4602      	mov	r2, r0
 80238e4:	4b23      	ldr	r3, [pc, #140]	@ (8023974 <__d2b+0xa8>)
 80238e6:	4824      	ldr	r0, [pc, #144]	@ (8023978 <__d2b+0xac>)
 80238e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80238ec:	f000 fa50 	bl	8023d90 <__assert_func>
 80238f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80238f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80238f8:	b10d      	cbz	r5, 80238fe <__d2b+0x32>
 80238fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80238fe:	9301      	str	r3, [sp, #4]
 8023900:	f1b8 0300 	subs.w	r3, r8, #0
 8023904:	d023      	beq.n	802394e <__d2b+0x82>
 8023906:	4668      	mov	r0, sp
 8023908:	9300      	str	r3, [sp, #0]
 802390a:	f7ff fd84 	bl	8023416 <__lo0bits>
 802390e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8023912:	b1d0      	cbz	r0, 802394a <__d2b+0x7e>
 8023914:	f1c0 0320 	rsb	r3, r0, #32
 8023918:	fa02 f303 	lsl.w	r3, r2, r3
 802391c:	430b      	orrs	r3, r1
 802391e:	40c2      	lsrs	r2, r0
 8023920:	6163      	str	r3, [r4, #20]
 8023922:	9201      	str	r2, [sp, #4]
 8023924:	9b01      	ldr	r3, [sp, #4]
 8023926:	61a3      	str	r3, [r4, #24]
 8023928:	2b00      	cmp	r3, #0
 802392a:	bf0c      	ite	eq
 802392c:	2201      	moveq	r2, #1
 802392e:	2202      	movne	r2, #2
 8023930:	6122      	str	r2, [r4, #16]
 8023932:	b1a5      	cbz	r5, 802395e <__d2b+0x92>
 8023934:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8023938:	4405      	add	r5, r0
 802393a:	603d      	str	r5, [r7, #0]
 802393c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8023940:	6030      	str	r0, [r6, #0]
 8023942:	4620      	mov	r0, r4
 8023944:	b003      	add	sp, #12
 8023946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802394a:	6161      	str	r1, [r4, #20]
 802394c:	e7ea      	b.n	8023924 <__d2b+0x58>
 802394e:	a801      	add	r0, sp, #4
 8023950:	f7ff fd61 	bl	8023416 <__lo0bits>
 8023954:	9b01      	ldr	r3, [sp, #4]
 8023956:	6163      	str	r3, [r4, #20]
 8023958:	3020      	adds	r0, #32
 802395a:	2201      	movs	r2, #1
 802395c:	e7e8      	b.n	8023930 <__d2b+0x64>
 802395e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023962:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8023966:	6038      	str	r0, [r7, #0]
 8023968:	6918      	ldr	r0, [r3, #16]
 802396a:	f7ff fd35 	bl	80233d8 <__hi0bits>
 802396e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023972:	e7e5      	b.n	8023940 <__d2b+0x74>
 8023974:	08026ec4 	.word	0x08026ec4
 8023978:	08026ed5 	.word	0x08026ed5

0802397c <__sfputc_r>:
 802397c:	6893      	ldr	r3, [r2, #8]
 802397e:	3b01      	subs	r3, #1
 8023980:	2b00      	cmp	r3, #0
 8023982:	b410      	push	{r4}
 8023984:	6093      	str	r3, [r2, #8]
 8023986:	da08      	bge.n	802399a <__sfputc_r+0x1e>
 8023988:	6994      	ldr	r4, [r2, #24]
 802398a:	42a3      	cmp	r3, r4
 802398c:	db01      	blt.n	8023992 <__sfputc_r+0x16>
 802398e:	290a      	cmp	r1, #10
 8023990:	d103      	bne.n	802399a <__sfputc_r+0x1e>
 8023992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023996:	f7fe bbec 	b.w	8022172 <__swbuf_r>
 802399a:	6813      	ldr	r3, [r2, #0]
 802399c:	1c58      	adds	r0, r3, #1
 802399e:	6010      	str	r0, [r2, #0]
 80239a0:	7019      	strb	r1, [r3, #0]
 80239a2:	4608      	mov	r0, r1
 80239a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80239a8:	4770      	bx	lr

080239aa <__sfputs_r>:
 80239aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ac:	4606      	mov	r6, r0
 80239ae:	460f      	mov	r7, r1
 80239b0:	4614      	mov	r4, r2
 80239b2:	18d5      	adds	r5, r2, r3
 80239b4:	42ac      	cmp	r4, r5
 80239b6:	d101      	bne.n	80239bc <__sfputs_r+0x12>
 80239b8:	2000      	movs	r0, #0
 80239ba:	e007      	b.n	80239cc <__sfputs_r+0x22>
 80239bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239c0:	463a      	mov	r2, r7
 80239c2:	4630      	mov	r0, r6
 80239c4:	f7ff ffda 	bl	802397c <__sfputc_r>
 80239c8:	1c43      	adds	r3, r0, #1
 80239ca:	d1f3      	bne.n	80239b4 <__sfputs_r+0xa>
 80239cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080239d0 <_vfiprintf_r>:
 80239d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239d4:	460d      	mov	r5, r1
 80239d6:	b09d      	sub	sp, #116	@ 0x74
 80239d8:	4614      	mov	r4, r2
 80239da:	4698      	mov	r8, r3
 80239dc:	4606      	mov	r6, r0
 80239de:	b118      	cbz	r0, 80239e8 <_vfiprintf_r+0x18>
 80239e0:	6a03      	ldr	r3, [r0, #32]
 80239e2:	b90b      	cbnz	r3, 80239e8 <_vfiprintf_r+0x18>
 80239e4:	f7fe fad4 	bl	8021f90 <__sinit>
 80239e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80239ea:	07d9      	lsls	r1, r3, #31
 80239ec:	d405      	bmi.n	80239fa <_vfiprintf_r+0x2a>
 80239ee:	89ab      	ldrh	r3, [r5, #12]
 80239f0:	059a      	lsls	r2, r3, #22
 80239f2:	d402      	bmi.n	80239fa <_vfiprintf_r+0x2a>
 80239f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80239f6:	f7fe fcde 	bl	80223b6 <__retarget_lock_acquire_recursive>
 80239fa:	89ab      	ldrh	r3, [r5, #12]
 80239fc:	071b      	lsls	r3, r3, #28
 80239fe:	d501      	bpl.n	8023a04 <_vfiprintf_r+0x34>
 8023a00:	692b      	ldr	r3, [r5, #16]
 8023a02:	b99b      	cbnz	r3, 8023a2c <_vfiprintf_r+0x5c>
 8023a04:	4629      	mov	r1, r5
 8023a06:	4630      	mov	r0, r6
 8023a08:	f7fe fbf2 	bl	80221f0 <__swsetup_r>
 8023a0c:	b170      	cbz	r0, 8023a2c <_vfiprintf_r+0x5c>
 8023a0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023a10:	07dc      	lsls	r4, r3, #31
 8023a12:	d504      	bpl.n	8023a1e <_vfiprintf_r+0x4e>
 8023a14:	f04f 30ff 	mov.w	r0, #4294967295
 8023a18:	b01d      	add	sp, #116	@ 0x74
 8023a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a1e:	89ab      	ldrh	r3, [r5, #12]
 8023a20:	0598      	lsls	r0, r3, #22
 8023a22:	d4f7      	bmi.n	8023a14 <_vfiprintf_r+0x44>
 8023a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023a26:	f7fe fcc7 	bl	80223b8 <__retarget_lock_release_recursive>
 8023a2a:	e7f3      	b.n	8023a14 <_vfiprintf_r+0x44>
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a30:	2320      	movs	r3, #32
 8023a32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8023a3a:	2330      	movs	r3, #48	@ 0x30
 8023a3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023bec <_vfiprintf_r+0x21c>
 8023a40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023a44:	f04f 0901 	mov.w	r9, #1
 8023a48:	4623      	mov	r3, r4
 8023a4a:	469a      	mov	sl, r3
 8023a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023a50:	b10a      	cbz	r2, 8023a56 <_vfiprintf_r+0x86>
 8023a52:	2a25      	cmp	r2, #37	@ 0x25
 8023a54:	d1f9      	bne.n	8023a4a <_vfiprintf_r+0x7a>
 8023a56:	ebba 0b04 	subs.w	fp, sl, r4
 8023a5a:	d00b      	beq.n	8023a74 <_vfiprintf_r+0xa4>
 8023a5c:	465b      	mov	r3, fp
 8023a5e:	4622      	mov	r2, r4
 8023a60:	4629      	mov	r1, r5
 8023a62:	4630      	mov	r0, r6
 8023a64:	f7ff ffa1 	bl	80239aa <__sfputs_r>
 8023a68:	3001      	adds	r0, #1
 8023a6a:	f000 80a7 	beq.w	8023bbc <_vfiprintf_r+0x1ec>
 8023a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023a70:	445a      	add	r2, fp
 8023a72:	9209      	str	r2, [sp, #36]	@ 0x24
 8023a74:	f89a 3000 	ldrb.w	r3, [sl]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	f000 809f 	beq.w	8023bbc <_vfiprintf_r+0x1ec>
 8023a7e:	2300      	movs	r3, #0
 8023a80:	f04f 32ff 	mov.w	r2, #4294967295
 8023a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023a88:	f10a 0a01 	add.w	sl, sl, #1
 8023a8c:	9304      	str	r3, [sp, #16]
 8023a8e:	9307      	str	r3, [sp, #28]
 8023a90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023a94:	931a      	str	r3, [sp, #104]	@ 0x68
 8023a96:	4654      	mov	r4, sl
 8023a98:	2205      	movs	r2, #5
 8023a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a9e:	4853      	ldr	r0, [pc, #332]	@ (8023bec <_vfiprintf_r+0x21c>)
 8023aa0:	f7dc fb96 	bl	80001d0 <memchr>
 8023aa4:	9a04      	ldr	r2, [sp, #16]
 8023aa6:	b9d8      	cbnz	r0, 8023ae0 <_vfiprintf_r+0x110>
 8023aa8:	06d1      	lsls	r1, r2, #27
 8023aaa:	bf44      	itt	mi
 8023aac:	2320      	movmi	r3, #32
 8023aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023ab2:	0713      	lsls	r3, r2, #28
 8023ab4:	bf44      	itt	mi
 8023ab6:	232b      	movmi	r3, #43	@ 0x2b
 8023ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023abc:	f89a 3000 	ldrb.w	r3, [sl]
 8023ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8023ac2:	d015      	beq.n	8023af0 <_vfiprintf_r+0x120>
 8023ac4:	9a07      	ldr	r2, [sp, #28]
 8023ac6:	4654      	mov	r4, sl
 8023ac8:	2000      	movs	r0, #0
 8023aca:	f04f 0c0a 	mov.w	ip, #10
 8023ace:	4621      	mov	r1, r4
 8023ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023ad4:	3b30      	subs	r3, #48	@ 0x30
 8023ad6:	2b09      	cmp	r3, #9
 8023ad8:	d94b      	bls.n	8023b72 <_vfiprintf_r+0x1a2>
 8023ada:	b1b0      	cbz	r0, 8023b0a <_vfiprintf_r+0x13a>
 8023adc:	9207      	str	r2, [sp, #28]
 8023ade:	e014      	b.n	8023b0a <_vfiprintf_r+0x13a>
 8023ae0:	eba0 0308 	sub.w	r3, r0, r8
 8023ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8023ae8:	4313      	orrs	r3, r2
 8023aea:	9304      	str	r3, [sp, #16]
 8023aec:	46a2      	mov	sl, r4
 8023aee:	e7d2      	b.n	8023a96 <_vfiprintf_r+0xc6>
 8023af0:	9b03      	ldr	r3, [sp, #12]
 8023af2:	1d19      	adds	r1, r3, #4
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	9103      	str	r1, [sp, #12]
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	bfbb      	ittet	lt
 8023afc:	425b      	neglt	r3, r3
 8023afe:	f042 0202 	orrlt.w	r2, r2, #2
 8023b02:	9307      	strge	r3, [sp, #28]
 8023b04:	9307      	strlt	r3, [sp, #28]
 8023b06:	bfb8      	it	lt
 8023b08:	9204      	strlt	r2, [sp, #16]
 8023b0a:	7823      	ldrb	r3, [r4, #0]
 8023b0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8023b0e:	d10a      	bne.n	8023b26 <_vfiprintf_r+0x156>
 8023b10:	7863      	ldrb	r3, [r4, #1]
 8023b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8023b14:	d132      	bne.n	8023b7c <_vfiprintf_r+0x1ac>
 8023b16:	9b03      	ldr	r3, [sp, #12]
 8023b18:	1d1a      	adds	r2, r3, #4
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	9203      	str	r2, [sp, #12]
 8023b1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023b22:	3402      	adds	r4, #2
 8023b24:	9305      	str	r3, [sp, #20]
 8023b26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023bfc <_vfiprintf_r+0x22c>
 8023b2a:	7821      	ldrb	r1, [r4, #0]
 8023b2c:	2203      	movs	r2, #3
 8023b2e:	4650      	mov	r0, sl
 8023b30:	f7dc fb4e 	bl	80001d0 <memchr>
 8023b34:	b138      	cbz	r0, 8023b46 <_vfiprintf_r+0x176>
 8023b36:	9b04      	ldr	r3, [sp, #16]
 8023b38:	eba0 000a 	sub.w	r0, r0, sl
 8023b3c:	2240      	movs	r2, #64	@ 0x40
 8023b3e:	4082      	lsls	r2, r0
 8023b40:	4313      	orrs	r3, r2
 8023b42:	3401      	adds	r4, #1
 8023b44:	9304      	str	r3, [sp, #16]
 8023b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023b4a:	4829      	ldr	r0, [pc, #164]	@ (8023bf0 <_vfiprintf_r+0x220>)
 8023b4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023b50:	2206      	movs	r2, #6
 8023b52:	f7dc fb3d 	bl	80001d0 <memchr>
 8023b56:	2800      	cmp	r0, #0
 8023b58:	d03f      	beq.n	8023bda <_vfiprintf_r+0x20a>
 8023b5a:	4b26      	ldr	r3, [pc, #152]	@ (8023bf4 <_vfiprintf_r+0x224>)
 8023b5c:	bb1b      	cbnz	r3, 8023ba6 <_vfiprintf_r+0x1d6>
 8023b5e:	9b03      	ldr	r3, [sp, #12]
 8023b60:	3307      	adds	r3, #7
 8023b62:	f023 0307 	bic.w	r3, r3, #7
 8023b66:	3308      	adds	r3, #8
 8023b68:	9303      	str	r3, [sp, #12]
 8023b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b6c:	443b      	add	r3, r7
 8023b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b70:	e76a      	b.n	8023a48 <_vfiprintf_r+0x78>
 8023b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8023b76:	460c      	mov	r4, r1
 8023b78:	2001      	movs	r0, #1
 8023b7a:	e7a8      	b.n	8023ace <_vfiprintf_r+0xfe>
 8023b7c:	2300      	movs	r3, #0
 8023b7e:	3401      	adds	r4, #1
 8023b80:	9305      	str	r3, [sp, #20]
 8023b82:	4619      	mov	r1, r3
 8023b84:	f04f 0c0a 	mov.w	ip, #10
 8023b88:	4620      	mov	r0, r4
 8023b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023b8e:	3a30      	subs	r2, #48	@ 0x30
 8023b90:	2a09      	cmp	r2, #9
 8023b92:	d903      	bls.n	8023b9c <_vfiprintf_r+0x1cc>
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	d0c6      	beq.n	8023b26 <_vfiprintf_r+0x156>
 8023b98:	9105      	str	r1, [sp, #20]
 8023b9a:	e7c4      	b.n	8023b26 <_vfiprintf_r+0x156>
 8023b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ba0:	4604      	mov	r4, r0
 8023ba2:	2301      	movs	r3, #1
 8023ba4:	e7f0      	b.n	8023b88 <_vfiprintf_r+0x1b8>
 8023ba6:	ab03      	add	r3, sp, #12
 8023ba8:	9300      	str	r3, [sp, #0]
 8023baa:	462a      	mov	r2, r5
 8023bac:	4b12      	ldr	r3, [pc, #72]	@ (8023bf8 <_vfiprintf_r+0x228>)
 8023bae:	a904      	add	r1, sp, #16
 8023bb0:	4630      	mov	r0, r6
 8023bb2:	f7fd fceb 	bl	802158c <_printf_float>
 8023bb6:	4607      	mov	r7, r0
 8023bb8:	1c78      	adds	r0, r7, #1
 8023bba:	d1d6      	bne.n	8023b6a <_vfiprintf_r+0x19a>
 8023bbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023bbe:	07d9      	lsls	r1, r3, #31
 8023bc0:	d405      	bmi.n	8023bce <_vfiprintf_r+0x1fe>
 8023bc2:	89ab      	ldrh	r3, [r5, #12]
 8023bc4:	059a      	lsls	r2, r3, #22
 8023bc6:	d402      	bmi.n	8023bce <_vfiprintf_r+0x1fe>
 8023bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023bca:	f7fe fbf5 	bl	80223b8 <__retarget_lock_release_recursive>
 8023bce:	89ab      	ldrh	r3, [r5, #12]
 8023bd0:	065b      	lsls	r3, r3, #25
 8023bd2:	f53f af1f 	bmi.w	8023a14 <_vfiprintf_r+0x44>
 8023bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023bd8:	e71e      	b.n	8023a18 <_vfiprintf_r+0x48>
 8023bda:	ab03      	add	r3, sp, #12
 8023bdc:	9300      	str	r3, [sp, #0]
 8023bde:	462a      	mov	r2, r5
 8023be0:	4b05      	ldr	r3, [pc, #20]	@ (8023bf8 <_vfiprintf_r+0x228>)
 8023be2:	a904      	add	r1, sp, #16
 8023be4:	4630      	mov	r0, r6
 8023be6:	f7fd ff69 	bl	8021abc <_printf_i>
 8023bea:	e7e4      	b.n	8023bb6 <_vfiprintf_r+0x1e6>
 8023bec:	08026f2e 	.word	0x08026f2e
 8023bf0:	08026f38 	.word	0x08026f38
 8023bf4:	0802158d 	.word	0x0802158d
 8023bf8:	080239ab 	.word	0x080239ab
 8023bfc:	08026f34 	.word	0x08026f34

08023c00 <__swhatbuf_r>:
 8023c00:	b570      	push	{r4, r5, r6, lr}
 8023c02:	460c      	mov	r4, r1
 8023c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c08:	2900      	cmp	r1, #0
 8023c0a:	b096      	sub	sp, #88	@ 0x58
 8023c0c:	4615      	mov	r5, r2
 8023c0e:	461e      	mov	r6, r3
 8023c10:	da0d      	bge.n	8023c2e <__swhatbuf_r+0x2e>
 8023c12:	89a3      	ldrh	r3, [r4, #12]
 8023c14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023c18:	f04f 0100 	mov.w	r1, #0
 8023c1c:	bf14      	ite	ne
 8023c1e:	2340      	movne	r3, #64	@ 0x40
 8023c20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023c24:	2000      	movs	r0, #0
 8023c26:	6031      	str	r1, [r6, #0]
 8023c28:	602b      	str	r3, [r5, #0]
 8023c2a:	b016      	add	sp, #88	@ 0x58
 8023c2c:	bd70      	pop	{r4, r5, r6, pc}
 8023c2e:	466a      	mov	r2, sp
 8023c30:	f000 f87c 	bl	8023d2c <_fstat_r>
 8023c34:	2800      	cmp	r0, #0
 8023c36:	dbec      	blt.n	8023c12 <__swhatbuf_r+0x12>
 8023c38:	9901      	ldr	r1, [sp, #4]
 8023c3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023c3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023c42:	4259      	negs	r1, r3
 8023c44:	4159      	adcs	r1, r3
 8023c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023c4a:	e7eb      	b.n	8023c24 <__swhatbuf_r+0x24>

08023c4c <__smakebuf_r>:
 8023c4c:	898b      	ldrh	r3, [r1, #12]
 8023c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023c50:	079d      	lsls	r5, r3, #30
 8023c52:	4606      	mov	r6, r0
 8023c54:	460c      	mov	r4, r1
 8023c56:	d507      	bpl.n	8023c68 <__smakebuf_r+0x1c>
 8023c58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023c5c:	6023      	str	r3, [r4, #0]
 8023c5e:	6123      	str	r3, [r4, #16]
 8023c60:	2301      	movs	r3, #1
 8023c62:	6163      	str	r3, [r4, #20]
 8023c64:	b003      	add	sp, #12
 8023c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c68:	ab01      	add	r3, sp, #4
 8023c6a:	466a      	mov	r2, sp
 8023c6c:	f7ff ffc8 	bl	8023c00 <__swhatbuf_r>
 8023c70:	9f00      	ldr	r7, [sp, #0]
 8023c72:	4605      	mov	r5, r0
 8023c74:	4639      	mov	r1, r7
 8023c76:	4630      	mov	r0, r6
 8023c78:	f7ff fa7a 	bl	8023170 <_malloc_r>
 8023c7c:	b948      	cbnz	r0, 8023c92 <__smakebuf_r+0x46>
 8023c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023c82:	059a      	lsls	r2, r3, #22
 8023c84:	d4ee      	bmi.n	8023c64 <__smakebuf_r+0x18>
 8023c86:	f023 0303 	bic.w	r3, r3, #3
 8023c8a:	f043 0302 	orr.w	r3, r3, #2
 8023c8e:	81a3      	strh	r3, [r4, #12]
 8023c90:	e7e2      	b.n	8023c58 <__smakebuf_r+0xc>
 8023c92:	89a3      	ldrh	r3, [r4, #12]
 8023c94:	6020      	str	r0, [r4, #0]
 8023c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023c9a:	81a3      	strh	r3, [r4, #12]
 8023c9c:	9b01      	ldr	r3, [sp, #4]
 8023c9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023ca2:	b15b      	cbz	r3, 8023cbc <__smakebuf_r+0x70>
 8023ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023ca8:	4630      	mov	r0, r6
 8023caa:	f000 f851 	bl	8023d50 <_isatty_r>
 8023cae:	b128      	cbz	r0, 8023cbc <__smakebuf_r+0x70>
 8023cb0:	89a3      	ldrh	r3, [r4, #12]
 8023cb2:	f023 0303 	bic.w	r3, r3, #3
 8023cb6:	f043 0301 	orr.w	r3, r3, #1
 8023cba:	81a3      	strh	r3, [r4, #12]
 8023cbc:	89a3      	ldrh	r3, [r4, #12]
 8023cbe:	431d      	orrs	r5, r3
 8023cc0:	81a5      	strh	r5, [r4, #12]
 8023cc2:	e7cf      	b.n	8023c64 <__smakebuf_r+0x18>

08023cc4 <_putc_r>:
 8023cc4:	b570      	push	{r4, r5, r6, lr}
 8023cc6:	460d      	mov	r5, r1
 8023cc8:	4614      	mov	r4, r2
 8023cca:	4606      	mov	r6, r0
 8023ccc:	b118      	cbz	r0, 8023cd6 <_putc_r+0x12>
 8023cce:	6a03      	ldr	r3, [r0, #32]
 8023cd0:	b90b      	cbnz	r3, 8023cd6 <_putc_r+0x12>
 8023cd2:	f7fe f95d 	bl	8021f90 <__sinit>
 8023cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023cd8:	07d8      	lsls	r0, r3, #31
 8023cda:	d405      	bmi.n	8023ce8 <_putc_r+0x24>
 8023cdc:	89a3      	ldrh	r3, [r4, #12]
 8023cde:	0599      	lsls	r1, r3, #22
 8023ce0:	d402      	bmi.n	8023ce8 <_putc_r+0x24>
 8023ce2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023ce4:	f7fe fb67 	bl	80223b6 <__retarget_lock_acquire_recursive>
 8023ce8:	68a3      	ldr	r3, [r4, #8]
 8023cea:	3b01      	subs	r3, #1
 8023cec:	2b00      	cmp	r3, #0
 8023cee:	60a3      	str	r3, [r4, #8]
 8023cf0:	da05      	bge.n	8023cfe <_putc_r+0x3a>
 8023cf2:	69a2      	ldr	r2, [r4, #24]
 8023cf4:	4293      	cmp	r3, r2
 8023cf6:	db12      	blt.n	8023d1e <_putc_r+0x5a>
 8023cf8:	b2eb      	uxtb	r3, r5
 8023cfa:	2b0a      	cmp	r3, #10
 8023cfc:	d00f      	beq.n	8023d1e <_putc_r+0x5a>
 8023cfe:	6823      	ldr	r3, [r4, #0]
 8023d00:	1c5a      	adds	r2, r3, #1
 8023d02:	6022      	str	r2, [r4, #0]
 8023d04:	701d      	strb	r5, [r3, #0]
 8023d06:	b2ed      	uxtb	r5, r5
 8023d08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023d0a:	07da      	lsls	r2, r3, #31
 8023d0c:	d405      	bmi.n	8023d1a <_putc_r+0x56>
 8023d0e:	89a3      	ldrh	r3, [r4, #12]
 8023d10:	059b      	lsls	r3, r3, #22
 8023d12:	d402      	bmi.n	8023d1a <_putc_r+0x56>
 8023d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023d16:	f7fe fb4f 	bl	80223b8 <__retarget_lock_release_recursive>
 8023d1a:	4628      	mov	r0, r5
 8023d1c:	bd70      	pop	{r4, r5, r6, pc}
 8023d1e:	4629      	mov	r1, r5
 8023d20:	4622      	mov	r2, r4
 8023d22:	4630      	mov	r0, r6
 8023d24:	f7fe fa25 	bl	8022172 <__swbuf_r>
 8023d28:	4605      	mov	r5, r0
 8023d2a:	e7ed      	b.n	8023d08 <_putc_r+0x44>

08023d2c <_fstat_r>:
 8023d2c:	b538      	push	{r3, r4, r5, lr}
 8023d2e:	4d07      	ldr	r5, [pc, #28]	@ (8023d4c <_fstat_r+0x20>)
 8023d30:	2300      	movs	r3, #0
 8023d32:	4604      	mov	r4, r0
 8023d34:	4608      	mov	r0, r1
 8023d36:	4611      	mov	r1, r2
 8023d38:	602b      	str	r3, [r5, #0]
 8023d3a:	f7de fc87 	bl	800264c <_fstat>
 8023d3e:	1c43      	adds	r3, r0, #1
 8023d40:	d102      	bne.n	8023d48 <_fstat_r+0x1c>
 8023d42:	682b      	ldr	r3, [r5, #0]
 8023d44:	b103      	cbz	r3, 8023d48 <_fstat_r+0x1c>
 8023d46:	6023      	str	r3, [r4, #0]
 8023d48:	bd38      	pop	{r3, r4, r5, pc}
 8023d4a:	bf00      	nop
 8023d4c:	20001d44 	.word	0x20001d44

08023d50 <_isatty_r>:
 8023d50:	b538      	push	{r3, r4, r5, lr}
 8023d52:	4d06      	ldr	r5, [pc, #24]	@ (8023d6c <_isatty_r+0x1c>)
 8023d54:	2300      	movs	r3, #0
 8023d56:	4604      	mov	r4, r0
 8023d58:	4608      	mov	r0, r1
 8023d5a:	602b      	str	r3, [r5, #0]
 8023d5c:	f7de fc86 	bl	800266c <_isatty>
 8023d60:	1c43      	adds	r3, r0, #1
 8023d62:	d102      	bne.n	8023d6a <_isatty_r+0x1a>
 8023d64:	682b      	ldr	r3, [r5, #0]
 8023d66:	b103      	cbz	r3, 8023d6a <_isatty_r+0x1a>
 8023d68:	6023      	str	r3, [r4, #0]
 8023d6a:	bd38      	pop	{r3, r4, r5, pc}
 8023d6c:	20001d44 	.word	0x20001d44

08023d70 <_sbrk_r>:
 8023d70:	b538      	push	{r3, r4, r5, lr}
 8023d72:	4d06      	ldr	r5, [pc, #24]	@ (8023d8c <_sbrk_r+0x1c>)
 8023d74:	2300      	movs	r3, #0
 8023d76:	4604      	mov	r4, r0
 8023d78:	4608      	mov	r0, r1
 8023d7a:	602b      	str	r3, [r5, #0]
 8023d7c:	f7de fc8e 	bl	800269c <_sbrk>
 8023d80:	1c43      	adds	r3, r0, #1
 8023d82:	d102      	bne.n	8023d8a <_sbrk_r+0x1a>
 8023d84:	682b      	ldr	r3, [r5, #0]
 8023d86:	b103      	cbz	r3, 8023d8a <_sbrk_r+0x1a>
 8023d88:	6023      	str	r3, [r4, #0]
 8023d8a:	bd38      	pop	{r3, r4, r5, pc}
 8023d8c:	20001d44 	.word	0x20001d44

08023d90 <__assert_func>:
 8023d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023d92:	4614      	mov	r4, r2
 8023d94:	461a      	mov	r2, r3
 8023d96:	4b09      	ldr	r3, [pc, #36]	@ (8023dbc <__assert_func+0x2c>)
 8023d98:	681b      	ldr	r3, [r3, #0]
 8023d9a:	4605      	mov	r5, r0
 8023d9c:	68d8      	ldr	r0, [r3, #12]
 8023d9e:	b14c      	cbz	r4, 8023db4 <__assert_func+0x24>
 8023da0:	4b07      	ldr	r3, [pc, #28]	@ (8023dc0 <__assert_func+0x30>)
 8023da2:	9100      	str	r1, [sp, #0]
 8023da4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023da8:	4906      	ldr	r1, [pc, #24]	@ (8023dc4 <__assert_func+0x34>)
 8023daa:	462b      	mov	r3, r5
 8023dac:	f000 f842 	bl	8023e34 <fiprintf>
 8023db0:	f000 f852 	bl	8023e58 <abort>
 8023db4:	4b04      	ldr	r3, [pc, #16]	@ (8023dc8 <__assert_func+0x38>)
 8023db6:	461c      	mov	r4, r3
 8023db8:	e7f3      	b.n	8023da2 <__assert_func+0x12>
 8023dba:	bf00      	nop
 8023dbc:	20000084 	.word	0x20000084
 8023dc0:	08026f49 	.word	0x08026f49
 8023dc4:	08026f56 	.word	0x08026f56
 8023dc8:	08026f84 	.word	0x08026f84

08023dcc <_calloc_r>:
 8023dcc:	b570      	push	{r4, r5, r6, lr}
 8023dce:	fba1 5402 	umull	r5, r4, r1, r2
 8023dd2:	b934      	cbnz	r4, 8023de2 <_calloc_r+0x16>
 8023dd4:	4629      	mov	r1, r5
 8023dd6:	f7ff f9cb 	bl	8023170 <_malloc_r>
 8023dda:	4606      	mov	r6, r0
 8023ddc:	b928      	cbnz	r0, 8023dea <_calloc_r+0x1e>
 8023dde:	4630      	mov	r0, r6
 8023de0:	bd70      	pop	{r4, r5, r6, pc}
 8023de2:	220c      	movs	r2, #12
 8023de4:	6002      	str	r2, [r0, #0]
 8023de6:	2600      	movs	r6, #0
 8023de8:	e7f9      	b.n	8023dde <_calloc_r+0x12>
 8023dea:	462a      	mov	r2, r5
 8023dec:	4621      	mov	r1, r4
 8023dee:	f7fe fa65 	bl	80222bc <memset>
 8023df2:	e7f4      	b.n	8023dde <_calloc_r+0x12>

08023df4 <__ascii_mbtowc>:
 8023df4:	b082      	sub	sp, #8
 8023df6:	b901      	cbnz	r1, 8023dfa <__ascii_mbtowc+0x6>
 8023df8:	a901      	add	r1, sp, #4
 8023dfa:	b142      	cbz	r2, 8023e0e <__ascii_mbtowc+0x1a>
 8023dfc:	b14b      	cbz	r3, 8023e12 <__ascii_mbtowc+0x1e>
 8023dfe:	7813      	ldrb	r3, [r2, #0]
 8023e00:	600b      	str	r3, [r1, #0]
 8023e02:	7812      	ldrb	r2, [r2, #0]
 8023e04:	1e10      	subs	r0, r2, #0
 8023e06:	bf18      	it	ne
 8023e08:	2001      	movne	r0, #1
 8023e0a:	b002      	add	sp, #8
 8023e0c:	4770      	bx	lr
 8023e0e:	4610      	mov	r0, r2
 8023e10:	e7fb      	b.n	8023e0a <__ascii_mbtowc+0x16>
 8023e12:	f06f 0001 	mvn.w	r0, #1
 8023e16:	e7f8      	b.n	8023e0a <__ascii_mbtowc+0x16>

08023e18 <__ascii_wctomb>:
 8023e18:	4603      	mov	r3, r0
 8023e1a:	4608      	mov	r0, r1
 8023e1c:	b141      	cbz	r1, 8023e30 <__ascii_wctomb+0x18>
 8023e1e:	2aff      	cmp	r2, #255	@ 0xff
 8023e20:	d904      	bls.n	8023e2c <__ascii_wctomb+0x14>
 8023e22:	228a      	movs	r2, #138	@ 0x8a
 8023e24:	601a      	str	r2, [r3, #0]
 8023e26:	f04f 30ff 	mov.w	r0, #4294967295
 8023e2a:	4770      	bx	lr
 8023e2c:	700a      	strb	r2, [r1, #0]
 8023e2e:	2001      	movs	r0, #1
 8023e30:	4770      	bx	lr
	...

08023e34 <fiprintf>:
 8023e34:	b40e      	push	{r1, r2, r3}
 8023e36:	b503      	push	{r0, r1, lr}
 8023e38:	4601      	mov	r1, r0
 8023e3a:	ab03      	add	r3, sp, #12
 8023e3c:	4805      	ldr	r0, [pc, #20]	@ (8023e54 <fiprintf+0x20>)
 8023e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023e42:	6800      	ldr	r0, [r0, #0]
 8023e44:	9301      	str	r3, [sp, #4]
 8023e46:	f7ff fdc3 	bl	80239d0 <_vfiprintf_r>
 8023e4a:	b002      	add	sp, #8
 8023e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023e50:	b003      	add	sp, #12
 8023e52:	4770      	bx	lr
 8023e54:	20000084 	.word	0x20000084

08023e58 <abort>:
 8023e58:	b508      	push	{r3, lr}
 8023e5a:	2006      	movs	r0, #6
 8023e5c:	f000 f82c 	bl	8023eb8 <raise>
 8023e60:	2001      	movs	r0, #1
 8023e62:	f7de fba3 	bl	80025ac <_exit>

08023e66 <_raise_r>:
 8023e66:	291f      	cmp	r1, #31
 8023e68:	b538      	push	{r3, r4, r5, lr}
 8023e6a:	4605      	mov	r5, r0
 8023e6c:	460c      	mov	r4, r1
 8023e6e:	d904      	bls.n	8023e7a <_raise_r+0x14>
 8023e70:	2316      	movs	r3, #22
 8023e72:	6003      	str	r3, [r0, #0]
 8023e74:	f04f 30ff 	mov.w	r0, #4294967295
 8023e78:	bd38      	pop	{r3, r4, r5, pc}
 8023e7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023e7c:	b112      	cbz	r2, 8023e84 <_raise_r+0x1e>
 8023e7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e82:	b94b      	cbnz	r3, 8023e98 <_raise_r+0x32>
 8023e84:	4628      	mov	r0, r5
 8023e86:	f000 f831 	bl	8023eec <_getpid_r>
 8023e8a:	4622      	mov	r2, r4
 8023e8c:	4601      	mov	r1, r0
 8023e8e:	4628      	mov	r0, r5
 8023e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e94:	f000 b818 	b.w	8023ec8 <_kill_r>
 8023e98:	2b01      	cmp	r3, #1
 8023e9a:	d00a      	beq.n	8023eb2 <_raise_r+0x4c>
 8023e9c:	1c59      	adds	r1, r3, #1
 8023e9e:	d103      	bne.n	8023ea8 <_raise_r+0x42>
 8023ea0:	2316      	movs	r3, #22
 8023ea2:	6003      	str	r3, [r0, #0]
 8023ea4:	2001      	movs	r0, #1
 8023ea6:	e7e7      	b.n	8023e78 <_raise_r+0x12>
 8023ea8:	2100      	movs	r1, #0
 8023eaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023eae:	4620      	mov	r0, r4
 8023eb0:	4798      	blx	r3
 8023eb2:	2000      	movs	r0, #0
 8023eb4:	e7e0      	b.n	8023e78 <_raise_r+0x12>
	...

08023eb8 <raise>:
 8023eb8:	4b02      	ldr	r3, [pc, #8]	@ (8023ec4 <raise+0xc>)
 8023eba:	4601      	mov	r1, r0
 8023ebc:	6818      	ldr	r0, [r3, #0]
 8023ebe:	f7ff bfd2 	b.w	8023e66 <_raise_r>
 8023ec2:	bf00      	nop
 8023ec4:	20000084 	.word	0x20000084

08023ec8 <_kill_r>:
 8023ec8:	b538      	push	{r3, r4, r5, lr}
 8023eca:	4d07      	ldr	r5, [pc, #28]	@ (8023ee8 <_kill_r+0x20>)
 8023ecc:	2300      	movs	r3, #0
 8023ece:	4604      	mov	r4, r0
 8023ed0:	4608      	mov	r0, r1
 8023ed2:	4611      	mov	r1, r2
 8023ed4:	602b      	str	r3, [r5, #0]
 8023ed6:	f7de fb59 	bl	800258c <_kill>
 8023eda:	1c43      	adds	r3, r0, #1
 8023edc:	d102      	bne.n	8023ee4 <_kill_r+0x1c>
 8023ede:	682b      	ldr	r3, [r5, #0]
 8023ee0:	b103      	cbz	r3, 8023ee4 <_kill_r+0x1c>
 8023ee2:	6023      	str	r3, [r4, #0]
 8023ee4:	bd38      	pop	{r3, r4, r5, pc}
 8023ee6:	bf00      	nop
 8023ee8:	20001d44 	.word	0x20001d44

08023eec <_getpid_r>:
 8023eec:	f7de bb46 	b.w	800257c <_getpid>

08023ef0 <_init>:
 8023ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ef2:	bf00      	nop
 8023ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ef6:	bc08      	pop	{r3}
 8023ef8:	469e      	mov	lr, r3
 8023efa:	4770      	bx	lr

08023efc <_fini>:
 8023efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023efe:	bf00      	nop
 8023f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f02:	bc08      	pop	{r3}
 8023f04:	469e      	mov	lr, r3
 8023f06:	4770      	bx	lr
